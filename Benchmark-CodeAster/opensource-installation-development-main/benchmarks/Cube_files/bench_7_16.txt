WARNING: If MPI_Abort is called during execution, result files could not be copied.
Running: mpiexec -n 16 --tag-output /opt/aster/install/mpi/bin/run_aster -n 16 --wrkdir /tmp/run_aster_y0hxnhf2 --status-file /home/aster/.tmp_run_aster/run_aster_9i4066ur/__status__ --no-mpi /home/aster/.tmp_run_aster/run_aster_9i4066ur/Cube_perf.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution of code_aster
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command file #1 / 1
[1,0]<stdout>:
[1,0]<stdout>:Content of the file to execute:
[1,0]<stdout>:# coding=utf-8
[1,0]<stdout>:#!/usr/bin/python
[1,0]<stdout>:
[1,0]<stdout>:import os
[1,0]<stdout>:from statistics import mean
[1,0]<stdout>:from datetime import datetime
[1,0]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,0]<stdout>:
[1,0]<stdout>:from code_aster.Commands import *
[1,0]<stdout>:from code_aster import CA
[1,0]<stdout>:from code_aster.Utilities import petscInitialize
[1,0]<stdout>:
[1,0]<stdout>:CA.init()
[1,0]<stdout>:
[1,0]<stdout>:params = {}
[1,0]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,0]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,0]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,0]<stdout>:
[1,0]<stdout>:# General parameters
[1,0]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,0]<stdout>:rank = comm.Get_rank()
[1,0]<stdout>:size = comm.Get_size()
[1,0]<stdout>:
[1,0]<stdout>:nbHexa = 8 ** params["refinements"]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def memory_peak(mess=None):
[1,0]<stdout>:    """Return memory peak in MB"""
[1,0]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMgGen:
[1,0]<stdout>:    stats = {}
[1,0]<stdout>:
[1,0]<stdout>:    def __init__(self, what):
[1,0]<stdout>:        self._what = what
[1,0]<stdout>:
[1,0]<stdout>:    def __enter__(self):
[1,0]<stdout>:        self.start = datetime.now()
[1,0]<stdout>:
[1,0]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,0]<stdout>:        self.stop = datetime.now()
[1,0]<stdout>:        delta = self.stop - self.start
[1,0]<stdout>:        mem = memory_peak(self._what)
[1,0]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,0]<stdout>:    pass
[1,0]<stdout>:    # def __init__(self, what):
[1,0]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def write_stats(nume_ddl):
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB PROC")
[1,0]<stdout>:        print(size)
[1,0]<stdout>:        print()
[1,0]<stdout>:        print(
[1,0]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    for key, values in stats.items():
[1,0]<stdout>:        time = comm.gather(values[0], root=0)
[1,0]<stdout>:        mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(
[1,0]<stdout>:                key
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(mem))
[1,0]<stdout>:            )
[1,0]<stdout>:
[1,0]<stdout>:    mesh = nume_ddl.getMesh()
[1,0]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,0]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,0]<stdout>:
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,0]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,0]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,0]<stdout>:
[1,0]<stdout>:    def show(*args, **kwargs):
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(*args, **kwargs)
[1,0]<stdout>:
[1,0]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,0]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,0]<stdout>:    separ = "| :--------------- | ----------: |"
[1,0]<stdout>:    show(fmti.format("Refinement", refine))
[1,0]<stdout>:    show(separ)
[1,0]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,0]<stdout>:    for key, values in data.items():
[1,0]<stdout>:        times = comm.gather(values[0], root=0)
[1,0]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            show(fmtt.format(key, mean(times)))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,0]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,0]<stdout>:
[1,0]<stdout>:with ChronoCtxMg("Total"):
[1,0]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,0]<stdout>:        if params["parallel"] == "HPC":
[1,0]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:        else:
[1,0]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Model"):
[1,0]<stdout>:        model = AFFE_MODELE(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                PHENOMENE="MECANIQUE",
[1,0]<stdout>:                MODELISATION="3D",
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Material"):
[1,0]<stdout>:        steel = DEFI_MATERIAU(
[1,0]<stdout>:            ELAS=_F(
[1,0]<stdout>:                E=200000.0,
[1,0]<stdout>:                NU=0.3,
[1,0]<stdout>:            ),
[1,0]<stdout>:            ECRO_LINE=_F(
[1,0]<stdout>:    [1,0]<stdout>:            D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                SY=200.0,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        mater = AFFE_MATERIAU(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                MATER=steel,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,0]<stdout>:        block = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="LEFT",
[1,0]<stdout>:                    DX=0,
[1,0]<stdout>:                    DY=0.0,
[1,0]<stdout>:                    DZ=0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="RIGHT",
[1,0]<stdout>:                    DY=0.001,
[1,0]<stdout>:                    DZ=0.001,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,0]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            OPTION="RIGI_MECA",
[1,0]<stdout>:            CHAM_MATER=mater,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Numbering"):
[1,0]<stdout>:        dofNum = NUME_DDL(
[1,0]<stdout>:            MATR_RIGI=stiff_elem,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Assembly"):
[1,0]<stdout>:        stiffness = ASSE_MATRICE(
[1,0]<stdout>:            MATR_ELEM=stiff_elem,
[1,0]<stdout>:            NUME_DDL=dofNum,
[1,0]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,0]<stdout>:        rhs = CREA_CHAMP(
[1,0]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,0]<stdout>:            OPERATION="AFFE",
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                NOM_CMP=(
[1,0]<stdout>:                    "DX",
[1,0]<stdout>:                    "DY",
[1,0]<stdout>:                    "DZ",
[1,0]<stdout>:                ),
[1,0]<stdout>:                VALE=(
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,0]<stdout>:
[1,0]<stdout>:    if params["solver"] == "PETSC":
[1,0]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,0]<stdout>:    elif params["solver"] == "MUMPS":
[1,0]<stdout>:        solver = CA.MumpsSolver(
[1,0]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,0]<stdout>:            RENUM="PARMETIS",
[1,0]<stdout>:            ACCELERATION="FR+",
[1,0]<stdout>:            POSTTRAITEMENTS="MINI",
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Factorize"):
[1,0]<stdout>:        solver.factorize(stiffness)
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Solve"):
[1,0]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,0]<stdout>:
[1,0]<stdout>:# write_stats(dofNum)
[1,0]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,0]<stdout>:if params["parallel"] == "HPC":
[1,0]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,0]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,0]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,0]<stdout>:
[1,0]<stdout>:CA.close()
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command line #1:
[1,0]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution of code_aster
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.1
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command file #1 / 1
[1,1]<stdout>:
[1,1]<stdout>:Content of the file to execute:
[1,1]<stdout>:# coding=utf-8
[1,1]<stdout>:#!/usr/bin/python
[1,1]<stdout>:
[1,1]<stdout>:import os
[1,1]<stdout>:from statistics import mean
[1,1]<stdout>:from datetime import datetime
[1,1]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,1]<stdout>:
[1,1]<stdout>:from code_aster.Commands import *
[1,1]<stdout>:from code_aster import CA
[1,1]<stdout>:from code_aster.Utilities import petscInitialize
[1,1]<stdout>:
[1,1]<stdout>:CA.init()
[1,1]<stdout>:
[1,1]<stdout>:params = {}
[1,1]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,1]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,1]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,1]<stdout>:
[1,1]<stdout>:# General parameters
[1,1]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,1]<stdout>:rank = comm.Get_rank()
[1,1]<stdout>:size = comm.Get_size()
[1,1]<stdout>:
[1,1]<stdout>:nbHexa = 8 ** params["refinements"]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def memory_peak(mess=None):
[1,1]<stdout>:    """Return memory peak in MB"""
[1,1]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMgGen:
[1,1]<stdout>:    stats = {}
[1,1]<stdout>:
[1,1]<stdout>:    def __init__(self, what):
[1,1]<stdout>:        self._what = what
[1,1]<stdout>:
[1,1]<stdout>:    def __enter__(self):
[1,1]<stdout>:        self.start = datetime.now()
[1,1]<stdout>:
[1,1]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,1]<stdout>:        self.stop = datetime.now()
[1,1]<stdout>:        delta = self.stop - self.start
[1,1]<stdout>:        mem = memory_peak(self._what)
[1,1]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,1]<stdout>:    pass
[1,1]<stdout>:    # def __init__(self, what):
[1,1]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def write_stats(nume_ddl):
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB PROC")
[1,1]<stdout>:        print(size)
[1,1]<stdout>:        print()
[1,1]<stdout>:        print(
[1,1]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    for key, values in stats.items():
[1,1]<stdout>:        time = comm.gather(values[0], root=0)
[1,1]<stdout>:        mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(
[1,1]<stdout>:                key
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(mem))
[1,1]<stdout>:            )
[1,1]<stdout>:
[1,1]<stdout>:    mesh = nume_ddl.getMesh()
[1,1]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,1]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,1]<stdout>:
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,1]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,1]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,1]<stdout>:
[1,1]<stdout>:    def show(*args, **kwargs):
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(*args, **kwargs)
[1,1]<stdout>:
[1,1]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,1]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,1]<stdout>:    separ = "| :--------------- | ----------: |"
[1,1]<stdout>:    show(fmti.format("Refinement", refine))
[1,1]<stdout>:    show(separ)
[1,1]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,1]<stdout>:    for key, values in data.items():
[1,1]<stdout>:        times = comm.gather(values[0], root=0)
[1,1]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            show(fmtt.format(key, mean(times)))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,1]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,1]<stdout>:
[1,1]<stdout>:with ChronoCtxMg("Total"):
[1,1]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,1]<stdout>:        if params["parallel"] == "HPC":
[1,1]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:        else:
[1,1]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Model"):
[1,1]<stdout>:        model = AFFE_MODELE(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                PHENOMENE="MECANIQUE",
[1,1]<stdout>:                MODELISATION="3D",
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Material"):
[1,1]<stdout>:        steel = DEFI_MATERIAU(
[1,1]<stdout>:            ELAS=_F(
[1,1]<stdout>:                E=200000.0,
[1,1]<stdout>:                NU=0.3,
[1,1]<stdout>:            ),
[1,1]<stdout>:            ECRO_LINE=_F(
[1,1]<stdout>:    [1,1]<stdout>:            D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                SY=200.0,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        mater = AFFE_MATERIAU(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                MATER=steel,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,1]<stdout>:        block = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="LEFT",
[1,1]<stdout>:                    DX=0,
[1,1]<stdout>:                    DY=0.0,
[1,1]<stdout>:                    DZ=0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="RIGHT",
[1,1]<stdout>:                    DY=0.001,
[1,1]<stdout>:                    DZ=0.001,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,1]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            OPTION="RIGI_MECA",
[1,1]<stdout>:            CHAM_MATER=mater,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Numbering"):
[1,1]<stdout>:        dofNum = NUME_DDL(
[1,1]<stdout>:            MATR_RIGI=stiff_elem,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Assembly"):
[1,1]<stdout>:        stiffness = ASSE_MATRICE(
[1,1]<stdout>:            MATR_ELEM=stiff_elem,
[1,1]<stdout>:            NUME_DDL=dofNum,
[1,1]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,1]<stdout>:        rhs = CREA_CHAMP(
[1,1]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,1]<stdout>:            OPERATION="AFFE",
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                NOM_CMP=(
[1,1]<stdout>:                    "DX",
[1,1]<stdout>:                    "DY",
[1,1]<stdout>:                    "DZ",
[1,1]<stdout>:                ),
[1,1]<stdout>:                VALE=(
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,1]<stdout>:
[1,1]<stdout>:    if params["solver"] == "PETSC":
[1,1]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,1]<stdout>:    elif params["solver"] == "MUMPS":
[1,1]<stdout>:        solver = CA.MumpsSolver(
[1,1]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,1]<stdout>:            RENUM="PARMETIS",
[1,1]<stdout>:            ACCELERATION="FR+",
[1,1]<stdout>:            POSTTRAITEMENTS="MINI",
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Factorize"):
[1,1]<stdout>:        solver.factorize(stiffness)
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Solve"):
[1,1]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,1]<stdout>:
[1,1]<stdout>:# write_stats(dofNum)
[1,1]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,1]<stdout>:if params["parallel"] == "HPC":
[1,1]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,1]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,1]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,1]<stdout>:
[1,1]<stdout>:CA.close()
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command line #1:
[1,1]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution of code_aster
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.2
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command file #1 / 1
[1,2]<stdout>:
[1,2]<stdout>:Content of the file to execute:
[1,2]<stdout>:# coding=utf-8
[1,2]<stdout>:#!/usr/bin/python
[1,2]<stdout>:
[1,2]<stdout>:import os
[1,2]<stdout>:from statistics import mean
[1,2]<stdout>:from datetime import datetime
[1,2]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,2]<stdout>:
[1,2]<stdout>:from code_aster.Commands import *
[1,2]<stdout>:from code_aster import CA
[1,2]<stdout>:from code_aster.Utilities import petscInitialize
[1,2]<stdout>:
[1,2]<stdout>:CA.init()
[1,2]<stdout>:
[1,2]<stdout>:params = {}
[1,2]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,2]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,2]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,2]<stdout>:
[1,2]<stdout>:# General parameters
[1,2]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,2]<stdout>:rank = comm.Get_rank()
[1,2]<stdout>:size = comm.Get_size()
[1,2]<stdout>:
[1,2]<stdout>:nbHexa = 8 ** params["refinements"]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def memory_peak(mess=None):
[1,2]<stdout>:    """Return memory peak in MB"""
[1,2]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMgGen:
[1,2]<stdout>:    stats = {}
[1,2]<stdout>:
[1,2]<stdout>:    def __init__(self, what):
[1,2]<stdout>:        self._what = what
[1,2]<stdout>:
[1,2]<stdout>:    def __enter__(self):
[1,2]<stdout>:        self.start = datetime.now()
[1,2]<stdout>:
[1,2]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,2]<stdout>:        self.stop = datetime.now()
[1,2]<stdout>:        delta = self.stop - self.start
[1,2]<stdout>:        mem = memory_peak(self._what)
[1,2]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,2]<stdout>:    pass
[1,2]<stdout>:    # def __init__(self, what):
[1,2]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def write_stats(nume_ddl):
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB PROC")
[1,2]<stdout>:        print(size)
[1,2]<stdout>:        print()
[1,2]<stdout>:        print(
[1,2]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    for key, values in stats.items():
[1,2]<stdout>:        time = comm.gather(values[0], root=0)
[1,2]<stdout>:        mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(
[1,2]<stdout>:                key
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(mem))
[1,2]<stdout>:            )
[1,2]<stdout>:
[1,2]<stdout>:    mesh = nume_ddl.getMesh()
[1,2]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,2]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,2]<stdout>:
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,2]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,2]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,2]<stdout>:
[1,2]<stdout>:    def show(*args, **kwargs):
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(*args, **kwargs)
[1,2]<stdout>:
[1,2]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,2]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,2]<stdout>:    separ = "| :--------------- | ----------: |"
[1,2]<stdout>:    show(fmti.format("Refinement", refine))
[1,2]<stdout>:    show(separ)
[1,2]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,2]<stdout>:    for key, values in data.items():
[1,2]<stdout>:        times = comm.gather(values[0], root=0)
[1,2]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            show(fmtt.format(key, mean(times)))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,2]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,2]<stdout>:
[1,2]<stdout>:with ChronoCtxMg("Total"):
[1,2]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,2]<stdout>:        if params["parallel"] == "HPC":
[1,2]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:        else:
[1,2]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Model"):
[1,2]<stdout>:        model = AFFE_MODELE(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                PHENOMENE="MECANIQUE",
[1,2]<stdout>:                MODELISATION="3D",
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Material"):
[1,2]<stdout>:        steel = DEFI_MATERIAU(
[1,2]<stdout>:            ELAS=_F(
[1,2]<stdout>:                E=200000.0,
[1,2]<stdout>:                NU=0.3,
[1,2]<stdout>:            ),
[1,2]<stdout>:            ECRO_LINE=_F(
[1,2]<stdout>:   [1,2]<stdout>:             D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                SY=200.0,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        mater = AFFE_MATERIAU(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                MATER=steel,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,2]<stdout>:        block = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="LEFT",
[1,2]<stdout>:                    DX=0,
[1,2]<stdout>:                    DY=0.0,
[1,2]<stdout>:                    DZ=0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="RIGHT",
[1,2]<stdout>:                    DY=0.001,
[1,2]<stdout>:                    DZ=0.001,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,2]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            OPTION="RIGI_MECA",
[1,2]<stdout>:            CHAM_MATER=mater,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Numbering"):
[1,2]<stdout>:        dofNum = NUME_DDL(
[1,2]<stdout>:            MATR_RIGI=stiff_elem,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Assembly"):
[1,2]<stdout>:        stiffness = ASSE_MATRICE(
[1,2]<stdout>:            MATR_ELEM=stiff_elem,
[1,2]<stdout>:            NUME_DDL=dofNum,
[1,2]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,2]<stdout>:        rhs = CREA_CHAMP(
[1,2]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,2]<stdout>:            OPERATION="AFFE",
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                NOM_CMP=(
[1,2]<stdout>:                    "DX",
[1,2]<stdout>:                    "DY",
[1,2]<stdout>:                    "DZ",
[1,2]<stdout>:                ),
[1,2]<stdout>:                VALE=(
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,2]<stdout>:
[1,2]<stdout>:    if params["solver"] == "PETSC":
[1,2]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,2]<stdout>:    elif params["solver"] == "MUMPS":
[1,2]<stdout>:        solver = CA.MumpsSolver(
[1,2]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,2]<stdout>:            RENUM="PARMETIS",
[1,2]<stdout>:            ACCELERATION="FR+",
[1,2]<stdout>:            POSTTRAITEMENTS="MINI",
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Factorize"):
[1,2]<stdout>:        solver.factorize(stiffness)
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Solve"):
[1,2]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,2]<stdout>:
[1,2]<stdout>:# write_stats(dofNum)
[1,2]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,2]<stdout>:if params["parallel"] == "HPC":
[1,2]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,2]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,2]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,2]<stdout>:
[1,2]<stdout>:CA.close()
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command line #1:
[1,2]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution of code_aster
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.3
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command file #1 / 1
[1,3]<stdout>:
[1,3]<stdout>:Content of the file to execute:
[1,3]<stdout>:# coding=utf-8
[1,3]<stdout>:#!/usr/bin/python
[1,3]<stdout>:
[1,3]<stdout>:import os
[1,3]<stdout>:from statistics import mean
[1,3]<stdout>:from datetime import datetime
[1,3]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,3]<stdout>:
[1,3]<stdout>:from code_aster.Commands import *
[1,3]<stdout>:from code_aster import CA
[1,3]<stdout>:from code_aster.Utilities import petscInitialize
[1,3]<stdout>:
[1,3]<stdout>:CA.init()
[1,3]<stdout>:
[1,3]<stdout>:params = {}
[1,3]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,3]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,3]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,3]<stdout>:
[1,3]<stdout>:# General parameters
[1,3]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,3]<stdout>:rank = comm.Get_rank()
[1,3]<stdout>:size = comm.Get_size()
[1,3]<stdout>:
[1,3]<stdout>:nbHexa = 8 ** params["refinements"]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def memory_peak(mess=None):
[1,3]<stdout>:    """Return memory peak in MB"""
[1,3]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMgGen:
[1,3]<stdout>:    stats = {}
[1,3]<stdout>:
[1,3]<stdout>:    def __init__(self, what):
[1,3]<stdout>:        self._what = what
[1,3]<stdout>:
[1,3]<stdout>:    def __enter__(self):
[1,3]<stdout>:        self.start = datetime.now()
[1,3]<stdout>:
[1,3]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,3]<stdout>:        self.stop = datetime.now()
[1,3]<stdout>:        delta = self.stop - self.start
[1,3]<stdout>:        mem = memory_peak(self._what)
[1,3]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,3]<stdout>:    pass
[1,3]<stdout>:    # def __init__(self, what):
[1,3]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def write_stats(nume_ddl):
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB PROC")
[1,3]<stdout>:        print(size)
[1,3]<stdout>:        print()
[1,3]<stdout>:        print(
[1,3]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    for key, values in stats.items():
[1,3]<stdout>:        time = comm.gather(values[0], root=0)
[1,3]<stdout>:        mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(
[1,3]<stdout>:                key
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(mem))
[1,3]<stdout>:            )
[1,3]<stdout>:
[1,3]<stdout>:    mesh = nume_ddl.getMesh()
[1,3]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,3]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,3]<stdout>:
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,3]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,3]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,3]<stdout>:
[1,3]<stdout>:    def show(*args, **kwargs):
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(*args, **kwargs)
[1,3]<stdout>:
[1,3]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,3]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,3]<stdout>:    separ = "| :--------------- | ----------: |"
[1,3]<stdout>:    show(fmti.format("Refinement", refine))
[1,3]<stdout>:    show(separ)
[1,3]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,3]<stdout>:    for key, values in data.items():
[1,3]<stdout>:        times = comm.gather(values[0], root=0)
[1,3]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            show(fmtt.format(key, mean(times)))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,3]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,3]<stdout>:
[1,3]<stdout>:with ChronoCtxMg("Total"):
[1,3]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,3]<stdout>:        if params["parallel"] == "HPC":
[1,3]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:        else:
[1,3]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Model"):
[1,3]<stdout>:        model = AFFE_MODELE(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                PHENOMENE="MECANIQUE",
[1,3]<stdout>:                MODELISATION="3D",
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Material"):
[1,3]<stdout>:        steel = DEFI_MATERIAU(
[1,3]<stdout>:            ELAS=_F(
[1,3]<stdout>:                E=200000.0,
[1,3]<stdout>:                NU=0.3,
[1,3]<stdout>:            ),
[1,3]<stdout>:            ECRO_LINE=_F(
[1,3]<stdout>:   [1,3]<stdout>:             D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                SY=200.0,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        mater = AFFE_MATERIAU(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                MATER=steel,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,3]<stdout>:        block = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="LEFT",
[1,3]<stdout>:                    DX=0,
[1,3]<stdout>:                    DY=0.0,
[1,3]<stdout>:                    DZ=0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="RIGHT",
[1,3]<stdout>:                    DY=0.001,
[1,3]<stdout>:                    DZ=0.001,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,3]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            OPTION="RIGI_MECA",
[1,3]<stdout>:            CHAM_MATER=mater,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Numbering"):
[1,3]<stdout>:        dofNum = NUME_DDL(
[1,3]<stdout>:            MATR_RIGI=stiff_elem,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Assembly"):
[1,3]<stdout>:        stiffness = ASSE_MATRICE(
[1,3]<stdout>:            MATR_ELEM=stiff_elem,
[1,3]<stdout>:            NUME_DDL=dofNum,
[1,3]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,3]<stdout>:        rhs = CREA_CHAMP(
[1,3]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,3]<stdout>:            OPERATION="AFFE",
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                NOM_CMP=(
[1,3]<stdout>:                    "DX",
[1,3]<stdout>:                    "DY",
[1,3]<stdout>:                    "DZ",
[1,3]<stdout>:                ),
[1,3]<stdout>:                VALE=(
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,3]<stdout>:
[1,3]<stdout>:    if params["solver"] == "PETSC":
[1,3]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,3]<stdout>:    elif params["solver"] == "MUMPS":
[1,3]<stdout>:        solver = CA.MumpsSolver(
[1,3]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,3]<stdout>:            RENUM="PARMETIS",
[1,3]<stdout>:            ACCELERATION="FR+",
[1,3]<stdout>:            POSTTRAITEMENTS="MINI",
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Factorize"):
[1,3]<stdout>:        solver.factorize(stiffness)
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Solve"):
[1,3]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,3]<stdout>:
[1,3]<stdout>:# write_stats(dofNum)
[1,3]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,3]<stdout>:if params["parallel"] == "HPC":
[1,3]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,3]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,3]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,3]<stdout>:
[1,3]<stdout>:CA.close()
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command line #1:
[1,3]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution of code_aster
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.4
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command file #1 / 1
[1,4]<stdout>:
[1,4]<stdout>:Content of the file to execute:
[1,4]<stdout>:# coding=utf-8
[1,4]<stdout>:#!/usr/bin/python
[1,4]<stdout>:
[1,4]<stdout>:import os
[1,4]<stdout>:from statistics import mean
[1,4]<stdout>:from datetime import datetime
[1,4]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,4]<stdout>:
[1,4]<stdout>:from code_aster.Commands import *
[1,4]<stdout>:from code_aster import CA
[1,4]<stdout>:from code_aster.Utilities import petscInitialize
[1,4]<stdout>:
[1,4]<stdout>:CA.init()
[1,4]<stdout>:
[1,4]<stdout>:params = {}
[1,4]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,4]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,4]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,4]<stdout>:
[1,4]<stdout>:# General parameters
[1,4]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,4]<stdout>:rank = comm.Get_rank()
[1,4]<stdout>:size = comm.Get_size()
[1,4]<stdout>:
[1,4]<stdout>:nbHexa = 8 ** params["refinements"]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def memory_peak(mess=None):
[1,4]<stdout>:    """Return memory peak in MB"""
[1,4]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMgGen:
[1,4]<stdout>:    stats = {}
[1,4]<stdout>:
[1,4]<stdout>:    def __init__(self, what):
[1,4]<stdout>:        self._what = what
[1,4]<stdout>:
[1,4]<stdout>:    def __enter__(self):
[1,4]<stdout>:        self.start = datetime.now()
[1,4]<stdout>:
[1,4]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,4]<stdout>:        self.stop = datetime.now()
[1,4]<stdout>:        delta = self.stop - self.start
[1,4]<stdout>:        mem = memory_peak(self._what)
[1,4]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,4]<stdout>:    pass
[1,4]<stdout>:    # def __init__(self, what):
[1,4]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def write_stats(nume_ddl):
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB PROC")
[1,4]<stdout>:        print(size)
[1,4]<stdout>:        print()
[1,4]<stdout>:        print(
[1,4]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    for key, values in stats.items():
[1,4]<stdout>:        time = comm.gather(values[0], root=0)
[1,4]<stdout>:        mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(
[1,4]<stdout>:                key
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(mem))
[1,4]<stdout>:            )
[1,4]<stdout>:
[1,4]<stdout>:    mesh = nume_ddl.getMesh()
[1,4]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,4]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,4]<stdout>:
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,4]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,4]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,4]<stdout>:
[1,4]<stdout>:    def show(*args, **kwargs):
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(*args, **kwargs)
[1,4]<stdout>:
[1,4]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,4]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,4]<stdout>:    separ = "| :--------------- | ----------: |"
[1,4]<stdout>:    show(fmti.format("Refinement", refine))
[1,4]<stdout>:    show(separ)
[1,4]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,4]<stdout>:    for key, values in data.items():
[1,4]<stdout>:        times = comm.gather(values[0], root=0)
[1,4]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            show(fmtt.format(key, mean(times)))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,4]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,4]<stdout>:
[1,4]<stdout>:with ChronoCtxMg("Total"):
[1,4]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,4]<stdout>:        if params["parallel"] == "HPC":
[1,4]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:        else:
[1,4]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Model"):
[1,4]<stdout>:        model = AFFE_MODELE(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                PHENOMENE="MECANIQUE",
[1,4]<stdout>:                MODELISATION="3D",
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Material"):
[1,4]<stdout>:        steel = DEFI_MATERIAU(
[1,4]<stdout>:            ELAS=_F(
[1,4]<stdout>:                E=200000.0,
[1,4]<stdout>:                NU=0.3,
[1,4]<stdout>:            ),
[1,4]<stdout>:            ECRO_LINE=_F(
[1,4]<stdout>:    [1,4]<stdout>:            D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                SY=200.0,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        mater = AFFE_MATERIAU(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                MATER=steel,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,4]<stdout>:        block = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="LEFT",
[1,4]<stdout>:                    DX=0,
[1,4]<stdout>:                    DY=0.0,
[1,4]<stdout>:                    DZ=0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="RIGHT",
[1,4]<stdout>:                    DY=0.001,
[1,4]<stdout>:                    DZ=0.001,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,4]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            OPTION="RIGI_MECA",
[1,4]<stdout>:            CHAM_MATER=mater,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Numbering"):
[1,4]<stdout>:        dofNum = NUME_DDL(
[1,4]<stdout>:            MATR_RIGI=stiff_elem,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Assembly"):
[1,4]<stdout>:        stiffness = ASSE_MATRICE(
[1,4]<stdout>:            MATR_ELEM=stiff_elem,
[1,4]<stdout>:            NUME_DDL=dofNum,
[1,4]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,4]<stdout>:        rhs = CREA_CHAMP(
[1,4]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,4]<stdout>:            OPERATION="AFFE",
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                NOM_CMP=(
[1,4]<stdout>:                    "DX",
[1,4]<stdout>:                    "DY",
[1,4]<stdout>:                    "DZ",
[1,4]<stdout>:                ),
[1,4]<stdout>:                VALE=(
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,4]<stdout>:
[1,4]<stdout>:    if params["solver"] == "PETSC":
[1,4]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,4]<stdout>:    elif params["solver"] == "MUMPS":
[1,4]<stdout>:        solver = CA.MumpsSolver(
[1,4]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,4]<stdout>:            RENUM="PARMETIS",
[1,4]<stdout>:            ACCELERATION="FR+",
[1,4]<stdout>:            POSTTRAITEMENTS="MINI",
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Factorize"):
[1,4]<stdout>:        solver.factorize(stiffness)
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Solve"):
[1,4]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,4]<stdout>:
[1,4]<stdout>:# write_stats(dofNum)
[1,4]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,4]<stdout>:if params["parallel"] == "HPC":
[1,4]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,4]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,4]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,4]<stdout>:
[1,4]<stdout>:CA.close()
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command line #1:
[1,4]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution of code_aster
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.5
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command file #1 / 1
[1,5]<stdout>:
[1,5]<stdout>:Content of the file to execute:
[1,5]<stdout>:# coding=utf-8
[1,5]<stdout>:#!/usr/bin/python
[1,5]<stdout>:
[1,5]<stdout>:import os
[1,5]<stdout>:from statistics import mean
[1,5]<stdout>:from datetime import datetime
[1,5]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,5]<stdout>:
[1,5]<stdout>:from code_aster.Commands import *
[1,5]<stdout>:from code_aster import CA
[1,5]<stdout>:from code_aster.Utilities import petscInitialize
[1,5]<stdout>:
[1,5]<stdout>:CA.init()
[1,5]<stdout>:
[1,5]<stdout>:params = {}
[1,5]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,5]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,5]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,5]<stdout>:
[1,5]<stdout>:# General parameters
[1,5]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,5]<stdout>:rank = comm.Get_rank()
[1,5]<stdout>:size = comm.Get_size()
[1,5]<stdout>:
[1,5]<stdout>:nbHexa = 8 ** params["refinements"]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def memory_peak(mess=None):
[1,5]<stdout>:    """Return memory peak in MB"""
[1,5]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMgGen:
[1,5]<stdout>:    stats = {}
[1,5]<stdout>:
[1,5]<stdout>:    def __init__(self, what):
[1,5]<stdout>:        self._what = what
[1,5]<stdout>:
[1,5]<stdout>:    def __enter__(self):
[1,5]<stdout>:        self.start = datetime.now()
[1,5]<stdout>:
[1,5]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,5]<stdout>:        self.stop = datetime.now()
[1,5]<stdout>:        delta = self.stop - self.start
[1,5]<stdout>:        mem = memory_peak(self._what)
[1,5]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,5]<stdout>:    pass
[1,5]<stdout>:    # def __init__(self, what):
[1,5]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def write_stats(nume_ddl):
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB PROC")
[1,5]<stdout>:        print(size)
[1,5]<stdout>:        print()
[1,5]<stdout>:        print(
[1,5]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    for key, values in stats.items():
[1,5]<stdout>:        time = comm.gather(values[0], root=0)
[1,5]<stdout>:        mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(
[1,5]<stdout>:                key
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(mem))
[1,5]<stdout>:            )
[1,5]<stdout>:
[1,5]<stdout>:    mesh = nume_ddl.getMesh()
[1,5]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,5]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,5]<stdout>:
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,5]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,5]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,5]<stdout>:
[1,5]<stdout>:    def show(*args, **kwargs):
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(*args, **kwargs)
[1,5]<stdout>:
[1,5]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,5]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,5]<stdout>:    separ = "| :--------------- | ----------: |"
[1,5]<stdout>:    show(fmti.format("Refinement", refine))
[1,5]<stdout>:    show(separ)
[1,5]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,5]<stdout>:    for key, values in data.items():
[1,5]<stdout>:        times = comm.gather(values[0], root=0)
[1,5]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            show(fmtt.format(key, mean(times)))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,5]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,5]<stdout>:
[1,5]<stdout>:with ChronoCtxMg("Total"):
[1,5]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,5]<stdout>:        if params["parallel"] == "HPC":
[1,5]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:        else:
[1,5]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Model"):
[1,5]<stdout>:        model = AFFE_MODELE(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                PHENOMENE="MECANIQUE",
[1,5]<stdout>:                MODELISATION="3D",
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Material"):
[1,5]<stdout>:        steel = DEFI_MATERIAU(
[1,5]<stdout>:            ELAS=_F(
[1,5]<stdout>:                E=200000.0,
[1,5]<stdout>:                NU=0.3,
[1,5]<stdout>:            ),
[1,5]<stdout>:            ECRO_LINE=_F(
[1,5]<stdout>:   [1,5]<stdout>:             D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                SY=200.0,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        mater = AFFE_MATERIAU(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                MATER=steel,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,5]<stdout>:        block = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="LEFT",
[1,5]<stdout>:                    DX=0,
[1,5]<stdout>:                    DY=0.0,
[1,5]<stdout>:                    DZ=0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="RIGHT",
[1,5]<stdout>:                    DY=0.001,
[1,5]<stdout>:                    DZ=0.001,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,5]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            OPTION="RIGI_MECA",
[1,5]<stdout>:            CHAM_MATER=mater,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Numbering"):
[1,5]<stdout>:        dofNum = NUME_DDL(
[1,5]<stdout>:            MATR_RIGI=stiff_elem,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Assembly"):
[1,5]<stdout>:        stiffness = ASSE_MATRICE(
[1,5]<stdout>:            MATR_ELEM=stiff_elem,
[1,5]<stdout>:            NUME_DDL=dofNum,
[1,5]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,5]<stdout>:        rhs = CREA_CHAMP(
[1,5]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,5]<stdout>:            OPERATION="AFFE",
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                NOM_CMP=(
[1,5]<stdout>:                    "DX",
[1,5]<stdout>:                    "DY",
[1,5]<stdout>:                    "DZ",
[1,5]<stdout>:                ),
[1,5]<stdout>:                VALE=(
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,5]<stdout>:
[1,5]<stdout>:    if params["solver"] == "PETSC":
[1,5]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,5]<stdout>:    elif params["solver"] == "MUMPS":
[1,5]<stdout>:        solver = CA.MumpsSolver(
[1,5]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,5]<stdout>:            RENUM="PARMETIS",
[1,5]<stdout>:            ACCELERATION="FR+",
[1,5]<stdout>:            POSTTRAITEMENTS="MINI",
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Factorize"):
[1,5]<stdout>:        solver.factorize(stiffness)
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Solve"):
[1,5]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,5]<stdout>:
[1,5]<stdout>:# write_stats(dofNum)
[1,5]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,5]<stdout>:if params["parallel"] == "HPC":
[1,5]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,5]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,5]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,5]<stdout>:
[1,5]<stdout>:CA.close()
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command line #1:
[1,5]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution of code_aster
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.6
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command file #1 / 1
[1,6]<stdout>:
[1,6]<stdout>:Content of the file to execute:
[1,6]<stdout>:# coding=utf-8
[1,6]<stdout>:#!/usr/bin/python
[1,6]<stdout>:
[1,6]<stdout>:import os
[1,6]<stdout>:from statistics import mean
[1,6]<stdout>:from datetime import datetime
[1,6]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,6]<stdout>:
[1,6]<stdout>:from code_aster.Commands import *
[1,6]<stdout>:from code_aster import CA
[1,6]<stdout>:from code_aster.Utilities import petscInitialize
[1,6]<stdout>:
[1,6]<stdout>:CA.init()
[1,6]<stdout>:
[1,6]<stdout>:params = {}
[1,6]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,6]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,6]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,6]<stdout>:
[1,6]<stdout>:# General parameters
[1,6]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,6]<stdout>:rank = comm.Get_rank()
[1,6]<stdout>:size = comm.Get_size()
[1,6]<stdout>:
[1,6]<stdout>:nbHexa = 8 ** params["refinements"]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def memory_peak(mess=None):
[1,6]<stdout>:    """Return memory peak in MB"""
[1,6]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMgGen:
[1,6]<stdout>:    stats = {}
[1,6]<stdout>:
[1,6]<stdout>:    def __init__(self, what):
[1,6]<stdout>:        self._what = what
[1,6]<stdout>:
[1,6]<stdout>:    def __enter__(self):
[1,6]<stdout>:        self.start = datetime.now()
[1,6]<stdout>:
[1,6]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,6]<stdout>:        self.stop = datetime.now()
[1,6]<stdout>:        delta = self.stop - self.start
[1,6]<stdout>:        mem = memory_peak(self._what)
[1,6]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,6]<stdout>:    pass
[1,6]<stdout>:    # def __init__(self, what):
[1,6]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def write_stats(nume_ddl):
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB PROC")
[1,6]<stdout>:        print(size)
[1,6]<stdout>:        print()
[1,6]<stdout>:        print(
[1,6]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    for key, values in stats.items():
[1,6]<stdout>:        time = comm.gather(values[0], root=0)
[1,6]<stdout>:        mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(
[1,6]<stdout>:                key
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(mem))
[1,6]<stdout>:            )
[1,6]<stdout>:
[1,6]<stdout>:    mesh = nume_ddl.getMesh()
[1,6]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,6]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,6]<stdout>:
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,6]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,6]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,6]<stdout>:
[1,6]<stdout>:    def show(*args, **kwargs):
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(*args, **kwargs)
[1,6]<stdout>:
[1,6]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,6]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,6]<stdout>:    separ = "| :--------------- | ----------: |"
[1,6]<stdout>:    show(fmti.format("Refinement", refine))
[1,6]<stdout>:    show(separ)
[1,6]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,6]<stdout>:    for key, values in data.items():
[1,6]<stdout>:        times = comm.gather(values[0], root=0)
[1,6]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            show(fmtt.format(key, mean(times)))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,6]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,6]<stdout>:
[1,6]<stdout>:with ChronoCtxMg("Total"):
[1,6]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,6]<stdout>:        if params["parallel"] == "HPC":
[1,6]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:        else:
[1,6]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Model"):
[1,6]<stdout>:        model = AFFE_MODELE(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                PHENOMENE="MECANIQUE",
[1,6]<stdout>:                MODELISATION="3D",
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Material"):
[1,6]<stdout>:        steel = DEFI_MATERIAU(
[1,6]<stdout>:            ELAS=_F(
[1,6]<stdout>:                E=200000.0,
[1,6]<stdout>:                NU=0.3,
[1,6]<stdout>:            ),
[1,6]<stdout>:            ECRO_LINE=_F(
[1,6]<stdout>:    [1,6]<stdout>:            D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                SY=200.0,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        mater = AFFE_MATERIAU(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                MATER=steel,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,6]<stdout>:        block = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="LEFT",
[1,6]<stdout>:                    DX=0,
[1,6]<stdout>:                    DY=0.0,
[1,6]<stdout>:                    DZ=0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="RIGHT",
[1,6]<stdout>:                    DY=0.001,
[1,6]<stdout>:                    DZ=0.001,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,6]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            OPTION="RIGI_MECA",
[1,6]<stdout>:            CHAM_MATER=mater,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Numbering"):
[1,6]<stdout>:        dofNum = NUME_DDL(
[1,6]<stdout>:            MATR_RIGI=stiff_elem,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Assembly"):
[1,6]<stdout>:        stiffness = ASSE_MATRICE(
[1,6]<stdout>:            MATR_ELEM=stiff_elem,
[1,6]<stdout>:            NUME_DDL=dofNum,
[1,6]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,6]<stdout>:        rhs = CREA_CHAMP(
[1,6]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,6]<stdout>:            OPERATION="AFFE",
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                NOM_CMP=(
[1,6]<stdout>:                    "DX",
[1,6]<stdout>:                    "DY",
[1,6]<stdout>:                    "DZ",
[1,6]<stdout>:                ),
[1,6]<stdout>:                VALE=(
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,6]<stdout>:
[1,6]<stdout>:    if params["solver"] == "PETSC":
[1,6]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,6]<stdout>:    elif params["solver"] == "MUMPS":
[1,6]<stdout>:        solver = CA.MumpsSolver(
[1,6]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,6]<stdout>:            RENUM="PARMETIS",
[1,6]<stdout>:            ACCELERATION="FR+",
[1,6]<stdout>:            POSTTRAITEMENTS="MINI",
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Factorize"):
[1,6]<stdout>:        solver.factorize(stiffness)
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Solve"):
[1,6]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,6]<stdout>:
[1,6]<stdout>:# write_stats(dofNum)
[1,6]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,6]<stdout>:if params["parallel"] == "HPC":
[1,6]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,6]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,6]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,6]<stdout>:
[1,6]<stdout>:CA.close()
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command line #1:
[1,6]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution of code_aster
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.7
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command file #1 / 1
[1,7]<stdout>:
[1,7]<stdout>:Content of the file to execute:
[1,7]<stdout>:# coding=utf-8
[1,7]<stdout>:#!/usr/bin/python
[1,7]<stdout>:
[1,7]<stdout>:import os
[1,7]<stdout>:from statistics import mean
[1,7]<stdout>:from datetime import datetime
[1,7]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,7]<stdout>:
[1,7]<stdout>:from code_aster.Commands import *
[1,7]<stdout>:from code_aster import CA
[1,7]<stdout>:from code_aster.Utilities import petscInitialize
[1,7]<stdout>:
[1,7]<stdout>:CA.init()
[1,7]<stdout>:
[1,7]<stdout>:params = {}
[1,7]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,7]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,7]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,7]<stdout>:
[1,7]<stdout>:# General parameters
[1,7]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,7]<stdout>:rank = comm.Get_rank()
[1,7]<stdout>:size = comm.Get_size()
[1,7]<stdout>:
[1,7]<stdout>:nbHexa = 8 ** params["refinements"]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def memory_peak(mess=None):
[1,7]<stdout>:    """Return memory peak in MB"""
[1,7]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMgGen:
[1,7]<stdout>:    stats = {}
[1,7]<stdout>:
[1,7]<stdout>:    def __init__(self, what):
[1,7]<stdout>:        self._what = what
[1,7]<stdout>:
[1,7]<stdout>:    def __enter__(self):
[1,7]<stdout>:        self.start = datetime.now()
[1,7]<stdout>:
[1,7]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,7]<stdout>:        self.stop = datetime.now()
[1,7]<stdout>:        delta = self.stop - self.start
[1,7]<stdout>:        mem = memory_peak(self._what)
[1,7]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,7]<stdout>:    pass
[1,7]<stdout>:    # def __init__(self, what):
[1,7]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def write_stats(nume_ddl):
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB PROC")
[1,7]<stdout>:        print(size)
[1,7]<stdout>:        print()
[1,7]<stdout>:        print(
[1,7]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    for key, values in stats.items():
[1,7]<stdout>:        time = comm.gather(values[0], root=0)
[1,7]<stdout>:        mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(
[1,7]<stdout>:                key
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(mem))
[1,7]<stdout>:            )
[1,7]<stdout>:
[1,7]<stdout>:    mesh = nume_ddl.getMesh()
[1,7]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,7]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,7]<stdout>:
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,7]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,7]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,7]<stdout>:
[1,7]<stdout>:    def show(*args, **kwargs):
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(*args, **kwargs)
[1,7]<stdout>:
[1,7]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,7]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,7]<stdout>:    separ = "| :--------------- | ----------: |"
[1,7]<stdout>:    show(fmti.format("Refinement", refine))
[1,7]<stdout>:    show(separ)
[1,7]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,7]<stdout>:    for key, values in data.items():
[1,7]<stdout>:        times = comm.gather(values[0], root=0)
[1,7]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            show(fmtt.format(key, mean(times)))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,7]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,7]<stdout>:
[1,7]<stdout>:with ChronoCtxMg("Total"):
[1,7]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,7]<stdout>:        if params["parallel"] == "HPC":
[1,7]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:        else:
[1,7]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Model"):
[1,7]<stdout>:        model = AFFE_MODELE(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                PHENOMENE="MECANIQUE",
[1,7]<stdout>:                MODELISATION="3D",
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Material"):
[1,7]<stdout>:        steel = DEFI_MATERIAU(
[1,7]<stdout>:            ELAS=_F(
[1,7]<stdout>:                E=200000.0,
[1,7]<stdout>:                NU=0.3,
[1,7]<stdout>:            ),
[1,7]<stdout>:            ECRO_LINE=_F(
[1,7]<stdout>:   [1,7]<stdout>:             D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                SY=200.0,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        mater = AFFE_MATERIAU(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                MATER=steel,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,7]<stdout>:        block = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="LEFT",
[1,7]<stdout>:                    DX=0,
[1,7]<stdout>:                    DY=0.0,
[1,7]<stdout>:                    DZ=0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="RIGHT",
[1,7]<stdout>:                    DY=0.001,
[1,7]<stdout>:                    DZ=0.001,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,7]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            OPTION="RIGI_MECA",
[1,7]<stdout>:            CHAM_MATER=mater,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Numbering"):
[1,7]<stdout>:        dofNum = NUME_DDL(
[1,7]<stdout>:            MATR_RIGI=stiff_elem,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Assembly"):
[1,7]<stdout>:        stiffness = ASSE_MATRICE(
[1,7]<stdout>:            MATR_ELEM=stiff_elem,
[1,7]<stdout>:            NUME_DDL=dofNum,
[1,7]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,7]<stdout>:        rhs = CREA_CHAMP(
[1,7]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,7]<stdout>:            OPERATION="AFFE",
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                NOM_CMP=(
[1,7]<stdout>:                    "DX",
[1,7]<stdout>:                    "DY",
[1,7]<stdout>:                    "DZ",
[1,7]<stdout>:                ),
[1,7]<stdout>:                VALE=(
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,7]<stdout>:
[1,7]<stdout>:    if params["solver"] == "PETSC":
[1,7]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,7]<stdout>:    elif params["solver"] == "MUMPS":
[1,7]<stdout>:        solver = CA.MumpsSolver(
[1,7]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,7]<stdout>:            RENUM="PARMETIS",
[1,7]<stdout>:            ACCELERATION="FR+",
[1,7]<stdout>:            POSTTRAITEMENTS="MINI",
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Factorize"):
[1,7]<stdout>:        solver.factorize(stiffness)
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Solve"):
[1,7]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,7]<stdout>:
[1,7]<stdout>:# write_stats(dofNum)
[1,7]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,7]<stdout>:if params["parallel"] == "HPC":
[1,7]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,7]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,7]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,7]<stdout>:
[1,7]<stdout>:CA.close()
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command line #1:
[1,7]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Execution of code_aster
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.8
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Command file #1 / 1
[1,8]<stdout>:
[1,8]<stdout>:Content of the file to execute:
[1,8]<stdout>:# coding=utf-8
[1,8]<stdout>:#!/usr/bin/python
[1,8]<stdout>:
[1,8]<stdout>:import os
[1,8]<stdout>:from statistics import mean
[1,8]<stdout>:from datetime import datetime
[1,8]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,8]<stdout>:
[1,8]<stdout>:from code_aster.Commands import *
[1,8]<stdout>:from code_aster import CA
[1,8]<stdout>:from code_aster.Utilities import petscInitialize
[1,8]<stdout>:
[1,8]<stdout>:CA.init()
[1,8]<stdout>:
[1,8]<stdout>:params = {}
[1,8]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,8]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,8]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,8]<stdout>:
[1,8]<stdout>:# General parameters
[1,8]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,8]<stdout>:rank = comm.Get_rank()
[1,8]<stdout>:size = comm.Get_size()
[1,8]<stdout>:
[1,8]<stdout>:nbHexa = 8 ** params["refinements"]
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def memory_peak(mess=None):
[1,8]<stdout>:    """Return memory peak in MB"""
[1,8]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:class ChronoCtxMgGen:
[1,8]<stdout>:    stats = {}
[1,8]<stdout>:
[1,8]<stdout>:    def __init__(self, what):
[1,8]<stdout>:        self._what = what
[1,8]<stdout>:
[1,8]<stdout>:    def __enter__(self):
[1,8]<stdout>:        self.start = datetime.now()
[1,8]<stdout>:
[1,8]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,8]<stdout>:        self.stop = datetime.now()
[1,8]<stdout>:        delta = self.stop - self.start
[1,8]<stdout>:        mem = memory_peak(self._what)
[1,8]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,8]<stdout>:    pass
[1,8]<stdout>:    # def __init__(self, what):
[1,8]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def write_stats(nume_ddl):
[1,8]<stdout>:    if rank == 0:
[1,8]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,8]<stdout>:        print()
[1,8]<stdout>:        print("NB PROC")
[1,8]<stdout>:        print(size)
[1,8]<stdout>:        print()
[1,8]<stdout>:        print(
[1,8]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    for key, values in stats.items():
[1,8]<stdout>:        time = comm.gather(values[0], root=0)
[1,8]<stdout>:        mem = comm.gather(values[1], root=0)
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            print(
[1,8]<stdout>:                key
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(min(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(max(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(mean(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(min(mem))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(max(mem))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(mean(mem))
[1,8]<stdout>:            )
[1,8]<stdout>:
[1,8]<stdout>:    mesh = nume_ddl.getMesh()
[1,8]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,8]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,8]<stdout>:
[1,8]<stdout>:    if rank == 0:
[1,8]<stdout>:        print()
[1,8]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,8]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,8]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,8]<stdout>:
[1,8]<stdout>:    def show(*args, **kwargs):
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            print(*args, **kwargs)
[1,8]<stdout>:
[1,8]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,8]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,8]<stdout>:    separ = "| :--------------- | ----------: |"
[1,8]<stdout>:    show(fmti.format("Refinement", refine))
[1,8]<stdout>:    show(separ)
[1,8]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,8]<stdout>:    for key, values in data.items():
[1,8]<stdout>:        times = comm.gather(values[0], root=0)
[1,8]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            show(fmtt.format(key, mean(times)))
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,8]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,8]<stdout>:
[1,8]<stdout>:with ChronoCtxMg("Total"):
[1,8]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,8]<stdout>:        if params["parallel"] == "HPC":
[1,8]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,8]<stdout>:        else:
[1,8]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Model"):
[1,8]<stdout>:        model = AFFE_MODELE(
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                PHENOMENE="MECANIQUE",
[1,8]<stdout>:                MODELISATION="3D",
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Material"):
[1,8]<stdout>:        steel = DEFI_MATERIAU(
[1,8]<stdout>:            ELAS=_F(
[1,8]<stdout>:                E=200000.0,
[1,8]<stdout>:                NU=0.3,
[1,8]<stdout>:            ),
[1,8]<stdout>:            ECRO_LINE=_F(
[1,8]<stdout>:    [1,8]<stdout>:            D_SIGM_EPSI=2000.0,
[1,8]<stdout>:                SY=200.0,
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        mater = AFFE_MATERIAU(
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                MATER=steel,
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,8]<stdout>:        block = AFFE_CHAR_CINE(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            MECA_IMPO=(
[1,8]<stdout>:                _F(
[1,8]<stdout>:                    GROUP_MA="LEFT",
[1,8]<stdout>:                    DX=0,
[1,8]<stdout>:                    DY=0.0,
[1,8]<stdout>:                    DZ=0.0,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            MECA_IMPO=(
[1,8]<stdout>:                _F(
[1,8]<stdout>:                    GROUP_MA="RIGHT",
[1,8]<stdout>:                    DY=0.001,
[1,8]<stdout>:                    DZ=0.001,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,8]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            OPTION="RIGI_MECA",
[1,8]<stdout>:            CHAM_MATER=mater,
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Numbering"):
[1,8]<stdout>:        dofNum = NUME_DDL(
[1,8]<stdout>:            MATR_RIGI=stiff_elem,
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Assembly"):
[1,8]<stdout>:        stiffness = ASSE_MATRICE(
[1,8]<stdout>:            MATR_ELEM=stiff_elem,
[1,8]<stdout>:            NUME_DDL=dofNum,
[1,8]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,8]<stdout>:        rhs = CREA_CHAMP(
[1,8]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,8]<stdout>:            OPERATION="AFFE",
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                NOM_CMP=(
[1,8]<stdout>:                    "DX",
[1,8]<stdout>:                    "DY",
[1,8]<stdout>:                    "DZ",
[1,8]<stdout>:                ),
[1,8]<stdout>:                VALE=(
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,8]<stdout>:
[1,8]<stdout>:    if params["solver"] == "PETSC":
[1,8]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,8]<stdout>:    elif params["solver"] == "MUMPS":
[1,8]<stdout>:        solver = CA.MumpsSolver(
[1,8]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,8]<stdout>:            RENUM="PARMETIS",
[1,8]<stdout>:            ACCELERATION="FR+",
[1,8]<stdout>:            POSTTRAITEMENTS="MINI",
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Factorize"):
[1,8]<stdout>:        solver.factorize(stiffness)
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Solve"):
[1,8]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,8]<stdout>:
[1,8]<stdout>:# write_stats(dofNum)
[1,8]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,8]<stdout>:if params["parallel"] == "HPC":
[1,8]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,8]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,8]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,8]<stdout>:
[1,8]<stdout>:CA.close()
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Command line #1:
[1,8]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Execution of code_aster
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.9
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Command file #1 / 1
[1,9]<stdout>:
[1,9]<stdout>:Content of the file to execute:
[1,9]<stdout>:# coding=utf-8
[1,9]<stdout>:#!/usr/bin/python
[1,9]<stdout>:
[1,9]<stdout>:import os
[1,9]<stdout>:from statistics import mean
[1,9]<stdout>:from datetime import datetime
[1,9]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,9]<stdout>:
[1,9]<stdout>:from code_aster.Commands import *
[1,9]<stdout>:from code_aster import CA
[1,9]<stdout>:from code_aster.Utilities import petscInitialize
[1,9]<stdout>:
[1,9]<stdout>:CA.init()
[1,9]<stdout>:
[1,9]<stdout>:params = {}
[1,9]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,9]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,9]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,9]<stdout>:
[1,9]<stdout>:# General parameters
[1,9]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,9]<stdout>:rank = comm.Get_rank()
[1,9]<stdout>:size = comm.Get_size()
[1,9]<stdout>:
[1,9]<stdout>:nbHexa = 8 ** params["refinements"]
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def memory_peak(mess=None):
[1,9]<stdout>:    """Return memory peak in MB"""
[1,9]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:class ChronoCtxMgGen:
[1,9]<stdout>:    stats = {}
[1,9]<stdout>:
[1,9]<stdout>:    def __init__(self, what):
[1,9]<stdout>:        self._what = what
[1,9]<stdout>:
[1,9]<stdout>:    def __enter__(self):
[1,9]<stdout>:        self.start = datetime.now()
[1,9]<stdout>:
[1,9]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,9]<stdout>:        self.stop = datetime.now()
[1,9]<stdout>:        delta = self.stop - self.start
[1,9]<stdout>:        mem = memory_peak(self._what)
[1,9]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,9]<stdout>:    pass
[1,9]<stdout>:    # def __init__(self, what):
[1,9]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def write_stats(nume_ddl):
[1,9]<stdout>:    if rank == 0:
[1,9]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,9]<stdout>:        print()
[1,9]<stdout>:        print("NB PROC")
[1,9]<stdout>:        print(size)
[1,9]<stdout>:        print()
[1,9]<stdout>:        print(
[1,9]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    for key, values in stats.items():
[1,9]<stdout>:        time = comm.gather(values[0], root=0)
[1,9]<stdout>:        mem = comm.gather(values[1], root=0)
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            print(
[1,9]<stdout>:                key
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(min(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(max(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(mean(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(min(mem))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(max(mem))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(mean(mem))
[1,9]<stdout>:            )
[1,9]<stdout>:
[1,9]<stdout>:    mesh = nume_ddl.getMesh()
[1,9]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,9]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,9]<stdout>:
[1,9]<stdout>:    if rank == 0:
[1,9]<stdout>:        print()
[1,9]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,9]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,9]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,9]<stdout>:
[1,9]<stdout>:    def show(*args, **kwargs):
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            print(*args, **kwargs)
[1,9]<stdout>:
[1,9]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,9]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,9]<stdout>:    separ = "| :--------------- | ----------: |"
[1,9]<stdout>:    show(fmti.format("Refinement", refine))
[1,9]<stdout>:    show(separ)
[1,9]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,9]<stdout>:    for key, values in data.items():
[1,9]<stdout>:        times = comm.gather(values[0], root=0)
[1,9]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            show(fmtt.format(key, mean(times)))
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,9]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,9]<stdout>:
[1,9]<stdout>:with ChronoCtxMg("Total"):
[1,9]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,9]<stdout>:        if params["parallel"] == "HPC":
[1,9]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,9]<stdout>:        else:
[1,9]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Model"):
[1,9]<stdout>:        model = AFFE_MODELE(
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                PHENOMENE="MECANIQUE",
[1,9]<stdout>:                MODELISATION="3D",
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Material"):
[1,9]<stdout>:        steel = DEFI_MATERIAU(
[1,9]<stdout>:            ELAS=_F(
[1,9]<stdout>:                E=200000.0,
[1,9]<stdout>:                NU=0.3,
[1,9]<stdout>:            ),
[1,9]<stdout>:            ECRO_LINE=_F(
[1,9]<stdout>:   [1,9]<stdout>:             D_SIGM_EPSI=2000.0,
[1,9]<stdout>:                SY=200.0,
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        mater = AFFE_MATERIAU(
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                MATER=steel,
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,9]<stdout>:        block = AFFE_CHAR_CINE(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            MECA_IMPO=(
[1,9]<stdout>:                _F(
[1,9]<stdout>:                    GROUP_MA="LEFT",
[1,9]<stdout>:                    DX=0,
[1,9]<stdout>:                    DY=0.0,
[1,9]<stdout>:                    DZ=0.0,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            MECA_IMPO=(
[1,9]<stdout>:                _F(
[1,9]<stdout>:                    GROUP_MA="RIGHT",
[1,9]<stdout>:                    DY=0.001,
[1,9]<stdout>:                    DZ=0.001,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,9]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            OPTION="RIGI_MECA",
[1,9]<stdout>:            CHAM_MATER=mater,
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Numbering"):
[1,9]<stdout>:        dofNum = NUME_DDL(
[1,9]<stdout>:            MATR_RIGI=stiff_elem,
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Assembly"):
[1,9]<stdout>:        stiffness = ASSE_MATRICE(
[1,9]<stdout>:            MATR_ELEM=stiff_elem,
[1,9]<stdout>:            NUME_DDL=dofNum,
[1,9]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,9]<stdout>:        rhs = CREA_CHAMP(
[1,9]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,9]<stdout>:            OPERATION="AFFE",
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                NOM_CMP=(
[1,9]<stdout>:                    "DX",
[1,9]<stdout>:                    "DY",
[1,9]<stdout>:                    "DZ",
[1,9]<stdout>:                ),
[1,9]<stdout>:                VALE=(
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,9]<stdout>:
[1,9]<stdout>:    if params["solver"] == "PETSC":
[1,9]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,9]<stdout>:    elif params["solver"] == "MUMPS":
[1,9]<stdout>:        solver = CA.MumpsSolver(
[1,9]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,9]<stdout>:            RENUM="PARMETIS",
[1,9]<stdout>:            ACCELERATION="FR+",
[1,9]<stdout>:            POSTTRAITEMENTS="MINI",
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Factorize"):
[1,9]<stdout>:        solver.factorize(stiffness)
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Solve"):
[1,9]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,9]<stdout>:
[1,9]<stdout>:# write_stats(dofNum)
[1,9]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,9]<stdout>:if params["parallel"] == "HPC":
[1,9]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,9]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,9]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,9]<stdout>:
[1,9]<stdout>:CA.close()
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Command line #1:
[1,9]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Execution of code_aster
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.10
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Command file #1 / 1
[1,10]<stdout>:
[1,10]<stdout>:Content of the file to execute:
[1,10]<stdout>:# coding=utf-8
[1,10]<stdout>:#!/usr/bin/python
[1,10]<stdout>:
[1,10]<stdout>:import os
[1,10]<stdout>:from statistics import mean
[1,10]<stdout>:from datetime import datetime
[1,10]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,10]<stdout>:
[1,10]<stdout>:from code_aster.Commands import *
[1,10]<stdout>:from code_aster import CA
[1,10]<stdout>:from code_aster.Utilities import petscInitialize
[1,10]<stdout>:
[1,10]<stdout>:CA.init()
[1,10]<stdout>:
[1,10]<stdout>:params = {}
[1,10]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,10]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,10]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,10]<stdout>:
[1,10]<stdout>:# General parameters
[1,10]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,10]<stdout>:rank = comm.Get_rank()
[1,10]<stdout>:size = comm.Get_size()
[1,10]<stdout>:
[1,10]<stdout>:nbHexa = 8 ** params["refinements"]
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def memory_peak(mess=None):
[1,10]<stdout>:    """Return memory peak in MB"""
[1,10]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:class ChronoCtxMgGen:
[1,10]<stdout>:    stats = {}
[1,10]<stdout>:
[1,10]<stdout>:    def __init__(self, what):
[1,10]<stdout>:        self._what = what
[1,10]<stdout>:
[1,10]<stdout>:    def __enter__(self):
[1,10]<stdout>:        self.start = datetime.now()
[1,10]<stdout>:
[1,10]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,10]<stdout>:        self.stop = datetime.now()
[1,10]<stdout>:        delta = self.stop - self.start
[1,10]<stdout>:        mem = memory_peak(self._what)
[1,10]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,10]<stdout>:    pass
[1,10]<stdout>:    # def __init__(self, what):
[1,10]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def write_stats(nume_ddl):
[1,10]<stdout>:    if rank == 0:
[1,10]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,10]<stdout>:        print()
[1,10]<stdout>:        print("NB PROC")
[1,10]<stdout>:        print(size)
[1,10]<stdout>:        print()
[1,10]<stdout>:        print(
[1,10]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    for key, values in stats.items():
[1,10]<stdout>:        time = comm.gather(values[0], root=0)
[1,10]<stdout>:        mem = comm.gather(values[1], root=0)
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            print(
[1,10]<stdout>:                key
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(min(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(max(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(mean(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(min(mem))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(max(mem))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(mean(mem))
[1,10]<stdout>:            )
[1,10]<stdout>:
[1,10]<stdout>:    mesh = nume_ddl.getMesh()
[1,10]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,10]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,10]<stdout>:
[1,10]<stdout>:    if rank == 0:
[1,10]<stdout>:        print()
[1,10]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,10]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,10]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,10]<stdout>:
[1,10]<stdout>:    def show(*args, **kwargs):
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            print(*args, **kwargs)
[1,10]<stdout>:
[1,10]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,10]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,10]<stdout>:    separ = "| :--------------- | ----------: |"
[1,10]<stdout>:    show(fmti.format("Refinement", refine))
[1,10]<stdout>:    show(separ)
[1,10]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,10]<stdout>:    for key, values in data.items():
[1,10]<stdout>:        times = comm.gather(values[0], root=0)
[1,10]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            show(fmtt.format(key, mean(times)))
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,10]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,10]<stdout>:
[1,10]<stdout>:with ChronoCtxMg("Total"):
[1,10]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,10]<stdout>:        if params["parallel"] == "HPC":
[1,10]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,10]<stdout>:        else:
[1,10]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Model"):
[1,10]<stdout>:        model = AFFE_MODELE(
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                PHENOMENE="MECANIQUE",
[1,10]<stdout>:                MODELISATION="3D",
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Material"):
[1,10]<stdout>:        steel = DEFI_MATERIAU(
[1,10]<stdout>:            ELAS=_F(
[1,10]<stdout>:                E=200000.0,
[1,10]<stdout>:                NU=0.3,
[1,10]<stdout>:            ),
[1,10]<stdout>:            ECRO_LINE=_F(
[1,10]<stdout>:   [1,10]<stdout>:             D_SIGM_EPSI=2000.0,
[1,10]<stdout>:                SY=200.0,
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        mater = AFFE_MATERIAU(
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                MATER=steel,
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,10]<stdout>:        block = AFFE_CHAR_CINE(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            MECA_IMPO=(
[1,10]<stdout>:                _F(
[1,10]<stdout>:                    GROUP_MA="LEFT",
[1,10]<stdout>:                    DX=0,
[1,10]<stdout>:                    DY=0.0,
[1,10]<stdout>:                    DZ=0.0,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            MECA_IMPO=(
[1,10]<stdout>:                _F(
[1,10]<stdout>:                    GROUP_MA="RIGHT",
[1,10]<stdout>:                    DY=0.001,
[1,10]<stdout>:                    DZ=0.001,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,10]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            OPTION="RIGI_MECA",
[1,10]<stdout>:            CHAM_MATER=mater,
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Numbering"):
[1,10]<stdout>:        dofNum = NUME_DDL(
[1,10]<stdout>:            MATR_RIGI=stiff_elem,
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Assembly"):
[1,10]<stdout>:        stiffness = ASSE_MATRICE(
[1,10]<stdout>:            MATR_ELEM=stiff_elem,
[1,10]<stdout>:            NUME_DDL=dofNum,
[1,10]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,10]<stdout>:        rhs = CREA_CHAMP(
[1,10]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,10]<stdout>:            OPERATION="AFFE",
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                NOM_CMP=(
[1,10]<stdout>:                    "DX",
[1,10]<stdout>:                    "DY",
[1,10]<stdout>:                    "DZ",
[1,10]<stdout>:                ),
[1,10]<stdout>:                VALE=(
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,10]<stdout>:
[1,10]<stdout>:    if params["solver"] == "PETSC":
[1,10]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,10]<stdout>:    elif params["solver"] == "MUMPS":
[1,10]<stdout>:        solver = CA.MumpsSolver(
[1,10]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,10]<stdout>:            RENUM="PARMETIS",
[1,10]<stdout>:            ACCELERATION="FR+",
[1,10]<stdout>:            POSTTRAITEMENTS="MINI",
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Factorize"):
[1,10]<stdout>:        solver.factorize(stiffness)
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Solve"):
[1,10]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,10]<stdout>:
[1,10]<stdout>:# write_stats(dofNum)
[1,10]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,10]<stdout>:if params["parallel"] == "HPC":
[1,10]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,10]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,10]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,10]<stdout>:
[1,10]<stdout>:CA.close()
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Command line #1:
[1,10]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Execution of code_aster
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.11
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Command file #1 / 1
[1,11]<stdout>:
[1,11]<stdout>:Content of the file to execute:
[1,11]<stdout>:# coding=utf-8
[1,11]<stdout>:#!/usr/bin/python
[1,11]<stdout>:
[1,11]<stdout>:import os
[1,11]<stdout>:from statistics import mean
[1,11]<stdout>:from datetime import datetime
[1,11]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,11]<stdout>:
[1,11]<stdout>:from code_aster.Commands import *
[1,11]<stdout>:from code_aster import CA
[1,11]<stdout>:from code_aster.Utilities import petscInitialize
[1,11]<stdout>:
[1,11]<stdout>:CA.init()
[1,11]<stdout>:
[1,11]<stdout>:params = {}
[1,11]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,11]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,11]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,11]<stdout>:
[1,11]<stdout>:# General parameters
[1,11]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,11]<stdout>:rank = comm.Get_rank()
[1,11]<stdout>:size = comm.Get_size()
[1,11]<stdout>:
[1,11]<stdout>:nbHexa = 8 ** params["refinements"]
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def memory_peak(mess=None):
[1,11]<stdout>:    """Return memory peak in MB"""
[1,11]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:class ChronoCtxMgGen:
[1,11]<stdout>:    stats = {}
[1,11]<stdout>:
[1,11]<stdout>:    def __init__(self, what):
[1,11]<stdout>:        self._what = what
[1,11]<stdout>:
[1,11]<stdout>:    def __enter__(self):
[1,11]<stdout>:        self.start = datetime.now()
[1,11]<stdout>:
[1,11]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,11]<stdout>:        self.stop = datetime.now()
[1,11]<stdout>:        delta = self.stop - self.start
[1,11]<stdout>:        mem = memory_peak(self._what)
[1,11]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,11]<stdout>:    pass
[1,11]<stdout>:    # def __init__(self, what):
[1,11]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def write_stats(nume_ddl):
[1,11]<stdout>:    if rank == 0:
[1,11]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,11]<stdout>:        print()
[1,11]<stdout>:        print("NB PROC")
[1,11]<stdout>:        print(size)
[1,11]<stdout>:        print()
[1,11]<stdout>:        print(
[1,11]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    for key, values in stats.items():
[1,11]<stdout>:        time = comm.gather(values[0], root=0)
[1,11]<stdout>:        mem = comm.gather(values[1], root=0)
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            print(
[1,11]<stdout>:                key
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(min(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(max(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(mean(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(min(mem))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(max(mem))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(m[1,11]<stdout>:ean(mem))
[1,11]<stdout>:            )
[1,11]<stdout>:
[1,11]<stdout>:    mesh = nume_ddl.getMesh()
[1,11]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,11]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,11]<stdout>:
[1,11]<stdout>:    if rank == 0:
[1,11]<stdout>:        print()
[1,11]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,11]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,11]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,11]<stdout>:
[1,11]<stdout>:    def show(*args, **kwargs):
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            print(*args, **kwargs)
[1,11]<stdout>:
[1,11]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,11]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,11]<stdout>:    separ = "| :--------------- | ----------: |"
[1,11]<stdout>:    show(fmti.format("Refinement", refine))
[1,11]<stdout>:    show(separ)
[1,11]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,11]<stdout>:    for key, values in data.items():
[1,11]<stdout>:        times = comm.gather(values[0], root=0)
[1,11]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            show(fmtt.format(key, mean(times)))
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,11]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,11]<stdout>:
[1,11]<stdout>:with ChronoCtxMg("Total"):
[1,11]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,11]<stdout>:        if params["parallel"] == "HPC":
[1,11]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,11]<stdout>:        else:
[1,11]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Model"):
[1,11]<stdout>:        model = AFFE_MODELE(
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                PHENOMENE="MECANIQUE",
[1,11]<stdout>:                MODELISATION="3D",
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Material"):
[1,11]<stdout>:        steel = DEFI_MATERIAU(
[1,11]<stdout>:            ELAS=_F(
[1,11]<stdout>:                E=200000.0,
[1,11]<stdout>:                NU=0.3,
[1,11]<stdout>:            ),
[1,11]<stdout>:            ECRO_LINE=_F(
[1,11]<stdout>:                D_SIGM_EPSI=2000.0,
[1,11]<stdout>:                SY=200.0,
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        mater = AFFE_MATERIAU(
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                MATER=steel,
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,11]<stdout>:        block = AFFE_CHAR_CINE(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            MECA_IMPO=(
[1,11]<stdout>:                _F(
[1,11]<stdout>:                    GROUP_MA="LEFT",
[1,11]<stdout>:                    DX=0,
[1,11]<stdout>:                    DY=0.0,
[1,11]<stdout>:                    DZ=0.0,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            MECA_IMPO=(
[1,11]<stdout>:                _F(
[1,11]<stdout>:                    GROUP_MA="RIGHT",
[1,11]<stdout>:                    DY=0.001,
[1,11]<stdout>:                    DZ=0.001,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,11]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            OPTION="RIGI_MECA",
[1,11]<stdout>:            CHAM_MATER=mater,
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Numbering"):
[1,11]<stdout>:        dofNum = NUME_DDL(
[1,11]<stdout>:            MATR_RIGI=stiff_elem,
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Assembly"):
[1,11]<stdout>:        stiffness = ASSE_MATRICE(
[1,11]<stdout>:            MATR_ELEM=stiff_elem,
[1,11]<stdout>:            NUME_DDL=dofNum,
[1,11]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,11]<stdout>:        rhs = CREA_CHAMP(
[1,11]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,11]<stdout>:            OPERATION="AFFE",
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                NOM_CMP=(
[1,11]<stdout>:                    "DX",
[1,11]<stdout>:                    "DY",
[1,11]<stdout>:                    "DZ",
[1,11]<stdout>:                ),
[1,11]<stdout>:                VALE=(
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,11]<stdout>:
[1,11]<stdout>:    if params["solver"] == "PETSC":
[1,11]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,11]<stdout>:    elif params["solver"] == "MUMPS":
[1,11]<stdout>:        solver = CA.MumpsSolver(
[1,11]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,11]<stdout>:    [1,11]<stdout>:        RENUM="PARMETIS",
[1,11]<stdout>:            ACCELERATION="FR+",
[1,11]<stdout>:            POSTTRAITEMENTS="MINI",
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Factorize"):
[1,11]<stdout>:        solver.factorize(stiffness)
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Solve"):
[1,11]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,11]<stdout>:
[1,11]<stdout>:# write_stats(dofNum)
[1,11]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,11]<stdout>:if params["parallel"] == "HPC":
[1,11]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,11]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,11]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,11]<stdout>:
[1,11]<stdout>:CA.close()
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Command line #1:
[1,11]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Execution of code_aster
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.12
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Command file #1 / 1
[1,12]<stdout>:
[1,12]<stdout>:Content of the file to execute:
[1,12]<stdout>:# coding=utf-8
[1,12]<stdout>:#!/usr/bin/python
[1,12]<stdout>:
[1,12]<stdout>:import os
[1,12]<stdout>:from statistics import mean
[1,12]<stdout>:from datetime import datetime
[1,12]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,12]<stdout>:
[1,12]<stdout>:from code_aster.Commands import *
[1,12]<stdout>:from code_aster import CA
[1,12]<stdout>:from code_aster.Utilities import petscInitialize
[1,12]<stdout>:
[1,12]<stdout>:CA.init()
[1,12]<stdout>:
[1,12]<stdout>:params = {}
[1,12]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,12]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,12]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,12]<stdout>:
[1,12]<stdout>:# General parameters
[1,12]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,12]<stdout>:rank = comm.Get_rank()
[1,12]<stdout>:size = comm.Get_size()
[1,12]<stdout>:
[1,12]<stdout>:nbHexa = 8 ** params["refinements"]
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def memory_peak(mess=None):
[1,12]<stdout>:    """Return memory peak in MB"""
[1,12]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:class ChronoCtxMgGen:
[1,12]<stdout>:    stats = {}
[1,12]<stdout>:
[1,12]<stdout>:    def __init__(self, what):
[1,12]<stdout>:        self._what = what
[1,12]<stdout>:
[1,12]<stdout>:    def __enter__(self):
[1,12]<stdout>:        self.start = datetime.now()
[1,12]<stdout>:
[1,12]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,12]<stdout>:        self.stop = datetime.now()
[1,12]<stdout>:        delta = self.stop - self.start
[1,12]<stdout>:        mem = memory_peak(self._what)
[1,12]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,12]<stdout>:    pass
[1,12]<stdout>:    # def __init__(self, what):
[1,12]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def write_stats(nume_ddl):
[1,12]<stdout>:    if rank == 0:
[1,12]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,12]<stdout>:        print()
[1,12]<stdout>:        print("NB PROC")
[1,12]<stdout>:        print(size)
[1,12]<stdout>:        print()
[1,12]<stdout>:        print(
[1,12]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    for key, values in stats.items():
[1,12]<stdout>:        time = comm.gather(values[0], root=0)
[1,12]<stdout>:        mem = comm.gather(values[1], root=0)
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            print(
[1,12]<stdout>:                key
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(min(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(max(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(mean(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(min(mem))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(max(mem))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(mean(mem))
[1,12]<stdout>:            )
[1,12]<stdout>:
[1,12]<stdout>:    mesh = nume_ddl.getMesh()
[1,12]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,12]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,12]<stdout>:
[1,12]<stdout>:    if rank == 0:
[1,12]<stdout>:        print()
[1,12]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,12]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,12]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,12]<stdout>:
[1,12]<stdout>:    def show(*args, **kwargs):
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            print(*args, **kwargs)
[1,12]<stdout>:
[1,12]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,12]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,12]<stdout>:    separ = "| :--------------- | ----------: |"
[1,12]<stdout>:    show(fmti.format("Refinement", refine))
[1,12]<stdout>:    show(separ)
[1,12]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,12]<stdout>:    for key, values in data.items():
[1,12]<stdout>:        times = comm.gather(values[0], root=0)
[1,12]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            show(fmtt.format(key, mean(times)))
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,12]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,12]<stdout>:
[1,12]<stdout>:with ChronoCtxMg("Total"):
[1,12]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,12]<stdout>:        if params["parallel"] == "HPC":
[1,12]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,12]<stdout>:        else:
[1,12]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Model"):
[1,12]<stdout>:        model = AFFE_MODELE(
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                PHENOMENE="MECANIQUE",
[1,12]<stdout>:                MODELISATION="3D",
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Material"):
[1,12]<stdout>:        steel = DEFI_MATERIAU(
[1,12]<stdout>:            ELAS=_F(
[1,12]<stdout>:                E=200000.0,
[1,12]<stdout>:                NU=0.3,
[1,12]<stdout>:            ),
[1,12]<stdout>:            ECRO_LINE=_F(
[1,12]<stdout>:   [1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Execution of code_aster
[1,12]<stdout>:             D_SIGM_EPSI=2000.0,
[1,12]<stdout>:                SY=200.0,
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        mater = AFFE_MATERIAU(
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                MATER=steel,
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,12]<stdout>:        block = AFFE_CHAR_CINE(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            MECA_IMPO=(
[1,12]<stdout>:                _F(
[1,12]<stdout>:                    GROUP_MA="LEFT",
[1,12]<stdout>:                    DX=0,
[1,12]<stdout>:                    DY=0.0,
[1,12]<stdout>:                    DZ=0.0,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            MECA_IMPO=(
[1,12]<stdout>:                _F(
[1,12]<stdout>:                    GROUP_MA="RIGHT",
[1,12]<stdout>:                    DY=0.001,
[1,12]<stdout>:                    DZ=0.001,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,12]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            OPTION="RIGI_MECA",
[1,12]<stdout>:            CHAM_MATER=mater,
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Numbering"):
[1,12]<stdout>:        dofNum = NUME_DDL(
[1,12]<stdout>:            MATR_RIGI=stiff_elem,
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Assembly"):
[1,12]<stdout>:        stiffness = ASSE_MATRICE(
[1,12]<stdout>:            MATR_ELEM=stiff_elem,
[1,12]<stdout>:            NUME_DDL=dofNum,
[1,12]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,12]<stdout>:        rhs = CREA_CHAMP(
[1,12]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,12]<stdout>:            OPERATION="AFFE",
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                NOM_CMP=(
[1,12]<stdout>:                    "DX",
[1,12]<stdout>:                    "DY",
[1,12]<stdout>:                    "DZ",
[1,12]<stdout>:                ),
[1,12]<stdout>:                VALE=(
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,12]<stdout>:
[1,12]<stdout>:    if params["solver"] == "PETSC":
[1,12]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,12]<stdout>:    elif params["solver"] == "MUMPS":
[1,12]<stdout>:        solver = CA.MumpsSolver(
[1,12]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,12]<stdout>:            RENUM="PARMETIS",
[1,12]<stdout>:            ACCELERATION="FR+",
[1,12]<stdout>:            POSTTRAITEMENTS="MINI",
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Factorize"):
[1,12]<stdout>:        solver.factorize(stiffness)
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Solve"):
[1,12]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,12]<stdout>:
[1,12]<stdout>:# write_stats(dofNum)
[1,12]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,12]<stdout>:if params["parallel"] == "HPC":
[1,12]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,12]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,12]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,12]<stdout>:
[1,12]<stdout>:CA.close()
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Command line #1:
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.13
[1,12]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Command file #1 / 1
[1,13]<stdout>:
[1,13]<stdout>:Content of the file to execute:
[1,13]<stdout>:# coding=utf-8
[1,13]<stdout>:#!/usr/bin/python
[1,13]<stdout>:
[1,13]<stdout>:import os
[1,13]<stdout>:from statistics import mean
[1,13]<stdout>:from datetime import datetime
[1,13]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,13]<stdout>:
[1,13]<stdout>:from code_aster.Commands import *
[1,13]<stdout>:from code_aster import CA
[1,13]<stdout>:from code_aster.Utilities import petscInitialize
[1,13]<stdout>:
[1,13]<stdout>:CA.init()
[1,13]<stdout>:
[1,13]<stdout>:params = {}
[1,13]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,13]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,13]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,13]<stdout>:
[1,13]<stdout>:# General parameters
[1,13]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,13]<stdout>:rank = comm.Get_rank()
[1,13]<stdout>:size = comm.Get_size()
[1,13]<stdout>:
[1,13]<stdout>:nbHexa = 8 ** params["refinements"]
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def memory_peak(mess=None):
[1,13]<stdout>:    """Return memory peak in MB"""
[1,13]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:class ChronoCtxMgGen:
[1,13]<stdout>:    stats = {}
[1,13]<stdout>:
[1,13]<stdout>:    def __init__(self, what):
[1,13]<stdout>:        self._what = what
[1,13]<stdout>:
[1,13]<stdout>:    def __enter__(self):
[1,13]<stdout>:        self.start = datetime.now()
[1,13]<stdout>:
[1,13]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,13]<stdout>:        self.stop = datetime.now()
[1,13]<stdout>:        delta = self.stop - self.start
[1,13]<stdout>:        mem = memory_peak(self._what)
[1,13]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,13]<stdout>:    pass
[1,13]<stdout>:    # def __init__(self, what):
[1,13]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def write_stats(nume_ddl):
[1,13]<stdout>:    if rank == 0:
[1,13]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,13]<stdout>:        print()
[1,13]<stdout>:        print("NB PROC")
[1,13]<stdout>:        print(size)
[1,13]<stdout>:        print()
[1,13]<stdout>:        print(
[1,13]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    for key, values in stats.items():
[1,13]<stdout>:        time = comm.gather(values[0], root=0)
[1,13]<stdout>:        mem = comm.gather(values[1], root=0)
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            print(
[1,13]<stdout>:                key
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(min(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(max(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(mean(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(min(mem))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(max(mem))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(mean(mem))
[1,13]<stdout>:            )
[1,13]<stdout>:
[1,13]<stdout>:    mesh = nume_ddl.getMesh()
[1,13]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,13]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,13]<stdout>:
[1,13]<stdout>:    if rank == 0:
[1,13]<stdout>:        print()
[1,13]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,13]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,13]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,13]<stdout>:
[1,13]<stdout>:    def show(*args, **kwargs):
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            print(*args, **kwargs)
[1,13]<stdout>:
[1,13]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,13]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,13]<stdout>:    separ = "| :--------------- | ----------: |"
[1,13]<stdout>:    show(fmti.format("Refinement", refine))
[1,13]<stdout>:    show(separ)
[1,13]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,13]<stdout>:    for key, values in data.items():
[1,13]<stdout>:        times = comm.gather(values[0], root=0)
[1,13]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            show(fmtt.format(key, mean(times)))
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,13]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,13]<stdout>:
[1,13]<stdout>:with ChronoCtxMg("Total"):
[1,13]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,13]<stdout>:        if params["parallel"] == "HPC":
[1,13]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,13]<stdout>:        else:
[1,13]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Model"):
[1,13]<stdout>:        model = AFFE_MODELE(
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                PHENOMENE="MECANIQUE",
[1,13]<stdout>:                MODELISATION="3D",
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Material"):
[1,13]<stdout>:        steel = DEFI_MATERIAU(
[1,13]<stdout>:            ELAS=_F(
[1,13]<stdout>:                E=200000.0,
[1,13]<stdout>:                NU=0.3,
[1,13]<stdout>:            ),
[1,13]<stdout>:            ECRO_LINE=_F(
[1,13]<stdout>:   [1,13]<stdout>:             D_SIGM_EPSI=2000.0,
[1,13]<stdout>:                SY=200.0,
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        mater = AFFE_MATERIAU(
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                MATER=steel,
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,13]<stdout>:        block = AFFE_CHAR_CINE(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            MECA_IMPO=(
[1,13]<stdout>:                _F(
[1,13]<stdout>:                    GROUP_MA="LEFT",
[1,13]<stdout>:                    DX=0,
[1,13]<stdout>:                    DY=0.0,
[1,13]<stdout>:                    DZ=0.0,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            MECA_IMPO=(
[1,13]<stdout>:                _F(
[1,13]<stdout>:                    GROUP_MA="RIGHT",
[1,13]<stdout>:                    DY=0.001,
[1,13]<stdout>:                    DZ=0.001,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,13]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            OPTION="RIGI_MECA",
[1,13]<stdout>:            CHAM_MATER=mater,
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Numbering"):
[1,13]<stdout>:        dofNum = NUME_DDL(
[1,13]<stdout>:            MATR_RIGI=stiff_elem,
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Assembly"):
[1,13]<stdout>:        stiffness = ASSE_MATRICE(
[1,13]<stdout>:            MATR_ELEM=stiff_elem,
[1,13]<stdout>:            NUME_DDL=dofNum,
[1,13]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,13]<stdout>:        rhs = CREA_CHAMP(
[1,13]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,13]<stdout>:            OPERATION="AFFE",
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                NOM_CMP=(
[1,13]<stdout>:                    "DX",
[1,13]<stdout>:                    "DY",
[1,13]<stdout>:                    "DZ",
[1,13]<stdout>:                ),
[1,13]<stdout>:                VALE=(
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,13]<stdout>:
[1,13]<stdout>:    if params["solver"] == "PETSC":
[1,13]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,13]<stdout>:    elif params["solver"] == "MUMPS":
[1,13]<stdout>:        solver = CA.MumpsSolver(
[1,13]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,13]<stdout>:            RENUM="PARMETIS",
[1,13]<stdout>:            ACCELERATION="FR+",
[1,13]<stdout>:            POSTTRAITEMENTS="MINI",
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Factorize"):
[1,13]<stdout>:        solver.factorize(stiffness)
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Solve"):
[1,13]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,13]<stdout>:
[1,13]<stdout>:# write_stats(dofNum)
[1,13]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,13]<stdout>:if params["parallel"] == "HPC":
[1,13]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,13]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,13]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,13]<stdout>:
[1,13]<stdout>:CA.close()
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Command line #1:
[1,13]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Execution of code_aster
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.14
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Command file #1 / 1
[1,14]<stdout>:
[1,14]<stdout>:Content of the file to execute:
[1,14]<stdout>:# coding=utf-8
[1,14]<stdout>:#!/usr/bin/python
[1,14]<stdout>:
[1,14]<stdout>:import os
[1,14]<stdout>:from statistics import mean
[1,14]<stdout>:from datetime import datetime
[1,14]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,14]<stdout>:
[1,14]<stdout>:from code_aster.Commands import *
[1,14]<stdout>:from code_aster import CA
[1,14]<stdout>:from code_aster.Utilities import petscInitialize
[1,14]<stdout>:
[1,14]<stdout>:CA.init()
[1,14]<stdout>:
[1,14]<stdout>:params = {}
[1,14]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,14]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,14]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,14]<stdout>:
[1,14]<stdout>:# General parameters
[1,14]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,14]<stdout>:rank = comm.Get_rank()
[1,14]<stdout>:size = comm.Get_size()
[1,14]<stdout>:
[1,14]<stdout>:nbHexa = 8 ** params["refinements"]
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def memory_peak(mess=None):
[1,14]<stdout>:    """Return memory peak in MB"""
[1,14]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:class ChronoCtxMgGen:
[1,14]<stdout>:    stats = {}
[1,14]<stdout>:
[1,14]<stdout>:    def __init__(self, what):
[1,14]<stdout>:        self._what = what
[1,14]<stdout>:
[1,14]<stdout>:    def __enter__(self):
[1,14]<stdout>:        self.start = datetime.now()
[1,14]<stdout>:
[1,14]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,14]<stdout>:        self.stop = datetime.now()
[1,14]<stdout>:        delta = self.stop - self.start
[1,14]<stdout>:        mem = memory_peak(self._what)
[1,14]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,14]<stdout>:    pass
[1,14]<stdout>:    # def __init__(self, what):
[1,14]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def write_stats(nume_ddl):
[1,14]<stdout>:    if rank == 0:
[1,14]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,14]<stdout>:        print()
[1,14]<stdout>:        print("NB PROC")
[1,14]<stdout>:        print(size)
[1,14]<stdout>:        print()
[1,14]<stdout>:        print(
[1,14]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    for key, values in stats.items():
[1,14]<stdout>:        time = comm.gather(values[0], root=0)
[1,14]<stdout>:        mem = comm.gather(values[1], root=0)
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            print(
[1,14]<stdout>:                key
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(min(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(max(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(mean(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(min(mem))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(max(mem))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(m[1,14]<stdout>:ean(mem))
[1,14]<stdout>:            )
[1,14]<stdout>:
[1,14]<stdout>:    mesh = nume_ddl.getMesh()
[1,14]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,14]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,14]<stdout>:
[1,14]<stdout>:    if rank == 0:
[1,14]<stdout>:        print()
[1,14]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,14]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,14]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,14]<stdout>:
[1,14]<stdout>:    def show(*args, **kwargs):
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            print(*args, **kwargs)
[1,14]<stdout>:
[1,14]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,14]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,14]<stdout>:    separ = "| :--------------- | ----------: |"
[1,14]<stdout>:    show(fmti.format("Refinement", refine))
[1,14]<stdout>:    show(separ)
[1,14]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,14]<stdout>:    for key, values in data.items():
[1,14]<stdout>:        times = comm.gather(values[0], root=0)
[1,14]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            show(fmtt.format(key, mean(times)))
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,14]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,14]<stdout>:
[1,14]<stdout>:with ChronoCtxMg("Total"):
[1,14]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,14]<stdout>:        if params["parallel"] == "HPC":
[1,14]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,14]<stdout>:        else:
[1,14]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Model"):
[1,14]<stdout>:        model = AFFE_MODELE(
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                PHENOMENE="MECANIQUE",
[1,14]<stdout>:                MODELISATION="3D",
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Material"):
[1,14]<stdout>:        steel = DEFI_MATERIAU(
[1,14]<stdout>:            ELAS=_F(
[1,14]<stdout>:                E=200000.0,
[1,14]<stdout>:                NU=0.3,
[1,14]<stdout>:            ),
[1,14]<stdout>:            ECRO_LINE=_F(
[1,14]<stdout>:                D_SIGM_EPSI=2000.0,
[1,14]<stdout>:                SY=200.0,
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        mater = AFFE_MATERIAU(
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                MATER=steel,
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,14]<stdout>:        block = AFFE_CHAR_CINE(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            MECA_IMPO=(
[1,14]<stdout>:                _F(
[1,14]<stdout>:                    GROUP_MA="LEFT",
[1,14]<stdout>:                    DX=0,
[1,14]<stdout>:                    DY=0.0,
[1,14]<stdout>:                    DZ=0.0,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            MECA_IMPO=(
[1,14]<stdout>:                _F(
[1,14]<stdout>:                    GROUP_MA="RIGHT",
[1,14]<stdout>:                    DY=0.001,
[1,14]<stdout>:                    DZ=0.001,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,14]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            OPTION="RIGI_MECA",
[1,14]<stdout>:            CHAM_MATER=mater,
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Numbering"):
[1,14]<stdout>:        dofNum = NUME_DDL(
[1,14]<stdout>:            MATR_RIGI=stiff_elem,
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Assembly"):
[1,14]<stdout>:        stiffness = ASSE_MATRICE(
[1,14]<stdout>:            MATR_ELEM=stiff_elem,
[1,14]<stdout>:            NUME_DDL=dofNum,
[1,14]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,14]<stdout>:        rhs = CREA_CHAMP(
[1,14]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,14]<stdout>:            OPERATION="AFFE",
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                NOM_CMP=(
[1,14]<stdout>:                    "DX",
[1,14]<stdout>:                    "DY",
[1,14]<stdout>:                    "DZ",
[1,14]<stdout>:                ),
[1,14]<stdout>:                VALE=(
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,14]<stdout>:
[1,14]<stdout>:    if params["solver"] == "PETSC":
[1,14]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,14]<stdout>:    elif params["solver"] == "MUMPS":
[1,14]<stdout>:        solver = CA.MumpsSolver(
[1,14]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,14]<stdout>:   [1,14]<stdout>:         RENUM="PARMETIS",
[1,14]<stdout>:            ACCELERATION="FR+",
[1,14]<stdout>:            POSTTRAITEMENTS="MINI",
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Factorize"):
[1,14]<stdout>:        solver.factorize(stiffness)
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Solve"):
[1,14]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,14]<stdout>:
[1,14]<stdout>:# write_stats(dofNum)
[1,14]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,14]<stdout>:if params["parallel"] == "HPC":
[1,14]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,14]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,14]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,14]<stdout>:
[1,14]<stdout>:CA.close()
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Command line #1:
[1,14]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Execution of code_aster
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Prepare environment in /tmp/run_aster_y0hxnhf2/proc.15
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Command file #1 / 1
[1,15]<stdout>:
[1,15]<stdout>:Content of the file to execute:
[1,15]<stdout>:# coding=utf-8
[1,15]<stdout>:#!/usr/bin/python
[1,15]<stdout>:
[1,15]<stdout>:import os
[1,15]<stdout>:from statistics import mean
[1,15]<stdout>:from datetime import datetime
[1,15]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,15]<stdout>:
[1,15]<stdout>:from code_aster.Commands import *
[1,15]<stdout>:from code_aster import CA
[1,15]<stdout>:from code_aster.Utilities import petscInitialize
[1,15]<stdout>:
[1,15]<stdout>:CA.init()
[1,15]<stdout>:
[1,15]<stdout>:params = {}
[1,15]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,15]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,15]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,15]<stdout>:
[1,15]<stdout>:# General parameters
[1,15]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,15]<stdout>:rank = comm.Get_rank()
[1,15]<stdout>:size = comm.Get_size()
[1,15]<stdout>:
[1,15]<stdout>:nbHexa = 8 ** params["refinements"]
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def memory_peak(mess=None):
[1,15]<stdout>:    """Return memory peak in MB"""
[1,15]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:class ChronoCtxMgGen:
[1,15]<stdout>:    stats = {}
[1,15]<stdout>:
[1,15]<stdout>:    def __init__(self, what):
[1,15]<stdout>:        self._what = what
[1,15]<stdout>:
[1,15]<stdout>:    def __enter__(self):
[1,15]<stdout>:        self.start = datetime.now()
[1,15]<stdout>:
[1,15]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,15]<stdout>:        self.stop = datetime.now()
[1,15]<stdout>:        delta = self.stop - self.start
[1,15]<stdout>:        mem = memory_peak(self._what)
[1,15]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,15]<stdout>:    pass
[1,15]<stdout>:    # def __init__(self, what):
[1,15]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def write_stats(nume_ddl):
[1,15]<stdout>:    if rank == 0:
[1,15]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,15]<stdout>:        print()
[1,15]<stdout>:        print("NB PROC")
[1,15]<stdout>:        print(size)
[1,15]<stdout>:        print()
[1,15]<stdout>:        print(
[1,15]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    for key, values in stats.items():
[1,15]<stdout>:        time = comm.gather(values[0], root=0)
[1,15]<stdout>:        mem = comm.gather(values[1], root=0)
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            print(
[1,15]<stdout>:                key
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(min(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(max(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(mean(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(min(mem))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(max(mem))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(mean(mem))
[1,15]<stdout>:            )
[1,15]<stdout>:
[1,15]<stdout>:    mesh = nume_ddl.getMesh()
[1,15]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,15]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,15]<stdout>:
[1,15]<stdout>:    if rank == 0:
[1,15]<stdout>:        print()
[1,15]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,15]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,15]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,15]<stdout>:
[1,15]<stdout>:    def show(*args, **kwargs):
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            print(*args, **kwargs)
[1,15]<stdout>:
[1,15]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,15]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,15]<stdout>:    separ = "| :--------------- | ----------: |"
[1,15]<stdout>:    show(fmti.format("Refinement", refine))
[1,15]<stdout>:    show(separ)
[1,15]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,15]<stdout>:    for key, values in data.items():
[1,15]<stdout>:        times = comm.gather(values[0], root=0)
[1,15]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            show(fmtt.format(key, mean(times)))
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,15]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,15]<stdout>:
[1,15]<stdout>:with ChronoCtxMg("Total"):
[1,15]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,15]<stdout>:        if params["parallel"] == "HPC":
[1,15]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,15]<stdout>:        else:
[1,15]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Model"):
[1,15]<stdout>:        model = AFFE_MODELE(
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                PHENOMENE="MECANIQUE",
[1,15]<stdout>:                MODELISATION="3D",
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Material"):
[1,15]<stdout>:        steel = DEFI_MATERIAU(
[1,15]<stdout>:            ELAS=_F(
[1,15]<stdout>:                E=200000.0,
[1,15]<stdout>:                NU=0.3,
[1,15]<stdout>:            ),
[1,15]<stdout>:            ECRO_LINE=_F(
[1,15]<stdout>:   [1,15]<stdout>:             D_SIGM_EPSI=2000.0,
[1,15]<stdout>:                SY=200.0,
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        mater = AFFE_MATERIAU(
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                MATER=steel,
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,15]<stdout>:        block = AFFE_CHAR_CINE(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            MECA_IMPO=(
[1,15]<stdout>:                _F(
[1,15]<stdout>:                    GROUP_MA="LEFT",
[1,15]<stdout>:                    DX=0,
[1,15]<stdout>:                    DY=0.0,
[1,15]<stdout>:                    DZ=0.0,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            MECA_IMPO=(
[1,15]<stdout>:                _F(
[1,15]<stdout>:                    GROUP_MA="RIGHT",
[1,15]<stdout>:                    DY=0.001,
[1,15]<stdout>:                    DZ=0.001,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,15]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            OPTION="RIGI_MECA",
[1,15]<stdout>:            CHAM_MATER=mater,
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Numbering"):
[1,15]<stdout>:        dofNum = NUME_DDL(
[1,15]<stdout>:            MATR_RIGI=stiff_elem,
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Assembly"):
[1,15]<stdout>:        stiffness = ASSE_MATRICE(
[1,15]<stdout>:            MATR_ELEM=stiff_elem,
[1,15]<stdout>:            NUME_DDL=dofNum,
[1,15]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,15]<stdout>:        rhs = CREA_CHAMP(
[1,15]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,15]<stdout>:            OPERATION="AFFE",
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                NOM_CMP=(
[1,15]<stdout>:                    "DX",
[1,15]<stdout>:                    "DY",
[1,15]<stdout>:                    "DZ",
[1,15]<stdout>:                ),
[1,15]<stdout>:                VALE=(
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,15]<stdout>:
[1,15]<stdout>:    if params["solver"] == "PETSC":
[1,15]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,15]<stdout>:    elif params["solver"] == "MUMPS":
[1,15]<stdout>:        solver = CA.MumpsSolver(
[1,15]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,15]<stdout>:            RENUM="PARMETIS",
[1,15]<stdout>:            ACCELERATION="FR+",
[1,15]<stdout>:            POSTTRAITEMENTS="MINI",
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Factorize"):
[1,15]<stdout>:        solver.factorize(stiffness)
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Solve"):
[1,15]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,15]<stdout>:
[1,15]<stdout>:# write_stats(dofNum)
[1,15]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,15]<stdout>:if params["parallel"] == "HPC":
[1,15]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,15]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,15]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,15]<stdout>:
[1,15]<stdout>:CA.close()
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Command line #1:
[1,15]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,11]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,14]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,0]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,11]<stdout>:checking MPI initialization...
[1,11]<stdout>:using COMM_WORLD.
[1,11]<stdout>:MPI is initialized.
[1,11]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,11]<stdout>:
[1,11]<stdout>:<INFO> Démarrage de l'exécution.
[1,11]<stdout>:
[1,11]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,11]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,11]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,11]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,11]<stdout>:                                                                                                    
[1,11]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,11]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,11]<stdout>:                                        Architecture : 64bit                                        
[1,11]<stdout>:                                    Type de processeur : aarch64                                    
[1,11]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,11]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,11]<stdout>:                                     Version de Python : 3.11.2                                     
[1,11]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,11]<stdout>:                                      Parallélisme MPI : actif                                      
[1,11]<stdout>:                                  Rang du processeur courant : 11                                   
[1,11]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,14]<stdout>:checking MPI initialization...
[1,14]<stdout>:using COMM_WORLD.
[1,14]<stdout>:MPI is initialized.
[1,14]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,14]<stdout>:
[1,11]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,11]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,14]<stdout>:<INFO> Démarrage de l'exécution.
[1,14]<stdout>:
[1,14]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,14]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,14]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,6]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,0]<stdout>:checking MPI initialization...
[1,0]<stdout>:using COMM_WORLD.
[1,0]<stdout>:MPI is initialized.
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,11]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,14]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,14]<stdout>:                                                                                                    
[1,14]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,14]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,14]<stdout>:                                        Architecture : 64bit                                        
[1,14]<stdout>:                                    Type de processeur : aarch64                                    
[1,14]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,14]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,11]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:                                     Version de Python : 3.11.2                                     
[1,14]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,11]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,14]<stdout>:                                      Parallélisme MPI : actif                                      
[1,14]<stdout>:                                  Rang du processeur courant : 14                                   
[1,14]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,11]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,10]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,11]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,14]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,14]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,11]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,0]<stdout>:<INFO> Démarrage de l'exécution.
[1,0]<stdout>:
[1,0]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,11]<stdout>:
[1,5]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,0]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,0]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,11]<stdout>:starting the execution...
[1,0]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,0]<stdout>:                                                                                                    
[1,0]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,0]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,0]<stdout>:                                        Architecture : 64bit                                        
[1,0]<stdout>:                                    Type de processeur : aarch64                                    
[1,0]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,0]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,0]<stdout>:                                     Version de Python : 3.11.2                                     
[1,0]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,14]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                                      Parallélisme MPI : actif                                      
[1,0]<stdout>:                                   Rang du processeur courant : 0                                   
[1,0]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,14]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,0]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,0]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,14]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,14]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,14]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,14]<stdout>:
[1,14]<stdout>:starting the execution...
[1,3]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,0]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,12]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,11]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,11]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,11]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,11]<stdout>:
[1,0]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,13]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,0]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,9]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,0]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,0]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,7]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,6]<stdout>:checking MPI initialization...
[1,6]<stdout>:using COMM_WORLD.
[1,6]<stdout>:MPI is initialized.
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,8]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,4]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,0]<stdout>:
[1,0]<stdout>:starting the execution...
[1,15]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,6]<stdout>:<INFO> Démarrage de l'exécution.
[1,6]<stdout>:
[1,10]<stdout>:checking MPI initialization...
[1,10]<stdout>:using COMM_WORLD.
[1,10]<stdout>:MPI is initialized.
[1,10]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,10]<stdout>:
[1,6]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,14]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,14]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,14]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,14]<stdout>:
[1,6]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,6]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,2]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,1]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,6]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,6]<stdout>:                                                                                                    
[1,6]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,6]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,6]<stdout>:                                        Architecture : 64bit                                        
[1,6]<stdout>:                                    Type de processeur : aarch64                                    
[1,6]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,6]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,5]<stdout>:checking MPI initialization...
[1,5]<stdout>:using COMM_WORLD.
[1,5]<stdout>:MPI is initialized.
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,6]<stdout>:                                     Version de Python : 3.11.2                                     
[1,6]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,10]<stdout>:<INFO> Démarrage de l'exécution.
[1,10]<stdout>:
[1,6]<stdout>:                                      Parallélisme MPI : actif                                      
[1,6]<stdout>:                                   Rang du processeur courant : 6                                   
[1,6]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,6]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,6]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,10]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,10]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,10]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,10]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,10]<stdout>:                                                                                                    
[1,10]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,10]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,10]<stdout>:                                        Architecture : 64bit                                        
[1,10]<stdout>:                                    Type de processeur : aarch64                                    
[1,10]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,10]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,5]<stdout>:<INFO> Démarrage de l'exécution.
[1,5]<stdout>:
[1,10]<stdout>:                                     Version de Python : 3.11.2                                     
[1,10]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,0]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,0]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,0]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,0]<stdout>:
[1,5]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,10]<stdout>:                                      Parallélisme MPI : actif                                      
[1,10]<stdout>:                                  Rang du processeur courant : 10                                   
[1,10]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,5]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,5]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,10]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,10]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,6]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,5]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,5]<stdout>:                                                                                                    
[1,5]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,5]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,5]<stdout>:                                        Architecture : 64bit                                        
[1,5]<stdout>:                                    Type de processeur : aarch64                                    
[1,5]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,5]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,6]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,5]<stdout>:                                     Version de Python : 3.11.2                                     
[1,5]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,6]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,5]<stdout>:                                      Parallélisme MPI : actif                                      
[1,5]<stdout>:                                   Rang du processeur courant : 5                                   
[1,5]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,6]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,5]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,5]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,6]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,6]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,10]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,10]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,6]<stdout>:
[1,10]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,10]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,6]<stdout>:starting the execution...
[1,10]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,5]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,10]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,5]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,5]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,5]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,10]<stdout>:
[1,5]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,5]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,10]<stdout>:starting the execution...
[1,5]<stdout>:
[1,5]<stdout>:starting the execution...
[1,3]<stdout>:checking MPI initialization...
[1,3]<stdout>:using COMM_WORLD.
[1,3]<stdout>:MPI is initialized.
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,6]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,6]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,6]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,6]<stdout>:
[1,3]<stdout>:<INFO> Démarrage de l'exécution.
[1,3]<stdout>:
[1,12]<stdout>:checking MPI initialization...
[1,12]<stdout>:using COMM_WORLD.
[1,12]<stdout>:MPI is initialized.
[1,12]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,12]<stdout>:
[1,13]<stdout>:checking MPI initialization...
[1,13]<stdout>:using COMM_WORLD.
[1,13]<stdout>:MPI is initialized.
[1,13]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,13]<stdout>:
[1,10]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,10]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,10]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,10]<stdout>:
[1,3]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,3]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,3]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,9]<stdout>:checking MPI initialization...
[1,9]<stdout>:using COMM_WORLD.
[1,9]<stdout>:MPI is initialized.
[1,9]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,9]<stdout>:
[1,3]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,3]<stdout>:                                                                                                    
[1,3]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,3]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,3]<stdout>:                                        Architecture : 64bit                                        
[1,3]<stdout>:                                    Type de processeur : aarch64                                    
[1,3]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,3]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,5]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,5]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,5]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,5]<stdout>:
[1,7]<stdout>:checking MPI initialization...
[1,7]<stdout>:using COMM_WORLD.
[1,7]<stdout>:MPI is initialized.
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,3]<stdout>:                                     Version de Python : 3.11.2                                     
[1,3]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,8]<stdout>:checking MPI initialization...
[1,8]<stdout>:using COMM_WORLD.
[1,8]<stdout>:MPI is initialized.
[1,8]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,8]<stdout>:
[1,12]<stdout>:<INFO> Démarrage de l'exécution.
[1,12]<stdout>:
[1,3]<stdout>:                                      Parallélisme MPI : actif                                      
[1,3]<stdout>:                                   Rang du processeur courant : 3                                   
[1,3]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,13]<stdout>:<INFO> Démarrage de l'exécution.
[1,13]<stdout>:
[1,4]<stdout>:checking MPI initialization...
[1,4]<stdout>:using COMM_WORLD.
[1,4]<stdout>:MPI is initialized.
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,3]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,3]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,12]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,9]<stdout>:<INFO> Démarrage de l'exécution.
[1,9]<stdout>:
[1,13]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,15]<stdout>:checking MPI initialization...
[1,15]<stdout>:using COMM_WORLD.
[1,15]<stdout>:MPI is initialized.
[1,15]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,15]<stdout>:
[1,12]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,12]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,13]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,13]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,9]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,7]<stdout>:<INFO> Démarrage de l'exécution.
[1,7]<stdout>:
[1,1]<stdout>:checking MPI initialization...
[1,1]<stdout>:using COMM_WORLD.
[1,1]<stdout>:MPI is initialized.
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,12]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,12]<stdout>:                                                                                                    
[1,12]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,12]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,12]<stdout>:                                        Architecture : 64bit                                        
[1,12]<stdout>:                                    Type de processeur : aarch64                                    
[1,12]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,12]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,13]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,13]<stdout>:                                                                                                    
[1,13]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,13]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,13]<stdout>:                                        Architecture : 64bit                                        
[1,13]<stdout>:                                    Type de processeur : aarch64                                    
[1,13]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,13]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,2]<stdout>:checking MPI initialization...
[1,2]<stdout>:using COMM_WORLD.
[1,2]<stdout>:MPI is initialized.
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,8]<stdout>:<INFO> Démarrage de l'exécution.
[1,8]<stdout>:
[1,9]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,9]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,12]<stdout>:                                     Version de Python : 3.11.2                                     
[1,12]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,13]<stdout>:                                     Version de Python : 3.11.2                                     
[1,13]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,7]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,12]<stdout>:                                      Parallélisme MPI : actif                                      
[1,12]<stdout>:                                  Rang du processeur courant : 12                                   
[1,12]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,9]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,9]<stdout>:                                                                                                    
[1,9]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,9]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,9]<stdout>:                                        Architecture : 64bit                                        
[1,9]<stdout>:                                    Type de processeur : aarch64                                    
[1,9]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,9]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,4]<stdout>:<INFO> Démarrage de l'exécution.
[1,4]<stdout>:
[1,13]<stdout>:                                      Parallélisme MPI : actif                                      
[1,13]<stdout>:                                  Rang du processeur courant : 13                                   
[1,13]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,8]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,15]<stdout>:<INFO> Démarrage de l'exécution.
[1,15]<stdout>:
[1,7]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,7]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,9]<stdout>:                                     Version de Python : 3.11.2                                     
[1,9]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,12]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,12]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,13]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,13]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,8]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,8]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,4]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,9]<stdout>:                                      Parallélisme MPI : actif                                      
[1,9]<stdout>:                                   Rang du processeur courant : 9                                   
[1,9]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,3]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,7]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,7]<stdout>:                                                                                                    
[1,7]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,7]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,7]<stdout>:                                        Architecture : 64bit                                        
[1,7]<stdout>:                                    Type de processeur : aarch64                                    
[1,7]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,7]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,15]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,8]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,8]<stdout>:                                                                                                    
[1,8]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,8]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,8]<stdout>:                                        Architecture : 64bit                                        
[1,8]<stdout>:                                    Type de processeur : aarch64                                    
[1,8]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,8]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,3]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:                                     Version de Python : 3.11.2                                     
[1,7]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,9]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,9]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,4]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,4]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,1]<stdout>:<INFO> Démarrage de l'exécution.
[1,1]<stdout>:
[1,2]<stdout>:<INFO> Démarrage de l'exécution.
[1,2]<stdout>:
[1,8]<stdout>:                                     Version de Python : 3.11.2                                     
[1,8]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,3]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,15]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,15]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,7]<stdout>:                                      Parallélisme MPI : actif                                      
[1,7]<stdout>:                                   Rang du processeur courant : 7                                   
[1,7]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,4]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,4]<stdout>:                                                                                                    
[1,4]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,4]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,4]<stdout>:                                        Architecture : 64bit                                        
[1,4]<stdout>:                                    Type de processeur : aarch64                                    
[1,4]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,4]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,3]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,8]<stdout>:                                      Parallélisme MPI : actif                                      
[1,8]<stdout>:                                   Rang du processeur courant : 8                                   
[1,8]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,15]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,15]<stdout>:                                                                                                    
[1,15]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,15]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,15]<stdout>:                                        Architecture : 64bit                                        
[1,15]<stdout>:                                    Type de processeur : aarch64                                    
[1,15]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,15]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,7]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,7]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,1]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,3]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,4]<stdout>:                                     Version de Python : 3.11.2                                     
[1,4]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,8]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,8]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,15]<stdout>:                                     Version de Python : 3.11.2                                     
[1,15]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,3]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,1]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,1]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,4]<stdout>:                                      Parallélisme MPI : actif                                      
[1,4]<stdout>:                                   Rang du processeur courant : 4                                   
[1,4]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,2]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,2]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,15]<stdout>:                                      Parallélisme MPI : actif                                      
[1,15]<stdout>:                                  Rang du processeur courant : 15                                   
[1,15]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,4]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,4]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,2]<stdout>:                                                                                                    
[1,2]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,2]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,2]<stdout>:                                        Architecture : 64bit                                        
[1,2]<stdout>:                                    Type de processeur : aarch64                                    
[1,2]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,2]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,1]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,1]<stdout>:                                                                                                    
[1,1]<stdout>:                              Exécution du : Thu Jan 23 16:31:45 2025                               
[1,1]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,1]<stdout>:                                        Architecture : 64bit                                        
[1,1]<stdout>:                                    Type de processeur : aarch64                                    
[1,1]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,1]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,12]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,15]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,15]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,3]<stdout>:
[1,2]<stdout>:                                     Version de Python : 3.11.2                                     
[1,2]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,1]<stdout>:                                     Version de Python : 3.11.2                                     
[1,1]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,13]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,12]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,13]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,2]<stdout>:                                      Parallélisme MPI : actif                                      
[1,2]<stdout>:                                   Rang du processeur courant : 2                                   
[1,2]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,1]<stdout>:                                      Parallélisme MPI : actif                                      
[1,1]<stdout>:                                   Rang du processeur courant : 1                                   
[1,1]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,12]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,13]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,9]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,3]<stdout>:starting the execution...
[1,12]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,1]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,1]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,13]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,2]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,2]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,9]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,12]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,13]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,9]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,12]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,13]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,7]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,9]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,8]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,7]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,9]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,8]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,9]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,13]<stdout>:
[1,12]<stdout>:
[1,4]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,8]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,7]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,15]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,4]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,8]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,7]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,15]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,8]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,4]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,9]<stdout>:
[1,13]<stdout>:starting the execution...
[1,12]<stdout>:starting the execution...
[1,15]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,8]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,4]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,15]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,1]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,4]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,9]<stdout>:starting the execution...
[1,2]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,15]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,4]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,7]<stdout>:
[1,1]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,2]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,15]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,8]<stdout>:
[1,1]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,2]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,7]<stdout>:starting the execution...
[1,1]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,2]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,4]<stdout>:
[1,8]<stdout>:starting the execution...
[1,1]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,2]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,15]<stdout>:
[1,1]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,2]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,4]<stdout>:starting the execution...
[1,15]<stdout>:starting the execution...
[1,3]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,3]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,3]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,3]<stdout>:
[1,2]<stdout>:
[1,1]<stdout>:
[1,11]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,11]<stdout>:
[1,2]<stdout>:starting the execution...
[1,1]<stdout>:starting the execution...
[1,13]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,13]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,13]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,13]<stdout>:
[1,12]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,12]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,12]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,12]<stdout>:
[1,9]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,9]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,9]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,9]<stdout>:
[1,7]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,7]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,7]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,7]<stdout>:
[1,8]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,8]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,8]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,8]<stdout>:
[1,14]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,14]<stdout>:
[1,4]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,4]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,4]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,4]<stdout>:
[1,15]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,15]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,15]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,15]<stdout>:
[1,1]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,1]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,1]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,1]<stdout>:
[1,2]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,2]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,2]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,2]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,0]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,6]<stdout>:
[1,10]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,10]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,5]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,3]<stdout>:
[1,9]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,9]<stdout>:
[1,13]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,13]<stdout>:
[1,8]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,8]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,7]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,4]<stdout>:
[1,15]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,15]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,1]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,2]<stdout>:
[1,12]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,12]<stdout>:
[1,11]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,11]<stdout>:
[1,14]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,14]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,10]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,10]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,8]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,8]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,9]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,9]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,13]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,13]<stdout>:
[1,15]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,15]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,12]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,12]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,11]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,11]<stdout>:
[1,11]<stdout>:Nom de la base                          :  ELEMBASE
[1,11]<stdout>:     Créée avec la version                   :  17.02.04
[1,11]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,11]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,11]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,11]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,11]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,11]<stdout>:     Taille maximum du répertoire            :  300
[1,11]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,11]<stdout>:
[1,11]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,11]<stdout>:
[1,14]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,14]<stdout>:
[1,14]<stdout>:Nom de la base                          :  ELEMBASE
[1,14]<stdout>:     Créée avec la version                   :  17.02.04
[1,14]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,14]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,14]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,14]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,14]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,14]<stdout>:     Taille maximum du répertoire            :  300
[1,14]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,14]<stdout>:
[1,14]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,14]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Créée avec la version                   :  17.02.04
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Créée avec la version                   :  17.02.04
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,10]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,10]<stdout>:
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Créée avec la version                   :  17.02.04
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,10]<stdout>:Nom de la base                          :  ELEMBASE
[1,10]<stdout>:     Créée avec la version                   :  17.02.04
[1,10]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,10]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,10]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,10]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,10]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,10]<stdout>:     Taille maximum du répertoire            :  300
[1,10]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,10]<stdout>:
[1,10]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,10]<stdout>:
[1,8]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,8]<stdout>:
[1,8]<stdout>:Nom de la base                          :  ELEMBASE
[1,8]<stdout>:     Créée avec la version                   :  17.02.04
[1,8]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,8]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,8]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,8]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,8]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,8]<stdout>:     Taille maximum du répertoire            :  300
[1,8]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,8]<stdout>:
[1,8]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,8]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Créée avec la version                   :  17.02.04
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,9]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,9]<stdout>:
[1,9]<stdout>:Nom de la base                          :  ELEMBASE
[1,9]<stdout>:     Créée avec la version                   :  17.02.04
[1,9]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,9]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,9]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,9]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,9]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,9]<stdout>:     Taille maximum du répertoire            :  300
[1,9]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,9]<stdout>:
[1,9]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,9]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Créée avec la version                   :  17.02.04
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,15]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,15]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,15]<stdout>:Nom de la base                          :  ELEMBASE
[1,15]<stdout>:     Créée avec la version                   :  17.02.04
[1,15]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,15]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,15]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,15]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,15]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,15]<stdout>:     Taille maximum du répertoire            :  300
[1,15]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,15]<stdout>:
[1,15]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,15]<stdout>:
[1,13]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,13]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Créée avec la version                   :  17.02.04
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,13]<stdout>:Nom de la base                          :  ELEMBASE
[1,13]<stdout>:     Créée avec la version                   :  17.02.04
[1,13]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,13]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,13]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,13]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,13]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,13]<stdout>:     Taille maximum du répertoire            :  300
[1,13]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,13]<stdout>:
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Créée avec la version                   :  17.02.04
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,13]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,13]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,12]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,12]<stdout>:
[1,12]<stdout>:Nom de la base                          :  ELEMBASE
[1,12]<stdout>:     Créée avec la version                   :  17.02.04
[1,12]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,12]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,12]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,12]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,12]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,12]<stdout>:     Taille maximum du répertoire            :  300
[1,12]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,12]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,12]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,12]<stdout>:
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Créée avec la version                   :  17.02.04
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,11]<stdout>:Nom de la base                          :  ELEMBASE
[1,11]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,11]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,11]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,11]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,11]<stdout>:     Nombre total d'accès en lecture         :  63
[1,11]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,11]<stdout>:     Nombre total d'accès en écriture        :  0
[1,11]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,11]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,11]<stdout>:     Taille maximum du répertoire            :  300
[1,11]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,11]<stdout>:
[1,11]<stdout>:Relecture des catalogues des éléments faite.
[1,11]<stdout>:
[1,11]<stdout>:Fin de lecture (durée  0.019405  s.) 
[1,11]<stdout>:
[1,11]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,11]<stdout>:                         ajouté à l'initialisation du processus : 645.57 Mo                         
[1,11]<stdout>:                               Limite cible du processus : 4843.97 Mo                               
[1,14]<stdout>:Nom de la base                          :  ELEMBASE
[1,14]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,14]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,14]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,14]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,14]<stdout>:     Nombre total d'accès en lecture         :  63
[1,14]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,14]<stdout>:     Nombre total d'accès en écriture        :  0
[1,14]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,14]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,14]<stdout>:     Taille maximum du répertoire            :  300
[1,14]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,14]<stdout>:
[1,11]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,14]<stdout>:Relecture des catalogues des éléments faite.
[1,14]<stdout>:
[1,14]<stdout>:Fin de lecture (durée  0.018985  s.) 
[1,14]<stdout>:
[1,14]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,14]<stdout>:                         ajouté à l'initialisation du processus : 645.57 Mo                         
[1,14]<stdout>:                               Limite cible du processus : 4843.97 Mo                               
[1,11]<stdout>:# Mémoire (Mo) :   645.57 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,11]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.15s, elaps:        0.15s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :   645.57 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.12s, elaps:        0.15s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre total d'accès en lecture         :  63
[1,0]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,0]<stdout>:     Nombre total d'accès en écriture        :  0
[1,0]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,0]<stdout>:Relecture des catalogues des éléments faite.
[1,0]<stdout>:
[1,0]<stdout>:Fin de lecture (durée  0.019403  s.) 
[1,0]<stdout>:
[1,0]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,0]<stdout>:                         ajouté à l'initialisation du processus : 645.56 Mo                         
[1,0]<stdout>:                               Limite cible du processus : 4843.96 Mo                               
[1,0]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,0]<stdout>:# Mémoire (Mo) :   645.56 /   636.70 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.13s, elaps:        0.15s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre total d'accès en lecture         :  63
[1,6]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,6]<stdout>:     Nombre total d'accès en écriture        :  0
[1,6]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,6]<stdout>:Relecture des catalogues des éléments faite.
[1,6]<stdout>:
[1,6]<stdout>:Fin de lecture (durée  0.019188  s.) 
[1,6]<stdout>:
[1,6]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,6]<stdout>:                         ajouté à l'initialisation du processus : 645.56 Mo                         
[1,6]<stdout>:                               Limite cible du processus : 4843.96 Mo                               
[1,6]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,6]<stdout>:# Mémoire (Mo) :   645.56 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.14s, elaps:        0.16s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre total d'accès en lecture         :  63
[1,5]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,5]<stdout>:     Nombre total d'accès en écriture        :  0
[1,5]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,10]<stdout>:Nom de la base                          :  ELEMBASE
[1,10]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,10]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,10]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,10]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,10]<stdout>:     Nombre total d'accès en lecture         :  63
[1,10]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,10]<stdout>:     Nombre total d'accès en écriture        :  0
[1,10]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,10]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,10]<stdout>:     Taille maximum du répertoire            :  300
[1,10]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,10]<stdout>:
[1,5]<stdout>:Relecture des catalogues des éléments faite.
[1,5]<stdout>:
[1,10]<stdout>:Relecture des catalogues des éléments faite.
[1,10]<stdout>:
[1,5]<stdout>:Fin de lecture (durée  0.019732  s.) 
[1,5]<stdout>:
[1,10]<stdout>:Fin de lecture (durée  0.019672  s.) 
[1,10]<stdout>:
[1,5]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,5]<stdout>:                         ajouté à l'initialisation du processus : 645.56 Mo                         
[1,5]<stdout>:                               Limite cible du processus : 4843.96 Mo                               
[1,10]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,10]<stdout>:                         ajouté à l'initialisation du processus : 645.57 Mo                         
[1,10]<stdout>:                               Limite cible du processus : 4843.97 Mo                               
[1,5]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,10]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,8]<stdout>:Nom de la base                          :  ELEMBASE
[1,8]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,8]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,8]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,8]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,8]<stdout>:     Nombre total d'accès en lecture         :  63
[1,8]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,8]<stdout>:     Nombre total d'accès en écriture        :  0
[1,8]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,8]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,8]<stdout>:     Taille maximum du répertoire            :  300
[1,8]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,8]<stdout>:
[1,5]<stdout>:# Mémoire (Mo) :   645.56 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:Relecture des catalogues des éléments faite.
[1,8]<stdout>:
[1,10]<stdout>:# Mémoire (Mo) :   645.57 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:Fin de lecture (durée  0.019158  s.) 
[1,8]<stdout>:
[1,5]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.13s, elaps:        0.15s)
[1,10]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.13s, elaps:        0.15s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,8]<stdout>:                         ajouté à l'initialisation du processus : 645.56 Mo                         
[1,8]<stdout>:                               Limite cible du processus : 4843.96 Mo                               
[1,8]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,8]<stdout>:# Mémoire (Mo) :   645.56 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.14s, elaps:        0.15s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre total d'accès en lecture         :  63
[1,3]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,3]<stdout>:     Nombre total d'accès en écriture        :  0
[1,3]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,3]<stdout>:Relecture des catalogues des éléments faite.
[1,3]<stdout>:
[1,3]<stdout>:Fin de lecture (durée  0.019258  s.) 
[1,3]<stdout>:
[1,9]<stdout>:Nom de la base                          :  ELEMBASE
[1,9]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,9]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,9]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,9]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,9]<stdout>:     Nombre total d'accès en lecture         :  63
[1,9]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,9]<stdout>:     Nombre total d'accès en écriture        :  0
[1,9]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,9]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,9]<stdout>:     Taille maximum du répertoire            :  300
[1,9]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,9]<stdout>:
[1,9]<stdout>:Relecture des catalogues des éléments faite.
[1,9]<stdout>:
[1,3]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,3]<stdout>:                         ajouté à l'initialisation du processus : 645.56 Mo                         
[1,3]<stdout>:                               Limite cible du processus : 4843.96 Mo                               
[1,9]<stdout>:Fin de lecture (durée  0.018823  s.) 
[1,9]<stdout>:
[1,3]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,9]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,9]<stdout>:                         ajouté à l'initialisation du processus : 645.56 Mo                         
[1,9]<stdout>:                               Limite cible du processus : 4843.96 Mo                               
[1,9]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,3]<stdout>:# Mémoire (Mo) :   645.56 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.13s, elaps:        0.15s)
[1,9]<stdout>:# Mémoire (Mo) :   645.56 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.13s, elaps:        0.15s)
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre total d'accès en lecture         :  63
[1,7]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,7]<stdout>:     Nombre total d'accès en écriture        :  0
[1,7]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:Relecture des catalogues des éléments faite.
[1,7]<stdout>:
[1,7]<stdout>:Fin de lecture (durée  0.018975  s.) 
[1,7]<stdout>:
[1,7]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,7]<stdout>:                         ajouté à l'initialisation du processus : 645.56 Mo                         
[1,7]<stdout>:                               Limite cible du processus : 4843.96 Mo                               
[1,7]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,7]<stdout>:# Mémoire (Mo) :   645.56 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.12s, elaps:        0.15s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:Nom de la base                          :  ELEMBASE
[1,15]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,15]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,15]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,15]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,15]<stdout>:     Nombre total d'accès en lecture         :  63
[1,15]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,15]<stdout>:     Nombre total d'accès en écriture        :  0
[1,15]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,15]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,15]<stdout>:     Taille maximum du répertoire            :  300
[1,15]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,15]<stdout>:
[1,15]<stdout>:Relecture des catalogues des éléments faite.
[1,15]<stdout>:
[1,15]<stdout>:Fin de lecture (durée  0.019122  s.) 
[1,15]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre total d'accès en lecture         :  63
[1,4]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,4]<stdout>:     Nombre total d'accès en écriture        :  0
[1,4]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre total d'accès en lecture         :  63
[1,1]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,1]<stdout>:     Nombre total d'accès en écriture        :  0
[1,1]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,4]<stdout>:Relecture des catalogues des éléments faite.
[1,4]<stdout>:
[1,1]<stdout>:Relecture des catalogues des éléments faite.
[1,1]<stdout>:
[1,15]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,15]<stdout>:                         ajouté à l'initialisation du processus : 645.57 Mo                         
[1,15]<stdout>:                               Limite cible du processus : 4843.97 Mo                               
[1,4]<stdout>:Fin de lecture (durée  0.019177  s.) 
[1,4]<stdout>:
[1,1]<stdout>:Fin de lecture (durée  0.019141  s.) 
[1,1]<stdout>:
[1,12]<stdout>:Nom de la base                          :  ELEMBASE
[1,12]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,12]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,12]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,12]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,12]<stdout>:     Nombre total d'accès en lecture         :  63
[1,12]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,12]<stdout>:     Nombre total d'accès en écriture        :  0
[1,12]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,12]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,12]<stdout>:     Taille maximum du répertoire            :  300
[1,12]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,12]<stdout>:
[1,15]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre total d'accès en lecture         :  63
[1,2]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,2]<stdout>:     Nombre total d'accès en écriture        :  0
[1,2]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,12]<stdout>:Relecture des catalogues des éléments faite.
[1,12]<stdout>:
[1,4]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,4]<stdout>:                         ajouté à l'initialisation du processus : 645.56 Mo                         
[1,4]<stdout>:                               Limite cible du processus : 4843.96 Mo                               
[1,2]<stdout>:Relecture des catalogues des éléments faite.
[1,2]<stdout>:
[1,12]<stdout>:Fin de lecture (durée  0.019084  s.) 
[1,12]<stdout>:
[1,1]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,1]<stdout>:                         ajouté à l'initialisation du processus : 645.57 Mo                         
[1,1]<stdout>:                               Limite cible du processus : 4843.97 Mo                               
[1,4]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,2]<stdout>:Fin de lecture (durée  0.019059  s.) 
[1,2]<stdout>:
[1,13]<stdout>:Nom de la base                          :  ELEMBASE
[1,13]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,13]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,13]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,13]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,13]<stdout>:     Nombre total d'accès en lecture         :  63
[1,13]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,13]<stdout>:     Nombre total d'accès en écriture        :  0
[1,13]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,13]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,13]<stdout>:     Taille maximum du répertoire            :  300
[1,13]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,13]<stdout>:
[1,1]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,13]<stdout>:Relecture des catalogues des éléments faite.
[1,13]<stdout>:
[1,12]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,12]<stdout>:                         ajouté à l'initialisation du processus : 645.57 Mo                         
[1,12]<stdout>:                               Limite cible du processus : 4843.97 Mo                               
[1,15]<stdout>:# Mémoire (Mo) :   645.57 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:Fin de lecture (durée  0.019432  s.) 
[1,13]<stdout>:
[1,2]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,2]<stdout>:                         ajouté à l'initialisation du processus : 645.56 Mo                         
[1,2]<stdout>:                               Limite cible du processus : 4843.96 Mo                               
[1,12]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,2]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,15]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.14s, elaps:        0.15s)
[1,4]<stdout>:# Mémoire (Mo) :   645.56 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,13]<stdout>:                         ajouté à l'initialisation du processus : 645.57 Mo                         
[1,13]<stdout>:                               Limite cible du processus : 4843.97 Mo                               
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :   645.57 /   636.70 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,4]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.14s, elaps:        0.15s)
[1,1]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.15s, elaps:        0.15s)
[1,12]<stdout>:# Mémoire (Mo) :   645.57 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :   645.56 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.13s, elaps:        0.15s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.15s, elaps:        0.15s)
[1,13]<stdout>:# Mémoire (Mo) :   645.57 /   636.69 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Fin commande #0001   user+syst:        0.04s (syst:        0.11s, elaps:        0.15s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:PETSc initialized...
[1,0]<stdout>:PETSc initialized...
[1,4]<stdout>:PETSc initialized...
[1,2]<stdout>:PETSc initialized...
[1,7]<stdout>:PETSc initialized...
[1,10]<stdout>:PETSc initialized...
[1,13]<stdout>:PETSc initialized...
[1,15]<stdout>:PETSc initialized...
[1,11]<stdout>:PETSc initialized...
[1,8]<stdout>:PETSc initialized...
[1,5]<stdout>:PETSc initialized...
[1,9]<stdout>:PETSc initialized...
[1,1]<stdout>:PETSc initialized...
[1,3]<stdout>:PETSc initialized...
[1,12]<stdout>:PETSc initialized...
[1,6]<stdout>:PETSc initialized...
[1,0]<stdout>:Nom MED du maillage : PARALLEPIPED
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000001 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                      274625
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                     287488
[1,0]<stdout>:                              SEG2                  768
[1,0]<stdout>:                              QUAD4               24576
[1,0]<stdout>:                              HEXA8              262144
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                8
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES              19
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACCES='NEW',
[1,0]<stdout>:             ACTION='ASSOCIER',
[1,0]<stdout>:             FICHIER='/tmp/buildCube6nri5gd3/buildCube.med',
[1,0]<stdout>:             TYPE='BINARY',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:Deleting '/tmp/buildCube6nri5gd3/buildCube.med': No such file or directory
[1,0]<stdout>:# Mémoire (Mo) :  1167.08 /   836.70 /   249.04 /   213.86 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0002   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:Création du fichier au format MED 3.3.1.
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0003 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACTION='LIBERER',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1167.08 /   836.82 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0003   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,14]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,6]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,4]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,2]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,7]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,10]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,5]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,9]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,1]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,3]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,13]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,15]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,11]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,12]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,8]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,0]<stdout>:
[1,0]<stdout>:Nom MED du maillage : 00000001
[1,0]<stdout>:
[1,5]<stdout>:Nom MED du maillage : 00000001
[1,5]<stdout>:
[1,14]<stdout>:Nom MED du maillage : 00000001
[1,14]<stdout>:
[1,8]<stdout>:Nom MED du maillage : 00000001
[1,8]<stdout>:
[1,10]<stdout>:Nom MED du maillage : 00000001
[1,10]<stdout>:
[1,12]<stdout>:Nom MED du maillage : 00000001
[1,12]<stdout>:
[1,13]<stdout>:Nom MED du maillage : 00000001
[1,13]<stdout>:
[1,6]<stdout>:Nom MED du maillage : 00000001
[1,6]<stdout>:
[1,11]<stdout>:Nom MED du maillage : 00000001
[1,11]<stdout>:
[1,9]<stdout>:Nom MED du maillage : 00000001
[1,9]<stdout>:
[1,1]<stdout>:Nom MED du maillage : 00000001
[1,1]<stdout>:
[1,7]<stdout>:Nom MED du maillage : 00000001
[1,7]<stdout>:
[1,4]<stdout>:Nom MED du maillage : 00000001
[1,4]<stdout>:
[1,15]<stdout>:Nom MED du maillage : 00000001
[1,15]<stdout>:
[1,3]<stdout>:Nom MED du maillage : 00000001
[1,3]<stdout>:
[1,2]<stdout>:Nom MED du maillage : 00000001
[1,2]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt282
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt282
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt282
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt282
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt282
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt282
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt282
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt282
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt282
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt282
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt282
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt282
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt282
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt282
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt282
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt282
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0004 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,0]<stdout>:ligne 282
[1,13]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,13]<stdout>:ligne 282
[1,1]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,1]<stdout>:ligne 282
[1,4]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,4]<stdout>:ligne 282
[1,8]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,8]<stdout>:ligne 282
[1,12]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,12]<stdout>:ligne 282
[1,15]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,15]<stdout>:ligne 282
[1,6]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,6]<stdout>:ligne 282
[1,10]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,10]<stdout>:ligne 282
[1,14]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,14]<stdout>:ligne 282
[1,5]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,5]<stdout>:ligne 282
[1,7]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,7]<stdout>:ligne 282
[1,11]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,11]<stdout>:ligne 282
[1,2]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,2]<stdout>:ligne 282
[1,9]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,9]<stdout>:ligne 282
[1,3]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,3]<stdout>:ligne 282
[1,13]<stdout>:CREA_MAILLAGE(INFO=1,
[1,13]<stdout>:              MAILLAGE='<00000002>',
[1,13]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,13]<stdout>:                             TOUT='OUI'))
[1,13]<stdout>:
[1,3]<stdout>:CREA_MAILLAGE(INFO=1,
[1,3]<stdout>:              MAILLAGE='<00000002>',
[1,3]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,3]<stdout>:                             TOUT='OUI'))
[1,3]<stdout>:
[1,10]<stdout>:CREA_MAILLAGE(INFO=1,
[1,10]<stdout>:              MAILLAGE='<00000002>',
[1,10]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,10]<stdout>:                             TOUT='OUI'))
[1,10]<stdout>:
[1,4]<stdout>:CREA_MAILLAGE(INFO=1,
[1,4]<stdout>:              MAILLAGE='<00000002>',
[1,4]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,4]<stdout>:                             TOUT='OUI'))
[1,4]<stdout>:
[1,5]<stdout>:CREA_MAILLAGE(INFO=1,
[1,5]<stdout>:              MAILLAGE='<00000002>',
[1,5]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,5]<stdout>:                             TOUT='OUI'))
[1,5]<stdout>:
[1,8]<stdout>:CREA_MAILLAGE(INFO=1,
[1,8]<stdout>:              MAILLAGE='<00000002>',
[1,8]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,8]<stdout>:                             TOUT='OUI'))
[1,8]<stdout>:
[1,12]<stdout>:CREA_MAILLAGE(INFO=1,
[1,12]<stdout>:              MAILLAGE='<00000002>',
[1,12]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,12]<stdout>:                             TOUT='OUI'))
[1,12]<stdout>:
[1,7]<stdout>:CREA_MAILLAGE(INFO=1,
[1,7]<stdout>:              MAILLAGE='<00000002>',
[1,7]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,7]<stdout>:                             TOUT='OUI'))
[1,7]<stdout>:
[1,1]<stdout>:CREA_MAILLAGE(INFO=1,
[1,1]<stdout>:              MAILLAGE='<00000002>',
[1,1]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,1]<stdout>:                             TOUT='OUI'))
[1,1]<stdout>:
[1,11]<stdout>:CREA_MAILLAGE(INFO=1,
[1,11]<stdout>:              MAILLAGE='<00000002>',
[1,11]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,11]<stdout>:                             TOUT='OUI'))
[1,11]<stdout>:
[1,15]<stdout>:CREA_MAILLAGE(INFO=1,
[1,15]<stdout>:              MAILLAGE='<00000002>',
[1,15]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,15]<stdout>:                             TOUT='OUI'))
[1,15]<stdout>:
[1,2]<stdout>:CREA_MAILLAGE(INFO=1,
[1,2]<stdout>:              MAILLAGE='<00000002>',
[1,2]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,2]<stdout>:                             TOUT='OUI'))
[1,2]<stdout>:
[1,0]<stdout>:CREA_MAILLAGE(INFO=1,
[1,0]<stdout>:              MAILLAGE='<00000002>',
[1,0]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,0]<stdout>:                             TOUT='OUI'))
[1,0]<stdout>:
[1,6]<stdout>:CREA_MAILLAGE(INFO=1,
[1,6]<stdout>:              MAILLAGE='<00000002>',
[1,6]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,6]<stdout>:                             TOUT='OUI'))
[1,6]<stdout>:
[1,9]<stdout>:CREA_MAILLAGE(INFO=1,
[1,9]<stdout>:              MAILLAGE='<00000002>',
[1,9]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,9]<stdout>:                             TOUT='OUI'))
[1,9]<stdout>:
[1,14]<stdout>:CREA_MAILLAGE(INFO=1,
[1,14]<stdout>:              MAILLAGE='<00000002>',
[1,14]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,14]<stdout>:                             TOUT='OUI'))
[1,14]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,1]<stdout>:
[1,1]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,1]<stdout>:MAILLAGE_P                                                                      
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE NOEUDS                      135412
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE MAILLES                     135231
[1,1]<stdout>:                              SEG2                  155
[1,1]<stdout>:                              QUAD4                7800
[1,1]<stdout>:                              HEXA8              127276
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.57      0.00      0.58
[1,11]<stdout>:
[1,11]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,11]<stdout>:
[1,11]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,11]<stdout>:MAILLAGE_P                                                                      
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE NOEUDS                      132092
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE MAILLES                     131479
[1,11]<stdout>:                              SEG2                  149
[1,11]<stdout>:                              QUAD4                7471
[1,11]<stdout>:                              HEXA8              123859
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.27      0.00      0.27
[1,15]<stdout>:
[1,15]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,15]<stdout>:
[1,15]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,15]<stdout>:MAILLAGE_P                                                                      
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE NOEUDS                      137908
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE MAILLES                     137687
[1,15]<stdout>:                              SEG2                  155
[1,15]<stdout>:                              QUAD4                7887
[1,15]<stdout>:                              HEXA8              129645
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.13      0.00      0.13
[1,2]<stdout>:
[1,2]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,2]<stdout>:
[1,2]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,2]<stdout>:MAILLAGE_P                                                                      
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE NOEUDS                      142420
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE MAILLES                     141975
[1,2]<stdout>:                              SEG2                  155
[1,2]<stdout>:                              QUAD4                7938
[1,2]<stdout>:                              HEXA8              133882
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,13]<stdout>:
[1,13]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,13]<stdout>:MAILLAGE_P                                                                      
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE NOEUDS                      149960
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE MAILLES                     144443
[1,13]<stdout>:                              SEG2                   35
[1,13]<stdout>:                              QUAD4                4327
[1,13]<stdout>:                              HEXA8              140081
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.06      0.00      0.06
[1,14]<stdout>:
[1,14]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,14]<stdout>:
[1,14]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,14]<stdout>:MAILLAGE_P                                                                      
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE NOEUDS                      151066
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE MAILLES                     144194
[1,14]<stdout>:                              SEG2                   25
[1,14]<stdout>:                              QUAD4                3846
[1,14]<stdout>:                              HEXA8              140323
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,6]<stdout>:
[1,6]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,6]<stdout>:
[1,6]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,6]<stdout>:MAILLAGE_P                                                                      
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE NOEUDS                      146898
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE MAILLES                     142903
[1,6]<stdout>:                              SEG2                   39
[1,6]<stdout>:                              QUAD4                4805
[1,6]<stdout>:                              HEXA8              138059
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.13      0.00      0.13
[1,9]<stdout>:
[1,9]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,9]<stdout>:
[1,9]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,9]<stdout>:MAILLAGE_P                                                                      
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE NOEUDS                      146972
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE MAILLES                     142447
[1,9]<stdout>:                              SEG2                   35
[1,9]<stdout>:                              QUAD4                4575
[1,9]<stdout>:                              HEXA8              137837
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.14      0.00      0.15
[1,4]<stdout>:
[1,4]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,4]<stdout>:
[1,4]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,4]<stdout>:MAILLAGE_P                                                                      
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE NOEUDS                      157784
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE MAILLES                     154932
[1,4]<stdout>:                              SEG2                  130
[1,4]<stdout>:                              QUAD4                7220
[1,4]<stdout>:                              HEXA8              147582
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.13      0.00      0.13
[1,5]<stdout>:
[1,5]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,5]<stdout>:
[1,5]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,5]<stdout>:MAILLAGE_P                                                                      
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE NOEUDS                      141250
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE MAILLES                     137229
[1,5]<stdout>:                              SEG2                   71
[1,5]<stdout>:                              QUAD4                5702
[1,5]<stdout>:                              HEXA8              131456
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE GROUPES DE MAILLES               6
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.17      0.00      0.17
[1,8]<stdout>:
[1,8]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,8]<stdout>:
[1,8]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,8]<stdout>:MAILLAGE_P                                                                      
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE NOEUDS                      142138
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE MAILLES                     142023
[1,8]<stdout>:                              SEG2                  165
[1,8]<stdout>:                              QUAD4                8474
[1,8]<stdout>:                              HEXA8              133384
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.43      0.00      0.42
[1,12]<stdout>:
[1,12]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,12]<stdout>:
[1,12]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,12]<stdout>:MAILLAGE_P                                                                      
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE NOEUDS                      138058
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE MAILLES                     137693
[1,12]<stdout>:                              SEG2                  160
[1,12]<stdout>:                              QUAD4                8015
[1,12]<stdout>:                              HEXA8              129518
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.37      0.00      0.37
[1,7]<stdout>:
[1,7]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,7]<stdout>:
[1,7]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,7]<stdout>:MAILLAGE_P                                                                      
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE NOEUDS                      138372
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE MAILLES                     138062
[1,7]<stdout>:                              SEG2                  160
[1,7]<stdout>:                              QUAD4                8041
[1,7]<stdout>:                              HEXA8              129861
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.36      0.00      0.36
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.38      0.00      0.40
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,0]<stdout>:MAILLAGE_P                                                                      
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                      163533
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                     158244
[1,0]<stdout>:                              SEG2                   36
[1,0]<stdout>:                              QUAD4                4936
[1,0]<stdout>:                              HEXA8              153272
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,3]<stdout>:
[1,3]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,3]<stdout>:
[1,3]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,3]<stdout>:MAILLAGE_P                                                                      
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE NOEUDS                      156946
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE MAILLES                     151507
[1,3]<stdout>:                              SEG2                   35
[1,3]<stdout>:                              QUAD4                4391
[1,3]<stdout>:                              HEXA8              147081
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.02
[1,10]<stdout>:
[1,10]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,10]<stdout>:
[1,10]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:31:53 DE TYPE        
[1,10]<stdout>:MAILLAGE_P                                                                      
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE NOEUDS                      157130
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE MAILLES                     152887
[1,10]<stdout>:                              SEG2                   52
[1,10]<stdout>:                              QUAD4                5623
[1,10]<stdout>:                              HEXA8              147212
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.01      0.01
[1,11]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,11]<stdout>:# Mémoire (Mo) :  1486.61 /   782.93 /   240.21 /   207.75 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0002   user+syst:        1.96s (syst:        0.77s, elaps:        2.73s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,5]<stdout>:# Mémoire (Mo) :  1519.80 /   787.86 /   242.49 /   209.94 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0002   user+syst:        1.89s (syst:        0.85s, elaps:        2.74s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,15]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,1]<stdout>:# Mémoire (Mo) :  1437.16 /   782.46 /   240.59 /   208.11 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  1518.14 /   786.02 /   241.82 /   209.30 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0002   user+syst:        2.09s (syst:        0.65s, elaps:        2.74s)
[1,15]<stdout>:# Fin commande #0002   user+syst:        1.91s (syst:        0.83s, elaps:        2.74s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,12]<stdout>:# Mémoire (Mo) :  1458.59 /   784.60 /   241.44 /   208.93 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0002   user+syst:        2.05s (syst:        0.69s, elaps:        2.74s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,7]<stdout>:# Mémoire (Mo) :  1467.19 /   785.26 /   241.66 /   209.15 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0002   user+syst:        2.04s (syst:        0.70s, elaps:        2.74s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,2]<stdout>:# Mémoire (Mo) :  1508.51 /   786.10 /   242.36 /   209.81 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0002   user+syst:        1.98s (syst:        0.78s, elaps:        2.75s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,8]<stdout>:# Mémoire (Mo) :  1466.36 /   785.70 /   242.30 /   209.76 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0002   user+syst:        2.03s (syst:        0.72s, elaps:        2.75s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,9]<stdout>:# Mémoire (Mo) :  1525.18 /   789.63 /   243.60 /   211.01 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0002   user+syst:        1.88s (syst:        0.88s, elaps:        2.75s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,13]<stdout>:# Mémoire (Mo) :  1559.35 /   792.93 /   244.75 /   212.12 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0002   user+syst:        1.89s (syst:        0.86s, elaps:        2.75s)
[1,14]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :  1581.66 /   795.12 /   245.25 /   212.59 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0002   user+syst:        1.83s (syst:        0.92s, elaps:        2.75s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,6]<stdout>:# Mémoire (Mo) :  1525.86 /   789.55 /   243.52 /   210.94 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0002   user+syst:        1.80s (syst:        0.96s, elaps:        2.76s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,10]<stdout>:# Mémoire (Mo) :  1580.54 /   795.20 /   246.22 /   213.53 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0002   user+syst:        1.86s (syst:        0.90s, elaps:        2.77s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,4]<stdout>:# Mémoire (Mo) :  1579.09 /   794.61 /   246.45 /   213.75 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0002   user+syst:        1.83s (syst:        0.94s, elaps:        2.77s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,3]<stdout>:# Mémoire (Mo) :  1579.41 /   795.62 /   246.31 /   213.62 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0002   user+syst:        1.88s (syst:        0.89s, elaps:        2.77s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0004 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,0]<stdout>:# Mémoire (Mo) :  1690.90 /   908.65 /   291.99 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0004   user+syst:        1.84s (syst:        0.93s, elaps:        2.77s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt131
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt131
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt131
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt131
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt131
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt131
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt131
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt131
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt131
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt131
[1,1]<stdout>:# Commande #0003 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 131
[1,7]<stdout>:# Commande #0003 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 131
[1,11]<stdout>:# Commande #0003 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 131
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0003 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 131
[1,15]<stdout>:# Commande #0003 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 131
[1,8]<stdout>:# Commande #0003 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 131
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt131
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt131
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt131
[1,9]<stdout>:# Commande #0003 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 131
[1,12]<stdout>:# Commande #0003 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 131
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt131
[1,6]<stdout>:# Commande #0003 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 131
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt131
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0003 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 131
[1,1]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,1]<stdout>:                            PHENOMENE='MECANIQUE',
[1,1]<stdout>:                            TOUT='OUI'),
[1,1]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,1]<stdout>:                    INFO=1,
[1,1]<stdout>:                    MAILLAGE='<00000004>',
[1,1]<stdout>:                    VERI_JACOBIEN='OUI',
[1,1]<stdout>:                    VERI_NORM_IFS='OUI',
[1,1]<stdout>:                    VERI_PLAN='OUI')
[1,1]<stdout>:
[1,7]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,7]<stdout>:                            PHENOMENE='MECANIQUE',
[1,7]<stdout>:                            TOUT='OUI'),
[1,7]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,7]<stdout>:                    INFO=1,
[1,7]<stdout>:                    MAILLAGE='<00000004>',
[1,7]<stdout>:                    VERI_JACOBIEN='OUI',
[1,7]<stdout>:                    VERI_NORM_IFS='OUI',
[1,7]<stdout>:                    VERI_PLAN='OUI')
[1,7]<stdout>:
[1,5]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,5]<stdout>:                            PHENOMENE='MECANIQUE',
[1,5]<stdout>:                            TOUT='OUI'),
[1,5]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,5]<stdout>:                    INFO=1,
[1,5]<stdout>:                    MAILLAGE='<00000004>',
[1,5]<stdout>:                    VERI_JACOBIEN='OUI',
[1,5]<stdout>:                    VERI_NORM_IFS='OUI',
[1,5]<stdout>:                    VERI_PLAN='OUI')
[1,5]<stdout>:
[1,11]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,11]<stdout>:                            PHENOMENE='MECANIQUE',
[1,11]<stdout>:                            TOUT='OUI'),
[1,11]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,11]<stdout>:                    INFO=1,
[1,11]<stdout>:                    MAILLAGE='<00000004>',
[1,11]<stdout>:                    VERI_JACOBIEN='OUI',
[1,11]<stdout>:                    VERI_NORM_IFS='OUI',
[1,11]<stdout>:                    VERI_PLAN='OUI')
[1,11]<stdout>:
[1,13]<stdout>:# Commande #0003 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 131
[1,3]<stdout>:# Commande #0003 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 131
[1,8]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,8]<stdout>:                            PHENOMENE='MECANIQUE',
[1,8]<stdout>:                            TOUT='OUI'),
[1,8]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,8]<stdout>:                    INFO=1,
[1,8]<stdout>:                    MAILLAGE='<00000004>',
[1,8]<stdout>:                    VERI_JACOBIEN='OUI',
[1,8]<stdout>:                    VERI_NORM_IFS='OUI',
[1,8]<stdout>:                    VERI_PLAN='OUI')
[1,8]<stdout>:
[1,10]<stdout>:# Commande #0003 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 131
[1,15]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,15]<stdout>:                            PHENOMENE='MECANIQUE',
[1,15]<stdout>:                            TOUT='OUI'),
[1,15]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,15]<stdout>:                    INFO=1,
[1,15]<stdout>:                    MAILLAGE='<00000004>',
[1,15]<stdout>:                    VERI_JACOBIEN='OUI',
[1,15]<stdout>:                    VERI_NORM_IFS='OUI',
[1,15]<stdout>:                    VERI_PLAN='OUI')
[1,15]<stdout>:
[1,4]<stdout>:# Commande #0003 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 131
[1,9]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,9]<stdout>:                            PHENOMENE='MECANIQUE',
[1,9]<stdout>:                            TOUT='OUI'),
[1,9]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,9]<stdout>:                    INFO=1,
[1,9]<stdout>:                    MAILLAGE='<00000004>',
[1,9]<stdout>:                    VERI_JACOBIEN='OUI',
[1,9]<stdout>:                    VERI_NORM_IFS='OUI',
[1,9]<stdout>:                    VERI_PLAN='OUI')
[1,9]<stdout>:
[1,12]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,12]<stdout>:                            PHENOMENE='MECANIQUE',
[1,12]<stdout>:                            TOUT='OUI'),
[1,12]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,12]<stdout>:                    INFO=1,
[1,12]<stdout>:                    MAILLAGE='<00000004>',
[1,12]<stdout>:                    VERI_JACOBIEN='OUI',
[1,12]<stdout>:                    VERI_NORM_IFS='OUI',
[1,12]<stdout>:                    VERI_PLAN='OUI')
[1,12]<stdout>:
[1,6]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,6]<stdout>:                            PHENOMENE='MECANIQUE',
[1,6]<stdout>:                            TOUT='OUI'),
[1,6]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,6]<stdout>:                    INFO=1,
[1,6]<stdout>:                    MAILLAGE='<00000004>',
[1,6]<stdout>:                    VERI_JACOBIEN='OUI',
[1,6]<stdout>:                    VERI_NORM_IFS='OUI',
[1,6]<stdout>:                    VERI_PLAN='OUI')
[1,6]<stdout>:
[1,14]<stdout>:# Commande #0003 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 131
[1,2]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,2]<stdout>:                            PHENOMENE='MECANIQUE',
[1,2]<stdout>:                            TOUT='OUI'),
[1,2]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,2]<stdout>:                    INFO=1,
[1,2]<stdout>:                    MAILLAGE='<00000004>',
[1,2]<stdout>:                    VERI_JACOBIEN='OUI',
[1,2]<stdout>:                    VERI_NORM_IFS='OUI',
[1,2]<stdout>:                    VERI_PLAN='OUI')
[1,2]<stdout>:
[1,3]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,3]<stdout>:                            PHENOMENE='MECANIQUE',
[1,3]<stdout>:                            TOUT='OUI'),
[1,3]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,3]<stdout>:                    INFO=1,
[1,3]<stdout>:                    MAILLAGE='<00000004>',
[1,3]<stdout>:                    VERI_JACOBIEN='OUI',
[1,3]<stdout>:                    VERI_NORM_IFS='OUI',
[1,3]<stdout>:                    VERI_PLAN='OUI')
[1,3]<stdout>:
[1,13]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,13]<stdout>:                            PHENOMENE='MECANIQUE',
[1,13]<stdout>:                            TOUT='OUI'),
[1,13]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,13]<stdout>:                    INFO=1,
[1,13]<stdout>:                    MAILLAGE='<00000004>',
[1,13]<stdout>:                    VERI_JACOBIEN='OUI',
[1,13]<stdout>:                    VERI_NORM_IFS='OUI',
[1,13]<stdout>:                    VERI_PLAN='OUI')
[1,13]<stdout>:
[1,10]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,10]<stdout>:                            PHENOMENE='MECANIQUE',
[1,10]<stdout>:                            TOUT='OUI'),
[1,10]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,10]<stdout>:                    INFO=1,
[1,10]<stdout>:                    MAILLAGE='<00000004>',
[1,10]<stdout>:                    VERI_JACOBIEN='OUI',
[1,10]<stdout>:                    VERI_NORM_IFS='OUI',
[1,10]<stdout>:                    VERI_PLAN='OUI')
[1,10]<stdout>:
[1,4]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,4]<stdout>:                            PHENOMENE='MECANIQUE',
[1,4]<stdout>:                            TOUT='OUI'),
[1,4]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,4]<stdout>:                    INFO=1,
[1,4]<stdout>:                    MAILLAGE='<00000004>',
[1,4]<stdout>:                    VERI_JACOBIEN='OUI',
[1,4]<stdout>:                    VERI_NORM_IFS='OUI',
[1,4]<stdout>:                    VERI_PLAN='OUI')
[1,4]<stdout>:
[1,14]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,14]<stdout>:                            PHENOMENE='MECANIQUE',
[1,14]<stdout>:                            TOUT='OUI'),
[1,14]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,14]<stdout>:                    INFO=1,
[1,14]<stdout>:                    MAILLAGE='<00000004>',
[1,14]<stdout>:                    VERI_JACOBIEN='OUI',
[1,14]<stdout>:                    VERI_NORM_IFS='OUI',
[1,14]<stdout>:                    VERI_PLAN='OUI')
[1,14]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt131
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0005 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 131
[1,0]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,0]<stdout>:                            PHENOMENE='MECANIQUE',
[1,0]<stdout>:                            TOUT='OUI'),
[1,0]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,0]<stdout>:                    INFO=1,
[1,0]<stdout>:                    MAILLAGE='<00000004>',
[1,0]<stdout>:                    VERI_JACOBIEN='OUI',
[1,0]<stdout>:                    VERI_NORM_IFS='OUI',
[1,0]<stdout>:                    VERI_PLAN='OUI')
[1,0]<stdout>:
[1,11]<stdout>:Sur les 131479 mailles du maillage 00000004, on a demandé l'affectation de 131479, on a pu en
[1,11]<stdout>:affecter 131479.
[1,7]<stdout>:Sur les 138062 mailles du maillage 00000004, on a demandé l'affectation de 138062, on a pu en
[1,7]<stdout>:affecter 138062.
[1,1]<stdout>:Sur les 135231 mailles du maillage 00000004, on a demandé l'affectation de 135231, on a pu en
[1,1]<stdout>:affecter 135231.
[1,5]<stdout>:Sur les 137229 mailles du maillage 00000004, on a demandé l'affectation de 137229, on a pu en
[1,5]<stdout>:affecter 137229.
[1,12]<stdout>:Sur les 137693 mailles du maillage 00000004, on a demandé l'affectation de 137693, on a pu en
[1,12]<stdout>:affecter 137693.
[1,9]<stdout>:Sur les 142447 mailles du maillage 00000004, on a demandé l'affectation de 142447, on a pu en
[1,9]<stdout>:affecter 142447.
[1,15]<stdout>:Sur les 137687 mailles du maillage 00000004, on a demandé l'affectation de 137687, on a pu en
[1,15]<stdout>:affecter 137687.
[1,6]<stdout>:Sur les 142903 mailles du maillage 00000004, on a demandé l'affectation de 142903, on a pu en
[1,6]<stdout>:affecter 142903.
[1,13]<stdout>:Sur les 144443 mailles du maillage 00000004, on a demandé l'affectation de 144443, on a pu en
[1,13]<stdout>:affecter 144443.
[1,8]<stdout>:Sur les 142023 mailles du maillage 00000004, on a demandé l'affectation de 142023, on a pu en
[1,8]<stdout>:affecter 142023.
[1,14]<stdout>:Sur les 144194 mailles du maillage 00000004, on a demandé l'affectation de 144194, on a pu en
[1,14]<stdout>:affecter 144194.
[1,2]<stdout>:Sur les 141975 mailles du maillage 00000004, on a demandé l'affectation de 141975, on a pu en
[1,2]<stdout>:affecter 141975.
[1,3]<stdout>:Sur les 151507 mailles du maillage 00000004, on a demandé l'affectation de 151507, on a pu en
[1,3]<stdout>:affecter 151507.
[1,10]<stdout>:Sur les 152887 mailles du maillage 00000004, on a demandé l'affectation de 152887, on a pu en
[1,10]<stdout>:affecter 152887.
[1,4]<stdout>:Sur les 154932 mailles du maillage 00000004, on a demandé l'affectation de 154932, on a pu en
[1,4]<stdout>:affecter 154932.
[1,0]<stdout>:Sur les 158244 mailles du maillage 00000004, on a demandé l'affectation de 158244, on a pu en
[1,0]<stdout>:affecter 158244.
[1,11]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,11]<stdout>:_                _                SEG2         MECA_ARETE2      149
[1,11]<stdout>:_                _                QUAD4        MECA_FACE4       7471
[1,11]<stdout>:3D               _                HEXA8        MECA_HEXA8       123859
[1,1]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,1]<stdout>:_                _                SEG2         MECA_ARETE2      155
[1,1]<stdout>:_                _                QUAD4        MECA_FACE4       7800
[1,1]<stdout>:3D               _                HEXA8        MECA_HEXA8       127276
[1,15]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,7]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,5]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,15]<stdout>:_                _                SEG2         MECA_ARETE2      155
[1,7]<stdout>:_                _                SEG2         MECA_ARETE2      160
[1,15]<stdout>:_                _                QUAD4        MECA_FACE4       7887
[1,12]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,2]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,7]<stdout>:_                _                QUAD4        MECA_FACE4       8041
[1,15]<stdout>:3D               _                HEXA8        MECA_HEXA8       129645
[1,7]<stdout>:3D               _                HEXA8        MECA_HEXA8       129861
[1,5]<stdout>:_                _                SEG2         MECA_ARETE2      71
[1,5]<stdout>:_                _                QUAD4        MECA_FACE4       5702
[1,5]<stdout>:3D               _                HEXA8        MECA_HEXA8       131456
[1,8]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,12]<stdout>:_                _                SEG2         MECA_ARETE2      160
[1,2]<stdout>:_                _                SEG2         MECA_ARETE2      155
[1,12]<stdout>:_                _                QUAD4        MECA_FACE4       8015
[1,2]<stdout>:_                _                QUAD4        MECA_FACE4       7938
[1,12]<stdout>:3D               _                HEXA8        MECA_HEXA8       129518
[1,2]<stdout>:3D               _                HEXA8        MECA_HEXA8       133882
[1,8]<stdout>:_                _                SEG2         MECA_ARETE2      165
[1,8]<stdout>:_                _                QUAD4        MECA_FACE4       8474
[1,9]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,8]<stdout>:3D               _                HEXA8        MECA_HEXA8       133384
[1,6]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,9]<stdout>:_                _                SEG2         MECA_ARETE2      35
[1,9]<stdout>:_                _                QUAD4        MECA_FACE4       4575
[1,9]<stdout>:3D               _                HEXA8        MECA_HEXA8       137837
[1,6]<stdout>:_                _                SEG2         MECA_ARETE2      39
[1,6]<stdout>:_                _                QUAD4        MECA_FACE4       4805
[1,6]<stdout>:3D               _                HEXA8        MECA_HEXA8       138059
[1,14]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,14]<stdout>:_                _                SEG2         MECA_ARETE2      25
[1,14]<stdout>:_                _                QUAD4        MECA_FACE4       3846
[1,14]<stdout>:3D               _                HEXA8        MECA_HEXA8       140323
[1,13]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,13]<stdout>:_                _                SEG2         MECA_ARETE2      35
[1,13]<stdout>:_                _                QUAD4        MECA_FACE4       4327
[1,13]<stdout>:3D               _                HEXA8        MECA_HEXA8       140081
[1,10]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,3]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,10]<stdout>:_                _                SEG2         MECA_ARETE2      52
[1,10]<stdout>:_                _                QUAD4        MECA_FACE4       5623
[1,10]<stdout>:3D               _                HEXA8        MECA_HEXA8       147212
[1,3]<stdout>:_                _                SEG2         MECA_ARETE2      35
[1,3]<stdout>:_                _                QUAD4        MECA_FACE4       4391
[1,3]<stdout>:3D               _                HEXA8        MECA_HEXA8       147081
[1,4]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,4]<stdout>:_                _                SEG2         MECA_ARETE2      130
[1,4]<stdout>:_                _                QUAD4        MECA_FACE4       7220
[1,4]<stdout>:3D               _                HEXA8        MECA_HEXA8       147582
[1,0]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,0]<stdout>:_                _                SEG2         MECA_ARETE2      36
[1,0]<stdout>:_                _                QUAD4        MECA_FACE4       4936
[1,0]<stdout>:3D               _                HEXA8        MECA_HEXA8       153272
[1,11]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.07
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,1]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.07
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,5]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.07
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,7]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.07
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,12]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.07
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,2]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.07
[1,15]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.07
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,9]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.08      0.00      0.08
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,8]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.07
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,13]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.08      0.00      0.08
[1,6]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.08      0.00      0.08
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,14]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.08      0.00      0.08
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,10]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.15      0.00      0.15
[1,3]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.08      0.00      0.08
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,4]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.09      0.01      0.08
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,0]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.08      0.00      0.08
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,15]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,15]<stdout>:# Mémoire (Mo) :  1518.14 /   820.86 /   245.51 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0003   user+syst:        0.60s (syst:        0.00s, elaps:        0.60s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0005 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,0]<stdout>:# Mémoire (Mo) :  1690.90 /   898.85 /   291.99 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0005   user+syst:        0.58s (syst:        0.00s, elaps:        0.58s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,11]<stdout>:# Mémoire (Mo) :  1486.61 /   815.66 /   243.69 /   221.67 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0003   user+syst:        0.60s (syst:        0.00s, elaps:        0.60s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,12]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,5]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,7]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,1]<stdout>:# Mémoire (Mo) :  1437.16 /   817.26 /   244.75 /   222.32 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,8]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,12]<stdout>:# Mémoire (Mo) :  1458.59 /   819.43 /   245.53 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  1519.80 /   820.59 /   246.06 /   222.95 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  1467.19 /   820.10 /   245.63 /   222.83 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0003   user+syst:        0.61s (syst:        0.00s, elaps:        0.60s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  1508.51 /   821.00 /   246.85 /   223.55 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0003   user+syst:        0.60s (syst:        0.00s, elaps:        0.60s)
[1,5]<stdout>:# Fin commande #0003   user+syst:        0.61s (syst:        0.00s, elaps:        0.60s)
[1,7]<stdout>:# Fin commande #0003   user+syst:        0.60s (syst:        0.00s, elaps:        0.60s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Mémoire (Mo) :  1466.36 /   820.59 /   246.79 /   223.51 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,13]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,2]<stdout>:# Fin commande #0003   user+syst:        0.61s (syst:        0.00s, elaps:        0.60s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Fin commande #0003   user+syst:        0.60s (syst:        0.00s, elaps:        0.60s)
[1,14]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,4]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,3]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,6]<stdout>:# Mémoire (Mo) :  1525.86 /   824.46 /   247.82 /   224.06 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :  1525.18 /   824.54 /   247.78 /   224.00 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  1559.35 /   825.66 /   248.56 /   224.42 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0003   user+syst:        0.61s (syst:        0.00s, elaps:        0.60s)
[1,14]<stdout>:# Mémoire (Mo) :  1581.66 /   827.85 /   248.72 /   224.45 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :  1579.09 /   829.71 /   251.22 /   226.05 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  1580.54 /   830.27 /   250.88 /   225.84 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  1579.41 /   828.36 /   250.70 /   225.71 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0003   user+syst:        0.60s (syst:        0.00s, elaps:        0.60s)
[1,9]<stdout>:# Fin commande #0003   user+syst:        0.61s (syst:        0.00s, elaps:        0.60s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Fin commande #0003   user+syst:        0.60s (syst:        0.00s, elaps:        0.60s)
[1,4]<stdout>:# Fin commande #0003   user+syst:        0.61s (syst:        0.01s, elaps:        0.60s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Fin commande #0003   user+syst:        0.60s (syst:        0.00s, elaps:        0.60s)
[1,3]<stdout>:# Fin commande #0003   user+syst:        0.61s (syst:        0.00s, elaps:        0.60s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt141
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt141
[1,15]<stdout>:# Commande #0004 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 141
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0006 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 141
[1,15]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,15]<stdout>:                                   SY=200.0),
[1,15]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,15]<stdout>:                              COEF_AMOR=1.0,
[1,15]<stdout>:                              E=200000.0,
[1,15]<stdout>:                              K_DESSIC=0.0,
[1,15]<stdout>:                              NU=0.3),
[1,15]<stdout>:                      INFO=1)
[1,15]<stdout>:
[1,0]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                                   SY=200.0),
[1,0]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,0]<stdout>:                              COEF_AMOR=1.0,
[1,0]<stdout>:                              E=200000.0,
[1,0]<stdout>:                              K_DESSIC=0.0,
[1,0]<stdout>:                              NU=0.3),
[1,0]<stdout>:                      INFO=1)
[1,0]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt141
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0004 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 141
[1,11]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,11]<stdout>:                                   SY=200.0),
[1,11]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,11]<stdout>:                              COEF_AMOR=1.0,
[1,11]<stdout>:                              E=200000.0,
[1,11]<stdout>:                              K_DESSIC=0.0,
[1,11]<stdout>:                              NU=0.3),
[1,11]<stdout>:                      INFO=1)
[1,11]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt141
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt141
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt141
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt141
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt141
[1,1]<stdout>:# Commande #0004 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 141
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0004 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 141
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt141
[1,5]<stdout>:# Commande #0004 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 141
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt141
[1,7]<stdout>:# Commande #0004 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 141
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0004 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 141
[1,2]<stdout>:# Commande #0004 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 141
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt141
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt141
[1,1]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                                   SY=200.0),
[1,1]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,1]<stdout>:                              COEF_AMOR=1.0,
[1,1]<stdout>:                              E=200000.0,
[1,1]<stdout>:                              K_DESSIC=0.0,
[1,1]<stdout>:                              NU=0.3),
[1,1]<stdout>:                      INFO=1)
[1,1]<stdout>:
[1,6]<stdout>:# Commande #0004 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 141
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt141
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt141
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt141
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt141
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,12]<stdout>:                                   SY=200.0),
[1,12]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,12]<stdout>:                              COEF_AMOR=1.0,
[1,12]<stdout>:                              E=200000.0,
[1,12]<stdout>:                              K_DESSIC=0.0,
[1,12]<stdout>:                              NU=0.3),
[1,12]<stdout>:                      INFO=1)
[1,12]<stdout>:
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                                   SY=200.0),
[1,5]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,5]<stdout>:                              COEF_AMOR=1.0,
[1,5]<stdout>:                              E=200000.0,
[1,5]<stdout>:                              K_DESSIC=0.0,
[1,5]<stdout>:                              NU=0.3),
[1,5]<stdout>:                      INFO=1)
[1,5]<stdout>:
[1,7]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                                   SY=200.0),
[1,7]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,7]<stdout>:                              COEF_AMOR=1.0,
[1,7]<stdout>:                              E=200000.0,
[1,7]<stdout>:                              K_DESSIC=0.0,
[1,7]<stdout>:                              NU=0.3),
[1,7]<stdout>:                      INFO=1)
[1,7]<stdout>:
[1,14]<stdout>:# Commande #0004 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 141
[1,9]<stdout>:# Commande #0004 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 141
[1,8]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,8]<stdout>:                                   SY=200.0),
[1,8]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,8]<stdout>:                              COEF_AMOR=1.0,
[1,8]<stdout>:                              E=200000.0,
[1,8]<stdout>:                              K_DESSIC=0.0,
[1,8]<stdout>:                              NU=0.3),
[1,8]<stdout>:                      INFO=1)
[1,8]<stdout>:
[1,4]<stdout>:# Commande #0004 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 141
[1,13]<stdout>:# Commande #0004 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 141
[1,10]<stdout>:# Commande #0004 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 141
[1,3]<stdout>:# Commande #0004 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 141
[1,2]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                                   SY=200.0),
[1,2]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,2]<stdout>:                              COEF_AMOR=1.0,
[1,2]<stdout>:                              E=200000.0,
[1,2]<stdout>:                              K_DESSIC=0.0,
[1,2]<stdout>:                              NU=0.3),
[1,2]<stdout>:                      INFO=1)
[1,2]<stdout>:
[1,6]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                                   SY=200.0),
[1,6]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,6]<stdout>:                              COEF_AMOR=1.0,
[1,6]<stdout>:                              E=200000.0,
[1,6]<stdout>:                              K_DESSIC=0.0,
[1,6]<stdout>:                              NU=0.3),
[1,6]<stdout>:                      INFO=1)
[1,6]<stdout>:
[1,14]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,14]<stdout>:                                   SY=200.0),
[1,14]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,14]<stdout>:                              COEF_AMOR=1.0,
[1,14]<stdout>:                              E=200000.0,
[1,14]<stdout>:                              K_DESSIC=0.0,
[1,14]<stdout>:                              NU=0.3),
[1,14]<stdout>:                      INFO=1)
[1,14]<stdout>:
[1,9]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,9]<stdout>:                                   SY=200.0),
[1,9]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,9]<stdout>:                              COEF_AMOR=1.0,
[1,9]<stdout>:                              E=200000.0,
[1,9]<stdout>:                              K_DESSIC=0.0,
[1,9]<stdout>:                              NU=0.3),
[1,9]<stdout>:                      INFO=1)
[1,9]<stdout>:
[1,4]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                                   SY=200.0),
[1,4]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,4]<stdout>:                              COEF_AMOR=1.0,
[1,4]<stdout>:                              E=200000.0,
[1,4]<stdout>:                              K_DESSIC=0.0,
[1,4]<stdout>:                              NU=0.3),
[1,4]<stdout>:                      INFO=1)
[1,4]<stdout>:
[1,13]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,13]<stdout>:                                   SY=200.0),
[1,13]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,13]<stdout>:                              COEF_AMOR=1.0,
[1,13]<stdout>:                              E=200000.0,
[1,13]<stdout>:                              K_DESSIC=0.0,
[1,13]<stdout>:                              NU=0.3),
[1,13]<stdout>:                      INFO=1)
[1,13]<stdout>:
[1,3]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                                   SY=200.0),
[1,3]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,3]<stdout>:                              COEF_AMOR=1.0,
[1,3]<stdout>:                              E=200000.0,
[1,3]<stdout>:                              K_DESSIC=0.0,
[1,3]<stdout>:                              NU=0.3),
[1,3]<stdout>:                      INFO=1)
[1,3]<stdout>:
[1,10]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,10]<stdout>:                                   SY=200.0),
[1,10]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,10]<stdout>:                              COEF_AMOR=1.0,
[1,10]<stdout>:                              E=200000.0,
[1,10]<stdout>:                              K_DESSIC=0.0,
[1,10]<stdout>:                              NU=0.3),
[1,10]<stdout>:                      INFO=1)
[1,10]<stdout>:
[1,15]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,15]<stdout>:# Mémoire (Mo) :  1518.14 /   820.86 /   245.51 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,15]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Mémoire (Mo) :  1486.61 /   815.66 /   243.69 /   221.67 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,7]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,5]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,8]<stdout>:# Mémoire (Mo) :  1466.36 /   820.59 /   246.79 /   223.51 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,6]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,8]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,5]<stdout>:# Mémoire (Mo) :  1519.80 /   820.59 /   246.06 /   222.95 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  1467.19 /   820.10 /   245.63 /   222.83 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  1458.59 /   819.43 /   245.53 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,7]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,6]<stdout>:# Mémoire (Mo) :  1525.86 /   824.46 /   247.82 /   224.06 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :  1581.66 /   827.85 /   248.72 /   224.45 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,12]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,1]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,0]<stdout>:# Résultat commande #0006 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,6]<stdout>:# Fin commande #0004   user+syst:        0.01s (syst:        0.00s, elaps:        0.02s)
[1,14]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Mémoire (Mo) :  1525.18 /   824.54 /   247.78 /   224.00 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,1]<stdout>:# Mémoire (Mo) :  1437.16 /   817.26 /   244.75 /   222.32 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :  1580.54 /   830.27 /   250.88 /   225.84 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,13]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,0]<stdout>:# Mémoire (Mo) :  1690.90 /   898.85 /   291.99 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,10]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,4]<stdout>:# Mémoire (Mo) :  1579.09 /   829.71 /   251.22 /   226.05 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0006   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,4]<stdout>:# Fin commande #0004   user+syst:        0.01s (syst:        0.00s, elaps:        0.02s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Mémoire (Mo) :  1559.35 /   825.66 /   248.56 /   224.42 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Mémoire (Mo) :  1579.41 /   828.36 /   250.70 /   225.71 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,13]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt152
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,15]<stdout>:# Commande #0005 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 152
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt152
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  1508.51 /   821.00 /   246.85 /   223.55 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Commande #0005 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 152
[1,2]<stdout>:# Fin commande #0004   user+syst:        0.01s (syst:        0.00s, elaps:        0.02s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,15]<stdout>:                              TOUT='OUI'),
[1,15]<stdout>:                      INFO=1,
[1,15]<stdout>:                      MAILLAGE='<00000004>')
[1,15]<stdout>:
[1,11]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,11]<stdout>:                              TOUT='OUI'),
[1,11]<stdout>:                      INFO=1,
[1,11]<stdout>:                      MAILLAGE='<00000004>')
[1,11]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt152
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt152
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt152
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0005 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt152
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt152
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt152
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0005 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:# Commande #0005 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 152
[1,6]<stdout>:# Commande #0005 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 152
[1,12]<stdout>:# Commande #0005 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 152
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt152
[1,14]<stdout>:# Commande #0005 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 152
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt152
[1,8]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,8]<stdout>:                              TOUT='OUI'),
[1,8]<stdout>:                      INFO=1,
[1,8]<stdout>:                      MAILLAGE='<00000004>')
[1,8]<stdout>:
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt152
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0005 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 152
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt152
[1,5]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,5]<stdout>:                              TOUT='OUI'),
[1,5]<stdout>:                      INFO=1,
[1,5]<stdout>:                      MAILLAGE='<00000004>')
[1,5]<stdout>:
[1,7]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,7]<stdout>:                              TOUT='OUI'),
[1,7]<stdout>:                      INFO=1,
[1,7]<stdout>:                      MAILLAGE='<00000004>')
[1,7]<stdout>:
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt152
[1,10]<stdout>:# Commande #0005 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 152
[1,6]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,6]<stdout>:                              TOUT='OUI'),
[1,6]<stdout>:                      INFO=1,
[1,6]<stdout>:                      MAILLAGE='<00000004>')
[1,6]<stdout>:
[1,12]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,12]<stdout>:                              TOUT='OUI'),
[1,12]<stdout>:                      INFO=1,
[1,12]<stdout>:                      MAILLAGE='<00000004>')
[1,12]<stdout>:
[1,1]<stdout>:# Commande #0005 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 152
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt152
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt152
[1,14]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,14]<stdout>:                              TOUT='OUI'),
[1,14]<stdout>:                      INFO=1,
[1,14]<stdout>:                      MAILLAGE='<00000004>')
[1,14]<stdout>:
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0005 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 152
[1,0]<stdout>:# Commande #0007 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 152
[1,9]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,9]<stdout>:                              TOUT='OUI'),
[1,9]<stdout>:                      INFO=1,
[1,9]<stdout>:                      MAILLAGE='<00000004>')
[1,9]<stdout>:
[1,13]<stdout>:# Commande #0005 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 152
[1,3]<stdout>:# Commande #0005 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 152
[1,10]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,10]<stdout>:                              TOUT='OUI'),
[1,10]<stdout>:                      INFO=1,
[1,10]<stdout>:                      MAILLAGE='<00000004>')
[1,10]<stdout>:
[1,1]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,1]<stdout>:                              TOUT='OUI'),
[1,1]<stdout>:                      INFO=1,
[1,1]<stdout>:                      MAILLAGE='<00000004>')
[1,1]<stdout>:
[1,4]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,4]<stdout>:                              TOUT='OUI'),
[1,4]<stdout>:                      INFO=1,
[1,4]<stdout>:                      MAILLAGE='<00000004>')
[1,4]<stdout>:
[1,0]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,0]<stdout>:                              TOUT='OUI'),
[1,0]<stdout>:                      INFO=1,
[1,0]<stdout>:                      MAILLAGE='<00000004>')
[1,0]<stdout>:
[1,13]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,13]<stdout>:                              TOUT='OUI'),
[1,13]<stdout>:                      INFO=1,
[1,13]<stdout>:                      MAILLAGE='<00000004>')
[1,13]<stdout>:
[1,3]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,3]<stdout>:                              TOUT='OUI'),
[1,3]<stdout>:                      INFO=1,
[1,3]<stdout>:                      MAILLAGE='<00000004>')
[1,3]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt152
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0005 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 152
[1,2]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,2]<stdout>:                              TOUT='OUI'),
[1,2]<stdout>:                      INFO=1,
[1,2]<stdout>:                      MAILLAGE='<00000004>')
[1,2]<stdout>:
[1,11]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,11]<stdout>:# Mémoire (Mo) :  1486.61 /   815.66 /   243.69 /   221.67 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,11]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Mémoire (Mo) :  1518.14 /   820.86 /   245.51 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,8]<stdout>:# Mémoire (Mo) :  1466.36 /   820.59 /   246.79 /   223.51 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,7]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,14]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,5]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,8]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt161
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :  1525.86 /   824.46 /   247.82 /   224.06 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  1467.19 /   820.10 /   245.63 /   222.83 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Mémoire (Mo) :  1581.66 /   827.85 /   248.72 /   224.45 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,5]<stdout>:# Mémoire (Mo) :  1519.80 /   820.59 /   246.06 /   222.95 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,11]<stdout>:# Commande #0006 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 161
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt161
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,7]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,5]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  1580.54 /   830.27 /   250.88 /   225.84 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,15]<stdout>:# Commande #0006 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 161
[1,11]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,11]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,11]<stdout>:                                    DY=0.0,
[1,11]<stdout>:                                    DZ=0.0,
[1,11]<stdout>:                                    GROUP_MA='LEFT'),
[1,11]<stdout>:                       MODELE=model,
[1,11]<stdout>:                       SYNTAXE='NON')
[1,11]<stdout>:
[1,10]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Mémoire (Mo) :  1458.59 /   819.43 /   245.53 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :  1525.18 /   824.54 /   247.78 /   224.00 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,12]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,15]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,15]<stdout>:                                    DY=0.0,
[1,15]<stdout>:                                    DZ=0.0,
[1,15]<stdout>:                                    GROUP_MA='LEFT'),
[1,15]<stdout>:                       MODELE=model,
[1,15]<stdout>:                       SYNTAXE='NON')
[1,15]<stdout>:
[1,1]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,9]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1579.09 /   829.71 /   251.22 /   226.05 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1437.16 /   817.26 /   244.75 /   222.32 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,1]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,13]<stdout>:# Mémoire (Mo) :  1559.35 /   825.66 /   248.56 /   224.42 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  1579.41 /   828.36 /   250.70 /   225.71 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,3]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt161
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0006 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 161
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt161
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt161
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt161
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt161
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,6]<stdout>:# Commande #0006 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 161
[1,7]<stdout>:# Commande #0006 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 161
[1,14]<stdout>:# Commande #0006 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 161
[1,8]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,8]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,8]<stdout>:                                    DY=0.0,
[1,8]<stdout>:                                    DZ=0.0,
[1,8]<stdout>:                                    GROUP_MA='LEFT'),
[1,8]<stdout>:                       MODELE=model,
[1,8]<stdout>:                       SYNTAXE='NON')
[1,8]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt161
[1,5]<stdout>:# Commande #0006 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 161
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  1508.51 /   821.00 /   246.85 /   223.55 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,7]<stdout>:                                    DY=0.0,
[1,7]<stdout>:                                    DZ=0.0,
[1,7]<stdout>:                                    GROUP_MA='LEFT'),
[1,7]<stdout>:                       MODELE=model,
[1,7]<stdout>:                       SYNTAXE='NON')
[1,7]<stdout>:
[1,10]<stdout>:# Commande #0006 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 161
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt161
[1,6]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,6]<stdout>:                                    DY=0.0,
[1,6]<stdout>:                                    DZ=0.0,
[1,6]<stdout>:                                    GROUP_MA='LEFT'),
[1,6]<stdout>:                       MODELE=model,
[1,6]<stdout>:                       SYNTAXE='NON')
[1,6]<stdout>:
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,14]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,14]<stdout>:                                    DY=0.0,
[1,14]<stdout>:                                    DZ=0.0,
[1,14]<stdout>:                                    GROUP_MA='LEFT'),
[1,14]<stdout>:                       MODELE=model,
[1,14]<stdout>:                       SYNTAXE='NON')
[1,14]<stdout>:
[1,5]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,5]<stdout>:                                    DY=0.0,
[1,5]<stdout>:                                    DZ=0.0,
[1,5]<stdout>:                                    GROUP_MA='LEFT'),
[1,5]<stdout>:                       MODELE=model,
[1,5]<stdout>:                       SYNTAXE='NON')
[1,5]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt161
[1,2]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0006 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 161
[1,10]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,10]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,10]<stdout>:                                    DY=0.0,
[1,10]<stdout>:                                    DZ=0.0,
[1,10]<stdout>:                                    GROUP_MA='LEFT'),
[1,10]<stdout>:                       MODELE=model,
[1,10]<stdout>:                       SYNTAXE='NON')
[1,10]<stdout>:
[1,9]<stdout>:# Commande #0006 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt161
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt161
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,12]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,12]<stdout>:                                    DY=0.0,
[1,12]<stdout>:                                    DZ=0.0,
[1,12]<stdout>:                                    GROUP_MA='LEFT'),
[1,12]<stdout>:                       MODELE=model,
[1,12]<stdout>:                       SYNTAXE='NON')
[1,12]<stdout>:
[1,9]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,9]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,9]<stdout>:                                    DY=0.0,
[1,9]<stdout>:                                    DZ=0.0,
[1,9]<stdout>:                                    GROUP_MA='LEFT'),
[1,9]<stdout>:                       MODELE=model,
[1,9]<stdout>:                       SYNTAXE='NON')
[1,9]<stdout>:
[1,4]<stdout>:# Commande #0006 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 161
[1,1]<stdout>:# Commande #0006 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:# Résultat commande #0007 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,4]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,4]<stdout>:                                    DY=0.0,
[1,4]<stdout>:                                    DZ=0.0,
[1,4]<stdout>:                                    GROUP_MA='LEFT'),
[1,4]<stdout>:                       MODELE=model,
[1,4]<stdout>:                       SYNTAXE='NON')
[1,4]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt161
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt161
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,1]<stdout>:                                    DY=0.0,
[1,1]<stdout>:                                    DZ=0.0,
[1,1]<stdout>:                                    GROUP_MA='LEFT'),
[1,1]<stdout>:                       MODELE=model,
[1,1]<stdout>:                       SYNTAXE='NON')
[1,1]<stdout>:
[1,13]<stdout>:# Commande #0006 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 161
[1,3]<stdout>:# Commande #0006 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:# Mémoire (Mo) :  1690.90 /   898.85 /   291.99 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0007   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,13]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,13]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,13]<stdout>:                                    DY=0.0,
[1,13]<stdout>:                                    DZ=0.0,
[1,13]<stdout>:                                    GROUP_MA='LEFT'),
[1,13]<stdout>:                       MODELE=model,
[1,13]<stdout>:                       SYNTAXE='NON')
[1,13]<stdout>:
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,3]<stdout>:                                    DY=0.0,
[1,3]<stdout>:                                    DZ=0.0,
[1,3]<stdout>:                                    GROUP_MA='LEFT'),
[1,3]<stdout>:                       MODELE=model,
[1,3]<stdout>:                       SYNTAXE='NON')
[1,3]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt161
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0006 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 161
[1,2]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,2]<stdout>:                                    DY=0.0,
[1,2]<stdout>:                                    DZ=0.0,
[1,2]<stdout>:                                    GROUP_MA='LEFT'),
[1,2]<stdout>:                       MODELE=model,
[1,2]<stdout>:                       SYNTAXE='NON')
[1,2]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt161
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0008 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,0]<stdout>:                                    DY=0.0,
[1,0]<stdout>:                                    DZ=0.0,
[1,0]<stdout>:                                    GROUP_MA='LEFT'),
[1,0]<stdout>:                       MODELE=model,
[1,0]<stdout>:                       SYNTAXE='NON')
[1,0]<stdout>:
[1,11]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,11]<stdout>:# Mémoire (Mo) :  1486.61 /   815.66 /   243.69 /   221.67 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0006   user+syst:        0.07s (syst:        0.01s, elaps:        0.07s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,1]<stdout>:# Mémoire (Mo) :  1437.16 /   817.26 /   244.75 /   222.32 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0006   user+syst:        0.07s (syst:        0.00s, elaps:        0.07s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt173
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0007 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 173
[1,11]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,11]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,11]<stdout>:                                            DZ=0.001,
[1,11]<stdout>:                                            GROUP_MA='RIGHT'),
[1,11]<stdout>:                               MODELE=model,
[1,11]<stdout>:                               SYNTAXE='NON')
[1,11]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt173
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0007 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 173
[1,1]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,1]<stdout>:                                            DZ=0.001,
[1,1]<stdout>:                                            GROUP_MA='RIGHT'),
[1,1]<stdout>:                               MODELE=model,
[1,1]<stdout>:                               SYNTAXE='NON')
[1,1]<stdout>:
[1,12]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,7]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,12]<stdout>:# Mémoire (Mo) :  1458.59 /   819.43 /   245.53 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  1467.19 /   820.10 /   245.63 /   222.83 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0006   user+syst:        0.07s (syst:        0.00s, elaps:        0.07s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0006   user+syst:        0.08s (syst:        0.00s, elaps:        0.07s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,15]<stdout>:# Mémoire (Mo) :  1518.14 /   820.86 /   245.51 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0006   user+syst:        0.08s (syst:        0.00s, elaps:        0.07s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt173
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt173
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0007 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 173
[1,7]<stdout>:# Commande #0007 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 173
[1,12]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,12]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,12]<stdout>:                                            DZ=0.001,
[1,12]<stdout>:                                            GROUP_MA='RIGHT'),
[1,12]<stdout>:                               MODELE=model,
[1,12]<stdout>:                               SYNTAXE='NON')
[1,12]<stdout>:
[1,7]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,7]<stdout>:                                            DZ=0.001,
[1,7]<stdout>:                                            GROUP_MA='RIGHT'),
[1,7]<stdout>:                               MODELE=model,
[1,7]<stdout>:                               SYNTAXE='NON')
[1,7]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt173
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0007 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 173
[1,15]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,15]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,15]<stdout>:                                            DZ=0.001,
[1,15]<stdout>:                                            GROUP_MA='RIGHT'),
[1,15]<stdout>:                               MODELE=model,
[1,15]<stdout>:                               SYNTAXE='NON')
[1,15]<stdout>:
[1,5]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,5]<stdout>:# Mémoire (Mo) :  1519.80 /   820.59 /   246.06 /   222.95 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0006   user+syst:        0.07s (syst:        0.00s, elaps:        0.07s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,2]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,8]<stdout>:# Mémoire (Mo) :  1466.36 /   820.59 /   246.79 /   223.51 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :  1508.51 /   821.00 /   246.85 /   223.55 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0006   user+syst:        0.08s (syst:        0.00s, elaps:        0.07s)
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt173
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0006   user+syst:        0.07s (syst:        0.00s, elaps:        0.07s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0007 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 173
[1,5]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,5]<stdout>:                                            DZ=0.001,
[1,5]<stdout>:                                            GROUP_MA='RIGHT'),
[1,5]<stdout>:                               MODELE=model,
[1,5]<stdout>:                               SYNTAXE='NON')
[1,5]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt173
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt173
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0007 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 173
[1,2]<stdout>:# Commande #0007 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 173
[1,8]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,8]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,8]<stdout>:                                            DZ=0.001,
[1,8]<stdout>:                                            GROUP_MA='RIGHT'),
[1,8]<stdout>:                               MODELE=model,
[1,8]<stdout>:                               SYNTAXE='NON')
[1,8]<stdout>:
[1,2]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,2]<stdout>:                                            DZ=0.001,
[1,2]<stdout>:                                            GROUP_MA='RIGHT'),
[1,2]<stdout>:                               MODELE=model,
[1,2]<stdout>:                               SYNTAXE='NON')
[1,2]<stdout>:
[1,9]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,9]<stdout>:# Mémoire (Mo) :  1525.18 /   824.54 /   247.78 /   224.00 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0006   user+syst:        0.08s (syst:        0.00s, elaps:        0.07s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,6]<stdout>:# Mémoire (Mo) :  1525.86 /   824.46 /   247.82 /   224.06 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0006   user+syst:        0.08s (syst:        0.00s, elaps:        0.07s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt173
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0007 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 173
[1,9]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,9]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,9]<stdout>:                                            DZ=0.001,
[1,9]<stdout>:                                            GROUP_MA='RIGHT'),
[1,9]<stdout>:                               MODELE=model,
[1,9]<stdout>:                               SYNTAXE='NON')
[1,9]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt173
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0007 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 173
[1,6]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,6]<stdout>:                                            DZ=0.001,
[1,6]<stdout>:                                            GROUP_MA='RIGHT'),
[1,6]<stdout>:                               MODELE=model,
[1,6]<stdout>:                               SYNTAXE='NON')
[1,6]<stdout>:
[1,13]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,13]<stdout>:# Mémoire (Mo) :  1559.35 /   825.66 /   248.56 /   224.42 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0006   user+syst:        0.07s (syst:        0.00s, elaps:        0.07s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt173
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Commande #0007 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 173
[1,14]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,13]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,13]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,13]<stdout>:                                            DZ=0.001,
[1,13]<stdout>:                                            GROUP_MA='RIGHT'),
[1,13]<stdout>:                               MODELE=model,
[1,13]<stdout>:                               SYNTAXE='NON')
[1,13]<stdout>:
[1,14]<stdout>:# Mémoire (Mo) :  1581.66 /   827.85 /   248.72 /   224.45 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0006   user+syst:        0.07s (syst:        0.01s, elaps:        0.08s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt173
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0007 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 173
[1,14]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,14]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,14]<stdout>:                                            DZ=0.001,
[1,14]<stdout>:                                            GROUP_MA='RIGHT'),
[1,14]<stdout>:                               MODELE=model,
[1,14]<stdout>:                               SYNTAXE='NON')
[1,14]<stdout>:
[1,10]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,10]<stdout>:# Mémoire (Mo) :  1580.54 /   830.27 /   250.88 /   225.84 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0006   user+syst:        0.09s (syst:        0.00s, elaps:        0.08s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,4]<stdout>:# Mémoire (Mo) :  1579.09 /   829.71 /   251.22 /   226.05 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0006   user+syst:        0.08s (syst:        0.00s, elaps:        0.08s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,3]<stdout>:# Mémoire (Mo) :  1579.41 /   828.36 /   250.70 /   225.71 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0006   user+syst:        0.08s (syst:        0.00s, elaps:        0.08s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt173
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0007 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 173
[1,10]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,10]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,10]<stdout>:                                            DZ=0.001,
[1,10]<stdout>:                                            GROUP_MA='RIGHT'),
[1,10]<stdout>:                               MODELE=model,
[1,10]<stdout>:                               SYNTAXE='NON')
[1,10]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt173
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0007 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 173
[1,4]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,4]<stdout>:                                            DZ=0.001,
[1,4]<stdout>:                                            GROUP_MA='RIGHT'),
[1,4]<stdout>:                               MODELE=model,
[1,4]<stdout>:                               SYNTAXE='NON')
[1,4]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt173
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0007 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 173
[1,3]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,3]<stdout>:                                            DZ=0.001,
[1,3]<stdout>:                                            GROUP_MA='RIGHT'),
[1,3]<stdout>:                               MODELE=model,
[1,3]<stdout>:                               SYNTAXE='NON')
[1,3]<stdout>:
[1,0]<stdout>:# Résultat commande #0008 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,0]<stdout>:# Mémoire (Mo) :  1690.90 /   898.85 /   291.99 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0008   user+syst:        0.09s (syst:        0.00s, elaps:        0.08s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt173
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0009 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 173
[1,0]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,0]<stdout>:                                            DZ=0.001,
[1,0]<stdout>:                                            GROUP_MA='RIGHT'),
[1,0]<stdout>:                               MODELE=model,
[1,0]<stdout>:                               SYNTAXE='NON')
[1,0]<stdout>:
[1,11]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,11]<stdout>:<MechanicalDirichletBC>
[1,11]<stdout>:# Mémoire (Mo) :  1486.61 /   815.66 /   243.69 /   221.67 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0007   user+syst:        0.08s (syst:        0.00s, elaps:        0.08s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,1]<stdout>:<MechanicalDirichletBC>
[1,1]<stdout>:# Mémoire (Mo) :  1437.16 /   817.26 /   244.75 /   222.32 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0007   user+syst:        0.09s (syst:        0.00s, elaps:        0.08s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt185
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0008 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 185
[1,11]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,11]<stdout>:                            CHAM_MATER=mater,
[1,11]<stdout>:                            INST=0.0,
[1,11]<stdout>:                            MODELE=model,
[1,11]<stdout>:                            MODE_FOURIER=0,
[1,11]<stdout>:                            OPTION='RIGI_MECA')
[1,11]<stdout>:
[1,15]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,15]<stdout>:<MechanicalDirichletBC>
[1,15]<stdout>:# Mémoire (Mo) :  1518.14 /   820.86 /   245.51 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0007   user+syst:        0.08s (syst:        0.00s, elaps:        0.08s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,12]<stdout>:<MechanicalDirichletBC>
[1,12]<stdout>:# Mémoire (Mo) :  1458.59 /   819.43 /   245.53 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0007   user+syst:        0.08s (syst:        0.00s, elaps:        0.08s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,7]<stdout>:<MechanicalDirichletBC>
[1,7]<stdout>:# Mémoire (Mo) :  1467.19 /   820.10 /   245.63 /   222.83 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0007   user+syst:        0.08s (syst:        0.00s, elaps:        0.08s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt185
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0008 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 185
[1,1]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,1]<stdout>:                            CHAM_MATER=mater,
[1,1]<stdout>:                            INST=0.0,
[1,1]<stdout>:                            MODELE=model,
[1,1]<stdout>:                            MODE_FOURIER=0,
[1,1]<stdout>:                            OPTION='RIGI_MECA')
[1,1]<stdout>:
[1,5]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,5]<stdout>:<MechanicalDirichletBC>
[1,5]<stdout>:# Mémoire (Mo) :  1519.80 /   820.59 /   246.06 /   222.95 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0007   user+syst:        0.09s (syst:        0.00s, elaps:        0.08s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt185
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,8]<stdout>:<MechanicalDirichletBC>
[1,15]<stdout>:# Commande #0008 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 185
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt185
[1,8]<stdout>:# Mémoire (Mo) :  1466.36 /   820.59 /   246.79 /   223.51 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,2]<stdout>:<MechanicalDirichletBC>
[1,8]<stdout>:# Fin commande #0007   user+syst:        0.08s (syst:        0.00s, elaps:        0.08s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,15]<stdout>:                            CHAM_MATER=mater,
[1,15]<stdout>:                            INST=0.0,
[1,15]<stdout>:                            MODELE=model,
[1,15]<stdout>:                            MODE_FOURIER=0,
[1,15]<stdout>:                            OPTION='RIGI_MECA')
[1,15]<stdout>:
[1,2]<stdout>:# Mémoire (Mo) :  1508.51 /   821.00 /   246.85 /   223.55 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Commande #0008 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 185
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt185
[1,2]<stdout>:# Fin commande #0007   user+syst:        0.09s (syst:        0.00s, elaps:        0.08s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,12]<stdout>:                            CHAM_MATER=mater,
[1,12]<stdout>:                            INST=0.0,
[1,12]<stdout>:                            MODELE=model,
[1,12]<stdout>:                            MODE_FOURIER=0,
[1,12]<stdout>:                            OPTION='RIGI_MECA')
[1,12]<stdout>:
[1,7]<stdout>:# Commande #0008 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 185
[1,7]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,7]<stdout>:                            CHAM_MATER=mater,
[1,7]<stdout>:                            INST=0.0,
[1,7]<stdout>:                            MODELE=model,
[1,7]<stdout>:                            MODE_FOURIER=0,
[1,7]<stdout>:                            OPTION='RIGI_MECA')
[1,7]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt185
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,9]<stdout>:<MechanicalDirichletBC>
[1,9]<stdout>:# Mémoire (Mo) :  1525.18 /   824.54 /   247.78 /   224.00 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Commande #0008 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 185
[1,9]<stdout>:# Fin commande #0007   user+syst:        0.08s (syst:        0.00s, elaps:        0.09s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,5]<stdout>:                            CHAM_MATER=mater,
[1,5]<stdout>:                            INST=0.0,
[1,5]<stdout>:                            MODELE=model,
[1,5]<stdout>:                            MODE_FOURIER=0,
[1,5]<stdout>:                            OPTION='RIGI_MECA')
[1,5]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt185
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,6]<stdout>:<MechanicalDirichletBC>
[1,6]<stdout>:# Mémoire (Mo) :  1525.86 /   824.46 /   247.82 /   224.06 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt185
[1,8]<stdout>:# Commande #0008 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 185
[1,6]<stdout>:# Fin commande #0007   user+syst:        0.08s (syst:        0.00s, elaps:        0.09s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,8]<stdout>:                            CHAM_MATER=mater,
[1,8]<stdout>:                            INST=0.0,
[1,8]<stdout>:                            MODELE=model,
[1,8]<stdout>:                            MODE_FOURIER=0,
[1,8]<stdout>:                            OPTION='RIGI_MECA')
[1,8]<stdout>:
[1,2]<stdout>:# Commande #0008 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 185
[1,2]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,2]<stdout>:                            CHAM_MATER=mater,
[1,2]<stdout>:                            INST=0.0,
[1,2]<stdout>:                            MODELE=model,
[1,2]<stdout>:                            MODE_FOURIER=0,
[1,2]<stdout>:                            OPTION='RIGI_MECA')
[1,2]<stdout>:
[1,13]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,13]<stdout>:<MechanicalDirichletBC>
[1,13]<stdout>:# Mémoire (Mo) :  1559.35 /   825.66 /   248.56 /   224.42 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0007   user+syst:        0.09s (syst:        0.00s, elaps:        0.09s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt185
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0008 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 185
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt185
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,9]<stdout>:                            CHAM_MATER=mater,
[1,9]<stdout>:                            INST=0.0,
[1,9]<stdout>:                            MODELE=model,
[1,9]<stdout>:                            MODE_FOURIER=0,
[1,9]<stdout>:                            OPTION='RIGI_MECA')
[1,9]<stdout>:
[1,14]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,14]<stdout>:<MechanicalDirichletBC>
[1,6]<stdout>:# Commande #0008 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 185
[1,14]<stdout>:# Mémoire (Mo) :  1581.66 /   827.85 /   248.72 /   224.45 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0007   user+syst:        0.08s (syst:        0.00s, elaps:        0.08s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,6]<stdout>:                            CHAM_MATER=mater,
[1,6]<stdout>:                            INST=0.0,
[1,6]<stdout>:                            MODELE=model,
[1,6]<stdout>:                            MODE_FOURIER=0,
[1,6]<stdout>:                            OPTION='RIGI_MECA')
[1,6]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt185
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Commande #0008 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 185
[1,13]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,13]<stdout>:                            CHAM_MATER=mater,
[1,13]<stdout>:                            INST=0.0,
[1,13]<stdout>:                            MODELE=model,
[1,13]<stdout>:                            MODE_FOURIER=0,
[1,13]<stdout>:                            OPTION='RIGI_MECA')
[1,13]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt185
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0008 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 185
[1,14]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,14]<stdout>:                            CHAM_MATER=mater,
[1,14]<stdout>:                            INST=0.0,
[1,14]<stdout>:                            MODELE=model,
[1,14]<stdout>:                            MODE_FOURIER=0,
[1,14]<stdout>:                            OPTION='RIGI_MECA')
[1,14]<stdout>:
[1,10]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,10]<stdout>:<MechanicalDirichletBC>
[1,10]<stdout>:# Mémoire (Mo) :  1580.54 /   830.27 /   250.88 /   225.84 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,3]<stdout>:<MechanicalDirichletBC>
[1,10]<stdout>:# Fin commande #0007   user+syst:        0.08s (syst:        0.00s, elaps:        0.08s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Mémoire (Mo) :  1579.41 /   828.36 /   250.70 /   225.71 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,4]<stdout>:<MechanicalDirichletBC>
[1,3]<stdout>:# Fin commande #0007   user+syst:        0.09s (syst:        0.00s, elaps:        0.08s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1579.09 /   829.71 /   251.22 /   226.05 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0007   user+syst:        0.08s (syst:        0.00s, elaps:        0.08s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt185
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt185
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0008 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 185
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt185
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0008 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 185
[1,10]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,10]<stdout>:                            CHAM_MATER=mater,
[1,10]<stdout>:                            INST=0.0,
[1,10]<stdout>:                            MODELE=model,
[1,10]<stdout>:                            MODE_FOURIER=0,
[1,10]<stdout>:                            OPTION='RIGI_MECA')
[1,10]<stdout>:
[1,4]<stdout>:# Commande #0008 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 185
[1,3]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,3]<stdout>:                            CHAM_MATER=mater,
[1,3]<stdout>:                            INST=0.0,
[1,3]<stdout>:                            MODELE=model,
[1,3]<stdout>:                            MODE_FOURIER=0,
[1,3]<stdout>:                            OPTION='RIGI_MECA')
[1,3]<stdout>:
[1,4]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,4]<stdout>:                            CHAM_MATER=mater,
[1,4]<stdout>:                            INST=0.0,
[1,4]<stdout>:                            MODELE=model,
[1,4]<stdout>:                            MODE_FOURIER=0,
[1,4]<stdout>:                            OPTION='RIGI_MECA')
[1,4]<stdout>:
[1,0]<stdout>:# Résultat commande #0009 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,0]<stdout>:<MechanicalDirichletBC>
[1,0]<stdout>:# Mémoire (Mo) :  1690.90 /   898.85 /   291.99 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0009   user+syst:        0.08s (syst:        0.00s, elaps:        0.08s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt185
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0010 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 185
[1,0]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,0]<stdout>:                            CHAM_MATER=mater,
[1,0]<stdout>:                            INST=0.0,
[1,0]<stdout>:                            MODELE=model,
[1,0]<stdout>:                            MODE_FOURIER=0,
[1,0]<stdout>:                            OPTION='RIGI_MECA')
[1,0]<stdout>:
[1,11]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,11]<stdout>:<ElementaryMatrixDisplacementReal>
[1,11]<stdout>:# Mémoire (Mo) :  1486.61 /  1099.44 /   523.41 /   221.67 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0008   user+syst:        1.13s (syst:        0.04s, elaps:        1.17s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt192
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0009 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 192
[1,11]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,11]<stdout>:                  MATR_RIGI=stiff_elem)
[1,11]<stdout>:
[1,1]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,1]<stdout>:<ElementaryMatrixDisplacementReal>
[1,1]<stdout>:# Mémoire (Mo) :  1437.16 /  1108.93 /   532.08 /   222.32 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0008   user+syst:        1.15s (syst:        0.04s, elaps:        1.20s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt192
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0009 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 192
[1,1]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,1]<stdout>:                  MATR_RIGI=stiff_elem)
[1,1]<stdout>:
[1,12]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,12]<stdout>:<ElementaryMatrixDisplacementReal>
[1,12]<stdout>:# Mémoire (Mo) :  1458.59 /  1113.86 /   537.90 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0008   user+syst:        1.17s (syst:        0.06s, elaps:        1.23s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,15]<stdout>:<ElementaryMatrixDisplacementReal>
[1,15]<stdout>:# Mémoire (Mo) :  1518.14 /  1117.93 /   538.18 /   222.76 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0008   user+syst:        1.18s (syst:        0.04s, elaps:        1.23s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt192
[1,7]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,7]<stdout>:<ElementaryMatrixDisplacementReal>
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0009 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 192
[1,7]<stdout>:# Mémoire (Mo) :  1467.19 /  1117.65 /   538.73 /   222.83 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0008   user+syst:        1.16s (syst:        0.07s, elaps:        1.23s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,12]<stdout>:                  MATR_RIGI=stiff_elem)
[1,12]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt192
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0009 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 192
[1,15]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,15]<stdout>:                  MATR_RIGI=stiff_elem)
[1,15]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt192
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0009 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 192
[1,7]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,7]<stdout>:                  MATR_RIGI=stiff_elem)
[1,7]<stdout>:
[1,5]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,5]<stdout>:<ElementaryMatrixDisplacementReal>
[1,5]<stdout>:# Mémoire (Mo) :  1519.80 /  1121.71 /   542.65 /   222.95 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0008   user+syst:        1.17s (syst:        0.06s, elaps:        1.23s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt192
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0009 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 192
[1,5]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,5]<stdout>:                  MATR_RIGI=stiff_elem)
[1,5]<stdout>:
[1,8]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,8]<stdout>:<ElementaryMatrixDisplacementReal>
[1,8]<stdout>:# Mémoire (Mo) :  1466.36 /  1126.28 /   547.87 /   223.51 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0008   user+syst:        1.21s (syst:        0.05s, elaps:        1.25s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt192
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,2]<stdout>:<ElementaryMatrixDisplacementReal>
[1,8]<stdout>:# Commande #0009 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 192
[1,2]<stdout>:# Mémoire (Mo) :  1508.51 /  1127.73 /   548.94 /   223.55 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0008   user+syst:        1.18s (syst:        0.07s, elaps:        1.25s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,8]<stdout>:                  MATR_RIGI=stiff_elem)
[1,8]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt192
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0009 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 192
[1,2]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,2]<stdout>:                  MATR_RIGI=stiff_elem)
[1,2]<stdout>:
[1,6]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,6]<stdout>:<ElementaryMatrixDisplacementReal>
[1,9]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,9]<stdout>:<ElementaryMatrixDisplacementReal>
[1,6]<stdout>:# Mémoire (Mo) :  1525.86 /  1140.59 /   559.32 /   224.06 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :  1525.18 /  1140.33 /   558.89 /   224.00 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0008   user+syst:        1.26s (syst:        0.03s, elaps:        1.29s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0008   user+syst:        1.26s (syst:        0.04s, elaps:        1.29s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt192
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt192
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0009 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 192
[1,9]<stdout>:# Commande #0009 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 192
[1,9]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,9]<stdout>:                  MATR_RIGI=stiff_elem)
[1,9]<stdout>:
[1,6]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,6]<stdout>:                  MATR_RIGI=stiff_elem)
[1,6]<stdout>:
[1,14]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,14]<stdout>:<ElementaryMatrixDisplacementReal>
[1,14]<stdout>:# Mémoire (Mo) :  1581.66 /  1149.50 /   565.28 /   224.45 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0008   user+syst:        1.26s (syst:        0.05s, elaps:        1.31s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt192
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,13]<stdout>:<ElementaryMatrixDisplacementReal>
[1,14]<stdout>:# Commande #0009 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 192
[1,13]<stdout>:# Mémoire (Mo) :  1559.35 /  1144.20 /   564.61 /   224.42 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0008   user+syst:        1.28s (syst:        0.03s, elaps:        1.31s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,14]<stdout>:                  MATR_RIGI=stiff_elem)
[1,14]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt192
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Commande #0009 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 192
[1,13]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,13]<stdout>:                  MATR_RIGI=stiff_elem)
[1,13]<stdout>:
[1,3]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,3]<stdout>:<ElementaryMatrixDisplacementReal>
[1,3]<stdout>:# Mémoire (Mo) :  1579.41 /  1163.01 /   582.36 /   225.71 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0008   user+syst:        1.32s (syst:        0.06s, elaps:        1.38s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt192
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0009 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 192
[1,3]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,3]<stdout>:                  MATR_RIGI=stiff_elem)
[1,3]<stdout>:
[1,10]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,10]<stdout>:<ElementaryMatrixDisplacementReal>
[1,10]<stdout>:# Mémoire (Mo) :  1580.54 /  1167.71 /   582.97 /   225.84 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0008   user+syst:        1.35s (syst:        0.03s, elaps:        1.39s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt192
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0009 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 192
[1,10]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,10]<stdout>:                  MATR_RIGI=stiff_elem)
[1,10]<stdout>:
[1,4]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,4]<stdout>:<ElementaryMatrixDisplacementReal>
[1,4]<stdout>:# Mémoire (Mo) :  1579.09 /  1165.62 /   584.07 /   226.05 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0008   user+syst:        1.34s (syst:        0.04s, elaps:        1.39s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt192
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0009 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 192
[1,4]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,4]<stdout>:                  MATR_RIGI=stiff_elem)
[1,4]<stdout>:
[1,0]<stdout>:# Résultat commande #0010 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,0]<stdout>:<ElementaryMatrixDisplacementReal>
[1,0]<stdout>:# Mémoire (Mo) :  1690.90 /  1193.13 /   598.24 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0010   user+syst:        1.37s (syst:        0.06s, elaps:        1.42s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt192
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0011 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 192
[1,0]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,0]<stdout>:                  MATR_RIGI=stiff_elem)
[1,0]<stdout>:
[1,13]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,13]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,13]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,13]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,13]<stdout>:     aux 0 relations linéaires dualisées.
[1,11]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,11]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,11]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,11]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,11]<stdout>:     aux 0 relations linéaires dualisées.
[1,8]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,8]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,8]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,8]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,8]<stdout>:     aux 0 relations linéaires dualisées.
[1,2]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,2]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,2]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,2]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,2]<stdout>:     aux 0 relations linéaires dualisées.
[1,12]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,12]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,12]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,12]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,12]<stdout>:     aux 0 relations linéaires dualisées.
[1,9]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,9]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,9]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,9]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,9]<stdout>:     aux 0 relations linéaires dualisées.
[1,10]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,10]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,10]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,10]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,10]<stdout>:     aux 0 relations linéaires dualisées.
[1,15]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,15]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,15]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,15]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,15]<stdout>:     aux 0 relations linéaires dualisées.
[1,14]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,14]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,14]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,14]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,14]<stdout>:     aux 0 relations linéaires dualisées.
[1,3]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,3]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,3]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,3]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,3]<stdout>:     aux 0 relations linéaires dualisées.
[1,0]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,0]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,0]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,0]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,0]<stdout>:     aux 0 relations linéaires dualisées.
[1,5]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,5]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,5]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,5]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,5]<stdout>:     aux 0 relations linéaires dualisées.
[1,7]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,7]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,7]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,7]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,7]<stdout>:     aux 0 relations linéaires dualisées.
[1,6]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,6]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,6]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,6]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,6]<stdout>:     aux 0 relations linéaires dualisées.
[1,4]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,4]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,4]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,4]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,4]<stdout>:     aux 0 relations linéaires dualisées.
[1,1]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,1]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,1]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,1]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,1]<stdout>:     aux 0 relations linéaires dualisées.
[1,11]<stdout>:La matrice est de taille 396276 équations.
[1,11]<stdout>:  Elle contient 15576060 termes non nuls si elle est symétrique et 30755844 termes non nuls si elle
[1,11]<stdout>:n'est pas symétrique.
[1,11]<stdout>:  Soit un taux de remplissage de   0.020 %.
[1,14]<stdout>:La matrice est de taille 453198 équations.
[1,14]<stdout>:  Elle contient 17705418 termes non nuls si elle est symétrique et 34957638 termes non nuls si elle
[1,14]<stdout>:n'est pas symétrique.
[1,14]<stdout>:  Soit un taux de remplissage de   0.017 %.
[1,5]<stdout>:La matrice est de taille 423750 équations.
[1,5]<stdout>:  Elle contient 16575054 termes non nuls si elle est symétrique et 32726358 termes non nuls si elle
[1,5]<stdout>:n'est pas symétrique.
[1,5]<stdout>:  Soit un taux de remplissage de   0.018 %.
[1,8]<stdout>:La matrice est de taille 426414 équations.
[1,8]<stdout>:  Elle contient 16769247 termes non nuls si elle est symétrique et 33112080 termes non nuls si elle
[1,8]<stdout>:n'est pas symétrique.
[1,8]<stdout>:  Soit un taux de remplissage de   0.018 %.
[1,15]<stdout>:La matrice est de taille 413724 équations.
[1,15]<stdout>:  Elle contient 16288998 termes non nuls si elle est symétrique et 32164272 termes non nuls si elle
[1,15]<stdout>:n'est pas symétrique.
[1,15]<stdout>:  Soit un taux de remplissage de   0.019 %.
[1,1]<stdout>:La matrice est de taille 406236 équations.
[1,1]<stdout>:  Elle contient 15992331 termes non nuls si elle est symétrique et 31578426 termes non nuls si elle
[1,1]<stdout>:n'est pas symétrique.
[1,1]<stdout>:  Soit un taux de remplissage de   0.019 %.
[1,9]<stdout>:La matrice est de taille 440916 équations.
[1,9]<stdout>:  Elle contient 17332806 termes non nuls si elle est symétrique et 34224696 termes non nuls si elle
[1,9]<stdout>:n'est pas symétrique.
[1,9]<stdout>:  Soit un taux de remplissage de   0.018 %.
[1,12]<stdout>:La matrice est de taille 414174 équations.
[1,12]<stdout>:  Elle contient 16284876 termes non nuls si elle est symétrique et 32155578 termes non nuls si elle
[1,12]<stdout>:n'est pas symétrique.
[1,12]<stdout>:  Soit un taux de remplissage de   0.019 %.
[1,6]<stdout>:La matrice est de taille 440694 équations.
[1,6]<stdout>:  Elle contient 17347896 termes non nuls si elle est symétrique et 34255098 termes non nuls si elle
[1,6]<stdout>:n'est pas symétrique.
[1,6]<stdout>:  Soit un taux de remplissage de   0.018 %.
[1,13]<stdout>:La matrice est de taille 449880 équations.
[1,13]<stdout>:  Elle contient 17639850 termes non nuls si elle est symétrique et 34829820 termes non nuls si elle
[1,13]<stdout>:n'est pas symétrique.
[1,13]<stdout>:  Soit un taux de remplissage de   0.017 %.
[1,7]<stdout>:La matrice est de taille 415116 équations.
[1,7]<stdout>:  Elle contient 16325820 termes non nuls si elle est symétrique et 32236524 termes non nuls si elle
[1,7]<stdout>:n'est pas symétrique.
[1,7]<stdout>:  Soit un taux de remplissage de   0.019 %.
[1,2]<stdout>:La matrice est de taille 427260 équations.
[1,2]<stdout>:  Elle contient 16821645 termes non nuls si elle est symétrique et 33216030 termes non nuls si elle
[1,2]<stdout>:n'est pas symétrique.
[1,2]<stdout>:  Soit un taux de remplissage de   0.018 %.
[1,0]<stdout>:La matrice est de taille 490599 équations.
[1,0]<stdout>:  Elle contient 19278306 termes non nuls si elle est symétrique et 38066013 termes non nuls si elle
[1,0]<stdout>:n'est pas symétrique.
[1,0]<stdout>:  Soit un taux de remplissage de   0.016 %.
[1,3]<stdout>:La matrice est de taille 470838 équations.
[1,3]<stdout>:  Elle contient 18500046 termes non nuls si elle est symétrique et 36529254 termes non nuls si elle
[1,3]<stdout>:n'est pas symétrique.
[1,3]<stdout>:  Soit un taux de remplissage de   0.016 %.
[1,10]<stdout>:La matrice est de taille 471390 équations.
[1,10]<stdout>:  Elle contient 18518520 termes non nuls si elle est symétrique et 36565650 termes non nuls si elle
[1,10]<stdout>:n'est pas symétrique.
[1,10]<stdout>:  Soit un taux de remplissage de   0.016 %.
[1,4]<stdout>:La matrice est de taille 473352 équations.
[1,4]<stdout>:  Elle contient 18575931 termes non nuls si elle est symétrique et 36678510 termes non nuls si elle
[1,4]<stdout>:n'est pas symétrique.
[1,4]<stdout>:  Soit un taux de remplissage de   0.016 %.
[1,6]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,11]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,8]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,9]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,10]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,6]<stdout>:# Mémoire (Mo) :  1676.34 /  1237.04 /  1096.06 /   719.18 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0009   user+syst:        0.94s (syst:        0.93s, elaps:        1.87s)
[1,14]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,4]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,11]<stdout>:# Mémoire (Mo) :  1628.39 /  1189.09 /  1049.82 /   708.12 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :  1710.03 /  1270.73 /  1126.55 /   726.72 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  1662.09 /  1222.79 /  1081.12 /   715.75 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :  1676.04 /  1236.74 /  1095.61 /   719.10 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,12]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,11]<stdout>:# Fin commande #0009   user+syst:        1.07s (syst:        0.93s, elaps:        2.00s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Fin commande #0009   user+syst:        0.86s (syst:        0.91s, elaps:        1.77s)
[1,8]<stdout>:# Fin commande #0009   user+syst:        1.00s (syst:        0.91s, elaps:        1.91s)
[1,7]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0009   user+syst:        0.95s (syst:        0.92s, elaps:        1.87s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :  1690.94 /  1251.64 /  1104.55 /   721.58 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1711.91 /  1272.62 /  1127.96 /   727.21 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  1643.72 /  1204.42 /  1068.38 /   712.65 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  1656.58 /  1217.29 /  1075.20 /   714.47 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0009   user+syst:        0.95s (syst:        0.90s, elaps:        1.85s)
[1,4]<stdout>:# Fin commande #0009   user+syst:        0.80s (syst:        0.97s, elaps:        1.77s)
[1,3]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,7]<stdout>:# Mémoire (Mo) :  1647.74 /  1208.44 /  1069.43 /   712.91 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,5]<stdout>:# Fin commande #0009   user+syst:        1.02s (syst:        0.91s, elaps:        1.93s)
[1,1]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,12]<stdout>:# Fin commande #0009   user+syst:        1.04s (syst:        0.90s, elaps:        1.94s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,7]<stdout>:# Fin commande #0009   user+syst:        0.98s (syst:        0.96s, elaps:        1.94s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Mémoire (Mo) :  1708.81 /  1269.52 /  1125.88 /   726.52 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  1647.79 /  1208.50 /  1068.62 /   712.64 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1637.14 /  1197.85 /  1060.82 /   710.75 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  1685.13 /  1245.83 /  1103.28 /   721.10 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0009   user+syst:        0.90s (syst:        0.88s, elaps:        1.78s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0009   user+syst:        1.06s (syst:        0.88s, elaps:        1.94s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0009   user+syst:        1.10s (syst:        0.88s, elaps:        1.97s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Fin commande #0009   user+syst:        0.90s (syst:        0.95s, elaps:        1.84s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,2]<stdout>:# Mémoire (Mo) :  1663.81 /  1224.52 /  1082.46 /   716.03 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0009   user+syst:        1.02s (syst:        0.89s, elaps:        1.91s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt197
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt197
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt197
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt197
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt197
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0010 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 197
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt197
[1,11]<stdout>:# Commande #0010 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 197
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt197
[1,8]<stdout>:# Commande #0010 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 197
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0010 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 197
[1,4]<stdout>:# Commande #0010 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 197
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,11]<stdout>:                         INFO=1,
[1,11]<stdout>:                         MATR_ELEM=stiff_elem,
[1,11]<stdout>:                         NUME_DDL=dofNum)
[1,11]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt197
[1,9]<stdout>:# Commande #0010 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 197
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,8]<stdout>:                         INFO=1,
[1,8]<stdout>:                         MATR_ELEM=stiff_elem,
[1,8]<stdout>:                         NUME_DDL=dofNum)
[1,8]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt197
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt197
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0010 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 197
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt197
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0010 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 197
[1,10]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,10]<stdout>:                         INFO=1,
[1,10]<stdout>:                         MATR_ELEM=stiff_elem,
[1,10]<stdout>:                         NUME_DDL=dofNum)
[1,10]<stdout>:
[1,4]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:                         INFO=1,
[1,4]<stdout>:                         MATR_ELEM=stiff_elem,
[1,4]<stdout>:                         NUME_DDL=dofNum)
[1,4]<stdout>:
[1,13]<stdout>:# Commande #0010 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 197
[1,7]<stdout>:# Commande #0010 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 197
[1,9]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,9]<stdout>:                         INFO=1,
[1,9]<stdout>:                         MATR_ELEM=stiff_elem,
[1,9]<stdout>:                         NUME_DDL=dofNum)
[1,9]<stdout>:
[1,12]<stdout>:# Commande #0010 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 197
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt197
[1,6]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:                         INFO=1,
[1,6]<stdout>:                         MATR_ELEM=stiff_elem,
[1,6]<stdout>:                         NUME_DDL=dofNum)
[1,6]<stdout>:
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,14]<stdout>:                         INFO=1,
[1,14]<stdout>:                         MATR_ELEM=stiff_elem,
[1,14]<stdout>:                         NUME_DDL=dofNum)
[1,14]<stdout>:
[1,0]<stdout>:# Résultat commande #0011 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt197
[1,5]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:                         INFO=1,
[1,5]<stdout>:                         MATR_ELEM=stiff_elem,
[1,5]<stdout>:                         NUME_DDL=dofNum)
[1,5]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt197
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,13]<stdout>:                         INFO=1,
[1,13]<stdout>:                         MATR_ELEM=stiff_elem,
[1,13]<stdout>:                         NUME_DDL=dofNum)
[1,13]<stdout>:
[1,3]<stdout>:# Commande #0010 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 197
[1,7]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:                         INFO=1,
[1,7]<stdout>:                         MATR_ELEM=stiff_elem,
[1,7]<stdout>:                         NUME_DDL=dofNum)
[1,7]<stdout>:
[1,12]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,12]<stdout>:                         INFO=1,
[1,12]<stdout>:                         MATR_ELEM=stiff_elem,
[1,12]<stdout>:                         NUME_DDL=dofNum)
[1,12]<stdout>:
[1,1]<stdout>:# Commande #0010 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 197
[1,0]<stdout>:# Mémoire (Mo) :  1743.42 /  1304.12 /  1146.24 /   731.50 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Commande #0010 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 197
[1,0]<stdout>:# Fin commande #0011   user+syst:        0.81s (syst:        0.92s, elaps:        1.74s)
[1,3]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:                         INFO=1,
[1,3]<stdout>:                         MATR_ELEM=stiff_elem,
[1,3]<stdout>:                         NUME_DDL=dofNum)
[1,3]<stdout>:
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,15]<stdout>:                         INFO=1,
[1,15]<stdout>:                         MATR_ELEM=stiff_elem,
[1,15]<stdout>:                         NUME_DDL=dofNum)
[1,15]<stdout>:
[1,1]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:                         INFO=1,
[1,1]<stdout>:                         MATR_ELEM=stiff_elem,
[1,1]<stdout>:                         NUME_DDL=dofNum)
[1,1]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt197
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0010 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 197
[1,2]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:                         INFO=1,
[1,2]<stdout>:                         MATR_ELEM=stiff_elem,
[1,2]<stdout>:                         NUME_DDL=dofNum)
[1,2]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt197
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0012 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 197
[1,0]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:                         INFO=1,
[1,0]<stdout>:                         MATR_ELEM=stiff_elem,
[1,0]<stdout>:                         NUME_DDL=dofNum)
[1,0]<stdout>:
[1,11]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,11]<stdout>:<AssemblyMatrixDisplacementReal>
[1,8]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,8]<stdout>:<AssemblyMatrixDisplacementReal>
[1,11]<stdout>:# Mémoire (Mo) :  1628.39 /  1310.96 /  1049.82 /   708.12 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  1662.09 /  1353.99 /  1081.12 /   715.75 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,6]<stdout>:<AssemblyMatrixDisplacementReal>
[1,11]<stdout>:# Fin commande #0010   user+syst:        0.62s (syst:        0.04s, elaps:        0.67s)
[1,14]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,14]<stdout>:<AssemblyMatrixDisplacementReal>
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,5]<stdout>:<AssemblyMatrixDisplacementReal>
[1,8]<stdout>:# Fin commande #0010   user+syst:        0.64s (syst:        0.02s, elaps:        0.67s)
[1,10]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,10]<stdout>:<AssemblyMatrixDisplacementReal>
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :  1676.34 /  1372.76 /  1096.06 /   719.18 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,7]<stdout>:<AssemblyMatrixDisplacementReal>
[1,14]<stdout>:# Mémoire (Mo) :  1690.94 /  1390.19 /  1104.55 /   721.58 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,9]<stdout>:<AssemblyMatrixDisplacementReal>
[1,5]<stdout>:# Mémoire (Mo) :  1656.58 /  1346.98 /  1075.20 /   714.47 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :  1710.03 /  1415.62 /  1126.55 /   726.72 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0010   user+syst:        0.63s (syst:        0.03s, elaps:        0.67s)
[1,4]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,4]<stdout>:<AssemblyMatrixDisplacementReal>
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Fin commande #0010   user+syst:        0.61s (syst:        0.05s, elaps:        0.67s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0010   user+syst:        0.62s (syst:        0.04s, elaps:        0.67s)
[1,10]<stdout>:# Fin commande #0010   user+syst:        0.61s (syst:        0.05s, elaps:        0.67s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,15]<stdout>:<AssemblyMatrixDisplacementReal>
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,12]<stdout>:<AssemblyMatrixDisplacementReal>
[1,9]<stdout>:# Mémoire (Mo) :  1676.04 /  1372.35 /  1095.61 /   719.10 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  1647.74 /  1336.17 /  1069.43 /   712.91 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0010   user+syst:        0.62s (syst:        0.04s, elaps:        0.67s)
[1,9]<stdout>:# Fin commande #0010   user+syst:        0.62s (syst:        0.04s, elaps:        0.67s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,3]<stdout>:<AssemblyMatrixDisplacementReal>
[1,4]<stdout>:# Mémoire (Mo) :  1711.91 /  1417.96 /  1127.96 /   727.21 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,1]<stdout>:<AssemblyMatrixDisplacementReal>
[1,15]<stdout>:# Mémoire (Mo) :  1647.79 /  1335.93 /  1068.62 /   712.64 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  1643.72 /  1331.83 /  1068.38 /   712.65 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0010   user+syst:        0.61s (syst:        0.05s, elaps:        0.67s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,13]<stdout>:<AssemblyMatrixDisplacementReal>
[1,12]<stdout>:# Fin commande #0010   user+syst:        0.61s (syst:        0.05s, elaps:        0.67s)
[1,3]<stdout>:# Mémoire (Mo) :  1708.81 /  1414.25 /  1125.88 /   726.52 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0010   user+syst:        0.62s (syst:        0.04s, elaps:        0.67s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0010   user+syst:        0.62s (syst:        0.04s, elaps:        0.67s)
[1,1]<stdout>:# Mémoire (Mo) :  1637.14 /  1322.96 /  1060.82 /   710.75 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  1685.13 /  1383.85 /  1103.28 /   721.10 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0010   user+syst:        0.61s (syst:        0.05s, elaps:        0.67s)
[1,13]<stdout>:# Fin commande #0010   user+syst:        0.62s (syst:        0.05s, elaps:        0.67s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,2]<stdout>:<AssemblyMatrixDisplacementReal>
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  1663.81 /  1356.12 /  1082.46 /   716.03 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0010   user+syst:        0.62s (syst:        0.03s, elaps:        0.66s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0012 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,0]<stdout>:<AssemblyMatrixDisplacementReal>
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt204
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt204
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  1743.42 /  1454.95 /  1146.24 /   731.50 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt204
[1,8]<stdout>:# Commande #0011 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 204
[1,11]<stdout>:# Commande #0011 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 204
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt204
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt204
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt204
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0012   user+syst:        0.60s (syst:        0.06s, elaps:        0.66s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0011 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 204
[1,8]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,8]<stdout>:                         TOUT='OUI',
[1,8]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,8]<stdout>:                 INFO=1,
[1,8]<stdout>:                 MAILLAGE='<00000004>',
[1,8]<stdout>:                 OPERATION='AFFE',
[1,8]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,8]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt204
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0011 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 204
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt204
[1,11]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,11]<stdout>:                         TOUT='OUI',
[1,11]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,11]<stdout>:                 INFO=1,
[1,11]<stdout>:                 MAILLAGE='<00000004>',
[1,11]<stdout>:                 OPERATION='AFFE',
[1,11]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,11]<stdout>:
[1,14]<stdout>:# Commande #0011 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 204
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0011 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 204
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt204
[1,6]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,6]<stdout>:                         TOUT='OUI',
[1,6]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,6]<stdout>:                 INFO=1,
[1,6]<stdout>:                 MAILLAGE='<00000004>',
[1,6]<stdout>:                 OPERATION='AFFE',
[1,6]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,6]<stdout>:
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0011 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 204
[1,7]<stdout>:# Commande #0011 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 204
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt204
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt204
[1,14]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,14]<stdout>:                         TOUT='OUI',
[1,14]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,14]<stdout>:                 INFO=1,
[1,14]<stdout>:                 MAILLAGE='<00000004>',
[1,14]<stdout>:                 OPERATION='AFFE',
[1,14]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,14]<stdout>:
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,5]<stdout>:                         TOUT='OUI',
[1,5]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,5]<stdout>:                 INFO=1,
[1,5]<stdout>:                 MAILLAGE='<00000004>',
[1,5]<stdout>:                 OPERATION='AFFE',
[1,5]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,5]<stdout>:
[1,10]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,10]<stdout>:                         TOUT='OUI',
[1,10]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,10]<stdout>:                 INFO=1,
[1,10]<stdout>:                 MAILLAGE='<00000004>',
[1,10]<stdout>:                 OPERATION='AFFE',
[1,10]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,10]<stdout>:
[1,4]<stdout>:# Commande #0011 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 204
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt204
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0011 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 204
[1,15]<stdout>:# Commande #0011 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 204
[1,9]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,9]<stdout>:                         TOUT='OUI',
[1,9]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,9]<stdout>:                 INFO=1,
[1,9]<stdout>:                 MAILLAGE='<00000004>',
[1,9]<stdout>:                 OPERATION='AFFE',
[1,9]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,9]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt204
[1,7]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,7]<stdout>:                         TOUT='OUI',
[1,7]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,7]<stdout>:                 INFO=1,
[1,7]<stdout>:                 MAILLAGE='<00000004>',
[1,7]<stdout>:                 OPERATION='AFFE',
[1,7]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,7]<stdout>:
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt204
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0011 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 204
[1,4]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,4]<stdout>:                         TOUT='OUI',
[1,4]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,4]<stdout>:                 INFO=1,
[1,4]<stdout>:                 MAILLAGE='<00000004>',
[1,4]<stdout>:                 OPERATION='AFFE',
[1,4]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,4]<stdout>:
[1,12]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,12]<stdout>:                         TOUT='OUI',
[1,12]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,12]<stdout>:                 INFO=1,
[1,12]<stdout>:                 MAILLAGE='<00000004>',
[1,12]<stdout>:                 OPERATION='AFFE',
[1,12]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,12]<stdout>:
[1,1]<stdout>:# Commande #0011 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 204
[1,15]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,15]<stdout>:                         TOUT='OUI',
[1,15]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,15]<stdout>:                 INFO=1,
[1,15]<stdout>:                 MAILLAGE='<00000004>',
[1,15]<stdout>:                 OPERATION='AFFE',
[1,15]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,15]<stdout>:
[1,13]<stdout>:# Commande #0011 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 204
[1,3]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,3]<stdout>:                         TOUT='OUI',
[1,3]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,3]<stdout>:                 INFO=1,
[1,3]<stdout>:                 MAILLAGE='<00000004>',
[1,3]<stdout>:                 OPERATION='AFFE',
[1,3]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,3]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt204
[1,1]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,1]<stdout>:                         TOUT='OUI',
[1,1]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,1]<stdout>:                 INFO=1,
[1,1]<stdout>:                 MAILLAGE='<00000004>',
[1,1]<stdout>:                 OPERATION='AFFE',
[1,1]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,1]<stdout>:
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,13]<stdout>:                         TOUT='OUI',
[1,13]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,13]<stdout>:                 INFO=1,
[1,13]<stdout>:                 MAILLAGE='<00000004>',
[1,13]<stdout>:                 OPERATION='AFFE',
[1,13]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,13]<stdout>:
[1,2]<stdout>:# Commande #0011 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 204
[1,2]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,2]<stdout>:                         TOUT='OUI',
[1,2]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,2]<stdout>:                 INFO=1,
[1,2]<stdout>:                 MAILLAGE='<00000004>',
[1,2]<stdout>:                 OPERATION='AFFE',
[1,2]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,2]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt204
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0013 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 204
[1,0]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,0]<stdout>:                         TOUT='OUI',
[1,0]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,0]<stdout>:                 INFO=1,
[1,0]<stdout>:                 MAILLAGE='<00000004>',
[1,0]<stdout>:                 OPERATION='AFFE',
[1,0]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,0]<stdout>:
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,11]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,11]<stdout>:# Mémoire (Mo) :  1628.39 /  1335.14 /  1049.82 /   708.12 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,11]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.02s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,1]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,1]<stdout>:# Mémoire (Mo) :  1637.14 /  1347.77 /  1060.82 /   710.75 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,1]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.02s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt223
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,11]<stdout>:# Commande #0012 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 223
[1,12]<stdout>:# Mémoire (Mo) :  1643.72 /  1357.11 /  1068.38 /   712.65 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.02s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,11]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,11]<stdout>:                             INFO=1,
[1,11]<stdout>:                             INST=0.0,
[1,11]<stdout>:                             NUME_DDL=dofNum)
[1,11]<stdout>:
[1,15]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,7]<stdout>:# Mémoire (Mo) :  1647.74 /  1361.51 /  1069.43 /   712.91 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.02s)
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Mémoire (Mo) :  1647.79 /  1361.20 /  1068.62 /   712.64 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.00
[1,15]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt223
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,1]<stdout>:# Commande #0012 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 223
[1,5]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,8]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,5]<stdout>:# Mémoire (Mo) :  1656.58 /  1372.85 /  1075.20 /   714.47 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,1]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:                             INFO=1,
[1,1]<stdout>:                             INST=0.0,
[1,1]<stdout>:                             NUME_DDL=dofNum)
[1,1]<stdout>:
[1,5]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Mémoire (Mo) :  1662.09 /  1380.02 /  1081.12 /   715.75 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt223
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,8]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0012 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 223
[1,2]<stdout>:# Mémoire (Mo) :  1663.81 /  1382.21 /  1082.46 /   716.03 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt223
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.02s, elaps:        0.03s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,12]<stdout>:                             INFO=1,
[1,12]<stdout>:                             INST=0.0,
[1,12]<stdout>:                             NUME_DDL=dofNum)
[1,12]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt223
[1,7]<stdout>:# Commande #0012 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 223
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,9]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,15]<stdout>:# Commande #0012 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 223
[1,6]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,9]<stdout>:# Mémoire (Mo) :  1676.04 /  1399.28 /  1095.61 /   719.10 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:                             INFO=1,
[1,7]<stdout>:                             INST=0.0,
[1,7]<stdout>:                             NUME_DDL=dofNum)
[1,7]<stdout>:
[1,6]<stdout>:# Mémoire (Mo) :  1676.34 /  1399.67 /  1096.06 /   719.18 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,15]<stdout>:                             INFO=1,
[1,15]<stdout>:                             INST=0.0,
[1,15]<stdout>:                             NUME_DDL=dofNum)
[1,15]<stdout>:
[1,13]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,6]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt223
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Mémoire (Mo) :  1685.13 /  1411.32 /  1103.28 /   721.10 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Commande #0012 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 223
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt223
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,14]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0012 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 223
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt223
[1,14]<stdout>:# Mémoire (Mo) :  1690.94 /  1417.86 /  1104.55 /   721.58 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:                             INFO=1,
[1,5]<stdout>:                             INST=0.0,
[1,5]<stdout>:                             NUME_DDL=dofNum)
[1,5]<stdout>:
[1,14]<stdout>:# Fin commande #0011   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0012 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 223
[1,8]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,8]<stdout>:                             INFO=1,
[1,8]<stdout>:                             INST=0.0,
[1,8]<stdout>:                             NUME_DDL=dofNum)
[1,8]<stdout>:
[1,2]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:                             INFO=1,
[1,2]<stdout>:                             INST=0.0,
[1,2]<stdout>:                             NUME_DDL=dofNum)
[1,2]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt223
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt223
[1,10]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0012 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 223
[1,6]<stdout>:# Commande #0012 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 223
[1,10]<stdout>:# Mémoire (Mo) :  1710.03 /  1444.40 /  1126.55 /   726.72 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt223
[1,4]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,10]<stdout>:# Fin commande #0011   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,9]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,9]<stdout>:                             INFO=1,
[1,9]<stdout>:                             INST=0.0,
[1,9]<stdout>:                             NUME_DDL=dofNum)
[1,9]<stdout>:
[1,13]<stdout>:# Commande #0012 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 223
[1,4]<stdout>:# Mémoire (Mo) :  1711.91 /  1446.86 /  1127.96 /   727.21 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:                             INFO=1,
[1,6]<stdout>:                             INST=0.0,
[1,6]<stdout>:                             NUME_DDL=dofNum)
[1,6]<stdout>:
[1,3]<stdout>:# Mémoire (Mo) :  1708.81 /  1443.00 /  1125.88 /   726.52 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.02s, elaps:        0.03s)
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt223
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0012 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 223
[1,13]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,13]<stdout>:                             INFO=1,
[1,13]<stdout>:                             INST=0.0,
[1,13]<stdout>:                             NUME_DDL=dofNum)
[1,13]<stdout>:
[1,0]<stdout>:# Résultat commande #0013 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,14]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,14]<stdout>:                             INFO=1,
[1,14]<stdout>:                             INST=0.0,
[1,14]<stdout>:                             NUME_DDL=dofNum)
[1,14]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1743.42 /  1484.91 /  1146.24 /   731.50 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0013   user+syst:        0.01s (syst:        0.01s, elaps:        0.03s)
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt223
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0012 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 223
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt223
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt223
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0012 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 223
[1,10]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,10]<stdout>:                             INFO=1,
[1,10]<stdout>:                             INST=0.0,
[1,10]<stdout>:                             NUME_DDL=dofNum)
[1,10]<stdout>:
[1,3]<stdout>:# Commande #0012 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 223
[1,4]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:                             INFO=1,
[1,4]<stdout>:                             INST=0.0,
[1,4]<stdout>:                             NUME_DDL=dofNum)
[1,4]<stdout>:
[1,3]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:                             INFO=1,
[1,3]<stdout>:                             INST=0.0,
[1,3]<stdout>:                             NUME_DDL=dofNum)
[1,3]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt223
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0014 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 223
[1,0]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:                             INFO=1,
[1,0]<stdout>:                             INST=0.0,
[1,0]<stdout>:                             NUME_DDL=dofNum)
[1,0]<stdout>:
[1,11]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,11]<stdout>:# Mémoire (Mo) :  1628.39 /  1338.17 /  1049.82 /   708.12 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,12]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,1]<stdout>:# Mémoire (Mo) :  1637.14 /  1350.87 /  1060.82 /   710.75 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  1643.72 /  1360.27 /  1068.38 /   712.65 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0012   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,7]<stdout>:# Mémoire (Mo) :  1647.74 /  1364.68 /  1069.43 /   712.91 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,15]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,5]<stdout>:# Mémoire (Mo) :  1656.58 /  1376.09 /  1075.20 /   714.47 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  1647.79 /  1364.36 /  1068.62 /   712.64 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,8]<stdout>:# Mémoire (Mo) :  1662.09 /  1383.27 /  1081.12 /   715.75 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0012   user+syst:        0.04s (syst:        0.00s, elaps:        0.03s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,6]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,9]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,2]<stdout>:# Mémoire (Mo) :  1663.81 /  1385.47 /  1082.46 /   716.03 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  1676.34 /  1403.03 /  1096.06 /   719.18 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :  1676.04 /  1402.64 /  1095.61 /   719.10 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.03s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,6]<stdout>:# Fin commande #0012   user+syst:        0.04s (syst:        0.00s, elaps:        0.03s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,14]<stdout>:# Mémoire (Mo) :  1690.94 /  1421.32 /  1104.55 /   721.58 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,14]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Mémoire (Mo) :  1685.13 /  1414.75 /  1103.28 /   721.10 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,10]<stdout>:# Mémoire (Mo) :  1710.03 /  1448.00 /  1126.55 /   726.72 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.01s, elaps:        0.04s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,4]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,3]<stdout>:# Mémoire (Mo) :  1708.81 /  1446.59 /  1125.88 /   726.52 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :  1711.91 /  1450.47 /  1127.96 /   727.21 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.01s, elaps:        0.04s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0014 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,0]<stdout>:# Mémoire (Mo) :  1743.42 /  1488.65 /  1146.24 /   731.50 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0014   user+syst:        0.03s (syst:        0.02s, elaps:        0.04s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:  0 KSP unpreconditioned resid norm 2.792302114902e+02 true resid norm 2.792302114902e+02 ||r(i)||/||b|| 1.000000000000e+00
[1,0]<stdout>:  1 KSP unpreconditioned resid norm 4.042538454432e+01 true resid norm 4.042538454432e+01 ||r(i)||/||b|| 1.447743936037e-01
[1,0]<stdout>:  2 KSP unpreconditioned resid norm 6.015902992508e+00 true resid norm 6.015902992508e+00 ||r(i)||/||b|| 2.154459920509e-02
[1,0]<stdout>:  3 KSP unpreconditioned resid norm 2.191031984478e+00 true resid norm 2.191031984478e+00 ||r(i)||/||b|| 7.846686691904e-03
[1,0]<stdout>:  4 KSP unpreconditioned resid norm 1.094007244594e+00 true resid norm 1.094007244594e+00 ||r(i)||/||b|| 3.917940106680e-03
[1,0]<stdout>:  5 KSP unpreconditioned resid norm 5.781497574419e-01 true resid norm 5.781497574421e-01 ||r(i)||/||b|| 2.070512908888e-03
[1,0]<stdout>:  6 KSP unpreconditioned resid norm 3.168114288573e-01 true resid norm 3.168114288574e-01 ||r(i)||/||b|| 1.134588650586e-03
[1,0]<stdout>:  7 KSP unpreconditioned resid norm 1.775923486874e-01 true resid norm 1.775923486876e-01 ||r(i)||/||b|| 6.360069268285e-04
[1,0]<stdout>:  8 KSP unpreconditioned resid norm 9.950483810251e-02 true resid norm 9.950483810258e-02 ||r(i)||/||b|| 3.563541264806e-04
[1,0]<stdout>:  9 KSP unpreconditioned resid norm 5.369607017120e-02 true resid norm 5.369607017127e-02 ||r(i)||/||b|| 1.923003599242e-04
[1,0]<stdout>: 10 KSP unpreconditioned resid norm 2.941165953940e-02 true resid norm 2.941165953944e-02 ||r(i)||/||b|| 1.053312225152e-04
[1,0]<stdout>: 11 KSP unpreconditioned resid norm 1.651342674368e-02 true resid norm 1.651342674373e-02 ||r(i)||/||b|| 5.913911197358e-05
[1,0]<stdout>: 12 KSP unpreconditioned resid norm 9.232931199196e-03 true resid norm 9.232931199220e-03 ||r(i)||/||b|| 3.306565987235e-05
[1,0]<stdout>: 13 KSP unpreconditioned resid norm 5.158020871582e-03 true resid norm 5.158020871625e-03 ||r(i)||/||b|| 1.847228795229e-05
[1,0]<stdout>: 14 KSP unpreconditioned resid norm 2.844543217584e-03 true resid norm 2.844543217612e-03 ||r(i)||/||b|| 1.018708972224e-05
[1,0]<stdout>: 15 KSP unpreconditioned resid norm 1.578616920221e-03 true resid norm 1.578616920262e-03 ||r(i)||/||b|| 5.653460318055e-06
[1,0]<stdout>: 16 KSP unpreconditioned resid norm 8.844882351025e-04 true resid norm 8.844882351416e-04 ||r(i)||/||b|| 3.167595047904e-06
[1,0]<stdout>: 17 KSP unpreconditioned resid norm 4.905803389431e-04 true resid norm 4.905803389887e-04 ||r(i)||/||b|| 1.756902794904e-06
[1,0]<stdout>: 18 KSP unpreconditioned resid norm 2.724159914364e-04 true resid norm 2.724159914643e-04 ||r(i)||/||b|| 9.755964084634e-07
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt72
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt72
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt72
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt72
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt72
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt72
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt72
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,9]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,15]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,3]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt72
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,13]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt72
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt72
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt72
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt72
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt72
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt72
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt72
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,1]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,8]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,11]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,4]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,6]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,10]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,2]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,9]<stdout>:FIN(INFO_RESU='NON',
[1,9]<stdout>:    RETASSAGE='NON')
[1,9]<stdout>:
[1,14]<stdout>:FIN(INFO_RESU='NON',
[1,14]<stdout>:    RETASSAGE='NON')
[1,14]<stdout>:
[1,5]<stdout>:FIN(INFO_RESU='NON',
[1,5]<stdout>:    RETASSAGE='NON')
[1,5]<stdout>:
[1,12]<stdout>:FIN(INFO_RESU='NON',
[1,12]<stdout>:    RETASSAGE='NON')
[1,12]<stdout>:
[1,15]<stdout>:FIN(INFO_RESU='NON',
[1,15]<stdout>:    RETASSAGE='NON')
[1,15]<stdout>:
[1,3]<stdout>:FIN(INFO_RESU='NON',
[1,3]<stdout>:    RETASSAGE='NON')
[1,3]<stdout>:
[1,13]<stdout>:FIN(INFO_RESU='NON',
[1,13]<stdout>:    RETASSAGE='NON')
[1,13]<stdout>:
[1,0]<stdout>:| Refinement       |           7 |
[1,0]<stdout>:| :--------------- | ----------: |
[1,0]<stdout>:| Number of cells  |   2 097 152 |
[1,0]<stdout>:| Number of nodes  |   2 146 689 |
[1,0]<stdout>:| Number of DOFs   |   6 440 067 |
[1,0]<stdout>:| Number of procs  |          16 |
[1,0]<stdout>:| Nb of DOFs/proc  |     402 504 |
[1,0]<stdout>:| Build mesh       |        7.92 |
[1,0]<stdout>:| Model            |        0.60 |
[1,0]<stdout>:| Material         |        0.05 |
[1,0]<stdout>:| Boundary conditions |        0.16 |
[1,0]<stdout>:| Create matrix    |        1.29 |
[1,0]<stdout>:| Numbering        |        1.88 |
[1,0]<stdout>:| Assembly         |        0.66 |
[1,0]<stdout>:| Build RHS        |        0.07 |
[1,0]<stdout>:| Factorize        |        7.49 |
[1,0]<stdout>:| Solve            |        3.36 |
[1,0]<stdout>:| Total            |       23.47 |
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt72
[1,8]<stdout>:FIN(INFO_RESU='NON',
[1,8]<stdout>:    RETASSAGE='NON')
[1,8]<stdout>:
[1,7]<stdout>:FIN(INFO_RESU='NON',
[1,7]<stdout>:    RETASSAGE='NON')
[1,7]<stdout>:
[1,1]<stdout>:FIN(INFO_RESU='NON',
[1,1]<stdout>:    RETASSAGE='NON')
[1,1]<stdout>:
[1,6]<stdout>:FIN(INFO_RESU='NON',
[1,6]<stdout>:    RETASSAGE='NON')
[1,6]<stdout>:
[1,10]<stdout>:FIN(INFO_RESU='NON',
[1,10]<stdout>:    RETASSAGE='NON')
[1,10]<stdout>:
[1,11]<stdout>:FIN(INFO_RESU='NON',
[1,11]<stdout>:    RETASSAGE='NON')
[1,11]<stdout>:
[1,4]<stdout>:FIN(INFO_RESU='NON',
[1,4]<stdout>:    RETASSAGE='NON')
[1,4]<stdout>:
[1,2]<stdout>:FIN(INFO_RESU='NON',
[1,2]<stdout>:    RETASSAGE='NON')
[1,2]<stdout>:
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0015 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,0]<stdout>:FIN(INFO_RESU='NON',
[1,0]<stdout>:    RETASSAGE='NON')
[1,0]<stdout>:
[1,6]<stdout>:No database in results, objects not saved on processor #6
[1,5]<stdout>:No database in results, objects not saved on processor #5
[1,11]<stdout>:No database in results, objects not saved on processor #11
[1,9]<stdout>:No database in results, objects not saved on processor #9
[1,12]<stdout>:No database in results, objects not saved on processor #12
[1,14]<stdout>:No database in results, objects not saved on processor #14
[1,10]<stdout>:No database in results, objects not saved on processor #10
[1,4]<stdout>:No database in results, objects not saved on processor #4
[1,3]<stdout>:No database in results, objects not saved on processor #3
[1,8]<stdout>:No database in results, objects not saved on processor #8
[1,15]<stdout>:No database in results, objects not saved on processor #15
[1,13]<stdout>:No database in results, objects not saved on processor #13
[1,7]<stdout>:No database in results, objects not saved on processor #7
[1,1]<stdout>:No database in results, objects not saved on processor #1
[1,2]<stdout>:No database in results, objects not saved on processor #2
[1,0]<stdout>:No database in results, objects not saved on processor #0
[1,0]<stdout>:****************************************************************************************************************************************************************
[1,0]<stdout>:***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
[1,0]<stdout>:****************************************************************************************************************************************************************
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------------ PETSc Performance Summary: ------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:petsc_aster on a  named 8b87b9d0b29a with 16 processors, by Unknown Thu Jan 23 16:32:09 2025
[1,0]<stdout>:Using 1 OpenMP threads
[1,0]<stdout>:Using Petsc Release Version 3.20.5, unknown 
[1,0]<stdout>:
[1,0]<stdout>:                         Max       Max/Min     Avg       Total
[1,0]<stdout>:Time (sec):           2.350e+01     1.000   2.350e+01
[1,0]<stdout>:Objects:              0.000e+00     0.000   0.000e+00
[1,0]<stdout>:Flops:                1.473e+10     1.204   1.333e+10  2.132e+11
[1,0]<stdout>:Flops/sec:            6.265e+08     1.204   5.670e+08  9.072e+09
[1,0]<stdout>:MPI Msg Count:        8.886e+03     2.085   6.440e+03  1.030e+05
[1,0]<stdout>:MPI Msg Len (bytes):  1.548e+08     2.118   1.620e+04  1.669e+09
[1,0]<stdout>:MPI Reductions:       1.044e+03     1.000
[1,0]<stdout>:
[1,0]<stdout>:Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
[1,0]<stdout>:                            e.g., VecAXPY() for real vectors of length N --> 2N flops
[1,0]<stdout>:                            and VecAXPY() for complex vectors of length N --> 8N flops
[1,0]<stdout>:
[1,0]<stdout>:Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
[1,0]<stdout>:                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
[1,0]<stdout>: 0:      Main Stage: 2.3503e+01 100.0%  2.1322e+11 100.0%  1.030e+05 100.0%  1.620e+04      100.0%  1.026e+03  98.3%
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:See the 'Profiling' chapter of the users' manual for details on interpreting output.
[1,0]<stdout>:Phase summary info:
[1,0]<stdout>:   Count: number of times phase was executed
[1,0]<stdout>:   Time and Flop: Max - maximum over all processors
[1,0]<stdout>:                  Ratio - ratio of maximum to minimum over all processors
[1,0]<stdout>:   Mess: number of messages sent
[1,0]<stdout>:   AvgLen: average message length (bytes)
[1,0]<stdout>:   Reduct: number of global reductions
[1,0]<stdout>:   Global: entire computation
[1,0]<stdout>:   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
[1,0]<stdout>:      %T - percent time in this phase         %F - percent flop in this phase
[1,0]<stdout>:      %M - percent messages in this phase     %L - percent message lengths in this phase
[1,0]<stdout>:      %R - percent reductions in this phase
[1,0]<stdout>:   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
[1,0]<stdout>:                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:--- Event Stage 0: Main Stage
[1,0]<stdout>:
[1,0]<stdout>:BuildTwoSided        239 1.0 7.1464e-01 6.9 0.00e+00 0.0 7.0e+03 4.0e+00 2.4e+02  2  0  7  0 23   2  0  7  0 23     0
[1,0]<stdout>:BuildTwoSidedF       182 1.0 7.0411e-01 6.9 0.00e+00 0.0 3.3e+03 1.2e+05 1.8e+02  2  0  3 23 17   2  0  3 23 18     0
[1,0]<stdout>:MatMult              366 1.0 2.9183e+00 1.1 9.04e+09 1.2 5.5e+04 1.2e+04 0.0e+00 12 62 54 40  0  12 62 54 40  0 44966
[1,0]<stdout>:MatMultAdd            72 1.0 1.2962e-01 1.1 3.78e+08 1.2 7.2e+03 1.5e+03 0.0e+00  1  3  7  1  0   1  3  7  1  0 41938
[1,0]<stdout>:MatMultTranspose      72 1.0 2.2290e-01 1.5 3.78e+08 1.2 7.2e+03 1.5e+03 0.0e+00  1  3  7  1  0   1  3  7  1  0 24395
[1,0]<stdout>:MatSolve              18 0.0 3.7088e-05 0.0 1.13e+04 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0   306
[1,0]<stdout>:MatLUFactorSym         1 1.0 1.1729e-05 2.8 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatLUFactorNum         1 1.0 5.5540e-06 9.2 3.74e+03 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0   672
[1,0]<stdout>:MatConvert             1 1.0 2.2017e-02 1.1 0.00e+00 0.0 2.0e+02 3.9e+03 1.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatScale               8 1.0 2.7333e-02 1.2 2.10e+07 1.2 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 11049
[1,0]<stdout>:MatResidual           72 1.0 4.6545e-01 1.0 1.40e+09 1.2 1.1e+04 9.4e+03 0.0e+00  2 10 11  6  0   2 10 11  6  0 43851
[1,0]<stdout>:MatAssemblyBegin      98 1.0 7.4298e-01 3.9 0.00e+00 0.0 3.3e+03 1.2e+05 5.1e+01  2  0  3 23  5   2  0  3 23  5     0
[1,0]<stdout>:MatAssemblyEnd        98 1.0 3.8113e-01 1.0 1.90e+06 2.9 7.6e+03 8.9e+02 2.1e+02  2  0  7  0 20   2  0  7  0 20    48
[1,0]<stdout>:MatGetRowIJ            1 0.0 1.5250e-06 0.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatCreateSubMat        2 1.0 3.5098e-04 1.0 0.00e+00 0.0 4.5e+01 1.2e+02 3.0e+01  0  0  0  0  3   0  0  0  0  3     0
[1,0]<stdout>:MatGetOrdering         1 0.0 1.8724e-05 0.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatCoarsen             4 1.0 1.9065e-01 1.0 1.04e+07 1.2 9.5e+03 1.5e+03 1.8e+02  1  0  9  1 17   1  0  9  1 17   789
[1,0]<stdout>:MatZeroEntries         5 1.0 1.0295e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatAXPY                8 1.0 2.0933e-01 1.0 6.78e+06 1.2 1.3e+03 7.0e+02 2.8e+01  1  0  1  0  3   1  0  1  0  3   470
[1,0]<stdout>:MatTranspose          18 1.0 1.4323e-01 1.1 0.00e+00 0.0 5.5e+03 6.3e+03 7.2e+01  1  0  5  2  7   1  0  5  2  7     0
[1,0]<stdout>:MatMatMultSym         15 1.0 1.0450e+00 1.1 0.00e+00 0.0 3.0e+03 1.9e+04 5.0e+01  4  0  3  3  5   4  0  3  3  5     0
[1,0]<stdout>:MatMatMultNum         15 1.0 9.1235e-01 1.1 1.91e+09 1.2 6.8e+02 5.2e+04 5.0e+00  4 13  1  2  0   4 13  1  2  0 30227
[1,0]<stdout>:MatPtAPSymbolic        5 1.0 2.2735e+00 1.0 0.00e+00 0.0 3.6e+03 1.2e+05 3.5e+01 10  0  4 26  3  10  0  4 26  3     0
[1,0]<stdout>:MatPtAPNumeric         5 1.0 1.9373e+00 1.0 3.56e+09 1.2 2.2e+03 1.5e+05 3.0e+01  8 24  2 20  3   8 24  2 20  3 26418
[1,0]<stdout>:MatGetLocalMat        15 1.0 9.0175e-02 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatGetBrAoCol         15 1.0 4.5193e-02 1.2 0.00e+00 0.0 4.9e+03 8.8e+04 0.0e+00  0  0  5 26  0   0  0  5 26  0     0
[1,0]<stdout>:VecMDot               61 1.0 1.8920e-01 4.2 2.13e+08 1.2 0.0e+00 0.0e+00 6.1e+01  0  1  0  0  6   0  1  0  0  6 16309
[1,0]<stdout>:VecNorm               87 1.0 6.7336e-02 5.6 4.82e+07 1.2 0.0e+00 0.0e+00 8.7e+01  0  0  0  0  8   0  0  0  0  8 10389
[1,0]<stdout>:VecScale              66 1.0 5.8507e-03 1.2 1.48e+07 1.2 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 36669
[1,0]<stdout>:VecCopy              240 1.0 1.8993e-02 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecSet               254 1.0 3.5229e-03 1.7 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecAXPY               23 1.0 5.9684e-03 1.1 1.78e+07 1.2 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 43222
[1,0]<stdout>:VecAYPX              452 1.0 4.6360e-02 1.3 7.45e+07 1.2 0.0e+00 0.0e+00 0.0e+00  0  1  0  0  0   0  1  0  0  0 23352
[1,0]<stdout>:VecAXPBYCZ           144 1.0 2.0782e-02 1.4 8.21e+07 1.2 0.0e+00 0.0e+00 0.0e+00  0  1  0  0  0   0  1  0  0  0 57371
[1,0]<stdout>:VecMAXPY              84 1.0 1.0256e-01 1.1 3.90e+08 1.2 0.0e+00 0.0e+00 0.0e+00  0  3  0  0  0   0  3  0  0  0 55113
[1,0]<stdout>:VecAssemblyBegin     132 1.0 1.4261e-02 12.8 0.00e+00 0.0 0.0e+00 0.0e+00 1.3e+02  0  0  0  0 13   0  0  0  0 13     0
[1,0]<stdout>:VecAssemblyEnd       132 1.0 5.9527e-05 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecPointwiseMult     332 1.0 3.4578e-02 1.2 3.78e+07 1.2 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 15899
[1,0]<stdout>:VecScatterBegin      641 1.0 2.2361e-02 2.4 0.00e+00 0.0 7.5e+04 9.3e+03 0.0e+00  0  0 73 41  0   0  0 73 41  0     0
[1,0]<stdout>:VecScatterEnd        641 1.0 4.8061e-01 8.9 1.32e+05 2.6 0.0e+00 0.0e+00 0.0e+00  1  0  0  0  0   1  0  0  0  0     3
[1,0]<stdout>:VecNormalize          47 1.0 1.2343e-02 2.0 1.90e+07 1.2 0.0e+00 0.0e+00 4.7e+01  0  0  0  0  5   0  0  0  0  5 22405
[1,0]<stdout>:SFSetGraph            57 1.0 1.2195e-03 2.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFSetUp               57 1.0 1.2607e-02 2.9 0.00e+00 0.0 1.1e+04 8.7e+02 5.7e+01  0  0 11  1  5   0  0 11  1  6     0
[1,0]<stdout>:SFBcastBegin          30 1.0 2.8787e-04 1.8 0.00e+00 0.0 4.6e+03 1.1e+03 0.0e+00  0  0  4  0  0   0  0  4  0  0     0
[1,0]<stdout>:SFBcastEnd            30 1.0 1.7507e-03 4.8 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFReduceBegin          8 1.0 6.7997e-05 1.5 0.00e+00 0.0 7.9e+02 1.1e+03 0.0e+00  0  0  1  0  0   0  0  1  0  0     0
[1,0]<stdout>:SFReduceEnd            8 1.0 1.2548e-04 1.6 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFPack               679 1.0 1.5861e-02 2.8 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFUnpack             679 1.0 2.9857e-04 1.3 1.32e+05 2.6 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0  4521
[1,0]<stdout>:KSPSetUp              11 1.0 2.7048e-02 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:KSPSolve               1 1.0 3.2993e+00 1.0 9.67e+09 1.2 6.3e+04 9.7e+03 7.5e+01 14 66 62 37  7  14 66 62 37  7 42513
[1,0]<stdout>:KSPGMRESOrthog        58 1.0 2.3496e-01 2.6 4.04e+08 1.2 0.0e+00 0.0e+00 5.8e+01  1  3  0  0  6   1  3  0  0  6 24950
[1,0]<stdout>:PCSetUp_GAMG+          1 1.0 6.3905e+00 1.0 4.96e+09 1.2 3.7e+04 2.7e+04 6.9e+02 27 34 36 59 66  27 34 36 59 68 11197
[1,0]<stdout>: PCGAMGCreateG         4 1.0 5.0665e-01 1.0 4.05e+06 1.2 6.9e+03 5.1e+03 1.0e+02  2  0  7  2 10   2  0  7  2 10   116
[1,0]<stdout>: GAMG Coarsen          4 1.0 2.1148e-01 1.0 1.04e+07 1.2 9.5e+03 1.5e+03 1.8e+02  1  0  9  1 17   1  0  9  1 17   712
[1,0]<stdout>:  GAMG MIS/Agg         4 1.0 1.9067e-01 1.0 1.04e+07 1.2 9.5e+03 1.5e+03 1.8e+02  1  0  9  1 17   1  0  9  1 17   789
[1,0]<stdout>: PCGAMGProl            4 1.0 1.7852e-01 1.0 0.00e+00 0.0 5.6e+03 5.5e+03 1.7e+02  1  0  5  2 16   1  0  5  2 17     0
[1,0]<stdout>:  GAMG Prol-col        4 1.0 7.5337e-02 1.0 0.00e+00 0.0 4.9e+03 2.1e+03 1.3e+02  0  0  5  1 12   0  0  5  1 13     0
[1,0]<stdout>:  GAMG Prol-lift       4 1.0 9.0727e-02 1.0 0.00e+00 0.0 6.3e+02 3.2e+04 2.4e+01  0  0  1  1  2   0  0  1  1  2     0
[1,0]<stdout>: PCGAMGOptProl         4 1.0 1.3417e+00 1.0 1.40e+09 1.2 9.7e+03 1.6e+04 1.3e+02  6 10  9  9 13   6 10  9  9 13 15139
[1,0]<stdout>:  GAMG smooth          4 1.0 9.9464e-01 1.0 4.91e+08 1.2 3.4e+03 2.7e+04 4.9e+01  4  3  3  6  5   4  3  3  6  5  7184
[1,0]<stdout>: PCGAMGCreateL         4 1.0 4.1380e+00 1.0 3.54e+09 1.2 5.2e+03 1.5e+05 1.1e+02 18 24  5 45 10  18 24  5 45 11 12333
[1,0]<stdout>:  GAMG PtAP            4 1.0 4.1374e+00 1.0 3.54e+09 1.2 5.1e+03 1.5e+05 5.3e+01 18 24  5 45  5  18 24  5 45  5 12335
[1,0]<stdout>:  GAMG Reduce          2 1.0 5.4171e-04 1.0 0.00e+00 0.0 6.3e+01 1.2e+02 5.5e+01  0  0  0  0  5   0  0  0  0  5     0
[1,0]<stdout>:PCGAMG Gal l00         1 1.0 2.9375e+00 1.0 2.58e+09 1.2 9.9e+02 3.4e+05 1.4e+01 12 17  1 20  1  12 17  1 20  1 12568
[1,0]<stdout>:PCGAMG Opt l00         1 1.0 7.6233e-01 1.0 4.27e+08 1.2 5.9e+02 1.2e+05 1.2e+01  3  3  1  4  1   3  3  1  4  1  8085
[1,0]<stdout>:PCGAMG Gal l01         1 1.0 8.6788e-01 1.0 7.60e+08 1.4 1.2e+03 2.5e+05 1.3e+01  4  5  1 18  1   4  5  1 18  1 11574
[1,0]<stdout>:PCGAMG Opt l01         1 1.0 5.6957e-02 1.0 3.04e+07 1.2 6.2e+02 1.9e+04 1.1e+01  0  0  1  1  1   0  0  1  1  1  7777
[1,0]<stdout>:PCGAMG Gal l02         1 1.0 3.3067e-01 1.0 3.81e+08 2.4 2.0e+03 5.8e+04 1.3e+01  1  2  2  7  1   1  2  2  7  1 12284
[1,0]<stdout>:PCGAMG Opt l02         1 1.0 2.7396e-02 1.0 1.54e+07 1.6 1.1e+03 6.8e+03 1.1e+01  0  0  1  0  1   0  0  1  0  1  7060
[1,0]<stdout>:PCGAMG Gal l03         1 1.0 1.6554e-03 1.0 1.11e+06 3.4 9.5e+02 1.9e+03 1.3e+01  0  0  1  0  1   0  0  1  0  1  6354
[1,0]<stdout>:PCGAMG Opt l03         1 1.0 8.3094e-04 1.0 4.09e+05 3.4 1.0e+03 1.0e+03 1.1e+01  0  0  1  0  1   0  0  1  0  1  4646
[1,0]<stdout>:PCSetUp                2 1.0 6.3906e+00 1.0 4.96e+09 1.2 3.7e+04 2.7e+04 6.9e+02 27 34 36 59 66  27 34 36 59 68 11197
[1,0]<stdout>:PCSetUpOnBlocks       18 1.0 9.6953e-05 1.4 3.74e+03 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0    39
[1,0]<stdout>:PCApply               18 1.0 2.2129e+00 1.0 6.51e+09 1.2 6.0e+04 7.5e+03 1.8e+01  9 44 58 27  2   9 44 58 27  2 42777
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Object Type          Creations   Destructions. Reports information only for process 0.
[1,0]<stdout>:
[1,0]<stdout>:--- Event Stage 0: Main Stage
[1,0]<stdout>:
[1,0]<stdout>:           Container    32             20
[1,0]<stdout>:              Matrix   180            129
[1,0]<stdout>:      Matrix Coarsen     4              4
[1,0]<stdout>:   Matrix Null Space     1              0
[1,0]<stdout>:              Vector   431            336
[1,0]<stdout>:           Index Set   105             98
[1,0]<stdout>:   Star Forest Graph    73             56
[1,0]<stdout>:       Krylov Solver    11              4
[1,0]<stdout>:      Preconditioner    11              4
[1,0]<stdout>:         PetscRandom     4              4
[1,0]<stdout>:    Distributed Mesh     8              4
[1,0]<stdout>:     Discrete System     8              4
[1,0]<stdout>:           Weak Form     8              4
[1,0]<stdout>:              Viewer     1              0
[1,0]<stdout>:========================================================================================================================
[1,0]<stdout>:Average time to get PetscTime(): 3.37e-08
[1,0]<stdout>:Average time for MPI_Barrier(): 2.741e-06
[1,0]<stdout>:Average time for zero size MPI_Send(): 1.03581e-06
[1,0]<stdout>:#PETSc Option Table entries:
[1,0]<stdout>:-ksp_monitor_true_residual # (source: command line)
[1,0]<stdout>:-log_view # (source: command line)
[1,0]<stdout>:-pc_gamg_verbose 2 # (source: code)
[1,0]<stdout>:#End of PETSc Option Table entries
[1,0]<stdout>:Compiled without FORTRAN kernels
[1,0]<stdout>:Compiled with full precision matrices (default)
[1,0]<stdout>:sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
[1,0]<stdout>:Configure options: --with-debugging=0 --with-mpi=1 --with-ssl=0 --with-x=0 --with-64-bit-indices=0 --with-mumps-lib="-L/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/lib -lzmumps -ldmumps -lmumps_common -lpord -L/opt/aster/20240327/gcc13-openblas-ompi4/scotch-7.0.4/lib -lesmumps -lptscotch -lptscotcherr -lptscotcherrexit -lscotch -lscotcherr -lscotcherrexit -L/opt/aster/20240327/gcc13-openblas-ompi4/parmetis-4.0.3_aster3/lib -lparmetis" --with-mumps-include=/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/include --with-blaslapack-lib=-lopenblas --with-scalapack-lib="-L/opt/aster/20240327/gcc13-openblas-ompi4/scalapack-2.2.0/lib -lscalapack " --with-python=1 --with-petsc4py=1 --download-ml=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/pkg-trilinos-ml-v13.2.0.tar.gz --download-sowing=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/sowing_v1.1.26-p8.tar.gz --download-hypre=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/hypre_v2.29.0.tar.gz --download-superlu=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/SuperLU_v6.0.1.tar.gz --download-slepc=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/slepc-v3.20.1.tar.gz --download-slepc-configure-arguments="--with-slepc4py --download-arpack=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/arpack_3.9.0.tar.gz" --download-hpddm=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/hpddm_201eecd26177f88d7bb6287251877d8013fb64d2.tar.gz --with-openmp=1 --prefix=/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5 CC=mpicc CXX=mpicxx FC=mpif90 FCFLAGS=" -fallow-argument-mismatch" LIBS="-lgomp -lz"
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:Libraries compiled on 2025-01-23 15:23:23 on buildkitsandbox 
[1,0]<stdout>:Machine characteristics: Linux-5.10.230-223.885.amzn2.aarch64-aarch64-with-glibc2.40
[1,0]<stdout>:Using PETSc directory: /opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5
[1,0]<stdout>:Using PETSc arch: 
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using C compiler: mpicc  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -Wno-lto-type-mismatch -Wno-stringop-overflow -fstack-protector -fvisibility=hidden -g -O  -fopenmp 
[1,0]<stdout>:Using Fortran compiler: mpif90  -fPIC -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O   -fopenmp   -fopenmp
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using include paths: -I/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/include -I/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/include
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using C linker: mpicc
[1,0]<stdout>:Using Fortran linker: mpif90
[1,0]<stdout>:Using libraries: -Wl,-rpath,/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -lpetsc -Wl,-rpath,/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/scotch-7.0.4/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/parmetis-4.0.3_aster3/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/scalapack-2.2.0/lib -Wl,-rpath,/usr/lib/aarch64-linux-gnu/openmpi/lib/fortran/gfortran -L/usr/lib/aarch64-linux-gnu/openmpi/lib/fortran/gfortran -Wl,-rpath,/usr/lib/gcc/aarch64-linux-gnu/13 -L/usr/lib/gcc/aarch64-linux-gnu/13 -Wl,-rpath,/usr/lib/aarch64-linux-gnu -L/usr/lib/aarch64-linux-gnu -Wl,-rpath,/lib/aarch64-linux-gnu -L/lib/aarch64-linux-gnu -lHYPRE -lzmumps -ldmumps -lmumps_common -lpord -lesmumps -lptscotch -lptscotcherr -lptscotcherrexit -lscotch -lscotcherr -lscotcherrexit -lparmetis -lscalapack -lsuperlu -lml -lopenblas -lm -lgomp -lz -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lopen-rte -lopen-pal -lhwloc -levent_core -levent_pthreads -lgfortran -lm -lgfortran -lm -lgfortran -lgcc_s -lstdc++ -lgomp -lz
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:WARNING! There are options you set that were not used!
[1,0]<stdout>:WARNING! could be spelling mistake, etc!
[1,0]<stdout>:There is one unused database option. It is:
[1,0]<stdout>:Option left: name:-pc_gamg_verbose value: 2 source: code
[1,3]<stdout>:
[1,3]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,3]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,3]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,3]<stdout>: ║            aucune alarme                                                                       ║
[1,3]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,3]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,6]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,6]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,6]<stdout>: ║            aucune alarme                                                                       ║
[1,6]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,6]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,10]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,10]<stdout>: ║                                                                                                ║
[1,10]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,10]<stdout>: ║                                                                                                ║
[1,10]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,10]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,10]<stdout>: ║            aucune alarme                                                                       ║
[1,10]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,10]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,14]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,14]<stdout>: ║                                                                                                ║
[1,14]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,14]<stdout>: ║                                                                                                ║
[1,14]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,14]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,14]<stdout>: ║            aucune alarme                                                                       ║
[1,14]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,14]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,11]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,11]<stdout>: ║                                                                                                ║
[1,11]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,11]<stdout>: ║                                                                                                ║
[1,11]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,11]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,11]<stdout>: ║            aucune alarme                                                                       ║
[1,11]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,11]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,8]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,8]<stdout>: ║                                                                                                ║
[1,8]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,8]<stdout>: ║                                                                                                ║
[1,8]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,8]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,8]<stdout>: ║            aucune alarme                                                                       ║
[1,8]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,8]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,1]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,1]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,1]<stdout>: ║            aucune alarme                                                                       ║
[1,1]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,1]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,5]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,5]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,5]<stdout>: ║            aucune alarme                                                                       ║
[1,5]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,5]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,7]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,7]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,7]<stdout>: ║            aucune alarme                                                                       ║
[1,7]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,7]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,4]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,4]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,4]<stdout>: ║            aucune alarme                                                                       ║
[1,4]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,4]<stdout>:
[1,5]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,7]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,0]<stdout>:
[1,0]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,0]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,0]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,0]<stdout>: ║            aucune alarme                                                                       ║
[1,0]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,0]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,2]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,2]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,2]<stdout>: ║            aucune alarme                                                                       ║
[1,2]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,2]<stdout>:
[1,2]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,3]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,4]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,15]<stdout>:
[1,15]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,15]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,15]<stdout>: ║                                                                                                ║
[1,15]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,15]<stdout>: ║                                                                                                ║
[1,15]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,15]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,15]<stdout>: ║            aucune alarme                                                                       ║
[1,15]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,15]<stdout>:
[1,15]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,6]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,13]<stdout>:
[1,13]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,13]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,13]<stdout>: ║                                                                                                ║
[1,13]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,13]<stdout>: ║                                                                                                ║
[1,13]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,13]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,13]<stdout>: ║            aucune alarme                                                                       ║
[1,13]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,13]<stdout>:
[1,13]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,9]<stdout>:
[1,9]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,9]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,9]<stdout>: ║                                                                                                ║
[1,9]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,9]<stdout>: ║                                                                                                ║
[1,9]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,9]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,9]<stdout>: ║            aucune alarme                                                                       ║
[1,9]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,9]<stdout>:
[1,9]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,10]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,10]<stdout>:  
[1,14]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,14]<stdout>:  
[1,14]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     721.58 Mo
[1,11]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,11]<stdout>:  
[1,8]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,8]<stdout>:  
[1,8]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     715.75 Mo
[1,1]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,12]<stdout>:
[1,12]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,12]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,12]<stdout>: ║                                                                                                ║
[1,12]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,12]<stdout>: ║                                                                                                ║
[1,12]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,12]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,12]<stdout>: ║            aucune alarme                                                                       ║
[1,12]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,12]<stdout>:
[1,12]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,4]<stdout>:  
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     727.21 Mo
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1127.96 Mo
[1,4]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2985.46 Mo
[1,4]<stdout>:  
[1,4]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,4]<stdout>:  
[1,4]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,4]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1128  Mo.
[1,4]<stdout>:     TAILLE CUMULEE LIBEREE            :                  492  Mo.
[1,4]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2336958
[1,4]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2336366
[1,4]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,4]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,4]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,4]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,4]<stdout>:  
[1,4]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     727.21 Mo
[1,4]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,4]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,4]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1127.96 Mo
[1,4]<stdout>:     - LIMITE LES ACCES DISQUE
[1,4]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,4]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2985.46 Mo
[1,4]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,4]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,4]<stdout>:  
[1,15]<stdout>:  
[1,15]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     712.64 Mo
[1,15]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1068.62 Mo
[1,15]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2730.59 Mo
[1,15]<stdout>:  
[1,15]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,15]<stdout>:  
[1,15]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,15]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1069  Mo.
[1,15]<stdout>:     TAILLE CUMULEE LIBEREE            :                  468  Mo.
[1,15]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2126120
[1,15]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2125554
[1,15]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,15]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,15]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,15]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,15]<stdout>:  
[1,15]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     712.64 Mo
[1,15]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,15]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,15]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1068.62 Mo
[1,15]<stdout>:     - LIMITE LES ACCES DISQUE
[1,15]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,15]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2730.59 Mo
[1,15]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,15]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,15]<stdout>:  
[1,6]<stdout>:  
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     719.18 Mo
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1096.06 Mo
[1,6]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2782.73 Mo
[1,6]<stdout>:  
[1,6]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,6]<stdout>:  
[1,6]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,6]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1096  Mo.
[1,6]<stdout>:     TAILLE CUMULEE LIBEREE            :                  475  Mo.
[1,6]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2182623
[1,6]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2182044
[1,6]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,6]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,6]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,6]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,6]<stdout>:  
[1,6]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     719.18 Mo
[1,6]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,6]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,6]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1096.06 Mo
[1,6]<stdout>:     - LIMITE LES ACCES DISQUE
[1,6]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,6]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2782.73 Mo
[1,6]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,6]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,6]<stdout>:  
[1,13]<stdout>:  
[1,13]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     721.10 Mo
[1,13]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1103.28 Mo
[1,13]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2819.41 Mo
[1,13]<stdout>:  
[1,13]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,13]<stdout>:  
[1,13]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,13]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1103  Mo.
[1,13]<stdout>:     TAILLE CUMULEE LIBEREE            :                  478  Mo.
[1,13]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2207167
[1,13]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2206586
[1,13]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,13]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,13]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,13]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,13]<stdout>:  
[1,13]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     721.10 Mo
[1,13]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,13]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,13]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1103.28 Mo
[1,13]<stdout>:     - LIMITE LES ACCES DISQUE
[1,13]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,13]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2819.41 Mo
[1,13]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,13]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,13]<stdout>:  
[1,9]<stdout>:  
[1,9]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     719.10 Mo
[1,9]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1095.61 Mo
[1,9]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2823.74 Mo
[1,9]<stdout>:  
[1,9]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,9]<stdout>:  
[1,9]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,9]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1096  Mo.
[1,9]<stdout>:     TAILLE CUMULEE LIBEREE            :                  474  Mo.
[1,9]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2173200
[1,9]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2172630
[1,9]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,9]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,9]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,9]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,9]<stdout>:  
[1,9]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     719.10 Mo
[1,9]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,9]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,9]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1095.61 Mo
[1,9]<stdout>:     - LIMITE LES ACCES DISQUE
[1,9]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,9]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2823.74 Mo
[1,9]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,9]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,9]<stdout>:  
[1,9]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,10]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     726.72 Mo
[1,10]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1126.55 Mo
[1,10]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2978.73 Mo
[1,10]<stdout>:  
[1,10]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,10]<stdout>:  
[1,10]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,10]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1127  Mo.
[1,10]<stdout>:     TAILLE CUMULEE LIBEREE            :                  490  Mo.
[1,10]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2314390
[1,10]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2313802
[1,10]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,10]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,10]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,10]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,10]<stdout>:  
[1,10]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     726.72 Mo
[1,10]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,10]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,10]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1126.55 Mo
[1,10]<stdout>:     - LIMITE LES ACCES DISQUE
[1,10]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,10]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2978.73 Mo
[1,10]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,10]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,10]<stdout>:  
[1,10]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,14]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1104.55 Mo
[1,14]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2813.64 Mo
[1,14]<stdout>:  
[1,14]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,14]<stdout>:  
[1,14]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,14]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1105  Mo.
[1,14]<stdout>:     TAILLE CUMULEE LIBEREE            :                  479  Mo.
[1,14]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2213349
[1,14]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2212756
[1,14]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,14]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,14]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,14]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,14]<stdout>:  
[1,14]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     721.58 Mo
[1,14]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,14]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,14]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1104.55 Mo
[1,14]<stdout>:     - LIMITE LES ACCES DISQUE
[1,14]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,14]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2813.64 Mo
[1,14]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,14]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,14]<stdout>:  
[1,14]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,11]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     708.12 Mo
[1,11]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1049.82 Mo
[1,11]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2583.22 Mo
[1,11]<stdout>:  
[1,11]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,11]<stdout>:  
[1,11]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,11]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1050  Mo.
[1,11]<stdout>:     TAILLE CUMULEE LIBEREE            :                  459  Mo.
[1,11]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2051086
[1,11]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2050526
[1,11]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,11]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,11]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,11]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,11]<stdout>:  
[1,11]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     708.12 Mo
[1,11]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,11]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,11]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1049.82 Mo
[1,11]<stdout>:     - LIMITE LES ACCES DISQUE
[1,11]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,11]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2583.22 Mo
[1,11]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,11]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,11]<stdout>:  
[1,11]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,8]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1081.12 Mo
[1,8]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2746.48 Mo
[1,8]<stdout>:  
[1,8]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,8]<stdout>:  
[1,8]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,8]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1081  Mo.
[1,8]<stdout>:     TAILLE CUMULEE LIBEREE            :                  473  Mo.
[1,8]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2172892
[1,8]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2172326
[1,8]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,8]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,8]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,8]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,8]<stdout>:  
[1,8]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     715.75 Mo
[1,8]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,8]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,8]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1081.12 Mo
[1,8]<stdout>:     - LIMITE LES ACCES DISQUE
[1,8]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,8]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2746.48 Mo
[1,8]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,8]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,8]<stdout>:  
[1,8]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,8]<stdout>:INFO './glob.1' deleted
[1,1]<stdout>:  
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     710.75 Mo
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1060.82 Mo
[1,1]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2597.26 Mo
[1,1]<stdout>:  
[1,1]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,1]<stdout>:  
[1,1]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,1]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1061  Mo.
[1,1]<stdout>:     TAILLE CUMULEE LIBEREE            :                  462  Mo.
[1,1]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2079228
[1,1]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2078664
[1,1]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,1]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,1]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,1]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,1]<stdout>:  
[1,1]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     710.75 Mo
[1,1]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,1]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,1]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1060.82 Mo
[1,1]<stdout>:     - LIMITE LES ACCES DISQUE
[1,1]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,1]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2597.26 Mo
[1,1]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,1]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,1]<stdout>:  
[1,1]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,3]<stdout>:  
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     726.52 Mo
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1125.88 Mo
[1,3]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2914.32 Mo
[1,3]<stdout>:  
[1,3]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,3]<stdout>:  
[1,3]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,3]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1126  Mo.
[1,3]<stdout>:     TAILLE CUMULEE LIBEREE            :                  487  Mo.
[1,3]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2292196
[1,3]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2291600
[1,3]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,3]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,3]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,3]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,3]<stdout>:  
[1,3]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     726.52 Mo
[1,3]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,3]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,3]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1125.88 Mo
[1,3]<stdout>:     - LIMITE LES ACCES DISQUE
[1,3]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,3]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2914.32 Mo
[1,3]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,3]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,3]<stdout>:  
[1,3]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,3]<stdout>:INFO './glob.1' deleted
[1,5]<stdout>:  
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     714.47 Mo
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1075.20 Mo
[1,5]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2704.76 Mo
[1,5]<stdout>:  
[1,5]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,5]<stdout>:  
[1,5]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,5]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1075  Mo.
[1,5]<stdout>:     TAILLE CUMULEE LIBEREE            :                  467  Mo.
[1,5]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2116208
[1,5]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2115646
[1,5]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,5]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,5]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,5]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,5]<stdout>:  
[1,5]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     714.47 Mo
[1,5]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,5]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,5]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1075.20 Mo
[1,5]<stdout>:     - LIMITE LES ACCES DISQUE
[1,5]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,5]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2704.76 Mo
[1,5]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,5]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,5]<stdout>:  
[1,5]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,5]<stdout>:INFO './glob.1' deleted
[1,7]<stdout>:  
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     712.91 Mo
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1069.43 Mo
[1,7]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2673.43 Mo
[1,7]<stdout>:  
[1,7]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,7]<stdout>:  
[1,7]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,7]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1069  Mo.
[1,7]<stdout>:     TAILLE CUMULEE LIBEREE            :                  468  Mo.
[1,7]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2126628
[1,7]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2126062
[1,7]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,7]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,7]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,7]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,7]<stdout>:  
[1,7]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     712.91 Mo
[1,7]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,7]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,7]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1069.43 Mo
[1,7]<stdout>:     - LIMITE LES ACCES DISQUE
[1,7]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,7]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2673.43 Mo
[1,7]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,7]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,7]<stdout>:  
[1,7]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,7]<stdout>:INFO './glob.1' deleted
[1,7]<stdout>:Deleting './glob.2': No such file or directory
[1,0]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,0]<stdout>:  
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     731.50 Mo
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1146.24 Mo
[1,0]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2974.42 Mo
[1,0]<stdout>:  
[1,0]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,0]<stdout>:  
[1,0]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,0]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1146  Mo.
[1,0]<stdout>:     TAILLE CUMULEE LIBEREE            :                  806  Mo.
[1,0]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              5236116
[1,0]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              5235518
[1,0]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,0]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,0]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,0]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,0]<stdout>:  
[1,0]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     731.50 Mo
[1,0]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,0]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,0]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1146.24 Mo
[1,0]<stdout>:     - LIMITE LES ACCES DISQUE
[1,0]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,0]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2974.42 Mo
[1,0]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,0]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,0]<stdout>:  
[1,0]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,2]<stdout>:  
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     716.03 Mo
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1082.46 Mo
[1,2]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2708.50 Mo
[1,2]<stdout>:  
[1,2]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,2]<stdout>:  
[1,2]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,2]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1082  Mo.
[1,2]<stdout>:     TAILLE CUMULEE LIBEREE            :                  472  Mo.
[1,2]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2165102
[1,2]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2164532
[1,2]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,2]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,2]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,2]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,2]<stdout>:  
[1,2]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     716.03 Mo
[1,2]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,2]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,2]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1082.46 Mo
[1,2]<stdout>:     - LIMITE LES ACCES DISQUE
[1,2]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,2]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2708.50 Mo
[1,2]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,2]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,2]<stdout>:  
[1,2]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,12]<stdout>:  
[1,12]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     712.65 Mo
[1,12]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1068.38 Mo
[1,12]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2707.19 Mo
[1,12]<stdout>:  
[1,12]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,12]<stdout>:  
[1,12]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,12]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1068  Mo.
[1,12]<stdout>:     TAILLE CUMULEE LIBEREE            :                  467  Mo.
[1,12]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              2115072
[1,12]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              2114506
[1,12]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,12]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,12]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,12]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,12]<stdout>:  
[1,12]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     712.65 Mo
[1,12]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,12]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,12]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1068.38 Mo
[1,12]<stdout>:     - LIMITE LES ACCES DISQUE
[1,12]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,12]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2707.19 Mo
[1,12]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,12]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,12]<stdout>:  
[1,12]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,12]<stdout>:INFO './glob.1' deleted
[1,12]<stdout>:Deleting './glob.2': No such file or directory
[1,13]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,13]<stdout>:INFO './glob.1' deleted
[1,13]<stdout>:Deleting './glob.2': No such file or directory
[1,13]<stdout>:INFO './vola.1' deleted
[1,13]<stdout>:Deleting './vola.2': No such file or directory
[1,9]<stdout>:INFO './glob.1' deleted
[1,9]<stdout>:Deleting './glob.2': No such file or directory
[1,10]<stdout>:INFO './glob.1' deleted
[1,10]<stdout>:Deleting './glob.2': No such file or directory
[1,14]<stdout>:INFO './glob.1' deleted
[1,14]<stdout>:Deleting './glob.2': No such file or directory
[1,14]<stdout>:INFO './vola.1' deleted
[1,14]<stdout>:Deleting './vola.2': No such file or directory
[1,11]<stdout>:INFO './glob.1' deleted
[1,11]<stdout>:Deleting './glob.2': No such file or directory
[1,11]<stdout>:INFO './vola.1' deleted
[1,8]<stdout>:Deleting './glob.2': No such file or directory
[1,8]<stdout>:INFO './vola.1' deleted
[1,8]<stdout>:Deleting './vola.2': No such file or directory
[1,1]<stdout>:INFO './glob.1' deleted
[1,1]<stdout>:Deleting './glob.2': No such file or directory
[1,3]<stdout>:Deleting './glob.2': No such file or directory
[1,3]<stdout>:INFO './vola.1' deleted
[1,3]<stdout>:Deleting './vola.2': No such file or directory
[1,5]<stdout>:Deleting './glob.2': No such file or directory
[1,5]<stdout>:INFO './vola.1' deleted
[1,5]<stdout>:Deleting './vola.2': No such file or directory
[1,7]<stdout>:INFO './vola.1' deleted
[1,7]<stdout>:Deleting './vola.2': No such file or directory
[1,0]<stdout>:INFO './glob.1' deleted
[1,0]<stdout>:Deleting './glob.2': No such file or directory
[1,0]<stdout>:INFO './vola.1' deleted
[1,0]<stdout>:Deleting './vola.2': No such file or directory
[1,12]<stdout>:INFO './vola.1' deleted
[1,12]<stdout>:Deleting './vola.2': No such file or directory
[1,4]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,4]<stdout>:INFO './glob.1' deleted
[1,4]<stdout>:Deleting './glob.2': No such file or directory
[1,4]<stdout>:INFO './vola.1' deleted
[1,4]<stdout>:Deleting './vola.2': No such file or directory
[1,15]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,15]<stdout>:INFO './glob.1' deleted
[1,15]<stdout>:Deleting './glob.2': No such file or directory
[1,15]<stdout>:INFO './vola.1' deleted
[1,15]<stdout>:Deleting './vola.2': No such file or directory
[1,6]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:32:09
[1,6]<stdout>:INFO './glob.1' deleted
[1,6]<stdout>:Deleting './glob.2': No such file or directory
[1,6]<stdout>:INFO './vola.1' deleted
[1,6]<stdout>:Deleting './vola.2': No such file or directory
[1,9]<stdout>:INFO './vola.1' deleted
[1,9]<stdout>:Deleting './vola.2': No such file or directory
[1,10]<stdout>:INFO './vola.1' deleted
[1,10]<stdout>:Deleting './vola.2': No such file or directory
[1,11]<stdout>:Deleting './vola.2': No such file or directory
[1,1]<stdout>:INFO './vola.1' deleted
[1,1]<stdout>:Deleting './vola.2': No such file or directory
[1,2]<stdout>:INFO './glob.1' deleted
[1,2]<stdout>:Deleting './glob.2': No such file or directory
[1,2]<stdout>:INFO './vola.1' deleted
[1,2]<stdout>:Deleting './vola.2': No such file or directory
[1,3]<stdout>:
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * DEBUT                    :       0.02 :       0.13 :       0.15 :       0.15 *
[1,3]<stdout>: * CREA_MAILLAGE            :       1.88 :       0.89 :       2.77 :       2.77 *
[1,3]<stdout>: * AFFE_MODELE              :       0.61 :       0.00 :       0.61 :       0.60 *
[1,3]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,3]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,3]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.08 *
[1,3]<stdout>: * AFFE_CHAR_CINE           :       0.09 :       0.00 :       0.09 :       0.08 *
[1,3]<stdout>: * CALC_MATR_ELEM           :       1.32 :       0.06 :       1.38 :       1.38 *
[1,3]<stdout>: * NUME_DDL                 :       0.90 :       0.88 :       1.78 :       1.78 *
[1,3]<stdout>: * ASSE_MATRICE             :       0.62 :       0.04 :       0.66 :       0.67 *
[1,3]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,3]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,3]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.04 *
[1,3]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,3]<stdout>: *  . fortran               :       2.51 :       1.03 :       3.54 :       3.51 *
[1,3]<stdout>: *  . cleanup               :       0.12 :       0.00 :       0.12 :       0.14 *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * TOTAL_JOB                :      20.39 :       3.29 :      23.68 :      23.68 *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * DEBUT                    :       0.01 :       0.13 :       0.14 :       0.15 *
[1,5]<stdout>: * CREA_MAILLAGE            :       1.89 :       0.85 :       2.74 :       2.74 *
[1,5]<stdout>: * AFFE_MODELE              :       0.61 :       0.00 :       0.61 :       0.60 *
[1,5]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,5]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,5]<stdout>: * AFFE_CHAR_CINE           :       0.07 :       0.00 :       0.07 :       0.07 *
[1,5]<stdout>: * AFFE_CHAR_CINE           :       0.09 :       0.00 :       0.09 :       0.08 *
[1,5]<stdout>: * CALC_MATR_ELEM           :       1.17 :       0.06 :       1.23 :       1.23 *
[1,5]<stdout>: * NUME_DDL                 :       1.02 :       0.91 :       1.93 :       1.93 *
[1,5]<stdout>: * ASSE_MATRICE             :       0.62 :       0.04 :       0.66 :       0.67 *
[1,5]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,5]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.01 :       0.03 :       0.03 *
[1,5]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,5]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,5]<stdout>: *  . fortran               :       2.53 :       0.99 :       3.52 :       3.49 *
[1,5]<stdout>: *  . cleanup               :       0.13 :       0.00 :       0.13 :       0.14 *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * TOTAL_JOB                :      20.52 :       3.15 :      23.67 :      23.68 *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * DEBUT                    :       0.03 :       0.12 :       0.15 :       0.15 *
[1,7]<stdout>: * CREA_MAILLAGE            :       2.04 :       0.70 :       2.74 :       2.74 *
[1,7]<stdout>: * AFFE_MODELE              :       0.60 :       0.00 :       0.60 :       0.60 *
[1,7]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,7]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,7]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.07 *
[1,7]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.08 *
[1,7]<stdout>: * CALC_MATR_ELEM           :       1.16 :       0.07 :       1.23 :       1.23 *
[1,7]<stdout>: * NUME_DDL                 :       0.98 :       0.96 :       1.94 :       1.94 *
[1,7]<stdout>: * ASSE_MATRICE             :       0.62 :       0.04 :       0.66 :       0.67 *
[1,7]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.02 *
[1,7]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.03 *
[1,7]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,7]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,7]<stdout>: *  . fortran               :       2.67 :       0.83 :       3.50 :       3.49 *
[1,7]<stdout>: *  . cleanup               :       0.12 :       0.00 :       0.12 :       0.14 *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * TOTAL_JOB                :      20.52 :       3.15 :      23.67 :      23.68 *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>: * DEBUT                    :       0.04 :       0.11 :       0.15 :       0.15 *
[1,13]<stdout>: * CREA_MAILLAGE            :       1.89 :       0.86 :       2.75 :       2.75 *
[1,13]<stdout>: * AFFE_MODELE              :       0.60 :       0.00 :       0.60 :       0.60 *
[1,13]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,13]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,13]<stdout>: * AFFE_CHAR_CINE           :       0.07 :       0.00 :       0.07 :       0.07 *
[1,13]<stdout>: * AFFE_CHAR_CINE           :       0.09 :       0.00 :       0.09 :       0.09 *
[1,13]<stdout>: * CALC_MATR_ELEM           :       1.28 :       0.03 :       1.31 :       1.31 *
[1,13]<stdout>: * NUME_DDL                 :       0.90 :       0.95 :       1.85 :       1.84 *
[1,13]<stdout>: * ASSE_MATRICE             :       0.62 :       0.05 :       0.67 :       0.67 *
[1,13]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,13]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.01 :       0.03 :       0.03 *
[1,13]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,13]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.02 *
[1,13]<stdout>: *  . fortran               :       2.53 :       0.98 :       3.51 :       3.50 *
[1,13]<stdout>: *  . cleanup               :       0.13 :       0.00 :       0.13 :       0.13 *
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>: * TOTAL_JOB                :      20.53 :       3.14 :      23.67 :      23.68 *
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * DEBUT                    :       0.02 :       0.14 :       0.16 :       0.16 *
[1,6]<stdout>: * CREA_MAILLAGE            :       1.80 :       0.96 :       2.76 :       2.76 *
[1,6]<stdout>: * AFFE_MODELE              :       0.61 :       0.00 :       0.61 :       0.60 *
[1,6]<stdout>: * DEFI_MATERIAU            :       0.01 :       0.00 :       0.01 :       0.02 *
[1,6]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,6]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.07 *
[1,6]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.09 *
[1,6]<stdout>: * CALC_MATR_ELEM           :       1.26 :       0.03 :       1.29 :       1.29 *
[1,6]<stdout>: * NUME_DDL                 :       0.94 :       0.93 :       1.87 :       1.87 *
[1,6]<stdout>: * ASSE_MATRICE             :       0.63 :       0.03 :       0.66 :       0.67 *
[1,6]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,6]<stdout>: * CALC_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.03 *
[1,6]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,6]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,6]<stdout>: *  . fortran               :       2.43 :       1.11 :       3.54 :       3.50 *
[1,6]<stdout>: *  . cleanup               :       0.12 :       0.00 :       0.12 :       0.14 *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * TOTAL_JOB                :      20.35 :       3.32 :      23.67 :      23.68 *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>: * DEBUT                    :       0.03 :       0.12 :       0.15 :       0.15 *
[1,14]<stdout>: * CREA_MAILLAGE            :       1.83 :       0.92 :       2.75 :       2.75 *
[1,14]<stdout>: * AFFE_MODELE              :       0.60 :       0.00 :       0.60 :       0.60 *
[1,14]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,14]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,14]<stdout>: * AFFE_CHAR_CINE           :       0.07 :       0.01 :       0.08 :       0.08 *
[1,14]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.08 *
[1,14]<stdout>: * CALC_MATR_ELEM           :       1.26 :       0.05 :       1.31 :       1.31 *
[1,14]<stdout>: * NUME_DDL                 :       0.95 :       0.90 :       1.85 :       1.85 *
[1,14]<stdout>: * ASSE_MATRICE             :       0.61 :       0.05 :       0.66 :       0.67 *
[1,14]<stdout>: * CREA_CHAMP               :       0.03 :       0.01 :       0.04 :       0.03 *
[1,14]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.01 :       0.03 :       0.03 *
[1,14]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,14]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.00 *
[1,14]<stdout>: *  . fortran               :       2.45 :       1.06 :       3.51 :       3.51 *
[1,14]<stdout>: *  . cleanup               :       0.12 :       0.00 :       0.12 :       0.13 *
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>: * TOTAL_JOB                :      20.37 :       3.31 :      23.68 :      23.68 *
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>: * DEBUT                    :       0.01 :       0.14 :       0.15 :       0.15 *
[1,8]<stdout>: * CREA_MAILLAGE            :       2.03 :       0.72 :       2.75 :       2.75 *
[1,8]<stdout>: * AFFE_MODELE              :       0.60 :       0.00 :       0.60 :       0.60 *
[1,8]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,8]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,8]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.07 *
[1,8]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.08 *
[1,8]<stdout>: * CALC_MATR_ELEM           :       1.21 :       0.05 :       1.26 :       1.25 *
[1,8]<stdout>: * NUME_DDL                 :       1.00 :       0.91 :       1.91 :       1.91 *
[1,8]<stdout>: * ASSE_MATRICE             :       0.64 :       0.02 :       0.66 :       0.67 *
[1,8]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,8]<stdout>: * CALC_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.03 *
[1,8]<stdout>: * FIN                      :       0.04 :       0.01 :       0.05 :       0.04 *
[1,8]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.00 *
[1,8]<stdout>: *  . fortran               :       2.63 :       0.88 :       3.51 :       3.50 *
[1,8]<stdout>: *  . cleanup               :       0.13 :       0.00 :       0.13 :       0.14 *
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>: * TOTAL_JOB                :      20.59 :       3.10 :      23.69 :      23.68 *
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * DEBUT                    :       0.01 :       0.15 :       0.16 :       0.15 *
[1,1]<stdout>: * CREA_MAILLAGE            :       2.09 :       0.65 :       2.74 :       2.74 *
[1,1]<stdout>: * AFFE_MODELE              :       0.61 :       0.00 :       0.61 :       0.60 *
[1,1]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,1]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,1]<stdout>: * AFFE_CHAR_CINE           :       0.07 :       0.00 :       0.07 :       0.07 *
[1,1]<stdout>: * AFFE_CHAR_CINE           :       0.09 :       0.00 :       0.09 :       0.08 *
[1,1]<stdout>: * CALC_MATR_ELEM           :       1.15 :       0.04 :       1.19 :       1.20 *
[1,1]<stdout>: * NUME_DDL                 :       1.10 :       0.88 :       1.98 :       1.97 *
[1,1]<stdout>: * ASSE_MATRICE             :       0.61 :       0.05 :       0.66 :       0.67 *
[1,1]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.02 *
[1,1]<stdout>: * CALC_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,1]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.04 *
[1,1]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.02 *
[1,1]<stdout>: *  . fortran               :       2.72 :       0.82 :       3.54 :       3.49 *
[1,1]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.14 *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * TOTAL_JOB                :      20.60 :       3.08 :      23.68 :      23.68 *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>: * DEBUT                    :       0.02 :       0.13 :       0.15 :       0.15 *
[1,12]<stdout>: * CREA_MAILLAGE            :       2.05 :       0.69 :       2.74 :       2.74 *
[1,12]<stdout>: * AFFE_MODELE              :       0.60 :       0.00 :       0.60 :       0.60 *
[1,12]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,12]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,12]<stdout>: * AFFE_CHAR_CINE           :       0.07 :       0.00 :       0.07 :       0.07 *
[1,12]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.08 *
[1,12]<stdout>: * CALC_MATR_ELEM           :       1.17 :       0.06 :       1.23 :       1.23 *
[1,12]<stdout>: * NUME_DDL                 :       1.04 :       0.90 :       1.94 :       1.94 *
[1,12]<stdout>: * ASSE_MATRICE             :       0.61 :       0.05 :       0.66 :       0.67 *
[1,12]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.02 *
[1,12]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.03 *
[1,12]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,12]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.00 *
[1,12]<stdout>: *  . fortran               :       2.66 :       0.83 :       3.49 :       3.49 *
[1,12]<stdout>: *  . cleanup               :       0.13 :       0.00 :       0.13 :       0.14 *
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>: * TOTAL_JOB                :      20.63 :       3.04 :      23.67 :      23.68 *
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * DEBUT                    :       0.01 :       0.14 :       0.15 :       0.15 *
[1,4]<stdout>: * CREA_MAILLAGE            :       1.83 :       0.94 :       2.77 :       2.77 *
[1,4]<stdout>: * AFFE_MODELE              :       0.61 :       0.01 :       0.62 :       0.60 *
[1,4]<stdout>: * DEFI_MATERIAU            :       0.01 :       0.00 :       0.01 :       0.02 *
[1,4]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.01 :       0.04 :       0.03 *
[1,4]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.08 *
[1,4]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.08 *
[1,4]<stdout>: * CALC_MATR_ELEM           :       1.34 :       0.04 :       1.38 :       1.39 *
[1,4]<stdout>: * NUME_DDL                 :       0.80 :       0.97 :       1.77 :       1.77 *
[1,4]<stdout>: * ASSE_MATRICE             :       0.61 :       0.05 :       0.66 :       0.67 *
[1,4]<stdout>: * CREA_CHAMP               :       0.02 :       0.02 :       0.04 :       0.03 *
[1,4]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.01 :       0.03 :       0.04 *
[1,4]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,4]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,4]<stdout>: *  . fortran               :       2.41 :       1.11 :       3.52 :       3.51 *
[1,4]<stdout>: *  . cleanup               :       0.11 :       0.00 :       0.11 :       0.15 *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * TOTAL_JOB                :      20.28 :       3.39 :      23.67 :      23.68 *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>: * DEBUT                    :       0.01 :       0.14 :       0.15 :       0.15 *
[1,15]<stdout>: * CREA_MAILLAGE            :       1.91 :       0.83 :       2.74 :       2.74 *
[1,15]<stdout>: * AFFE_MODELE              :       0.60 :       0.00 :       0.60 :       0.60 *
[1,15]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,15]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,15]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.07 *
[1,15]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.08 *
[1,15]<stdout>: * CALC_MATR_ELEM           :       1.18 :       0.04 :       1.22 :       1.23 *
[1,15]<stdout>: * NUME_DDL                 :       1.06 :       0.88 :       1.94 :       1.94 *
[1,15]<stdout>: * ASSE_MATRICE             :       0.62 :       0.04 :       0.66 :       0.67 *
[1,15]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,15]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.03 *
[1,15]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,15]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,15]<stdout>: *  . fortran               :       2.52 :       0.98 :       3.50 :       3.49 *
[1,15]<stdout>: *  . cleanup               :       0.12 :       0.00 :       0.12 :       0.13 *
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>: * TOTAL_JOB                :      20.47 :       3.22 :      23.69 :      23.68 *
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * DEBUT                    :       0.03 :       0.13 :       0.16 :       0.15 *
[1,0]<stdout>: * DEFI_FICHIER             :       0.00 :       0.00 :       0.00 :       0.00 *
[1,0]<stdout>: * DEFI_FICHIER             :       0.00 :       0.00 :       0.00 :       0.00 *
[1,0]<stdout>: * CREA_MAILLAGE            :       1.84 :       0.93 :       2.77 :       2.77 *
[1,0]<stdout>: * AFFE_MODELE              :       0.58 :       0.00 :       0.58 :       0.58 *
[1,0]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,0]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,0]<stdout>: * AFFE_CHAR_CINE           :       0.09 :       0.00 :       0.09 :       0.08 *
[1,0]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.08 *
[1,0]<stdout>: * CALC_MATR_ELEM           :       1.37 :       0.06 :       1.43 :       1.42 *
[1,0]<stdout>: * NUME_DDL                 :       0.81 :       0.92 :       1.73 :       1.74 *
[1,0]<stdout>: * ASSE_MATRICE             :       0.60 :       0.06 :       0.66 :       0.66 *
[1,0]<stdout>: * CREA_CHAMP               :       0.01 :       0.01 :       0.02 :       0.03 *
[1,0]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.02 :       0.05 :       0.04 *
[1,0]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,0]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,0]<stdout>: *  . fortran               :       2.43 :       1.07 :       3.50 :       3.48 *
[1,0]<stdout>: *  . cleanup               :       0.13 :       0.01 :       0.14 :       0.15 *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * TOTAL_JOB                :      19.98 :       3.71 :      23.69 :      23.68 *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>: * DEBUT                    :       0.03 :       0.13 :       0.16 :       0.15 *
[1,9]<stdout>: * CREA_MAILLAGE            :       1.88 :       0.88 :       2.76 :       2.75 *
[1,9]<stdout>: * AFFE_MODELE              :       0.61 :       0.00 :       0.61 :       0.60 *
[1,9]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,9]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,9]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.07 *
[1,9]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.09 *
[1,9]<stdout>: * CALC_MATR_ELEM           :       1.26 :       0.04 :       1.30 :       1.29 *
[1,9]<stdout>: * NUME_DDL                 :       0.95 :       0.92 :       1.87 :       1.87 *
[1,9]<stdout>: * ASSE_MATRICE             :       0.62 :       0.04 :       0.66 :       0.67 *
[1,9]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,9]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.03 *
[1,9]<stdout>: * FIN                      :       0.04 :       0.01 :       0.05 :       0.04 *
[1,9]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.00 *
[1,9]<stdout>: *  . fortran               :       2.50 :       1.03 :       3.53 :       3.51 *
[1,9]<stdout>: *  . cleanup               :       0.13 :       0.00 :       0.13 :       0.14 *
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>: * TOTAL_JOB                :      20.41 :       3.27 :      23.68 :      23.68 *
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>: * DEBUT                    :       0.02 :       0.13 :       0.15 :       0.15 *
[1,10]<stdout>: * CREA_MAILLAGE            :       1.86 :       0.90 :       2.76 :       2.77 *
[1,10]<stdout>: * AFFE_MODELE              :       0.60 :       0.00 :       0.60 :       0.60 *
[1,10]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,10]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,10]<stdout>: * AFFE_CHAR_CINE           :       0.09 :       0.00 :       0.09 :       0.08 *
[1,10]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.08 *
[1,10]<stdout>: * CALC_MATR_ELEM           :       1.35 :       0.03 :       1.38 :       1.39 *
[1,10]<stdout>: * NUME_DDL                 :       0.86 :       0.91 :       1.77 :       1.77 *
[1,10]<stdout>: * ASSE_MATRICE             :       0.61 :       0.05 :       0.66 :       0.67 *
[1,10]<stdout>: * CREA_CHAMP               :       0.03 :       0.01 :       0.04 :       0.03 *
[1,10]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.01 :       0.03 :       0.04 *
[1,10]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,10]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.00 *
[1,10]<stdout>: *  . fortran               :       2.47 :       1.04 :       3.51 :       3.51 *
[1,10]<stdout>: *  . cleanup               :       0.11 :       0.00 :       0.11 :       0.14 *
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>: * TOTAL_JOB                :      20.24 :       3.45 :      23.69 :      23.68 *
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>: * DEBUT                    :       0.00 :       0.15 :       0.15 :       0.15 *
[1,11]<stdout>: * CREA_MAILLAGE            :       1.96 :       0.77 :       2.73 :       2.73 *
[1,11]<stdout>: * AFFE_MODELE              :       0.60 :       0.00 :       0.60 :       0.60 *
[1,11]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,11]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,11]<stdout>: * AFFE_CHAR_CINE           :       0.07 :       0.01 :       0.08 :       0.07 *
[1,11]<stdout>: * AFFE_CHAR_CINE           :       0.08 :       0.00 :       0.08 :       0.08 *
[1,11]<stdout>: * CALC_MATR_ELEM           :       1.13 :       0.04 :       1.17 :       1.17 *
[1,11]<stdout>: * NUME_DDL                 :       1.07 :       0.93 :       2.00 :       2.00 *
[1,11]<stdout>: * ASSE_MATRICE             :       0.62 :       0.04 :       0.66 :       0.67 *
[1,11]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.02 *
[1,11]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,11]<stdout>: * FIN                      :       0.04 :       0.01 :       0.05 :       0.04 *
[1,11]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,11]<stdout>: *  . fortran               :       2.55 :       0.96 :       3.51 :       3.49 *
[1,11]<stdout>: *  . cleanup               :       0.11 :       0.00 :       0.11 :       0.13 *
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>: * TOTAL_JOB                :      20.50 :       3.19 :      23.69 :      23.68 *
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * DEBUT                    :       0.00 :       0.15 :       0.15 :       0.15 *
[1,2]<stdout>: * CREA_MAILLAGE            :       1.98 :       0.78 :       2.76 :       2.75 *
[1,2]<stdout>: * AFFE_MODELE              :       0.61 :       0.00 :       0.61 :       0.60 *
[1,2]<stdout>: * DEFI_MATERIAU            :       0.01 :       0.00 :       0.01 :       0.02 *
[1,2]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,2]<stdout>: * AFFE_CHAR_CINE           :       0.07 :       0.00 :       0.07 :       0.07 *
[1,2]<stdout>: * AFFE_CHAR_CINE           :       0.09 :       0.00 :       0.09 :       0.08 *
[1,2]<stdout>: * CALC_MATR_ELEM           :       1.18 :       0.07 :       1.25 :       1.25 *
[1,2]<stdout>: * NUME_DDL                 :       1.02 :       0.89 :       1.91 :       1.91 *
[1,2]<stdout>: * ASSE_MATRICE             :       0.62 :       0.03 :       0.65 :       0.66 *
[1,2]<stdout>: * CREA_CHAMP               :       0.02 :       0.02 :       0.04 :       0.03 *
[1,2]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.03 *
[1,2]<stdout>: * FIN                      :       0.03 :       0.00 :       0.03 :       0.04 *
[1,2]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,2]<stdout>: *  . fortran               :       2.59 :       0.95 :       3.54 :       3.50 *
[1,2]<stdout>: *  . cleanup               :       0.11 :       0.01 :       0.12 :       0.14 *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * TOTAL_JOB                :      20.57 :       3.10 :      23.67 :      23.68 *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>:
[1,12]<stdout>:# Mémoire (Mo) :  2707.19 /  2613.75 /  1068.38 /   712.65 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  2673.43 /  2629.82 /  1069.43 /   712.91 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  2819.41 /  2772.65 /  1103.28 /   721.10 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  2782.73 /  2735.60 /  1096.06 /   719.18 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Mémoire (Mo) :  2813.64 /  2792.80 /  1104.55 /   721.58 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  2914.32 /  2858.45 /  1125.88 /   726.52 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  2704.76 /  2640.75 /  1075.20 /   714.47 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  2746.48 /  2661.33 /  1081.12 /   715.75 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :  2985.46 /  2869.02 /  1127.96 /   727.21 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  2730.59 /  2622.64 /  1068.62 /   712.64 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :  2823.74 /  2734.83 /  1095.61 /   719.10 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :  2978.73 /  2860.46 /  1126.55 /   726.72 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Mémoire (Mo) :  2583.22 /  2547.78 /  1049.82 /   708.12 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  2597.26 /  2584.24 /  1060.82 /   710.75 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  2708.50 /  2666.37 /  1082.46 /   716.03 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.01s, elaps:        0.04s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  2974.42 /  2949.96 /  1146.24 /   731.50 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.01s, elaps:        0.04s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.01s, elaps:        0.04s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0013   user+syst:        0.03s (syst:        0.00s, elaps:        0.04s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0015   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:End of the Code_Aster execution
[1,5]<stdout>:Code_Aster MPI exits normally
[1,5]<stdout>:Exited
[1,7]<stdout>:End of the Code_Aster execution
[1,7]<stdout>:Code_Aster MPI exits normally
[1,7]<stdout>:Exited
[1,13]<stdout>:End of the Code_Aster execution
[1,13]<stdout>:Code_Aster MPI exits normally
[1,13]<stdout>:Exited
[1,0]<stdout>:End of the Code_Aster execution
[1,0]<stdout>:Code_Aster MPI exits normally
[1,0]<stdout>:Exited
[1,8]<stdout>:End of the Code_Aster execution
[1,8]<stdout>:Code_Aster MPI exits normally
[1,8]<stdout>:Exited
[1,4]<stdout>:End of the Code_Aster execution
[1,4]<stdout>:Code_Aster MPI exits normally
[1,4]<stdout>:Exited
[1,9]<stdout>:End of the Code_Aster execution
[1,9]<stdout>:Code_Aster MPI exits normally
[1,9]<stdout>:Exited
[1,6]<stdout>:End of the Code_Aster execution
[1,6]<stdout>:Code_Aster MPI exits normally
[1,6]<stdout>:Exited
[1,3]<stdout>:End of the Code_Aster execution
[1,3]<stdout>:Code_Aster MPI exits normally
[1,3]<stdout>:Exited
[1,11]<stdout>:End of the Code_Aster execution
[1,11]<stdout>:Code_Aster MPI exits normally
[1,11]<stdout>:Exited
[1,1]<stdout>:End of the Code_Aster execution
[1,1]<stdout>:Code_Aster MPI exits normally
[1,1]<stdout>:Exited
[1,12]<stdout>:End of the Code_Aster execution
[1,12]<stdout>:Code_Aster MPI exits normally
[1,12]<stdout>:Exited
[1,15]<stdout>:End of the Code_Aster execution
[1,15]<stdout>:Code_Aster MPI exits normally
[1,15]<stdout>:Exited
[1,14]<stdout>:End of the Code_Aster execution
[1,14]<stdout>:Code_Aster MPI exits normally
[1,14]<stdout>:Exited
[1,10]<stdout>:End of the Code_Aster execution
[1,10]<stdout>:Code_Aster MPI exits normally
[1,10]<stdout>:Exited
[1,2]<stdout>:End of the Code_Aster execution
[1,2]<stdout>:Code_Aster MPI exits normally
[1,2]<stdout>:Exited
[1,11]<stdout>:
[1,11]<stdout>:EXECUTION_CODE_ASTER_EXIT_1020=0
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:execution ended (command file #1): OK
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.11 after execution:
[1,11]<stdout>:.:
[1,11]<stdout>:total 28
[1,11]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 1020.export
[1,11]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,11]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,11]<stdout>:-rw-r--r-- 1 aster aster 22321 Jan 23 16:32 fort.6
[1,11]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,11]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,11]<stdout>:
[1,11]<stdout>:REPE_OUT:
[1,11]<stdout>:total 0
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Execution summary
[1,11]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,11]<stdout>:Execution of code_aster             20.87       3.85      24.72      33.47
[1,11]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:Total                               20.87       3.85      24.72      33.47
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:EXECUTION_CODE_ASTER_EXIT_970=0
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:execution ended (command file #1): OK
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.1 after execution:
[1,1]<stdout>:.:
[1,1]<stdout>:total 28
[1,1]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 970.export
[1,1]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,1]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,1]<stdout>:-rw-r--r-- 1 aster aster 22319 Jan 23 16:32 fort.6
[1,1]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,1]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,1]<stdout>:
[1,1]<stdout>:REPE_OUT:
[1,1]<stdout>:total 0
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution summary
[1,1]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,1]<stdout>:Execution of code_aster             20.95       3.78      24.73      34.02
[1,1]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:Total                               20.95       3.78      24.73      34.02
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:EXECUTION_CODE_ASTER_EXIT_1024=0
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:execution ended (command file #1): OK
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.12 after execution:
[1,12]<stdout>:.:
[1,12]<stdout>:total 28
[1,12]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 1024.export
[1,12]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,12]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,12]<stdout>:-rw-r--r-- 1 aster aster 22321 Jan 23 16:32 fort.6
[1,12]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,12]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,12]<stdout>:
[1,12]<stdout>:REPE_OUT:
[1,12]<stdout>:total 0
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Execution summary
[1,12]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,12]<stdout>:Execution of code_aster             21.01       3.72      24.73      34.20
[1,12]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:Total                               21.01       3.72      24.73      34.20
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:EXECUTION_CODE_ASTER_EXIT_990=0
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:execution ended (command file #1): OK
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.5 after execution:
[1,5]<stdout>:.:
[1,5]<stdout>:total 28
[1,5]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 990.export
[1,5]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,5]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,5]<stdout>:-rw-r--r-- 1 aster aster 22272 Jan 23 16:32 fort.6
[1,5]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,5]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,5]<stdout>:
[1,5]<stdout>:REPE_OUT:
[1,5]<stdout>:total 0
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution summary
[1,5]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,5]<stdout>:Execution of code_aster             20.82       3.92      24.74      34.26
[1,5]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:Total                               20.82       3.92      24.74      34.26
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:EXECUTION_CODE_ASTER_EXIT_1032=0
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:execution ended (command file #1): OK
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.15 after execution:
[1,15]<stdout>:.:
[1,15]<stdout>:total 28
[1,15]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 1032.export
[1,15]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,15]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,15]<stdout>:-rw-r--r-- 1 aster aster 22321 Jan 23 16:32 fort.6
[1,15]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,15]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,15]<stdout>:
[1,15]<stdout>:REPE_OUT:
[1,15]<stdout>:total 0
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Execution summary
[1,15]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,15]<stdout>:Execution of code_aster             20.83       3.91      24.74      34.25
[1,15]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:Total                               20.83       3.91      24.74      34.25
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:EXECUTION_CODE_ASTER_EXIT_975=0
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:execution ended (command file #1): OK
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.2 after execution:
[1,2]<stdout>:.:
[1,2]<stdout>:total 28
[1,2]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 975.export
[1,2]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,2]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,2]<stdout>:-rw-r--r-- 1 aster aster 22319 Jan 23 16:32 fort.6
[1,2]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,2]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,2]<stdout>:
[1,2]<stdout>:REPE_OUT:
[1,2]<stdout>:total 0
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution summary
[1,2]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,2]<stdout>:Execution of code_aster             20.88       3.87      24.75      34.30
[1,2]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:Total                               20.88       3.87      24.75      34.30
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:EXECUTION_CODE_ASTER_EXIT_1010=0
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:execution ended (command file #1): OK
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.9 after execution:
[1,9]<stdout>:.:
[1,9]<stdout>:total 28
[1,9]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 1010.export
[1,9]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,9]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,9]<stdout>:-rw-r--r-- 1 aster aster 22273 Jan 23 16:32 fort.6
[1,9]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,9]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,9]<stdout>:
[1,9]<stdout>:REPE_OUT:
[1,9]<stdout>:total 0
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Execution summary
[1,9]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,9]<stdout>:Execution of code_aster             20.77       3.98      24.75      34.31
[1,9]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:Total                               20.77       3.98      24.75      34.31
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:EXECUTION_CODE_ASTER_EXIT_980=0
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:execution ended (command file #1): OK
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.3 after execution:
[1,3]<stdout>:.:
[1,3]<stdout>:total 28
[1,3]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 980.export
[1,3]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,3]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,3]<stdout>:-rw-r--r-- 1 aster aster 22272 Jan 23 16:32 fort.6
[1,3]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,3]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,3]<stdout>:
[1,3]<stdout>:REPE_OUT:
[1,3]<stdout>:total 0
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution summary
[1,3]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,3]<stdout>:Execution of code_aster             20.80       3.96      24.76      34.34
[1,3]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:Total                               20.80       3.96      24.76      34.34
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:EXECUTION_CODE_ASTER_EXIT_1028=0
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:execution ended (command file #1): OK
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.13 after execution:
[1,13]<stdout>:.:
[1,13]<stdout>:total 28
[1,13]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 1028.export
[1,13]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,13]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,13]<stdout>:-rw-r--r-- 1 aster aster 22274 Jan 23 16:32 fort.6
[1,13]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,13]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,13]<stdout>:
[1,13]<stdout>:REPE_OUT:
[1,13]<stdout>:total 0
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Execution summary
[1,13]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,13]<stdout>:Execution of code_aster             20.91       3.84      24.75      34.33
[1,13]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:Total                               20.91       3.84      24.75      34.34
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:EXECUTION_CODE_ASTER_EXIT_995=0
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:execution ended (command file #1): OK
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.6 after execution:
[1,6]<stdout>:.:
[1,6]<stdout>:total 28
[1,6]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 995.export
[1,6]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,6]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,6]<stdout>:-rw-r--r-- 1 aster aster 22272 Jan 23 16:32 fort.6
[1,6]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,6]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,6]<stdout>:
[1,6]<stdout>:REPE_OUT:
[1,6]<stdout>:total 0
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution summary
[1,6]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,6]<stdout>:Execution of code_aster             20.71       4.04      24.75      34.35
[1,6]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:Total                               20.71       4.04      24.75      34.35
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:EXECUTION_CODE_ASTER_EXIT_985=0
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:execution ended (command file #1): OK
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.4 after execution:
[1,4]<stdout>:.:
[1,4]<stdout>:total 28
[1,4]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 985.export
[1,4]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,4]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,4]<stdout>:-rw-r--r-- 1 aster aster 22319 Jan 23 16:32 fort.6
[1,4]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,4]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,4]<stdout>:
[1,4]<stdout>:REPE_OUT:
[1,4]<stdout>:total 0
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution summary
[1,4]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,4]<stdout>:Execution of code_aster             20.64       4.12      24.76      34.37
[1,4]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:Total                               20.64       4.12      24.76      34.37
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:EXECUTION_CODE_ASTER_EXIT_1015=0
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:execution ended (command file #1): OK
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.10 after execution:
[1,10]<stdout>:.:
[1,10]<stdout>:total 28
[1,10]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 1015.export
[1,10]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,10]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,10]<stdout>:-rw-r--r-- 1 aster aster 22274 Jan 23 16:32 fort.6
[1,10]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,10]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,10]<stdout>:
[1,10]<stdout>:REPE_OUT:
[1,10]<stdout>:total 0
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Execution summary
[1,10]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,10]<stdout>:Execution of code_aster             20.62       4.14      24.76      34.36
[1,10]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:Total                               20.62       4.14      24.76      34.36
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:EXECUTION_CODE_ASTER_EXIT_964=0
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:execution ended (command file #1): OK
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.0 after execution:
[1,0]<stdout>:.:
[1,0]<stdout>:total 68
[1,0]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 964.export
[1,0]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,0]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,0]<stdout>:-rw-r--r-- 1 aster aster 15367 Jan 23 16:32 asrun.log
[1,0]<stdout>:-rw-r--r-- 1 aster aster 45380 Jan 23 16:32 fort.6
[1,0]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,0]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,0]<stdout>:
[1,0]<stdout>:REPE_OUT:
[1,0]<stdout>:total 0
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution summary
[1,0]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,0]<stdout>:Execution of code_aster             20.34       4.43      24.77      34.38
[1,0]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:Total                               20.34       4.43      24.77      34.38
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------
[1,0]<stdout>:--- DIAGNOSTIC JOB : OK
[1,0]<stdout>:------------------------------------------------------------
[1,0]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:EXECUTION_CODE_ASTER_EXIT_1000=0
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:execution ended (command file #1): OK
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.7 after execution:
[1,7]<stdout>:.:
[1,7]<stdout>:total 28
[1,7]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 1000.export
[1,7]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,7]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,7]<stdout>:-rw-r--r-- 1 aster aster 22320 Jan 23 16:32 fort.6
[1,7]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,7]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,7]<stdout>:
[1,7]<stdout>:REPE_OUT:
[1,7]<stdout>:total 0
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution summary
[1,7]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,7]<stdout>:Execution of code_aster             20.83       3.89      24.72      34.39
[1,7]<stdout>:Copying results                      0.00       0.01       0.01       0.01
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:Total                               20.83       3.90      24.73      34.40
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:EXECUTION_CODE_ASTER_EXIT_1031=0
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:execution ended (command file #1): OK
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.14 after execution:
[1,14]<stdout>:.:
[1,14]<stdout>:total 28
[1,14]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 1031.export
[1,14]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,14]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,14]<stdout>:-rw-r--r-- 1 aster aster 22274 Jan 23 16:32 fort.6
[1,14]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,14]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,14]<stdout>:
[1,14]<stdout>:REPE_OUT:
[1,14]<stdout>:total 0
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Execution summary
[1,14]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,14]<stdout>:Execution of code_aster             20.73       4.03      24.76      34.41
[1,14]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:Total                               20.73       4.03      24.76      34.41
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:EXECUTION_CODE_ASTER_EXIT_1005=0
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:execution ended (command file #1): OK
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Content of /tmp/run_aster_y0hxnhf2/proc.8 after execution:
[1,8]<stdout>:.:
[1,8]<stdout>:total 28
[1,8]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:31 1005.export
[1,8]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_IN
[1,8]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:31 REPE_OUT
[1,8]<stdout>:-rw-r--r-- 1 aster aster 22320 Jan 23 16:32 fort.6
[1,8]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.8
[1,8]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:31 fort.9
[1,8]<stdout>:
[1,8]<stdout>:REPE_OUT:
[1,8]<stdout>:total 0
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Execution summary
[1,8]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,8]<stdout>:Execution of code_aster             20.94       3.80      24.74      34.45
[1,8]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:Total                               20.94       3.80      24.74      34.45
[1,8]<stdout>:--------------------------------------------------------------------------------
