WARNING: If MPI_Abort is called during execution, result files could not be copied.
Running: mpiexec -n 32 --tag-output /opt/aster/install/mpi/bin/run_aster -n 32 --wrkdir /tmp/run_aster_jnzipism --status-file /home/aster/.tmp_run_aster/run_aster__l6u3zv4/__status__ --no-mpi /home/aster/.tmp_run_aster/run_aster__l6u3zv4/Cube_perf.0
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution of code_aster
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.1
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command file #1 / 1
[1,1]<stdout>:
[1,1]<stdout>:Content of the file to execute:
[1,1]<stdout>:# coding=utf-8
[1,1]<stdout>:#!/usr/bin/python
[1,1]<stdout>:
[1,1]<stdout>:import os
[1,1]<stdout>:from statistics import mean
[1,1]<stdout>:from datetime import datetime
[1,1]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,1]<stdout>:
[1,1]<stdout>:from code_aster.Commands import *
[1,1]<stdout>:from code_aster import CA
[1,1]<stdout>:from code_aster.Utilities import petscInitialize
[1,1]<stdout>:
[1,1]<stdout>:CA.init()
[1,1]<stdout>:
[1,1]<stdout>:params = {}
[1,1]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,1]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,1]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,1]<stdout>:
[1,1]<stdout>:# General parameters
[1,1]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,1]<stdout>:rank = comm.Get_rank()
[1,1]<stdout>:size = comm.Get_size()
[1,1]<stdout>:
[1,1]<stdout>:nbHexa = 8 ** params["refinements"]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def memory_peak(mess=None):
[1,1]<stdout>:    """Return memory peak in MB"""
[1,1]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMgGen:
[1,1]<stdout>:    stats = {}
[1,1]<stdout>:
[1,1]<stdout>:    def __init__(self, what):
[1,1]<stdout>:        self._what = what
[1,1]<stdout>:
[1,1]<stdout>:    def __enter__(self):
[1,1]<stdout>:        self.start = datetime.now()
[1,1]<stdout>:
[1,1]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,1]<stdout>:        self.stop = datetime.now()
[1,1]<stdout>:        delta = self.stop - self.start
[1,1]<stdout>:        mem = memory_peak(self._what)
[1,1]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,1]<stdout>:    pass
[1,1]<stdout>:    # def __init__(self, what):
[1,1]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def write_stats(nume_ddl):
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB PROC")
[1,1]<stdout>:        print(size)
[1,1]<stdout>:        print()
[1,1]<stdout>:        print(
[1,1]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    for key, values in stats.items():
[1,1]<stdout>:        time = comm.gather(values[0], root=0)
[1,1]<stdout>:        mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(
[1,1]<stdout>:                key
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(mem))
[1,1]<stdout>:            )
[1,1]<stdout>:
[1,1]<stdout>:    mesh = nume_ddl.getMesh()
[1,1]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,1]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,1]<stdout>:
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,1]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,1]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,1]<stdout>:
[1,1]<stdout>:    def show(*args, **kwargs):
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(*args, **kwargs)
[1,1]<stdout>:
[1,1]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,1]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,1]<stdout>:    separ = "| :--------------- | ----------: |"
[1,1]<stdout>:    show(fmti.format("Refinement", refine))
[1,1]<stdout>:    show(separ)
[1,1]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,1]<stdout>:    for key, values in data.items():
[1,1]<stdout>:        times = comm.gather(values[0], root=0)
[1,1]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            show(fmtt.format(key, mean(times)))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,1]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,1]<stdout>:
[1,1]<stdout>:with ChronoCtxMg("Total"):
[1,1]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,1]<stdout>:        if params["parallel"] == "HPC":
[1,1]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:        else:
[1,1]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Model"):
[1,1]<stdout>:        model = AFFE_MODELE(
[1,1]<stdout>:            MA[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution of code_aster
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.2
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command file #1 / 1
[1,2]<stdout>:
[1,2]<stdout>:Content of the file to execute:
[1,2]<stdout>:# coding=utf-8
[1,2]<stdout>:#!/usr/bin/python
[1,2]<stdout>:
[1,2]<stdout>:import os
[1,2]<stdout>:from statistics import mean
[1,2]<stdout>:from datetime import datetime
[1,2]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,2]<stdout>:
[1,2]<stdout>:from code_aster.Commands import *
[1,2]<stdout>:from code_aster import CA
[1,2]<stdout>:from code_aster.Utilities import petscInitialize
[1,2]<stdout>:
[1,2]<stdout>:CA.init()
[1,2]<stdout>:
[1,2]<stdout>:params = {}
[1,2]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,2]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,2]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,2]<stdout>:
[1,2]<stdout>:# General parameters
[1,2]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,2]<stdout>:rank = comm.Get_rank()
[1,2]<stdout>:size = comm.Get_size()
[1,2]<stdout>:
[1,2]<stdout>:nbHexa = 8 ** params["refinements"]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def memory_peak(mess=None):
[1,2]<stdout>:    """Return memory peak in MB"""
[1,2]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMgGen:
[1,2]<stdout>:    stats = {}
[1,2]<stdout>:
[1,2]<stdout>:    def __init__(self, what):
[1,2]<stdout>:        self._what = what
[1,2]<stdout>:
[1,2]<stdout>:    def __enter__(self):
[1,2]<stdout>:        self.start = datetime.now()
[1,2]<stdout>:
[1,2]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,2]<stdout>:        self.stop = datetime.now()
[1,2]<stdout>:        delta = self.stop - self.start
[1,2]<stdout>:        mem = memory_peak(self._what)
[1,2]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,2]<stdout>:    pass
[1,2]<stdout>:    # def __init__(self, what):
[1,2]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def write_stats(nume_ddl):
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB PROC")
[1,2]<stdout>:        print(size)
[1,2]<stdout>:        print()
[1,2]<stdout>:        print(
[1,2]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    for key, values in stats.items():
[1,2]<stdout>:        time = comm.gather(values[0], root=0)
[1,2]<stdout>:        mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(
[1,2]<stdout>:                key
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(mem))
[1,2]<stdout>:            )
[1,2]<stdout>:
[1,2]<stdout>:    mesh = nume_ddl.getMesh()
[1,2]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,2]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,2]<stdout>:
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,2]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,2]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,2]<stdout>:
[1,2]<stdout>:    def show(*args, **kwargs):
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(*args, **kwargs)
[1,2]<stdout>:
[1,2]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,2]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,2]<stdout>:    separ = "| :--------------- | ----------: |"
[1,2]<stdout>:    show(fmti.format("Refinement", refine))
[1,2]<stdout>:    show(separ)
[1,2]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,2]<stdout>:    for key, values in data.items():
[1,2]<stdout>:        times = comm.gather(values[0], root=0)
[1,2]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            show(fmtt.format(key, mean(times)))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,2]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,2]<stdout>:
[1,2]<stdout>:with ChronoCtxMg("Total"):
[1,2]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,2]<stdout>:        if params["parallel"] == "HPC":
[1,2]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:        else:
[1,2]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Model"):
[1,2]<stdout>:        model = AFFE_MODELE(
[1,2]<stdout>:            MA[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution of code_aster
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.3
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command file #1 / 1
[1,3]<stdout>:
[1,3]<stdout>:Content of the file to execute:
[1,3]<stdout>:# coding=utf-8
[1,3]<stdout>:#!/usr/bin/python
[1,3]<stdout>:
[1,3]<stdout>:import os
[1,3]<stdout>:from statistics import mean
[1,3]<stdout>:from datetime import datetime
[1,3]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,3]<stdout>:
[1,3]<stdout>:from code_aster.Commands import *
[1,3]<stdout>:from code_aster import CA
[1,3]<stdout>:from code_aster.Utilities import petscInitialize
[1,3]<stdout>:
[1,3]<stdout>:CA.init()
[1,3]<stdout>:
[1,3]<stdout>:params = {}
[1,3]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,3]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,3]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,3]<stdout>:
[1,3]<stdout>:# General parameters
[1,3]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,3]<stdout>:rank = comm.Get_rank()
[1,3]<stdout>:size = comm.Get_size()
[1,3]<stdout>:
[1,3]<stdout>:nbHexa = 8 ** params["refinements"]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def memory_peak(mess=None):
[1,3]<stdout>:    """Return memory peak in MB"""
[1,3]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMgGen:
[1,3]<stdout>:    stats = {}
[1,3]<stdout>:
[1,3]<stdout>:    def __init__(self, what):
[1,3]<stdout>:        self._what = what
[1,3]<stdout>:
[1,3]<stdout>:    def __enter__(self):
[1,3]<stdout>:        self.start = datetime.now()
[1,3]<stdout>:
[1,3]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,3]<stdout>:        self.stop = datetime.now()
[1,3]<stdout>:        delta = self.stop - self.start
[1,3]<stdout>:        mem = memory_peak(self._what)
[1,3]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,3]<stdout>:    pass
[1,3]<stdout>:    # def __init__(self, what):
[1,3]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def write_stats(nume_ddl):
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB PROC")
[1,3]<stdout>:        print(size)
[1,3]<stdout>:        print()
[1,3]<stdout>:        print(
[1,3]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    for key, values in stats.items():
[1,3]<stdout>:        time = comm.gather(values[0], root=0)
[1,3]<stdout>:        mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(
[1,3]<stdout>:                key
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(mem))
[1,3]<stdout>:            )
[1,3]<stdout>:
[1,3]<stdout>:    mesh = nume_ddl.getMesh()
[1,3]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,3]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,3]<stdout>:
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,3]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,3]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,3]<stdout>:
[1,3]<stdout>:    def show(*args, **kwargs):
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(*args, **kwargs)
[1,3]<stdout>:
[1,3]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,3]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,3]<stdout>:    separ = "| :--------------- | ----------: |"
[1,3]<stdout>:    show(fmti.format("Refinement", refine))
[1,3]<stdout>:    show(separ)
[1,3]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,3]<stdout>:    for key, values in data.items():
[1,3]<stdout>:        times = comm.gather(values[0], root=0)
[1,3]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            show(fmtt.format(key, mean(times)))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,3]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,3]<stdout>:
[1,3]<stdout>:with ChronoCtxMg("Total"):
[1,3]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,3]<stdout>:        if params["parallel"] == "HPC":
[1,3]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:        else:
[1,3]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Model"):
[1,3]<stdout>:        model = AFFE_MODELE(
[1,3]<stdout>:            MA[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution of code_aster
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.4
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command file #1 / 1
[1,4]<stdout>:
[1,4]<stdout>:Content of the file to execute:
[1,4]<stdout>:# coding=utf-8
[1,4]<stdout>:#!/usr/bin/python
[1,4]<stdout>:
[1,4]<stdout>:import os
[1,4]<stdout>:from statistics import mean
[1,4]<stdout>:from datetime import datetime
[1,4]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,4]<stdout>:
[1,4]<stdout>:from code_aster.Commands import *
[1,4]<stdout>:from code_aster import CA
[1,4]<stdout>:from code_aster.Utilities import petscInitialize
[1,4]<stdout>:
[1,4]<stdout>:CA.init()
[1,4]<stdout>:
[1,4]<stdout>:params = {}
[1,4]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,4]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,4]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,4]<stdout>:
[1,4]<stdout>:# General parameters
[1,4]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,4]<stdout>:rank = comm.Get_rank()
[1,4]<stdout>:size = comm.Get_size()
[1,4]<stdout>:
[1,4]<stdout>:nbHexa = 8 ** params["refinements"]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def memory_peak(mess=None):
[1,4]<stdout>:    """Return memory peak in MB"""
[1,4]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMgGen:
[1,4]<stdout>:    stats = {}
[1,4]<stdout>:
[1,4]<stdout>:    def __init__(self, what):
[1,4]<stdout>:        self._what = what
[1,4]<stdout>:
[1,4]<stdout>:    def __enter__(self):
[1,4]<stdout>:        self.start = datetime.now()
[1,4]<stdout>:
[1,4]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,4]<stdout>:        self.stop = datetime.now()
[1,4]<stdout>:        delta = self.stop - self.start
[1,4]<stdout>:        mem = memory_peak(self._what)
[1,4]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,4]<stdout>:    pass
[1,4]<stdout>:    # def __init__(self, what):
[1,4]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def write_stats(nume_ddl):
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB PROC")
[1,4]<stdout>:        print(size)
[1,4]<stdout>:        print()
[1,4]<stdout>:        print(
[1,4]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    for key, values in stats.items():
[1,4]<stdout>:        time = comm.gather(values[0], root=0)
[1,4]<stdout>:        mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(
[1,4]<stdout>:                key
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(mem))
[1,4]<stdout>:            )
[1,4]<stdout>:
[1,4]<stdout>:    mesh = nume_ddl.getMesh()
[1,4]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,4]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,4]<stdout>:
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,4]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,4]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,4]<stdout>:
[1,4]<stdout>:    def show(*args, **kwargs):
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(*args, **kwargs)
[1,4]<stdout>:
[1,4]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,4]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,4]<stdout>:    separ = "| :--------------- | ----------: |"
[1,4]<stdout>:    show(fmti.format("Refinement", refine))
[1,4]<stdout>:    show(separ)
[1,4]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,4]<stdout>:    for key, values in data.items():
[1,4]<stdout>:        times = comm.gather(values[0], root=0)
[1,4]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            show(fmtt.format(key, mean(times)))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,4]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,4]<stdout>:
[1,4]<stdout>:with ChronoCtxMg("Total"):
[1,4]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,4]<stdout>:        if params["parallel"] == "HPC":
[1,4]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:        else:
[1,4]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Model"):
[1,4]<stdout>:        model = AFFE_MODELE(
[1,4]<stdout>:            MA[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution of code_aster
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.5
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command file #1 / 1
[1,5]<stdout>:
[1,5]<stdout>:Content of the file to execute:
[1,5]<stdout>:# coding=utf-8
[1,5]<stdout>:#!/usr/bin/python
[1,5]<stdout>:
[1,5]<stdout>:import os
[1,5]<stdout>:from statistics import mean
[1,5]<stdout>:from datetime import datetime
[1,5]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,5]<stdout>:
[1,5]<stdout>:from code_aster.Commands import *
[1,5]<stdout>:from code_aster import CA
[1,5]<stdout>:from code_aster.Utilities import petscInitialize
[1,5]<stdout>:
[1,5]<stdout>:CA.init()
[1,5]<stdout>:
[1,5]<stdout>:params = {}
[1,5]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,5]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,5]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,5]<stdout>:
[1,5]<stdout>:# General parameters
[1,5]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,5]<stdout>:rank = comm.Get_rank()
[1,5]<stdout>:size = comm.Get_size()
[1,5]<stdout>:
[1,5]<stdout>:nbHexa = 8 ** params["refinements"]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def memory_peak(mess=None):
[1,5]<stdout>:    """Return memory peak in MB"""
[1,5]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMgGen:
[1,5]<stdout>:    stats = {}
[1,5]<stdout>:
[1,5]<stdout>:    def __init__(self, what):
[1,5]<stdout>:        self._what = what
[1,5]<stdout>:
[1,5]<stdout>:    def __enter__(self):
[1,5]<stdout>:        self.start = datetime.now()
[1,5]<stdout>:
[1,5]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,5]<stdout>:        self.stop = datetime.now()
[1,5]<stdout>:        delta = self.stop - self.start
[1,5]<stdout>:        mem = memory_peak(self._what)
[1,5]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,5]<stdout>:    pass
[1,5]<stdout>:    # def __init__(self, what):
[1,5]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def write_stats(nume_ddl):
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB PROC")
[1,5]<stdout>:        print(size)
[1,5]<stdout>:        print()
[1,5]<stdout>:        print(
[1,5]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    for key, values in stats.items():
[1,5]<stdout>:        time = comm.gather(values[0], root=0)
[1,5]<stdout>:        mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(
[1,5]<stdout>:                key
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(mem))
[1,5]<stdout>:            )
[1,5]<stdout>:
[1,5]<stdout>:    mesh = nume_ddl.getMesh()
[1,5]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,5]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,5]<stdout>:
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,5]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,5]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,5]<stdout>:
[1,5]<stdout>:    def show(*args, **kwargs):
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(*args, **kwargs)
[1,5]<stdout>:
[1,5]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,5]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,5]<stdout>:    separ = "| :--------------- | ----------: |"
[1,5]<stdout>:    show(fmti.format("Refinement", refine))
[1,5]<stdout>:    show(separ)
[1,5]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,5]<stdout>:    for key, values in data.items():
[1,5]<stdout>:        times = comm.gather(values[0], root=0)
[1,5]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            show(fmtt.format(key, mean(times)))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,5]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,5]<stdout>:
[1,5]<stdout>:with ChronoCtxMg("Total"):
[1,5]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,5]<stdout>:        if params["parallel"] == "HPC":
[1,5]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:        else:
[1,5]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Model"):
[1,5]<stdout>:        model = AFFE_MODELE(
[1,5]<stdout>:            MA[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution of code_aster
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.6
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command file #1 / 1
[1,6]<stdout>:
[1,6]<stdout>:Content of the file to execute:
[1,6]<stdout>:# coding=utf-8
[1,6]<stdout>:#!/usr/bin/python
[1,6]<stdout>:
[1,6]<stdout>:import os
[1,6]<stdout>:from statistics import mean
[1,6]<stdout>:from datetime import datetime
[1,6]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,6]<stdout>:
[1,6]<stdout>:from code_aster.Commands import *
[1,6]<stdout>:from code_aster import CA
[1,6]<stdout>:from code_aster.Utilities import petscInitialize
[1,6]<stdout>:
[1,6]<stdout>:CA.init()
[1,6]<stdout>:
[1,6]<stdout>:params = {}
[1,6]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,6]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,6]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,6]<stdout>:
[1,6]<stdout>:# General parameters
[1,6]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,6]<stdout>:rank = comm.Get_rank()
[1,6]<stdout>:size = comm.Get_size()
[1,6]<stdout>:
[1,6]<stdout>:nbHexa = 8 ** params["refinements"]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def memory_peak(mess=None):
[1,6]<stdout>:    """Return memory peak in MB"""
[1,6]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMgGen:
[1,6]<stdout>:    stats = {}
[1,6]<stdout>:
[1,6]<stdout>:    def __init__(self, what):
[1,6]<stdout>:        self._what = what
[1,6]<stdout>:
[1,6]<stdout>:    def __enter__(self):
[1,6]<stdout>:        self.start = datetime.now()
[1,6]<stdout>:
[1,6]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,6]<stdout>:        self.stop = datetime.now()
[1,6]<stdout>:        delta = self.stop - self.start
[1,6]<stdout>:        mem = memory_peak(self._what)
[1,6]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,6]<stdout>:    pass
[1,6]<stdout>:    # def __init__(self, what):
[1,6]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def write_stats(nume_ddl):
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB PROC")
[1,6]<stdout>:        print(size)
[1,6]<stdout>:        print()
[1,6]<stdout>:        print(
[1,6]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    for key, values in stats.items():
[1,6]<stdout>:        time = comm.gather(values[0], root=0)
[1,6]<stdout>:        mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(
[1,6]<stdout>:                key
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(mem))
[1,6]<stdout>:            )
[1,6]<stdout>:
[1,6]<stdout>:    mesh = nume_ddl.getMesh()
[1,6]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,6]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,6]<stdout>:
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,6]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,6]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,6]<stdout>:
[1,6]<stdout>:    def show(*args, **kwargs):
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(*args, **kwargs)
[1,6]<stdout>:
[1,6]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,6]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,6]<stdout>:    separ = "| :--------------- | ----------: |"
[1,6]<stdout>:    show(fmti.format("Refinement", refine))
[1,6]<stdout>:    show(separ)
[1,6]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,6]<stdout>:    for key, values in data.items():
[1,6]<stdout>:        times = comm.gather(values[0], root=0)
[1,6]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            show(fmtt.format(key, mean(times)))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,6]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,6]<stdout>:
[1,6]<stdout>:with ChronoCtxMg("Total"):
[1,6]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,6]<stdout>:        if params["parallel"] == "HPC":
[1,6]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:        else:
[1,6]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Model"):
[1,6]<stdout>:        model = AFFE_MODELE(
[1,6]<stdout>:            MA[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution of code_aster
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.7
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command file #1 / 1
[1,7]<stdout>:
[1,7]<stdout>:Content of the file to execute:
[1,7]<stdout>:# coding=utf-8
[1,7]<stdout>:#!/usr/bin/python
[1,7]<stdout>:
[1,7]<stdout>:import os
[1,7]<stdout>:from statistics import mean
[1,7]<stdout>:from datetime import datetime
[1,7]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,7]<stdout>:
[1,7]<stdout>:from code_aster.Commands import *
[1,7]<stdout>:from code_aster import CA
[1,7]<stdout>:from code_aster.Utilities import petscInitialize
[1,7]<stdout>:
[1,7]<stdout>:CA.init()
[1,7]<stdout>:
[1,7]<stdout>:params = {}
[1,7]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,7]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,7]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,7]<stdout>:
[1,7]<stdout>:# General parameters
[1,7]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,7]<stdout>:rank = comm.Get_rank()
[1,7]<stdout>:size = comm.Get_size()
[1,7]<stdout>:
[1,7]<stdout>:nbHexa = 8 ** params["refinements"]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def memory_peak(mess=None):
[1,7]<stdout>:    """Return memory peak in MB"""
[1,7]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMgGen:
[1,7]<stdout>:    stats = {}
[1,7]<stdout>:
[1,7]<stdout>:    def __init__(self, what):
[1,7]<stdout>:        self._what = what
[1,7]<stdout>:
[1,7]<stdout>:    def __enter__(self):
[1,7]<stdout>:        self.start = datetime.now()
[1,7]<stdout>:
[1,7]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,7]<stdout>:        self.stop = datetime.now()
[1,7]<stdout>:        delta = self.stop - self.start
[1,7]<stdout>:        mem = memory_peak(self._what)
[1,7]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,7]<stdout>:    pass
[1,7]<stdout>:    # def __init__(self, what):
[1,7]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def write_stats(nume_ddl):
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB PROC")
[1,7]<stdout>:        print(size)
[1,7]<stdout>:        print()
[1,7]<stdout>:        print(
[1,7]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    for key, values in stats.items():
[1,7]<stdout>:        time = comm.gather(values[0], root=0)
[1,7]<stdout>:        mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(
[1,7]<stdout>:                key
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(mem))
[1,7]<stdout>:            )
[1,7]<stdout>:
[1,7]<stdout>:    mesh = nume_ddl.getMesh()
[1,7]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,7]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,7]<stdout>:
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,7]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,7]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,7]<stdout>:
[1,7]<stdout>:    def show(*args, **kwargs):
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(*args, **kwargs)
[1,7]<stdout>:
[1,7]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,7]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,7]<stdout>:    separ = "| :--------------- | ----------: |"
[1,7]<stdout>:    show(fmti.format("Refinement", refine))
[1,7]<stdout>:    show(separ)
[1,7]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,7]<stdout>:    for key, values in data.items():
[1,7]<stdout>:        times = comm.gather(values[0], root=0)
[1,7]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            show(fmtt.format(key, mean(times)))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,7]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,7]<stdout>:
[1,7]<stdout>:with ChronoCtxMg("Total"):
[1,7]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,7]<stdout>:        if params["parallel"] == "HPC":
[1,7]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:        else:
[1,7]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Model"):
[1,7]<stdout>:        model = AFFE_MODELE(
[1,7]<stdout>:            MA[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Execution of code_aster
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.8
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Command file #1 / 1
[1,8]<stdout>:
[1,8]<stdout>:Content of the file to execute:
[1,8]<stdout>:# coding=utf-8
[1,8]<stdout>:#!/usr/bin/python
[1,8]<stdout>:
[1,8]<stdout>:import os
[1,8]<stdout>:from statistics import mean
[1,8]<stdout>:from datetime import datetime
[1,8]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,8]<stdout>:
[1,8]<stdout>:from code_aster.Commands import *
[1,8]<stdout>:from code_aster import CA
[1,8]<stdout>:from code_aster.Utilities import petscInitialize
[1,8]<stdout>:
[1,8]<stdout>:CA.init()
[1,8]<stdout>:
[1,8]<stdout>:params = {}
[1,8]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,8]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,8]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,8]<stdout>:
[1,8]<stdout>:# General parameters
[1,8]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,8]<stdout>:rank = comm.Get_rank()
[1,8]<stdout>:size = comm.Get_size()
[1,8]<stdout>:
[1,8]<stdout>:nbHexa = 8 ** params["refinements"]
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def memory_peak(mess=None):
[1,8]<stdout>:    """Return memory peak in MB"""
[1,8]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:class ChronoCtxMgGen:
[1,8]<stdout>:    stats = {}
[1,8]<stdout>:
[1,8]<stdout>:    def __init__(self, what):
[1,8]<stdout>:        self._what = what
[1,8]<stdout>:
[1,8]<stdout>:    def __enter__(self):
[1,8]<stdout>:        self.start = datetime.now()
[1,8]<stdout>:
[1,8]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,8]<stdout>:        self.stop = datetime.now()
[1,8]<stdout>:        delta = self.stop - self.start
[1,8]<stdout>:        mem = memory_peak(self._what)
[1,8]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,8]<stdout>:    pass
[1,8]<stdout>:    # def __init__(self, what):
[1,8]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def write_stats(nume_ddl):
[1,8]<stdout>:    if rank == 0:
[1,8]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,8]<stdout>:        print()
[1,8]<stdout>:        print("NB PROC")
[1,8]<stdout>:        print(size)
[1,8]<stdout>:        print()
[1,8]<stdout>:        print(
[1,8]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    for key, values in stats.items():
[1,8]<stdout>:        time = comm.gather(values[0], root=0)
[1,8]<stdout>:        mem = comm.gather(values[1], root=0)
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            print(
[1,8]<stdout>:                key
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(min(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(max(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(mean(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(min(mem))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(max(mem))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(mean(mem))
[1,8]<stdout>:            )
[1,8]<stdout>:
[1,8]<stdout>:    mesh = nume_ddl.getMesh()
[1,8]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,8]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,8]<stdout>:
[1,8]<stdout>:    if rank == 0:
[1,8]<stdout>:        print()
[1,8]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,8]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,8]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,8]<stdout>:
[1,8]<stdout>:    def show(*args, **kwargs):
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            print(*args, **kwargs)
[1,8]<stdout>:
[1,8]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,8]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,8]<stdout>:    separ = "| :--------------- | ----------: |"
[1,8]<stdout>:    show(fmti.format("Refinement", refine))
[1,8]<stdout>:    show(separ)
[1,8]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,8]<stdout>:    for key, values in data.items():
[1,8]<stdout>:        times = comm.gather(values[0], root=0)
[1,8]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            show(fmtt.format(key, mean(times)))
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,8]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,8]<stdout>:
[1,8]<stdout>:with ChronoCtxMg("Total"):
[1,8]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,8]<stdout>:        if params["parallel"] == "HPC":
[1,8]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,8]<stdout>:        else:
[1,8]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Model"):
[1,8]<stdout>:        model = AFFE_MODELE(
[1,8]<stdout>:            MA[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Execution of code_aster
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.9
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Command file #1 / 1
[1,9]<stdout>:
[1,9]<stdout>:Content of the file to execute:
[1,9]<stdout>:# coding=utf-8
[1,9]<stdout>:#!/usr/bin/python
[1,9]<stdout>:
[1,9]<stdout>:import os
[1,9]<stdout>:from statistics import mean
[1,9]<stdout>:from datetime import datetime
[1,9]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,9]<stdout>:
[1,9]<stdout>:from code_aster.Commands import *
[1,9]<stdout>:from code_aster import CA
[1,9]<stdout>:from code_aster.Utilities import petscInitialize
[1,9]<stdout>:
[1,9]<stdout>:CA.init()
[1,9]<stdout>:
[1,9]<stdout>:params = {}
[1,9]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,9]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,9]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,9]<stdout>:
[1,9]<stdout>:# General parameters
[1,9]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,9]<stdout>:rank = comm.Get_rank()
[1,9]<stdout>:size = comm.Get_size()
[1,9]<stdout>:
[1,9]<stdout>:nbHexa = 8 ** params["refinements"]
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def memory_peak(mess=None):
[1,9]<stdout>:    """Return memory peak in MB"""
[1,9]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:class ChronoCtxMgGen:
[1,9]<stdout>:    stats = {}
[1,9]<stdout>:
[1,9]<stdout>:    def __init__(self, what):
[1,9]<stdout>:        self._what = what
[1,9]<stdout>:
[1,9]<stdout>:    def __enter__(self):
[1,9]<stdout>:        self.start = datetime.now()
[1,9]<stdout>:
[1,9]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,9]<stdout>:        self.stop = datetime.now()
[1,9]<stdout>:        delta = self.stop - self.start
[1,9]<stdout>:        mem = memory_peak(self._what)
[1,9]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,9]<stdout>:    pass
[1,9]<stdout>:    # def __init__(self, what):
[1,9]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def write_stats(nume_ddl):
[1,9]<stdout>:    if rank == 0:
[1,9]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,9]<stdout>:        print()
[1,9]<stdout>:        print("NB PROC")
[1,9]<stdout>:        print(size)
[1,9]<stdout>:        print()
[1,9]<stdout>:        print(
[1,9]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    for key, values in stats.items():
[1,9]<stdout>:        time = comm.gather(values[0], root=0)
[1,9]<stdout>:        mem = comm.gather(values[1], root=0)
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            print(
[1,9]<stdout>:                key
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(min(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(max(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(mean(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(min(mem))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(max(mem))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(mean(mem))
[1,9]<stdout>:            )
[1,9]<stdout>:
[1,9]<stdout>:    mesh = nume_ddl.getMesh()
[1,9]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,9]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,9]<stdout>:
[1,9]<stdout>:    if rank == 0:
[1,9]<stdout>:        print()
[1,9]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,9]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,9]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,9]<stdout>:
[1,9]<stdout>:    def show(*args, **kwargs):
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            print(*args, **kwargs)
[1,9]<stdout>:
[1,9]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,9]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,9]<stdout>:    separ = "| :--------------- | ----------: |"
[1,9]<stdout>:    show(fmti.format("Refinement", refine))
[1,9]<stdout>:    show(separ)
[1,9]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,9]<stdout>:    for key, values in data.items():
[1,9]<stdout>:        times = comm.gather(values[0], root=0)
[1,9]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            show(fmtt.format(key, mean(times)))
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,9]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,9]<stdout>:
[1,9]<stdout>:with ChronoCtxMg("Total"):
[1,9]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,9]<stdout>:        if params["parallel"] == "HPC":
[1,9]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,9]<stdout>:        else:
[1,9]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Model"):
[1,9]<stdout>:        model = AFFE_MODELE(
[1,9]<stdout>:            MA[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Execution of code_aster
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.10
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Command file #1 / 1
[1,10]<stdout>:
[1,10]<stdout>:Content of the file to execute:
[1,10]<stdout>:# coding=utf-8
[1,10]<stdout>:#!/usr/bin/python
[1,10]<stdout>:
[1,10]<stdout>:import os
[1,10]<stdout>:from statistics import mean
[1,10]<stdout>:from datetime import datetime
[1,10]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,10]<stdout>:
[1,10]<stdout>:from code_aster.Commands import *
[1,10]<stdout>:from code_aster import CA
[1,10]<stdout>:from code_aster.Utilities import petscInitialize
[1,10]<stdout>:
[1,10]<stdout>:CA.init()
[1,10]<stdout>:
[1,10]<stdout>:params = {}
[1,10]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,10]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,10]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,10]<stdout>:
[1,10]<stdout>:# General parameters
[1,10]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,10]<stdout>:rank = comm.Get_rank()
[1,10]<stdout>:size = comm.Get_size()
[1,10]<stdout>:
[1,10]<stdout>:nbHexa = 8 ** params["refinements"]
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def memory_peak(mess=None):
[1,10]<stdout>:    """Return memory peak in MB"""
[1,10]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:class ChronoCtxMgGen:
[1,10]<stdout>:    stats = {}
[1,10]<stdout>:
[1,10]<stdout>:    def __init__(self, what):
[1,10]<stdout>:        self._what = what
[1,10]<stdout>:
[1,10]<stdout>:    def __enter__(self):
[1,10]<stdout>:        self.start = datetime.now()
[1,10]<stdout>:
[1,10]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,10]<stdout>:        self.stop = datetime.now()
[1,10]<stdout>:        delta = self.stop - self.start
[1,10]<stdout>:        mem = memory_peak(self._what)
[1,10]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,10]<stdout>:    pass
[1,10]<stdout>:    # def __init__(self, what):
[1,10]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def write_stats(nume_ddl):
[1,10]<stdout>:    if rank == 0:
[1,10]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,10]<stdout>:        print()
[1,10]<stdout>:        print("NB PROC")
[1,10]<stdout>:        print(size)
[1,10]<stdout>:        print()
[1,10]<stdout>:        print(
[1,10]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    for key, values in stats.items():
[1,10]<stdout>:        time = comm.gather(values[0], root=0)
[1,10]<stdout>:        mem = comm.gather(values[1], root=0)
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            print(
[1,10]<stdout>:                key
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(min(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(max(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(mean(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(min(mem))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(max(mem))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(mean(mem))
[1,10]<stdout>:            )
[1,10]<stdout>:
[1,10]<stdout>:    mesh = nume_ddl.getMesh()
[1,10]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,10]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,10]<stdout>:
[1,10]<stdout>:    if rank == 0:
[1,10]<stdout>:        print()
[1,10]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,10]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,10]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,10]<stdout>:
[1,10]<stdout>:    def show(*args, **kwargs):
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            print(*args, **kwargs)
[1,10]<stdout>:
[1,10]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,10]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,10]<stdout>:    separ = "| :--------------- | ----------: |"
[1,10]<stdout>:    show(fmti.format("Refinement", refine))
[1,10]<stdout>:    show(separ)
[1,10]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,10]<stdout>:    for key, values in data.items():
[1,10]<stdout>:        times = comm.gather(values[0], root=0)
[1,10]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            show(fmtt.format(key, mean(times)))
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,10]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,10]<stdout>:
[1,10]<stdout>:with ChronoCtxMg("Total"):
[1,10]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,10]<stdout>:        if params["parallel"] == "HPC":
[1,10]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,10]<stdout>:        else:
[1,10]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Model"):
[1,10]<stdout>:        model = AFFE_MODELE(
[1,10]<stdout>:            M[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Execution of code_aster
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.11
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Command file #1 / 1
[1,11]<stdout>:
[1,11]<stdout>:Content of the file to execute:
[1,11]<stdout>:# coding=utf-8
[1,11]<stdout>:#!/usr/bin/python
[1,11]<stdout>:
[1,11]<stdout>:import os
[1,11]<stdout>:from statistics import mean
[1,11]<stdout>:from datetime import datetime
[1,11]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,11]<stdout>:
[1,11]<stdout>:from code_aster.Commands import *
[1,11]<stdout>:from code_aster import CA
[1,11]<stdout>:from code_aster.Utilities import petscInitialize
[1,11]<stdout>:
[1,11]<stdout>:CA.init()
[1,11]<stdout>:
[1,11]<stdout>:params = {}
[1,11]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,11]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,11]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,11]<stdout>:
[1,11]<stdout>:# General parameters
[1,11]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,11]<stdout>:rank = comm.Get_rank()
[1,11]<stdout>:size = comm.Get_size()
[1,11]<stdout>:
[1,11]<stdout>:nbHexa = 8 ** params["refinements"]
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def memory_peak(mess=None):
[1,11]<stdout>:    """Return memory peak in MB"""
[1,11]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:class ChronoCtxMgGen:
[1,11]<stdout>:    stats = {}
[1,11]<stdout>:
[1,11]<stdout>:    def __init__(self, what):
[1,11]<stdout>:        self._what = what
[1,11]<stdout>:
[1,11]<stdout>:    def __enter__(self):
[1,11]<stdout>:        self.start = datetime.now()
[1,11]<stdout>:
[1,11]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,11]<stdout>:        self.stop = datetime.now()
[1,11]<stdout>:        delta = self.stop - self.start
[1,11]<stdout>:        mem = memory_peak(self._what)
[1,11]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,11]<stdout>:    pass
[1,11]<stdout>:    # def __init__(self, what):
[1,11]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def write_stats(nume_ddl):
[1,11]<stdout>:    if rank == 0:
[1,11]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,11]<stdout>:        print()
[1,11]<stdout>:        print("NB PROC")
[1,11]<stdout>:        print(size)
[1,11]<stdout>:        print()
[1,11]<stdout>:        print(
[1,11]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    for key, values in stats.items():
[1,11]<stdout>:        time = comm.gather(values[0], root=0)
[1,11]<stdout>:        mem = comm.gather(values[1], root=0)
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            print(
[1,11]<stdout>:                key
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(min(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(max(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(mean(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(min(mem))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(max(mem))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(mean(mem))
[1,11]<stdout>:            )
[1,11]<stdout>:
[1,11]<stdout>:    mesh = nume_ddl.getMesh()
[1,11]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,11]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,11]<stdout>:
[1,11]<stdout>:    if rank == 0:
[1,11]<stdout>:        print()
[1,11]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,11]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,11]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,11]<stdout>:
[1,11]<stdout>:    def show(*args, **kwargs):
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            print(*args, **kwargs)
[1,11]<stdout>:
[1,11]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,11]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,11]<stdout>:    separ = "| :--------------- | ----------: |"
[1,11]<stdout>:    show(fmti.format("Refinement", refine))
[1,11]<stdout>:    show(separ)
[1,11]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,11]<stdout>:    for key, values in data.items():
[1,11]<stdout>:        times = comm.gather(values[0], root=0)
[1,11]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            show(fmtt.format(key, mean(times)))
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,11]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,11]<stdout>:
[1,11]<stdout>:with ChronoCtxMg("Total"):
[1,11]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,11]<stdout>:        if params["parallel"] == "HPC":
[1,11]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,11]<stdout>:        else:
[1,11]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Model"):
[1,11]<stdout>:        model = AFFE_MODELE(
[1,11]<stdout>:            M[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Execution of code_aster
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.12
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Command file #1 / 1
[1,12]<stdout>:
[1,12]<stdout>:Content of the file to execute:
[1,12]<stdout>:# coding=utf-8
[1,12]<stdout>:#!/usr/bin/python
[1,12]<stdout>:
[1,12]<stdout>:import os
[1,12]<stdout>:from statistics import mean
[1,12]<stdout>:from datetime import datetime
[1,12]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,12]<stdout>:
[1,12]<stdout>:from code_aster.Commands import *
[1,12]<stdout>:from code_aster import CA
[1,12]<stdout>:from code_aster.Utilities import petscInitialize
[1,12]<stdout>:
[1,12]<stdout>:CA.init()
[1,12]<stdout>:
[1,12]<stdout>:params = {}
[1,12]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,12]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,12]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,12]<stdout>:
[1,12]<stdout>:# General parameters
[1,12]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,12]<stdout>:rank = comm.Get_rank()
[1,12]<stdout>:size = comm.Get_size()
[1,12]<stdout>:
[1,12]<stdout>:nbHexa = 8 ** params["refinements"]
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def memory_peak(mess=None):
[1,12]<stdout>:    """Return memory peak in MB"""
[1,12]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:class ChronoCtxMgGen:
[1,12]<stdout>:    stats = {}
[1,12]<stdout>:
[1,12]<stdout>:    def __init__(self, what):
[1,12]<stdout>:        self._what = what
[1,12]<stdout>:
[1,12]<stdout>:    def __enter__(self):
[1,12]<stdout>:        self.start = datetime.now()
[1,12]<stdout>:
[1,12]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,12]<stdout>:        self.stop = datetime.now()
[1,12]<stdout>:        delta = self.stop - self.start
[1,12]<stdout>:        mem = memory_peak(self._what)
[1,12]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,12]<stdout>:    pass
[1,12]<stdout>:    # def __init__(self, what):
[1,12]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def write_stats(nume_ddl):
[1,12]<stdout>:    if rank == 0:
[1,12]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,12]<stdout>:        print()
[1,12]<stdout>:        print("NB PROC")
[1,12]<stdout>:        print(size)
[1,12]<stdout>:        print()
[1,12]<stdout>:        print(
[1,12]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    for key, values in stats.items():
[1,12]<stdout>:        time = comm.gather(values[0], root=0)
[1,12]<stdout>:        mem = comm.gather(values[1], root=0)
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            print(
[1,12]<stdout>:                key
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(min(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(max(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(mean(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(min(mem))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(max(mem))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(mean(mem))
[1,12]<stdout>:            )
[1,12]<stdout>:
[1,12]<stdout>:    mesh = nume_ddl.getMesh()
[1,12]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,12]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,12]<stdout>:
[1,12]<stdout>:    if rank == 0:
[1,12]<stdout>:        print()
[1,12]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,12]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,12]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,12]<stdout>:
[1,12]<stdout>:    def show(*args, **kwargs):
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            print(*args, **kwargs)
[1,12]<stdout>:
[1,12]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,12]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,12]<stdout>:    separ = "| :--------------- | ----------: |"
[1,12]<stdout>:    show(fmti.format("Refinement", refine))
[1,12]<stdout>:    show(separ)
[1,12]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,12]<stdout>:    for key, values in data.items():
[1,12]<stdout>:        times = comm.gather(values[0], root=0)
[1,12]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            show(fmtt.format(key, mean(times)))
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,12]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,12]<stdout>:
[1,12]<stdout>:with ChronoCtxMg("Total"):
[1,12]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,12]<stdout>:        if params["parallel"] == "HPC":
[1,12]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,12]<stdout>:        else:
[1,12]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Model"):
[1,12]<stdout>:        model = AFFE_MODELE(
[1,12]<stdout>:            M[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Execution of code_aster
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.13
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Command file #1 / 1
[1,13]<stdout>:
[1,13]<stdout>:Content of the file to execute:
[1,13]<stdout>:# coding=utf-8
[1,13]<stdout>:#!/usr/bin/python
[1,13]<stdout>:
[1,13]<stdout>:import os
[1,13]<stdout>:from statistics import mean
[1,13]<stdout>:from datetime import datetime
[1,13]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,13]<stdout>:
[1,13]<stdout>:from code_aster.Commands import *
[1,13]<stdout>:from code_aster import CA
[1,13]<stdout>:from code_aster.Utilities import petscInitialize
[1,13]<stdout>:
[1,13]<stdout>:CA.init()
[1,13]<stdout>:
[1,13]<stdout>:params = {}
[1,13]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,13]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,13]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,13]<stdout>:
[1,13]<stdout>:# General parameters
[1,13]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,13]<stdout>:rank = comm.Get_rank()
[1,13]<stdout>:size = comm.Get_size()
[1,13]<stdout>:
[1,13]<stdout>:nbHexa = 8 ** params["refinements"]
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def memory_peak(mess=None):
[1,13]<stdout>:    """Return memory peak in MB"""
[1,13]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:class ChronoCtxMgGen:
[1,13]<stdout>:    stats = {}
[1,13]<stdout>:
[1,13]<stdout>:    def __init__(self, what):
[1,13]<stdout>:        self._what = what
[1,13]<stdout>:
[1,13]<stdout>:    def __enter__(self):
[1,13]<stdout>:        self.start = datetime.now()
[1,13]<stdout>:
[1,13]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,13]<stdout>:        self.stop = datetime.now()
[1,13]<stdout>:        delta = self.stop - self.start
[1,13]<stdout>:        mem = memory_peak(self._what)
[1,13]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,13]<stdout>:    pass
[1,13]<stdout>:    # def __init__(self, what):
[1,13]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def write_stats(nume_ddl):
[1,13]<stdout>:    if rank == 0:
[1,13]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,13]<stdout>:        print()
[1,13]<stdout>:        print("NB PROC")
[1,13]<stdout>:        print(size)
[1,13]<stdout>:        print()
[1,13]<stdout>:        print(
[1,13]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    for key, values in stats.items():
[1,13]<stdout>:        time = comm.gather(values[0], root=0)
[1,13]<stdout>:        mem = comm.gather(values[1], root=0)
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            print(
[1,13]<stdout>:                key
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(min(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(max(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(mean(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(min(mem))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(max(mem))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(mean(mem))
[1,13]<stdout>:            )
[1,13]<stdout>:
[1,13]<stdout>:    mesh = nume_ddl.getMesh()
[1,13]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,13]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,13]<stdout>:
[1,13]<stdout>:    if rank == 0:
[1,13]<stdout>:        print()
[1,13]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,13]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,13]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,13]<stdout>:
[1,13]<stdout>:    def show(*args, **kwargs):
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            print(*args, **kwargs)
[1,13]<stdout>:
[1,13]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,13]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,13]<stdout>:    separ = "| :--------------- | ----------: |"
[1,13]<stdout>:    show(fmti.format("Refinement", refine))
[1,13]<stdout>:    show(separ)
[1,13]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,13]<stdout>:    for key, values in data.items():
[1,13]<stdout>:        times = comm.gather(values[0], root=0)
[1,13]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            show(fmtt.format(key, mean(times)))
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,13]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,13]<stdout>:
[1,13]<stdout>:with ChronoCtxMg("Total"):
[1,13]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,13]<stdout>:        if params["parallel"] == "HPC":
[1,13]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,13]<stdout>:        else:
[1,13]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Model"):
[1,13]<stdout>:        model = AFFE_MODELE(
[1,13]<stdout>:            M[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Execution of code_aster
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.14
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Command file #1 / 1
[1,14]<stdout>:
[1,14]<stdout>:Content of the file to execute:
[1,14]<stdout>:# coding=utf-8
[1,14]<stdout>:#!/usr/bin/python
[1,14]<stdout>:
[1,14]<stdout>:import os
[1,14]<stdout>:from statistics import mean
[1,14]<stdout>:from datetime import datetime
[1,14]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,14]<stdout>:
[1,14]<stdout>:from code_aster.Commands import *
[1,14]<stdout>:from code_aster import CA
[1,14]<stdout>:from code_aster.Utilities import petscInitialize
[1,14]<stdout>:
[1,14]<stdout>:CA.init()
[1,14]<stdout>:
[1,14]<stdout>:params = {}
[1,14]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,14]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,14]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,14]<stdout>:
[1,14]<stdout>:# General parameters
[1,14]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,14]<stdout>:rank = comm.Get_rank()
[1,14]<stdout>:size = comm.Get_size()
[1,14]<stdout>:
[1,14]<stdout>:nbHexa = 8 ** params["refinements"]
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def memory_peak(mess=None):
[1,14]<stdout>:    """Return memory peak in MB"""
[1,14]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:class ChronoCtxMgGen:
[1,14]<stdout>:    stats = {}
[1,14]<stdout>:
[1,14]<stdout>:    def __init__(self, what):
[1,14]<stdout>:        self._what = what
[1,14]<stdout>:
[1,14]<stdout>:    def __enter__(self):
[1,14]<stdout>:        self.start = datetime.now()
[1,14]<stdout>:
[1,14]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,14]<stdout>:        self.stop = datetime.now()
[1,14]<stdout>:        delta = self.stop - self.start
[1,14]<stdout>:        mem = memory_peak(self._what)
[1,14]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,14]<stdout>:    pass
[1,14]<stdout>:    # def __init__(self, what):
[1,14]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def write_stats(nume_ddl):
[1,14]<stdout>:    if rank == 0:
[1,14]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,14]<stdout>:        print()
[1,14]<stdout>:        print("NB PROC")
[1,14]<stdout>:        print(size)
[1,14]<stdout>:        print()
[1,14]<stdout>:        print(
[1,14]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    for key, values in stats.items():
[1,14]<stdout>:        time = comm.gather(values[0], root=0)
[1,14]<stdout>:        mem = comm.gather(values[1], root=0)
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            print(
[1,14]<stdout>:                key
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(min(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(max(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(mean(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(min(mem))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(max(mem))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(mean(mem))
[1,14]<stdout>:            )
[1,14]<stdout>:
[1,14]<stdout>:    mesh = nume_ddl.getMesh()
[1,14]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,14]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,14]<stdout>:
[1,14]<stdout>:    if rank == 0:
[1,14]<stdout>:        print()
[1,14]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,14]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,14]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,14]<stdout>:
[1,14]<stdout>:    def show(*args, **kwargs):
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            print(*args, **kwargs)
[1,14]<stdout>:
[1,14]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,14]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,14]<stdout>:    separ = "| :--------------- | ----------: |"
[1,14]<stdout>:    show(fmti.format("Refinement", refine))
[1,14]<stdout>:    show(separ)
[1,14]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,14]<stdout>:    for key, values in data.items():
[1,14]<stdout>:        times = comm.gather(values[0], root=0)
[1,14]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            show(fmtt.format(key, mean(times)))
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,14]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,14]<stdout>:
[1,14]<stdout>:with ChronoCtxMg("Total"):
[1,14]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,14]<stdout>:        if params["parallel"] == "HPC":
[1,14]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,14]<stdout>:        else:
[1,14]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Model"):
[1,14]<stdout>:        model = AFFE_MODELE(
[1,14]<stdout>:            M[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Execution of code_aster
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.15
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Command file #1 / 1
[1,15]<stdout>:
[1,15]<stdout>:Content of the file to execute:
[1,15]<stdout>:# coding=utf-8
[1,15]<stdout>:#!/usr/bin/python
[1,15]<stdout>:
[1,15]<stdout>:import os
[1,15]<stdout>:from statistics import mean
[1,15]<stdout>:from datetime import datetime
[1,15]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,15]<stdout>:
[1,15]<stdout>:from code_aster.Commands import *
[1,15]<stdout>:from code_aster import CA
[1,15]<stdout>:from code_aster.Utilities import petscInitialize
[1,15]<stdout>:
[1,15]<stdout>:CA.init()
[1,15]<stdout>:
[1,15]<stdout>:params = {}
[1,15]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,15]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,15]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,15]<stdout>:
[1,15]<stdout>:# General parameters
[1,15]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,15]<stdout>:rank = comm.Get_rank()
[1,15]<stdout>:size = comm.Get_size()
[1,15]<stdout>:
[1,15]<stdout>:nbHexa = 8 ** params["refinements"]
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def memory_peak(mess=None):
[1,15]<stdout>:    """Return memory peak in MB"""
[1,15]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:class ChronoCtxMgGen:
[1,15]<stdout>:    stats = {}
[1,15]<stdout>:
[1,15]<stdout>:    def __init__(self, what):
[1,15]<stdout>:        self._what = what
[1,15]<stdout>:
[1,15]<stdout>:    def __enter__(self):
[1,15]<stdout>:        self.start = datetime.now()
[1,15]<stdout>:
[1,15]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,15]<stdout>:        self.stop = datetime.now()
[1,15]<stdout>:        delta = self.stop - self.start
[1,15]<stdout>:        mem = memory_peak(self._what)
[1,15]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,15]<stdout>:    pass
[1,15]<stdout>:    # def __init__(self, what):
[1,15]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def write_stats(nume_ddl):
[1,15]<stdout>:    if rank == 0:
[1,15]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,15]<stdout>:        print()
[1,15]<stdout>:        print("NB PROC")
[1,15]<stdout>:        print(size)
[1,15]<stdout>:        print()
[1,15]<stdout>:        print(
[1,15]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    for key, values in stats.items():
[1,15]<stdout>:        time = comm.gather(values[0], root=0)
[1,15]<stdout>:        mem = comm.gather(values[1], root=0)
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            print(
[1,15]<stdout>:                key
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(min(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(max(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(mean(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(min(mem))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(max(mem))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(mean(mem))
[1,15]<stdout>:            )
[1,15]<stdout>:
[1,15]<stdout>:    mesh = nume_ddl.getMesh()
[1,15]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,15]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,15]<stdout>:
[1,15]<stdout>:    if rank == 0:
[1,15]<stdout>:        print()
[1,15]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,15]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,15]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,15]<stdout>:
[1,15]<stdout>:    def show(*args, **kwargs):
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            print(*args, **kwargs)
[1,15]<stdout>:
[1,15]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,15]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,15]<stdout>:    separ = "| :--------------- | ----------: |"
[1,15]<stdout>:    show(fmti.format("Refinement", refine))
[1,15]<stdout>:    show(separ)
[1,15]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,15]<stdout>:    for key, values in data.items():
[1,15]<stdout>:        times = comm.gather(values[0], root=0)
[1,15]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            show(fmtt.format(key, mean(times)))
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,15]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,15]<stdout>:
[1,15]<stdout>:with ChronoCtxMg("Total"):
[1,15]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,15]<stdout>:        if params["parallel"] == "HPC":
[1,15]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,15]<stdout>:        else:
[1,15]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Model"):
[1,15]<stdout>:        model = AFFE_MODELE(
[1,15]<stdout>:            M[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Execution of code_aster
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.16
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Command file #1 / 1
[1,16]<stdout>:
[1,16]<stdout>:Content of the file to execute:
[1,16]<stdout>:# coding=utf-8
[1,16]<stdout>:#!/usr/bin/python
[1,16]<stdout>:
[1,16]<stdout>:import os
[1,16]<stdout>:from statistics import mean
[1,16]<stdout>:from datetime import datetime
[1,16]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,16]<stdout>:
[1,16]<stdout>:from code_aster.Commands import *
[1,16]<stdout>:from code_aster import CA
[1,16]<stdout>:from code_aster.Utilities import petscInitialize
[1,16]<stdout>:
[1,16]<stdout>:CA.init()
[1,16]<stdout>:
[1,16]<stdout>:params = {}
[1,16]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,16]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,16]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,16]<stdout>:
[1,16]<stdout>:# General parameters
[1,16]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,16]<stdout>:rank = comm.Get_rank()
[1,16]<stdout>:size = comm.Get_size()
[1,16]<stdout>:
[1,16]<stdout>:nbHexa = 8 ** params["refinements"]
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:def memory_peak(mess=None):
[1,16]<stdout>:    """Return memory peak in MB"""
[1,16]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:class ChronoCtxMgGen:
[1,16]<stdout>:    stats = {}
[1,16]<stdout>:
[1,16]<stdout>:    def __init__(self, what):
[1,16]<stdout>:        self._what = what
[1,16]<stdout>:
[1,16]<stdout>:    def __enter__(self):
[1,16]<stdout>:        self.start = datetime.now()
[1,16]<stdout>:
[1,16]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,16]<stdout>:        self.stop = datetime.now()
[1,16]<stdout>:        delta = self.stop - self.start
[1,16]<stdout>:        mem = memory_peak(self._what)
[1,16]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,16]<stdout>:    pass
[1,16]<stdout>:    # def __init__(self, what):
[1,16]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:def write_stats(nume_ddl):
[1,16]<stdout>:    if rank == 0:
[1,16]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,16]<stdout>:        print()
[1,16]<stdout>:        print("NB PROC")
[1,16]<stdout>:        print(size)
[1,16]<stdout>:        print()
[1,16]<stdout>:        print(
[1,16]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    for key, values in stats.items():
[1,16]<stdout>:        time = comm.gather(values[0], root=0)
[1,16]<stdout>:        mem = comm.gather(values[1], root=0)
[1,16]<stdout>:        if rank == 0:
[1,16]<stdout>:            print(
[1,16]<stdout>:                key
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(min(time))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(max(time))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(mean(time))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(min(mem))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(max(mem))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(mean(mem))
[1,16]<stdout>:            )
[1,16]<stdout>:
[1,16]<stdout>:    mesh = nume_ddl.getMesh()
[1,16]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,16]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,16]<stdout>:
[1,16]<stdout>:    if rank == 0:
[1,16]<stdout>:        print()
[1,16]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,16]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,16]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,16]<stdout>:
[1,16]<stdout>:    def show(*args, **kwargs):
[1,16]<stdout>:        if rank == 0:
[1,16]<stdout>:            print(*args, **kwargs)
[1,16]<stdout>:
[1,16]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,16]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,16]<stdout>:    separ = "| :--------------- | ----------: |"
[1,16]<stdout>:    show(fmti.format("Refinement", refine))
[1,16]<stdout>:    show(separ)
[1,16]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,16]<stdout>:    for key, values in data.items():
[1,16]<stdout>:        times = comm.gather(values[0], root=0)
[1,16]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,16]<stdout>:        if rank == 0:
[1,16]<stdout>:            show(fmtt.format(key, mean(times)))
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,16]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,16]<stdout>:
[1,16]<stdout>:with ChronoCtxMg("Total"):
[1,16]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,16]<stdout>:        if params["parallel"] == "HPC":
[1,16]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,16]<stdout>:        else:
[1,16]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Model"):
[1,16]<stdout>:        model = AFFE_MODELE(
[1,16]<stdout>:            M[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Execution of code_aster
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.17
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Command file #1 / 1
[1,17]<stdout>:
[1,17]<stdout>:Content of the file to execute:
[1,17]<stdout>:# coding=utf-8
[1,17]<stdout>:#!/usr/bin/python
[1,17]<stdout>:
[1,17]<stdout>:import os
[1,17]<stdout>:from statistics import mean
[1,17]<stdout>:from datetime import datetime
[1,17]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,17]<stdout>:
[1,17]<stdout>:from code_aster.Commands import *
[1,17]<stdout>:from code_aster import CA
[1,17]<stdout>:from code_aster.Utilities import petscInitialize
[1,17]<stdout>:
[1,17]<stdout>:CA.init()
[1,17]<stdout>:
[1,17]<stdout>:params = {}
[1,17]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,17]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,17]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,17]<stdout>:
[1,17]<stdout>:# General parameters
[1,17]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,17]<stdout>:rank = comm.Get_rank()
[1,17]<stdout>:size = comm.Get_size()
[1,17]<stdout>:
[1,17]<stdout>:nbHexa = 8 ** params["refinements"]
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:def memory_peak(mess=None):
[1,17]<stdout>:    """Return memory peak in MB"""
[1,17]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:class ChronoCtxMgGen:
[1,17]<stdout>:    stats = {}
[1,17]<stdout>:
[1,17]<stdout>:    def __init__(self, what):
[1,17]<stdout>:        self._what = what
[1,17]<stdout>:
[1,17]<stdout>:    def __enter__(self):
[1,17]<stdout>:        self.start = datetime.now()
[1,17]<stdout>:
[1,17]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,17]<stdout>:        self.stop = datetime.now()
[1,17]<stdout>:        delta = self.stop - self.start
[1,17]<stdout>:        mem = memory_peak(self._what)
[1,17]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,17]<stdout>:    pass
[1,17]<stdout>:    # def __init__(self, what):
[1,17]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:def write_stats(nume_ddl):
[1,17]<stdout>:    if rank == 0:
[1,17]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,17]<stdout>:        print()
[1,17]<stdout>:        print("NB PROC")
[1,17]<stdout>:        print(size)
[1,17]<stdout>:        print()
[1,17]<stdout>:        print(
[1,17]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    for key, values in stats.items():
[1,17]<stdout>:        time = comm.gather(values[0], root=0)
[1,17]<stdout>:        mem = comm.gather(values[1], root=0)
[1,17]<stdout>:        if rank == 0:
[1,17]<stdout>:            print(
[1,17]<stdout>:                key
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(min(time))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(max(time))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(mean(time))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(min(mem))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(max(mem))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(mean(mem))
[1,17]<stdout>:            )
[1,17]<stdout>:
[1,17]<stdout>:    mesh = nume_ddl.getMesh()
[1,17]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,17]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,17]<stdout>:
[1,17]<stdout>:    if rank == 0:
[1,17]<stdout>:        print()
[1,17]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,17]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,17]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,17]<stdout>:
[1,17]<stdout>:    def show(*args, **kwargs):
[1,17]<stdout>:        if rank == 0:
[1,17]<stdout>:            print(*args, **kwargs)
[1,17]<stdout>:
[1,17]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,17]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,17]<stdout>:    separ = "| :--------------- | ----------: |"
[1,17]<stdout>:    show(fmti.format("Refinement", refine))
[1,17]<stdout>:    show(separ)
[1,17]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,17]<stdout>:    for key, values in data.items():
[1,17]<stdout>:        times = comm.gather(values[0], root=0)
[1,17]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,17]<stdout>:        if rank == 0:
[1,17]<stdout>:            show(fmtt.format(key, mean(times)))
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,17]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,17]<stdout>:
[1,17]<stdout>:with ChronoCtxMg("Total"):
[1,17]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,17]<stdout>:        if params["parallel"] == "HPC":
[1,17]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,17]<stdout>:        else:
[1,17]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Model"):
[1,17]<stdout>:        model = AFFE_MODELE(
[1,17]<stdout>:            M[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Execution of code_aster
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.18
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Command file #1 / 1
[1,18]<stdout>:
[1,18]<stdout>:Content of the file to execute:
[1,18]<stdout>:# coding=utf-8
[1,18]<stdout>:#!/usr/bin/python
[1,18]<stdout>:
[1,18]<stdout>:import os
[1,18]<stdout>:from statistics import mean
[1,18]<stdout>:from datetime import datetime
[1,18]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,18]<stdout>:
[1,18]<stdout>:from code_aster.Commands import *
[1,18]<stdout>:from code_aster import CA
[1,18]<stdout>:from code_aster.Utilities import petscInitialize
[1,18]<stdout>:
[1,18]<stdout>:CA.init()
[1,18]<stdout>:
[1,18]<stdout>:params = {}
[1,18]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,18]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,18]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,18]<stdout>:
[1,18]<stdout>:# General parameters
[1,18]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,18]<stdout>:rank = comm.Get_rank()
[1,18]<stdout>:size = comm.Get_size()
[1,18]<stdout>:
[1,18]<stdout>:nbHexa = 8 ** params["refinements"]
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:def memory_peak(mess=None):
[1,18]<stdout>:    """Return memory peak in MB"""
[1,18]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:class ChronoCtxMgGen:
[1,18]<stdout>:    stats = {}
[1,18]<stdout>:
[1,18]<stdout>:    def __init__(self, what):
[1,18]<stdout>:        self._what = what
[1,18]<stdout>:
[1,18]<stdout>:    def __enter__(self):
[1,18]<stdout>:        self.start = datetime.now()
[1,18]<stdout>:
[1,18]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,18]<stdout>:        self.stop = datetime.now()
[1,18]<stdout>:        delta = self.stop - self.start
[1,18]<stdout>:        mem = memory_peak(self._what)
[1,18]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,18]<stdout>:    pass
[1,18]<stdout>:    # def __init__(self, what):
[1,18]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:def write_stats(nume_ddl):
[1,18]<stdout>:    if rank == 0:
[1,18]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,18]<stdout>:        print()
[1,18]<stdout>:        print("NB PROC")
[1,18]<stdout>:        print(size)
[1,18]<stdout>:        print()
[1,18]<stdout>:        print(
[1,18]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    for key, values in stats.items():
[1,18]<stdout>:        time = comm.gather(values[0], root=0)
[1,18]<stdout>:        mem = comm.gather(values[1], root=0)
[1,18]<stdout>:        if rank == 0:
[1,18]<stdout>:            print(
[1,18]<stdout>:                key
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(min(time))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(max(time))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(mean(time))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(min(mem))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(max(mem))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(mean(mem))
[1,18]<stdout>:            )
[1,18]<stdout>:
[1,18]<stdout>:    mesh = nume_ddl.getMesh()
[1,18]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,18]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,18]<stdout>:
[1,18]<stdout>:    if rank == 0:
[1,18]<stdout>:        print()
[1,18]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,18]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,18]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,18]<stdout>:
[1,18]<stdout>:    def show(*args, **kwargs):
[1,18]<stdout>:        if rank == 0:
[1,18]<stdout>:            print(*args, **kwargs)
[1,18]<stdout>:
[1,18]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,18]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,18]<stdout>:    separ = "| :--------------- | ----------: |"
[1,18]<stdout>:    show(fmti.format("Refinement", refine))
[1,18]<stdout>:    show(separ)
[1,18]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,18]<stdout>:    for key, values in data.items():
[1,18]<stdout>:        times = comm.gather(values[0], root=0)
[1,18]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,18]<stdout>:        if rank == 0:
[1,18]<stdout>:            show(fmtt.format(key, mean(times)))
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,18]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,18]<stdout>:
[1,18]<stdout>:with ChronoCtxMg("Total"):
[1,18]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,18]<stdout>:        if params["parallel"] == "HPC":
[1,18]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,18]<stdout>:        else:
[1,18]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Model"):
[1,18]<stdout>:        model = AFFE_MODELE(
[1,18]<stdout>:            M[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Execution of code_aster
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.19
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Command file #1 / 1
[1,19]<stdout>:
[1,19]<stdout>:Content of the file to execute:
[1,19]<stdout>:# coding=utf-8
[1,19]<stdout>:#!/usr/bin/python
[1,19]<stdout>:
[1,19]<stdout>:import os
[1,19]<stdout>:from statistics import mean
[1,19]<stdout>:from datetime import datetime
[1,19]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,19]<stdout>:
[1,19]<stdout>:from code_aster.Commands import *
[1,19]<stdout>:from code_aster import CA
[1,19]<stdout>:from code_aster.Utilities import petscInitialize
[1,19]<stdout>:
[1,19]<stdout>:CA.init()
[1,19]<stdout>:
[1,19]<stdout>:params = {}
[1,19]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,19]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,19]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,19]<stdout>:
[1,19]<stdout>:# General parameters
[1,19]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,19]<stdout>:rank = comm.Get_rank()
[1,19]<stdout>:size = comm.Get_size()
[1,19]<stdout>:
[1,19]<stdout>:nbHexa = 8 ** params["refinements"]
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:def memory_peak(mess=None):
[1,19]<stdout>:    """Return memory peak in MB"""
[1,19]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:class ChronoCtxMgGen:
[1,19]<stdout>:    stats = {}
[1,19]<stdout>:
[1,19]<stdout>:    def __init__(self, what):
[1,19]<stdout>:        self._what = what
[1,19]<stdout>:
[1,19]<stdout>:    def __enter__(self):
[1,19]<stdout>:        self.start = datetime.now()
[1,19]<stdout>:
[1,19]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,19]<stdout>:        self.stop = datetime.now()
[1,19]<stdout>:        delta = self.stop - self.start
[1,19]<stdout>:        mem = memory_peak(self._what)
[1,19]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,19]<stdout>:    pass
[1,19]<stdout>:    # def __init__(self, what):
[1,19]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:def write_stats(nume_ddl):
[1,19]<stdout>:    if rank == 0:
[1,19]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,19]<stdout>:        print()
[1,19]<stdout>:        print("NB PROC")
[1,19]<stdout>:        print(size)
[1,19]<stdout>:        print()
[1,19]<stdout>:        print(
[1,19]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    for key, values in stats.items():
[1,19]<stdout>:        time = comm.gather(values[0], root=0)
[1,19]<stdout>:        mem = comm.gather(values[1], root=0)
[1,19]<stdout>:        if rank == 0:
[1,19]<stdout>:            print(
[1,19]<stdout>:                key
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(min(time))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(max(time))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(mean(time))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(min(mem))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(max(mem))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(mean(mem))
[1,19]<stdout>:            )
[1,19]<stdout>:
[1,19]<stdout>:    mesh = nume_ddl.getMesh()
[1,19]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,19]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,19]<stdout>:
[1,19]<stdout>:    if rank == 0:
[1,19]<stdout>:        print()
[1,19]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,19]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,19]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,19]<stdout>:
[1,19]<stdout>:    def show(*args, **kwargs):
[1,19]<stdout>:        if rank == 0:
[1,19]<stdout>:            print(*args, **kwargs)
[1,19]<stdout>:
[1,19]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,19]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,19]<stdout>:    separ = "| :--------------- | ----------: |"
[1,19]<stdout>:    show(fmti.format("Refinement", refine))
[1,19]<stdout>:    show(separ)
[1,19]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,19]<stdout>:    for key, values in data.items():
[1,19]<stdout>:        times = comm.gather(values[0], root=0)
[1,19]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,19]<stdout>:        if rank == 0:
[1,19]<stdout>:            show(fmtt.format(key, mean(times)))
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,19]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,19]<stdout>:
[1,19]<stdout>:with ChronoCtxMg("Total"):
[1,19]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,19]<stdout>:        if params["parallel"] == "HPC":
[1,19]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,19]<stdout>:        else:
[1,19]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Model"):
[1,19]<stdout>:        model = AFFE_MODELE(
[1,19]<stdout>:            M[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Execution of code_aster
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.20
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Command file #1 / 1
[1,20]<stdout>:
[1,20]<stdout>:Content of the file to execute:
[1,20]<stdout>:# coding=utf-8
[1,20]<stdout>:#!/usr/bin/python
[1,20]<stdout>:
[1,20]<stdout>:import os
[1,20]<stdout>:from statistics import mean
[1,20]<stdout>:from datetime import datetime
[1,20]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,20]<stdout>:
[1,20]<stdout>:from code_aster.Commands import *
[1,20]<stdout>:from code_aster import CA
[1,20]<stdout>:from code_aster.Utilities import petscInitialize
[1,20]<stdout>:
[1,20]<stdout>:CA.init()
[1,20]<stdout>:
[1,20]<stdout>:params = {}
[1,20]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,20]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,20]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,20]<stdout>:
[1,20]<stdout>:# General parameters
[1,20]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,20]<stdout>:rank = comm.Get_rank()
[1,20]<stdout>:size = comm.Get_size()
[1,20]<stdout>:
[1,20]<stdout>:nbHexa = 8 ** params["refinements"]
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:def memory_peak(mess=None):
[1,20]<stdout>:    """Return memory peak in MB"""
[1,20]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:class ChronoCtxMgGen:
[1,20]<stdout>:    stats = {}
[1,20]<stdout>:
[1,20]<stdout>:    def __init__(self, what):
[1,20]<stdout>:        self._what = what
[1,20]<stdout>:
[1,20]<stdout>:    def __enter__(self):
[1,20]<stdout>:        self.start = datetime.now()
[1,20]<stdout>:
[1,20]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,20]<stdout>:        self.stop = datetime.now()
[1,20]<stdout>:        delta = self.stop - self.start
[1,20]<stdout>:        mem = memory_peak(self._what)
[1,20]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,20]<stdout>:    pass
[1,20]<stdout>:    # def __init__(self, what):
[1,20]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:def write_stats(nume_ddl):
[1,20]<stdout>:    if rank == 0:
[1,20]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,20]<stdout>:        print()
[1,20]<stdout>:        print("NB PROC")
[1,20]<stdout>:        print(size)
[1,20]<stdout>:        print()
[1,20]<stdout>:        print(
[1,20]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    for key, values in stats.items():
[1,20]<stdout>:        time = comm.gather(values[0], root=0)
[1,20]<stdout>:        mem = comm.gather(values[1], root=0)
[1,20]<stdout>:        if rank == 0:
[1,20]<stdout>:            print(
[1,20]<stdout>:                key
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(min(time))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(max(time))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(mean(time))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(min(mem))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(max(mem))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(mean(mem))
[1,20]<stdout>:            )
[1,20]<stdout>:
[1,20]<stdout>:    mesh = nume_ddl.getMesh()
[1,20]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,20]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,20]<stdout>:
[1,20]<stdout>:    if rank == 0:
[1,20]<stdout>:        print()
[1,20]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,20]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,20]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,20]<stdout>:
[1,20]<stdout>:    def show(*args, **kwargs):
[1,20]<stdout>:        if rank == 0:
[1,20]<stdout>:            print(*args, **kwargs)
[1,20]<stdout>:
[1,20]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,20]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,20]<stdout>:    separ = "| :--------------- | ----------: |"
[1,20]<stdout>:    show(fmti.format("Refinement", refine))
[1,20]<stdout>:    show(separ)
[1,20]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,20]<stdout>:    for key, values in data.items():
[1,20]<stdout>:        times = comm.gather(values[0], root=0)
[1,20]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,20]<stdout>:        if rank == 0:
[1,20]<stdout>:            show(fmtt.format(key, mean(times)))
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,20]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,20]<stdout>:
[1,20]<stdout>:with ChronoCtxMg("Total"):
[1,20]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,20]<stdout>:        if params["parallel"] == "HPC":
[1,20]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,20]<stdout>:        else:
[1,20]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Model"):
[1,20]<stdout>:        model = AFFE_MODELE(
[1,20]<stdout>:            M[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Execution of code_aster
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.21
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Command file #1 / 1
[1,21]<stdout>:
[1,21]<stdout>:Content of the file to execute:
[1,21]<stdout>:# coding=utf-8
[1,21]<stdout>:#!/usr/bin/python
[1,21]<stdout>:
[1,21]<stdout>:import os
[1,21]<stdout>:from statistics import mean
[1,21]<stdout>:from datetime import datetime
[1,21]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,21]<stdout>:
[1,21]<stdout>:from code_aster.Commands import *
[1,21]<stdout>:from code_aster import CA
[1,21]<stdout>:from code_aster.Utilities import petscInitialize
[1,21]<stdout>:
[1,21]<stdout>:CA.init()
[1,21]<stdout>:
[1,21]<stdout>:params = {}
[1,21]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,21]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,21]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,21]<stdout>:
[1,21]<stdout>:# General parameters
[1,21]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,21]<stdout>:rank = comm.Get_rank()
[1,21]<stdout>:size = comm.Get_size()
[1,21]<stdout>:
[1,21]<stdout>:nbHexa = 8 ** params["refinements"]
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:def memory_peak(mess=None):
[1,21]<stdout>:    """Return memory peak in MB"""
[1,21]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:class ChronoCtxMgGen:
[1,21]<stdout>:    stats = {}
[1,21]<stdout>:
[1,21]<stdout>:    def __init__(self, what):
[1,21]<stdout>:        self._what = what
[1,21]<stdout>:
[1,21]<stdout>:    def __enter__(self):
[1,21]<stdout>:        self.start = datetime.now()
[1,21]<stdout>:
[1,21]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,21]<stdout>:        self.stop = datetime.now()
[1,21]<stdout>:        delta = self.stop - self.start
[1,21]<stdout>:        mem = memory_peak(self._what)
[1,21]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,21]<stdout>:    pass
[1,21]<stdout>:    # def __init__(self, what):
[1,21]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:def write_stats(nume_ddl):
[1,21]<stdout>:    if rank == 0:
[1,21]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,21]<stdout>:        print()
[1,21]<stdout>:        print("NB PROC")
[1,21]<stdout>:        print(size)
[1,21]<stdout>:        print()
[1,21]<stdout>:        print(
[1,21]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    for key, values in stats.items():
[1,21]<stdout>:        time = comm.gather(values[0], root=0)
[1,21]<stdout>:        mem = comm.gather(values[1], root=0)
[1,21]<stdout>:        if rank == 0:
[1,21]<stdout>:            print(
[1,21]<stdout>:                key
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(min(time))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(max(time))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(mean(time))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(min(mem))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(max(mem))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(mean(mem))
[1,21]<stdout>:            )
[1,21]<stdout>:
[1,21]<stdout>:    mesh = nume_ddl.getMesh()
[1,21]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,21]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,21]<stdout>:
[1,21]<stdout>:    if rank == 0:
[1,21]<stdout>:        print()
[1,21]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,21]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,21]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,21]<stdout>:
[1,21]<stdout>:    def show(*args, **kwargs):
[1,21]<stdout>:        if rank == 0:
[1,21]<stdout>:            print(*args, **kwargs)
[1,21]<stdout>:
[1,21]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,21]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,21]<stdout>:    separ = "| :--------------- | ----------: |"
[1,21]<stdout>:    show(fmti.format("Refinement", refine))
[1,21]<stdout>:    show(separ)
[1,21]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,21]<stdout>:    for key, values in data.items():
[1,21]<stdout>:        times = comm.gather(values[0], root=0)
[1,21]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,21]<stdout>:        if rank == 0:
[1,21]<stdout>:            show(fmtt.format(key, mean(times)))
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,21]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,21]<stdout>:
[1,21]<stdout>:with ChronoCtxMg("Total"):
[1,21]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,21]<stdout>:        if params["parallel"] == "HPC":
[1,21]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,21]<stdout>:        else:
[1,21]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Model"):
[1,21]<stdout>:        model = AFFE_MODELE(
[1,21]<stdout>:            M[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Execution of code_aster
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.22
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Command file #1 / 1
[1,22]<stdout>:
[1,22]<stdout>:Content of the file to execute:
[1,22]<stdout>:# coding=utf-8
[1,22]<stdout>:#!/usr/bin/python
[1,22]<stdout>:
[1,22]<stdout>:import os
[1,22]<stdout>:from statistics import mean
[1,22]<stdout>:from datetime import datetime
[1,22]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,22]<stdout>:
[1,22]<stdout>:from code_aster.Commands import *
[1,22]<stdout>:from code_aster import CA
[1,22]<stdout>:from code_aster.Utilities import petscInitialize
[1,22]<stdout>:
[1,22]<stdout>:CA.init()
[1,22]<stdout>:
[1,22]<stdout>:params = {}
[1,22]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,22]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,22]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,22]<stdout>:
[1,22]<stdout>:# General parameters
[1,22]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,22]<stdout>:rank = comm.Get_rank()
[1,22]<stdout>:size = comm.Get_size()
[1,22]<stdout>:
[1,22]<stdout>:nbHexa = 8 ** params["refinements"]
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:def memory_peak(mess=None):
[1,22]<stdout>:    """Return memory peak in MB"""
[1,22]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:class ChronoCtxMgGen:
[1,22]<stdout>:    stats = {}
[1,22]<stdout>:
[1,22]<stdout>:    def __init__(self, what):
[1,22]<stdout>:        self._what = what
[1,22]<stdout>:
[1,22]<stdout>:    def __enter__(self):
[1,22]<stdout>:        self.start = datetime.now()
[1,22]<stdout>:
[1,22]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,22]<stdout>:        self.stop = datetime.now()
[1,22]<stdout>:        delta = self.stop - self.start
[1,22]<stdout>:        mem = memory_peak(self._what)
[1,22]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,22]<stdout>:    pass
[1,22]<stdout>:    # def __init__(self, what):
[1,22]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:def write_stats(nume_ddl):
[1,22]<stdout>:    if rank == 0:
[1,22]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,22]<stdout>:        print()
[1,22]<stdout>:        print("NB PROC")
[1,22]<stdout>:        print(size)
[1,22]<stdout>:        print()
[1,22]<stdout>:        print(
[1,22]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    for key, values in stats.items():
[1,22]<stdout>:        time = comm.gather(values[0], root=0)
[1,22]<stdout>:        mem = comm.gather(values[1], root=0)
[1,22]<stdout>:        if rank == 0:
[1,22]<stdout>:            print(
[1,22]<stdout>:                key
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(min(time))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(max(time))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(mean(time))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(min(mem))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(max(mem))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(mean(mem))
[1,22]<stdout>:            )
[1,22]<stdout>:
[1,22]<stdout>:    mesh = nume_ddl.getMesh()
[1,22]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,22]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,22]<stdout>:
[1,22]<stdout>:    if rank == 0:
[1,22]<stdout>:        print()
[1,22]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,22]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,22]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,22]<stdout>:
[1,22]<stdout>:    def show(*args, **kwargs):
[1,22]<stdout>:        if rank == 0:
[1,22]<stdout>:            print(*args, **kwargs)
[1,22]<stdout>:
[1,22]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,22]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,22]<stdout>:    separ = "| :--------------- | ----------: |"
[1,22]<stdout>:    show(fmti.format("Refinement", refine))
[1,22]<stdout>:    show(separ)
[1,22]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,22]<stdout>:    for key, values in data.items():
[1,22]<stdout>:        times = comm.gather(values[0], root=0)
[1,22]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,22]<stdout>:        if rank == 0:
[1,22]<stdout>:            show(fmtt.format(key, mean(times)))
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,22]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,22]<stdout>:
[1,22]<stdout>:with ChronoCtxMg("Total"):
[1,22]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,22]<stdout>:        if params["parallel"] == "HPC":
[1,22]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,22]<stdout>:        else:
[1,22]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Model"):
[1,22]<stdout>:        model = AFFE_MODELE(
[1,22]<stdout>:            M[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Execution of code_aster
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.23
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Command file #1 / 1
[1,23]<stdout>:
[1,23]<stdout>:Content of the file to execute:
[1,23]<stdout>:# coding=utf-8
[1,23]<stdout>:#!/usr/bin/python
[1,23]<stdout>:
[1,23]<stdout>:import os
[1,23]<stdout>:from statistics import mean
[1,23]<stdout>:from datetime import datetime
[1,23]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,23]<stdout>:
[1,23]<stdout>:from code_aster.Commands import *
[1,23]<stdout>:from code_aster import CA
[1,23]<stdout>:from code_aster.Utilities import petscInitialize
[1,23]<stdout>:
[1,23]<stdout>:CA.init()
[1,23]<stdout>:
[1,23]<stdout>:params = {}
[1,23]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,23]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,23]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,23]<stdout>:
[1,23]<stdout>:# General parameters
[1,23]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,23]<stdout>:rank = comm.Get_rank()
[1,23]<stdout>:size = comm.Get_size()
[1,23]<stdout>:
[1,23]<stdout>:nbHexa = 8 ** params["refinements"]
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:def memory_peak(mess=None):
[1,23]<stdout>:    """Return memory peak in MB"""
[1,23]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:class ChronoCtxMgGen:
[1,23]<stdout>:    stats = {}
[1,23]<stdout>:
[1,23]<stdout>:    def __init__(self, what):
[1,23]<stdout>:        self._what = what
[1,23]<stdout>:
[1,23]<stdout>:    def __enter__(self):
[1,23]<stdout>:        self.start = datetime.now()
[1,23]<stdout>:
[1,23]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,23]<stdout>:        self.stop = datetime.now()
[1,23]<stdout>:        delta = self.stop - self.start
[1,23]<stdout>:        mem = memory_peak(self._what)
[1,23]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,23]<stdout>:    pass
[1,23]<stdout>:    # def __init__(self, what):
[1,23]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:def write_stats(nume_ddl):
[1,23]<stdout>:    if rank == 0:
[1,23]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,23]<stdout>:        print()
[1,23]<stdout>:        print("NB PROC")
[1,23]<stdout>:        print(size)
[1,23]<stdout>:        print()
[1,23]<stdout>:        print(
[1,23]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    for key, values in stats.items():
[1,23]<stdout>:        time = comm.gather(values[0], root=0)
[1,23]<stdout>:        mem = comm.gather(values[1], root=0)
[1,23]<stdout>:        if rank == 0:
[1,23]<stdout>:            print(
[1,23]<stdout>:                key
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(min(time))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(max(time))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(mean(time))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(min(mem))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(max(mem))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(mean(mem))
[1,23]<stdout>:            )
[1,23]<stdout>:
[1,23]<stdout>:    mesh = nume_ddl.getMesh()
[1,23]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,23]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,23]<stdout>:
[1,23]<stdout>:    if rank == 0:
[1,23]<stdout>:        print()
[1,23]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,23]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,23]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,23]<stdout>:
[1,23]<stdout>:    def show(*args, **kwargs):
[1,23]<stdout>:        if rank == 0:
[1,23]<stdout>:            print(*args, **kwargs)
[1,23]<stdout>:
[1,23]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,23]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,23]<stdout>:    separ = "| :--------------- | ----------: |"
[1,23]<stdout>:    show(fmti.format("Refinement", refine))
[1,23]<stdout>:    show(separ)
[1,23]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,23]<stdout>:    for key, values in data.items():
[1,23]<stdout>:        times = comm.gather(values[0], root=0)
[1,23]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,23]<stdout>:        if rank == 0:
[1,23]<stdout>:            show(fmtt.format(key, mean(times)))
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,23]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,23]<stdout>:
[1,23]<stdout>:with ChronoCtxMg("Total"):
[1,23]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,23]<stdout>:        if params["parallel"] == "HPC":
[1,23]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,23]<stdout>:        else:
[1,23]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Model"):
[1,23]<stdout>:        model = AFFE_MODELE(
[1,23]<stdout>:            M[1,24]<stdout>:
[1,24]<stdout>:# ------------------------------------------------------------------------------
[1,24]<stdout>:Execution of code_aster
[1,24]<stdout>:
[1,24]<stdout>:# ------------------------------------------------------------------------------
[1,24]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.24
[1,24]<stdout>:
[1,24]<stdout>:# ------------------------------------------------------------------------------
[1,24]<stdout>:Command file #1 / 1
[1,24]<stdout>:
[1,24]<stdout>:Content of the file to execute:
[1,24]<stdout>:# coding=utf-8
[1,24]<stdout>:#!/usr/bin/python
[1,24]<stdout>:
[1,24]<stdout>:import os
[1,24]<stdout>:from statistics import mean
[1,24]<stdout>:from datetime import datetime
[1,24]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,24]<stdout>:
[1,24]<stdout>:from code_aster.Commands import *
[1,24]<stdout>:from code_aster import CA
[1,24]<stdout>:from code_aster.Utilities import petscInitialize
[1,24]<stdout>:
[1,24]<stdout>:CA.init()
[1,24]<stdout>:
[1,24]<stdout>:params = {}
[1,24]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,24]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,24]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,24]<stdout>:
[1,24]<stdout>:# General parameters
[1,24]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,24]<stdout>:rank = comm.Get_rank()
[1,24]<stdout>:size = comm.Get_size()
[1,24]<stdout>:
[1,24]<stdout>:nbHexa = 8 ** params["refinements"]
[1,24]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:def memory_peak(mess=None):
[1,24]<stdout>:    """Return memory peak in MB"""
[1,24]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,24]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:class ChronoCtxMgGen:
[1,24]<stdout>:    stats = {}
[1,24]<stdout>:
[1,24]<stdout>:    def __init__(self, what):
[1,24]<stdout>:        self._what = what
[1,24]<stdout>:
[1,24]<stdout>:    def __enter__(self):
[1,24]<stdout>:        self.start = datetime.now()
[1,24]<stdout>:
[1,24]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,24]<stdout>:        self.stop = datetime.now()
[1,24]<stdout>:        delta = self.stop - self.start
[1,24]<stdout>:        mem = memory_peak(self._what)
[1,24]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,24]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,24]<stdout>:    pass
[1,24]<stdout>:    # def __init__(self, what):
[1,24]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,24]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:def write_stats(nume_ddl):
[1,24]<stdout>:    if rank == 0:
[1,24]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,24]<stdout>:        print()
[1,24]<stdout>:        print("NB PROC")
[1,24]<stdout>:        print(size)
[1,24]<stdout>:        print()
[1,24]<stdout>:        print(
[1,24]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,24]<stdout>:        )
[1,24]<stdout>:
[1,24]<stdout>:    for key, values in stats.items():
[1,24]<stdout>:        time = comm.gather(values[0], root=0)
[1,24]<stdout>:        mem = comm.gather(values[1], root=0)
[1,24]<stdout>:        if rank == 0:
[1,24]<stdout>:            print(
[1,24]<stdout>:                key
[1,24]<stdout>:                + ", "
[1,24]<stdout>:                + str(min(time))
[1,24]<stdout>:                + ", "
[1,24]<stdout>:                + str(max(time))
[1,24]<stdout>:                + ", "
[1,24]<stdout>:                + str(mean(time))
[1,24]<stdout>:                + ", "
[1,24]<stdout>:                + str(min(mem))
[1,24]<stdout>:                + ", "
[1,24]<stdout>:                + str(max(mem))
[1,24]<stdout>:                + ", "
[1,24]<stdout>:                + str(mean(mem))
[1,24]<stdout>:            )
[1,24]<stdout>:
[1,24]<stdout>:    mesh = nume_ddl.getMesh()
[1,24]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,24]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,24]<stdout>:
[1,24]<stdout>:    if rank == 0:
[1,24]<stdout>:        print()
[1,24]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,24]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,24]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,24]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,24]<stdout>:
[1,24]<stdout>:    def show(*args, **kwargs):
[1,24]<stdout>:        if rank == 0:
[1,24]<stdout>:            print(*args, **kwargs)
[1,24]<stdout>:
[1,24]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,24]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,24]<stdout>:    separ = "| :--------------- | ----------: |"
[1,24]<stdout>:    show(fmti.format("Refinement", refine))
[1,24]<stdout>:    show(separ)
[1,24]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,24]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,24]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,24]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,24]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,24]<stdout>:    for key, values in data.items():
[1,24]<stdout>:        times = comm.gather(values[0], root=0)
[1,24]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,24]<stdout>:        if rank == 0:
[1,24]<stdout>:            show(fmtt.format(key, mean(times)))
[1,24]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,24]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,24]<stdout>:
[1,24]<stdout>:with ChronoCtxMg("Total"):
[1,24]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,24]<stdout>:        if params["parallel"] == "HPC":
[1,24]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,24]<stdout>:        else:
[1,24]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,24]<stdout>:
[1,24]<stdout>:    with ChronoCtxMg("Model"):
[1,24]<stdout>:        model = AFFE_MODELE(
[1,24]<stdout>:            M[1,25]<stdout>:
[1,25]<stdout>:# ------------------------------------------------------------------------------
[1,25]<stdout>:Execution of code_aster
[1,25]<stdout>:
[1,25]<stdout>:# ------------------------------------------------------------------------------
[1,25]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.25
[1,25]<stdout>:
[1,25]<stdout>:# ------------------------------------------------------------------------------
[1,25]<stdout>:Command file #1 / 1
[1,25]<stdout>:
[1,25]<stdout>:Content of the file to execute:
[1,25]<stdout>:# coding=utf-8
[1,25]<stdout>:#!/usr/bin/python
[1,25]<stdout>:
[1,25]<stdout>:import os
[1,25]<stdout>:from statistics import mean
[1,25]<stdout>:from datetime import datetime
[1,25]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,25]<stdout>:
[1,25]<stdout>:from code_aster.Commands import *
[1,25]<stdout>:from code_aster import CA
[1,25]<stdout>:from code_aster.Utilities import petscInitialize
[1,25]<stdout>:
[1,25]<stdout>:CA.init()
[1,25]<stdout>:
[1,25]<stdout>:params = {}
[1,25]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,25]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,25]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,25]<stdout>:
[1,25]<stdout>:# General parameters
[1,25]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,25]<stdout>:rank = comm.Get_rank()
[1,25]<stdout>:size = comm.Get_size()
[1,25]<stdout>:
[1,25]<stdout>:nbHexa = 8 ** params["refinements"]
[1,25]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:def memory_peak(mess=None):
[1,25]<stdout>:    """Return memory peak in MB"""
[1,25]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,25]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:class ChronoCtxMgGen:
[1,25]<stdout>:    stats = {}
[1,25]<stdout>:
[1,25]<stdout>:    def __init__(self, what):
[1,25]<stdout>:        self._what = what
[1,25]<stdout>:
[1,25]<stdout>:    def __enter__(self):
[1,25]<stdout>:        self.start = datetime.now()
[1,25]<stdout>:
[1,25]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,25]<stdout>:        self.stop = datetime.now()
[1,25]<stdout>:        delta = self.stop - self.start
[1,25]<stdout>:        mem = memory_peak(self._what)
[1,25]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,25]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,25]<stdout>:    pass
[1,25]<stdout>:    # def __init__(self, what):
[1,25]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,25]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:def write_stats(nume_ddl):
[1,25]<stdout>:    if rank == 0:
[1,25]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,25]<stdout>:        print()
[1,25]<stdout>:        print("NB PROC")
[1,25]<stdout>:        print(size)
[1,25]<stdout>:        print()
[1,25]<stdout>:        print(
[1,25]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,25]<stdout>:        )
[1,25]<stdout>:
[1,25]<stdout>:    for key, values in stats.items():
[1,25]<stdout>:        time = comm.gather(values[0], root=0)
[1,25]<stdout>:        mem = comm.gather(values[1], root=0)
[1,25]<stdout>:        if rank == 0:
[1,25]<stdout>:            print(
[1,25]<stdout>:                key
[1,25]<stdout>:                + ", "
[1,25]<stdout>:                + str(min(time))
[1,25]<stdout>:                + ", "
[1,25]<stdout>:                + str(max(time))
[1,25]<stdout>:                + ", "
[1,25]<stdout>:                + str(mean(time))
[1,25]<stdout>:                + ", "
[1,25]<stdout>:                + str(min(mem))
[1,25]<stdout>:                + ", "
[1,25]<stdout>:                + str(max(mem))
[1,25]<stdout>:                + ", "
[1,25]<stdout>:                + str(mean(mem))
[1,25]<stdout>:            )
[1,25]<stdout>:
[1,25]<stdout>:    mesh = nume_ddl.getMesh()
[1,25]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,25]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,25]<stdout>:
[1,25]<stdout>:    if rank == 0:
[1,25]<stdout>:        print()
[1,25]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,25]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,25]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,25]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,25]<stdout>:
[1,25]<stdout>:    def show(*args, **kwargs):
[1,25]<stdout>:        if rank == 0:
[1,25]<stdout>:            print(*args, **kwargs)
[1,25]<stdout>:
[1,25]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,25]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,25]<stdout>:    separ = "| :--------------- | ----------: |"
[1,25]<stdout>:    show(fmti.format("Refinement", refine))
[1,25]<stdout>:    show(separ)
[1,25]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,25]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,25]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,25]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,25]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,25]<stdout>:    for key, values in data.items():
[1,25]<stdout>:        times = comm.gather(values[0], root=0)
[1,25]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,25]<stdout>:        if rank == 0:
[1,25]<stdout>:            show(fmtt.format(key, mean(times)))
[1,25]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,25]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,25]<stdout>:
[1,25]<stdout>:with ChronoCtxMg("Total"):
[1,25]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,25]<stdout>:        if params["parallel"] == "HPC":
[1,25]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,25]<stdout>:        else:
[1,25]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,25]<stdout>:
[1,25]<stdout>:    with ChronoCtxMg("Model"):
[1,25]<stdout>:        model = AFFE_MODELE(
[1,25]<stdout>:            M[1,26]<stdout>:
[1,26]<stdout>:# ------------------------------------------------------------------------------
[1,26]<stdout>:Execution of code_aster
[1,26]<stdout>:
[1,26]<stdout>:# ------------------------------------------------------------------------------
[1,26]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.26
[1,26]<stdout>:
[1,26]<stdout>:# ------------------------------------------------------------------------------
[1,26]<stdout>:Command file #1 / 1
[1,26]<stdout>:
[1,26]<stdout>:Content of the file to execute:
[1,26]<stdout>:# coding=utf-8
[1,26]<stdout>:#!/usr/bin/python
[1,26]<stdout>:
[1,26]<stdout>:import os
[1,26]<stdout>:from statistics import mean
[1,26]<stdout>:from datetime import datetime
[1,26]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,26]<stdout>:
[1,26]<stdout>:from code_aster.Commands import *
[1,26]<stdout>:from code_aster import CA
[1,26]<stdout>:from code_aster.Utilities import petscInitialize
[1,26]<stdout>:
[1,26]<stdout>:CA.init()
[1,26]<stdout>:
[1,26]<stdout>:params = {}
[1,26]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,26]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,26]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,26]<stdout>:
[1,26]<stdout>:# General parameters
[1,26]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,26]<stdout>:rank = comm.Get_rank()
[1,26]<stdout>:size = comm.Get_size()
[1,26]<stdout>:
[1,26]<stdout>:nbHexa = 8 ** params["refinements"]
[1,26]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:def memory_peak(mess=None):
[1,26]<stdout>:    """Return memory peak in MB"""
[1,26]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,26]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:class ChronoCtxMgGen:
[1,26]<stdout>:    stats = {}
[1,26]<stdout>:
[1,26]<stdout>:    def __init__(self, what):
[1,26]<stdout>:        self._what = what
[1,26]<stdout>:
[1,26]<stdout>:    def __enter__(self):
[1,26]<stdout>:        self.start = datetime.now()
[1,26]<stdout>:
[1,26]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,26]<stdout>:        self.stop = datetime.now()
[1,26]<stdout>:        delta = self.stop - self.start
[1,26]<stdout>:        mem = memory_peak(self._what)
[1,26]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,26]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,26]<stdout>:    pass
[1,26]<stdout>:    # def __init__(self, what):
[1,26]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,26]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:def write_stats(nume_ddl):
[1,26]<stdout>:    if rank == 0:
[1,26]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,26]<stdout>:        print()
[1,26]<stdout>:        print("NB PROC")
[1,26]<stdout>:        print(size)
[1,26]<stdout>:        print()
[1,26]<stdout>:        print(
[1,26]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,26]<stdout>:        )
[1,26]<stdout>:
[1,26]<stdout>:    for key, values in stats.items():
[1,26]<stdout>:        time = comm.gather(values[0], root=0)
[1,26]<stdout>:        mem = comm.gather(values[1], root=0)
[1,26]<stdout>:        if rank == 0:
[1,26]<stdout>:            print(
[1,26]<stdout>:                key
[1,26]<stdout>:                + ", "
[1,26]<stdout>:                + str(min(time))
[1,26]<stdout>:                + ", "
[1,26]<stdout>:                + str(max(time))
[1,26]<stdout>:                + ", "
[1,26]<stdout>:                + str(mean(time))
[1,26]<stdout>:                + ", "
[1,26]<stdout>:                + str(min(mem))
[1,26]<stdout>:                + ", "
[1,26]<stdout>:                + str(max(mem))
[1,26]<stdout>:                + ", "
[1,26]<stdout>:                + str(mean(mem))
[1,26]<stdout>:            )
[1,26]<stdout>:
[1,26]<stdout>:    mesh = nume_ddl.getMesh()
[1,26]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,26]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,26]<stdout>:
[1,26]<stdout>:    if rank == 0:
[1,26]<stdout>:        print()
[1,26]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,26]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,26]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,26]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,26]<stdout>:
[1,26]<stdout>:    def show(*args, **kwargs):
[1,26]<stdout>:        if rank == 0:
[1,26]<stdout>:            print(*args, **kwargs)
[1,26]<stdout>:
[1,26]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,26]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,26]<stdout>:    separ = "| :--------------- | ----------: |"
[1,26]<stdout>:    show(fmti.format("Refinement", refine))
[1,26]<stdout>:    show(separ)
[1,26]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,26]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,26]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,26]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,26]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,26]<stdout>:    for key, values in data.items():
[1,26]<stdout>:        times = comm.gather(values[0], root=0)
[1,26]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,26]<stdout>:        if rank == 0:
[1,26]<stdout>:            show(fmtt.format(key, mean(times)))
[1,26]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,26]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,26]<stdout>:
[1,26]<stdout>:with ChronoCtxMg("Total"):
[1,26]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,26]<stdout>:        if params["parallel"] == "HPC":
[1,26]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,26]<stdout>:        else:
[1,26]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,26]<stdout>:
[1,26]<stdout>:    with ChronoCtxMg("Model"):
[1,26]<stdout>:        model = AFFE_MODELE(
[1,26]<stdout>:            M[1,27]<stdout>:
[1,27]<stdout>:# ------------------------------------------------------------------------------
[1,27]<stdout>:Execution of code_aster
[1,27]<stdout>:
[1,27]<stdout>:# ------------------------------------------------------------------------------
[1,27]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.27
[1,27]<stdout>:
[1,27]<stdout>:# ------------------------------------------------------------------------------
[1,27]<stdout>:Command file #1 / 1
[1,27]<stdout>:
[1,27]<stdout>:Content of the file to execute:
[1,27]<stdout>:# coding=utf-8
[1,27]<stdout>:#!/usr/bin/python
[1,27]<stdout>:
[1,27]<stdout>:import os
[1,27]<stdout>:from statistics import mean
[1,27]<stdout>:from datetime import datetime
[1,27]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,27]<stdout>:
[1,27]<stdout>:from code_aster.Commands import *
[1,27]<stdout>:from code_aster import CA
[1,27]<stdout>:from code_aster.Utilities import petscInitialize
[1,27]<stdout>:
[1,27]<stdout>:CA.init()
[1,27]<stdout>:
[1,27]<stdout>:params = {}
[1,27]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,27]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,27]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,27]<stdout>:
[1,27]<stdout>:# General parameters
[1,27]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,27]<stdout>:rank = comm.Get_rank()
[1,27]<stdout>:size = comm.Get_size()
[1,27]<stdout>:
[1,27]<stdout>:nbHexa = 8 ** params["refinements"]
[1,27]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:def memory_peak(mess=None):
[1,27]<stdout>:    """Return memory peak in MB"""
[1,27]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,27]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:class ChronoCtxMgGen:
[1,27]<stdout>:    stats = {}
[1,27]<stdout>:
[1,27]<stdout>:    def __init__(self, what):
[1,27]<stdout>:        self._what = what
[1,27]<stdout>:
[1,27]<stdout>:    def __enter__(self):
[1,27]<stdout>:        self.start = datetime.now()
[1,27]<stdout>:
[1,27]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,27]<stdout>:        self.stop = datetime.now()
[1,27]<stdout>:        delta = self.stop - self.start
[1,27]<stdout>:        mem = memory_peak(self._what)
[1,27]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,27]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,27]<stdout>:    pass
[1,27]<stdout>:    # def __init__(self, what):
[1,27]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,27]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:def write_stats(nume_ddl):
[1,27]<stdout>:    if rank == 0:
[1,27]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,27]<stdout>:        print()
[1,27]<stdout>:        print("NB PROC")
[1,27]<stdout>:        print(size)
[1,27]<stdout>:        print()
[1,27]<stdout>:        print(
[1,27]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,27]<stdout>:        )
[1,27]<stdout>:
[1,27]<stdout>:    for key, values in stats.items():
[1,27]<stdout>:        time = comm.gather(values[0], root=0)
[1,27]<stdout>:        mem = comm.gather(values[1], root=0)
[1,27]<stdout>:        if rank == 0:
[1,27]<stdout>:            print(
[1,27]<stdout>:                key
[1,27]<stdout>:                + ", "
[1,27]<stdout>:                + str(min(time))
[1,27]<stdout>:                + ", "
[1,27]<stdout>:                + str(max(time))
[1,27]<stdout>:                + ", "
[1,27]<stdout>:                + str(mean(time))
[1,27]<stdout>:                + ", "
[1,27]<stdout>:                + str(min(mem))
[1,27]<stdout>:                + ", "
[1,27]<stdout>:                + str(max(mem))
[1,27]<stdout>:                + ", "
[1,27]<stdout>:                + str(mean(mem))
[1,27]<stdout>:            )
[1,27]<stdout>:
[1,27]<stdout>:    mesh = nume_ddl.getMesh()
[1,27]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,27]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,27]<stdout>:
[1,27]<stdout>:    if rank == 0:
[1,27]<stdout>:        print()
[1,27]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,27]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,27]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,27]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,27]<stdout>:
[1,27]<stdout>:    def show(*args, **kwargs):
[1,27]<stdout>:        if rank == 0:
[1,27]<stdout>:            print(*args, **kwargs)
[1,27]<stdout>:
[1,27]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,27]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,27]<stdout>:    separ = "| :--------------- | ----------: |"
[1,27]<stdout>:    show(fmti.format("Refinement", refine))
[1,27]<stdout>:    show(separ)
[1,27]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,27]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,27]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,27]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,27]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,27]<stdout>:    for key, values in data.items():
[1,27]<stdout>:        times = comm.gather(values[0], root=0)
[1,27]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,27]<stdout>:        if rank == 0:
[1,27]<stdout>:            show(fmtt.format(key, mean(times)))
[1,27]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,27]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,27]<stdout>:
[1,27]<stdout>:with ChronoCtxMg("Total"):
[1,27]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,27]<stdout>:        if params["parallel"] == "HPC":
[1,27]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,27]<stdout>:        else:
[1,27]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,27]<stdout>:
[1,27]<stdout>:    with ChronoCtxMg("Model"):
[1,27]<stdout>:        model = AFFE_MODELE(
[1,27]<stdout>:            M[1,28]<stdout>:
[1,28]<stdout>:# ------------------------------------------------------------------------------
[1,28]<stdout>:Execution of code_aster
[1,28]<stdout>:
[1,28]<stdout>:# ------------------------------------------------------------------------------
[1,28]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.28
[1,28]<stdout>:
[1,28]<stdout>:# ------------------------------------------------------------------------------
[1,28]<stdout>:Command file #1 / 1
[1,28]<stdout>:
[1,28]<stdout>:Content of the file to execute:
[1,28]<stdout>:# coding=utf-8
[1,28]<stdout>:#!/usr/bin/python
[1,28]<stdout>:
[1,28]<stdout>:import os
[1,28]<stdout>:from statistics import mean
[1,28]<stdout>:from datetime import datetime
[1,28]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,28]<stdout>:
[1,28]<stdout>:from code_aster.Commands import *
[1,28]<stdout>:from code_aster import CA
[1,28]<stdout>:from code_aster.Utilities import petscInitialize
[1,28]<stdout>:
[1,28]<stdout>:CA.init()
[1,28]<stdout>:
[1,28]<stdout>:params = {}
[1,28]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,28]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,28]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,28]<stdout>:
[1,28]<stdout>:# General parameters
[1,28]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,28]<stdout>:rank = comm.Get_rank()
[1,28]<stdout>:size = comm.Get_size()
[1,28]<stdout>:
[1,28]<stdout>:nbHexa = 8 ** params["refinements"]
[1,28]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:def memory_peak(mess=None):
[1,28]<stdout>:    """Return memory peak in MB"""
[1,28]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,28]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:class ChronoCtxMgGen:
[1,28]<stdout>:    stats = {}
[1,28]<stdout>:
[1,28]<stdout>:    def __init__(self, what):
[1,28]<stdout>:        self._what = what
[1,28]<stdout>:
[1,28]<stdout>:    def __enter__(self):
[1,28]<stdout>:        self.start = datetime.now()
[1,28]<stdout>:
[1,28]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,28]<stdout>:        self.stop = datetime.now()
[1,28]<stdout>:        delta = self.stop - self.start
[1,28]<stdout>:        mem = memory_peak(self._what)
[1,28]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,28]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,28]<stdout>:    pass
[1,28]<stdout>:    # def __init__(self, what):
[1,28]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,28]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:def write_stats(nume_ddl):
[1,28]<stdout>:    if rank == 0:
[1,28]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,28]<stdout>:        print()
[1,28]<stdout>:        print("NB PROC")
[1,28]<stdout>:        print(size)
[1,28]<stdout>:        print()
[1,28]<stdout>:        print(
[1,28]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,28]<stdout>:        )
[1,28]<stdout>:
[1,28]<stdout>:    for key, values in stats.items():
[1,28]<stdout>:        time = comm.gather(values[0], root=0)
[1,28]<stdout>:        mem = comm.gather(values[1], root=0)
[1,28]<stdout>:        if rank == 0:
[1,28]<stdout>:            print(
[1,28]<stdout>:                key
[1,28]<stdout>:                + ", "
[1,28]<stdout>:                + str(min(time))
[1,28]<stdout>:                + ", "
[1,28]<stdout>:                + str(max(time))
[1,28]<stdout>:                + ", "
[1,28]<stdout>:                + str(mean(time))
[1,28]<stdout>:                + ", "
[1,28]<stdout>:                + str(min(mem))
[1,28]<stdout>:                + ", "
[1,28]<stdout>:                + str(max(mem))
[1,28]<stdout>:                + ", "
[1,28]<stdout>:                + str(mean(mem))
[1,28]<stdout>:            )
[1,28]<stdout>:
[1,28]<stdout>:    mesh = nume_ddl.getMesh()
[1,28]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,28]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,28]<stdout>:
[1,28]<stdout>:    if rank == 0:
[1,28]<stdout>:        print()
[1,28]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,28]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,28]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,28]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,28]<stdout>:
[1,28]<stdout>:    def show(*args, **kwargs):
[1,28]<stdout>:        if rank == 0:
[1,28]<stdout>:            print(*args, **kwargs)
[1,28]<stdout>:
[1,28]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,28]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,28]<stdout>:    separ = "| :--------------- | ----------: |"
[1,28]<stdout>:    show(fmti.format("Refinement", refine))
[1,28]<stdout>:    show(separ)
[1,28]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,28]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,28]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,28]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,28]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,28]<stdout>:    for key, values in data.items():
[1,28]<stdout>:        times = comm.gather(values[0], root=0)
[1,28]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,28]<stdout>:        if rank == 0:
[1,28]<stdout>:            show(fmtt.format(key, mean(times)))
[1,28]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,28]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,28]<stdout>:
[1,28]<stdout>:with ChronoCtxMg("Total"):
[1,28]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,28]<stdout>:        if params["parallel"] == "HPC":
[1,28]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,28]<stdout>:        else:
[1,28]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,28]<stdout>:
[1,28]<stdout>:    with ChronoCtxMg("Model"):
[1,28]<stdout>:        model = AFFE_MODELE(
[1,28]<stdout>:            M[1,29]<stdout>:
[1,29]<stdout>:# ------------------------------------------------------------------------------
[1,29]<stdout>:Execution of code_aster
[1,29]<stdout>:
[1,29]<stdout>:# ------------------------------------------------------------------------------
[1,29]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.29
[1,29]<stdout>:
[1,29]<stdout>:# ------------------------------------------------------------------------------
[1,29]<stdout>:Command file #1 / 1
[1,29]<stdout>:
[1,29]<stdout>:Content of the file to execute:
[1,29]<stdout>:# coding=utf-8
[1,29]<stdout>:#!/usr/bin/python
[1,29]<stdout>:
[1,29]<stdout>:import os
[1,29]<stdout>:from statistics import mean
[1,29]<stdout>:from datetime import datetime
[1,29]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,29]<stdout>:
[1,29]<stdout>:from code_aster.Commands import *
[1,29]<stdout>:from code_aster import CA
[1,29]<stdout>:from code_aster.Utilities import petscInitialize
[1,29]<stdout>:
[1,29]<stdout>:CA.init()
[1,29]<stdout>:
[1,29]<stdout>:params = {}
[1,29]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,29]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,29]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,29]<stdout>:
[1,29]<stdout>:# General parameters
[1,29]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,29]<stdout>:rank = comm.Get_rank()
[1,29]<stdout>:size = comm.Get_size()
[1,29]<stdout>:
[1,29]<stdout>:nbHexa = 8 ** params["refinements"]
[1,29]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:def memory_peak(mess=None):
[1,29]<stdout>:    """Return memory peak in MB"""
[1,29]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,29]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:class ChronoCtxMgGen:
[1,29]<stdout>:    stats = {}
[1,29]<stdout>:
[1,29]<stdout>:    def __init__(self, what):
[1,29]<stdout>:        self._what = what
[1,29]<stdout>:
[1,29]<stdout>:    def __enter__(self):
[1,29]<stdout>:        self.start = datetime.now()
[1,29]<stdout>:
[1,29]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,29]<stdout>:        self.stop = datetime.now()
[1,29]<stdout>:        delta = self.stop - self.start
[1,29]<stdout>:        mem = memory_peak(self._what)
[1,29]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,29]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,29]<stdout>:    pass
[1,29]<stdout>:    # def __init__(self, what):
[1,29]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,29]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:def write_stats(nume_ddl):
[1,29]<stdout>:    if rank == 0:
[1,29]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,29]<stdout>:        print()
[1,29]<stdout>:        print("NB PROC")
[1,29]<stdout>:        print(size)
[1,29]<stdout>:        print()
[1,29]<stdout>:        print(
[1,29]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,29]<stdout>:        )
[1,29]<stdout>:
[1,29]<stdout>:    for key, values in stats.items():
[1,29]<stdout>:        time = comm.gather(values[0], root=0)
[1,29]<stdout>:        mem = comm.gather(values[1], root=0)
[1,29]<stdout>:        if rank == 0:
[1,29]<stdout>:            print(
[1,29]<stdout>:                key
[1,29]<stdout>:                + ", "
[1,29]<stdout>:                + str(min(time))
[1,29]<stdout>:                + ", "
[1,29]<stdout>:                + str(max(time))
[1,29]<stdout>:                + ", "
[1,29]<stdout>:                + str(mean(time))
[1,29]<stdout>:                + ", "
[1,29]<stdout>:                + str(min(mem))
[1,29]<stdout>:                + ", "
[1,29]<stdout>:                + str(max(mem))
[1,29]<stdout>:                + ", "
[1,29]<stdout>:                + str(mean(mem))
[1,29]<stdout>:            )
[1,29]<stdout>:
[1,29]<stdout>:    mesh = nume_ddl.getMesh()
[1,29]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,29]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,29]<stdout>:
[1,29]<stdout>:    if rank == 0:
[1,29]<stdout>:        print()
[1,29]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,29]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,29]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,29]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,29]<stdout>:
[1,29]<stdout>:    def show(*args, **kwargs):
[1,29]<stdout>:        if rank == 0:
[1,29]<stdout>:            print(*args, **kwargs)
[1,29]<stdout>:
[1,29]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,29]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,29]<stdout>:    separ = "| :--------------- | ----------: |"
[1,29]<stdout>:    show(fmti.format("Refinement", refine))
[1,29]<stdout>:    show(separ)
[1,29]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,29]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,29]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,29]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,29]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,29]<stdout>:    for key, values in data.items():
[1,29]<stdout>:        times = comm.gather(values[0], root=0)
[1,29]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,29]<stdout>:        if rank == 0:
[1,29]<stdout>:            show(fmtt.format(key, mean(times)))
[1,29]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,29]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,29]<stdout>:
[1,29]<stdout>:with ChronoCtxMg("Total"):
[1,29]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,29]<stdout>:        if params["parallel"] == "HPC":
[1,29]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,29]<stdout>:        else:
[1,29]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,29]<stdout>:
[1,29]<stdout>:    with ChronoCtxMg("Model"):
[1,29]<stdout>:        model = AFFE_MODELE(
[1,29]<stdout>:            M[1,30]<stdout>:
[1,30]<stdout>:# ------------------------------------------------------------------------------
[1,30]<stdout>:Execution of code_aster
[1,30]<stdout>:
[1,30]<stdout>:# ------------------------------------------------------------------------------
[1,30]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.30
[1,30]<stdout>:
[1,30]<stdout>:# ------------------------------------------------------------------------------
[1,30]<stdout>:Command file #1 / 1
[1,30]<stdout>:
[1,30]<stdout>:Content of the file to execute:
[1,30]<stdout>:# coding=utf-8
[1,30]<stdout>:#!/usr/bin/python
[1,30]<stdout>:
[1,30]<stdout>:import os
[1,30]<stdout>:from statistics import mean
[1,30]<stdout>:from datetime import datetime
[1,30]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,30]<stdout>:
[1,30]<stdout>:from code_aster.Commands import *
[1,30]<stdout>:from code_aster import CA
[1,30]<stdout>:from code_aster.Utilities import petscInitialize
[1,30]<stdout>:
[1,30]<stdout>:CA.init()
[1,30]<stdout>:
[1,30]<stdout>:params = {}
[1,30]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,30]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,30]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,30]<stdout>:
[1,30]<stdout>:# General parameters
[1,30]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,30]<stdout>:rank = comm.Get_rank()
[1,30]<stdout>:size = comm.Get_size()
[1,30]<stdout>:
[1,30]<stdout>:nbHexa = 8 ** params["refinements"]
[1,30]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:def memory_peak(mess=None):
[1,30]<stdout>:    """Return memory peak in MB"""
[1,30]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,30]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:class ChronoCtxMgGen:
[1,30]<stdout>:    stats = {}
[1,30]<stdout>:
[1,30]<stdout>:    def __init__(self, what):
[1,30]<stdout>:        self._what = what
[1,30]<stdout>:
[1,30]<stdout>:    def __enter__(self):
[1,30]<stdout>:        self.start = datetime.now()
[1,30]<stdout>:
[1,30]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,30]<stdout>:        self.stop = datetime.now()
[1,30]<stdout>:        delta = self.stop - self.start
[1,30]<stdout>:        mem = memory_peak(self._what)
[1,30]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,30]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,30]<stdout>:    pass
[1,30]<stdout>:    # def __init__(self, what):
[1,30]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,30]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:def write_stats(nume_ddl):
[1,30]<stdout>:    if rank == 0:
[1,30]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,30]<stdout>:        print()
[1,30]<stdout>:        print("NB PROC")
[1,30]<stdout>:        print(size)
[1,30]<stdout>:        print()
[1,30]<stdout>:        print(
[1,30]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,30]<stdout>:        )
[1,30]<stdout>:
[1,30]<stdout>:    for key, values in stats.items():
[1,30]<stdout>:        time = comm.gather(values[0], root=0)
[1,30]<stdout>:        mem = comm.gather(values[1], root=0)
[1,30]<stdout>:        if rank == 0:
[1,30]<stdout>:            print(
[1,30]<stdout>:                key
[1,30]<stdout>:                + ", "
[1,30]<stdout>:                + str(min(time))
[1,30]<stdout>:                + ", "
[1,30]<stdout>:                + str(max(time))
[1,30]<stdout>:                + ", "
[1,30]<stdout>:                + str(mean(time))
[1,30]<stdout>:                + ", "
[1,30]<stdout>:                + str(min(mem))
[1,30]<stdout>:                + ", "
[1,30]<stdout>:                + str(max(mem))
[1,30]<stdout>:                + ", "
[1,30]<stdout>:                + str(mean(mem))
[1,30]<stdout>:            )
[1,30]<stdout>:
[1,30]<stdout>:    mesh = nume_ddl.getMesh()
[1,30]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,30]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,30]<stdout>:
[1,30]<stdout>:    if rank == 0:
[1,30]<stdout>:        print()
[1,30]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,30]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,30]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,30]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,30]<stdout>:
[1,30]<stdout>:    def show(*args, **kwargs):
[1,30]<stdout>:        if rank == 0:
[1,30]<stdout>:            print(*args, **kwargs)
[1,30]<stdout>:
[1,30]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,30]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,30]<stdout>:    separ = "| :--------------- | ----------: |"
[1,30]<stdout>:    show(fmti.format("Refinement", refine))
[1,30]<stdout>:    show(separ)
[1,30]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,30]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,30]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,30]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,30]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,30]<stdout>:    for key, values in data.items():
[1,30]<stdout>:        times = comm.gather(values[0], root=0)
[1,30]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,30]<stdout>:        if rank == 0:
[1,30]<stdout>:            show(fmtt.format(key, mean(times)))
[1,30]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,30]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,30]<stdout>:
[1,30]<stdout>:with ChronoCtxMg("Total"):
[1,30]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,30]<stdout>:        if params["parallel"] == "HPC":
[1,30]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,30]<stdout>:        else:
[1,30]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,30]<stdout>:
[1,30]<stdout>:    with ChronoCtxMg("Model"):
[1,30]<stdout>:        model = AFFE_MODELE(
[1,30]<stdout>:            M[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution of code_aster
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command file #1 / 1
[1,0]<stdout>:
[1,0]<stdout>:Content of the file to execute:
[1,0]<stdout>:# coding=utf-8
[1,0]<stdout>:#!/usr/bin/python
[1,0]<stdout>:
[1,0]<stdout>:import os
[1,0]<stdout>:from statistics import mean
[1,0]<stdout>:from datetime import datetime
[1,0]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,0]<stdout>:
[1,0]<stdout>:from code_aster.Commands import *
[1,0]<stdout>:from code_aster import CA
[1,0]<stdout>:from code_aster.Utilities import petscInitialize
[1,0]<stdout>:
[1,0]<stdout>:CA.init()
[1,0]<stdout>:
[1,0]<stdout>:params = {}
[1,0]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,0]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,0]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,0]<stdout>:
[1,0]<stdout>:# General parameters
[1,0]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,0]<stdout>:rank = comm.Get_rank()
[1,0]<stdout>:size = comm.Get_size()
[1,0]<stdout>:
[1,0]<stdout>:nbHexa = 8 ** params["refinements"]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def memory_peak(mess=None):
[1,0]<stdout>:    """Return memory peak in MB"""
[1,0]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMgGen:
[1,0]<stdout>:    stats = {}
[1,0]<stdout>:
[1,0]<stdout>:    def __init__(self, what):
[1,0]<stdout>:        self._what = what
[1,0]<stdout>:
[1,0]<stdout>:    def __enter__(self):
[1,0]<stdout>:        self.start = datetime.now()
[1,0]<stdout>:
[1,0]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,0]<stdout>:        self.stop = datetime.now()
[1,0]<stdout>:        delta = self.stop - self.start
[1,0]<stdout>:        mem = memory_peak(self._what)
[1,0]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,0]<stdout>:    pass
[1,0]<stdout>:    # def __init__(self, what):
[1,0]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def write_stats(nume_ddl):
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB PROC")
[1,0]<stdout>:        print(size)
[1,0]<stdout>:        print()
[1,0]<stdout>:        print(
[1,0]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    for key, values in stats.items():
[1,0]<stdout>:        time = comm.gather(values[0], root=0)
[1,0]<stdout>:        mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(
[1,0]<stdout>:                key
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(mem))
[1,0]<stdout>:            )
[1,0]<stdout>:
[1,0]<stdout>:    mesh = nume_ddl.getMesh()
[1,0]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,0]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,0]<stdout>:
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,0]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,0]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,0]<stdout>:
[1,0]<stdout>:    def show(*args, **kwargs):
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(*args, **kwargs)
[1,0]<stdout>:
[1,0]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,0]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,0]<stdout>:    separ = "| :--------------- | ----------: |"
[1,0]<stdout>:    show(fmti.format("Refinement", refine))
[1,0]<stdout>:    show(separ)
[1,0]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,0]<stdout>:    for key, values in data.items():
[1,0]<stdout>:        times = comm.gather(values[0], root=0)
[1,0]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            show(fmtt.format(key, mean(times)))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,0]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,0]<stdout>:
[1,0]<stdout>:with ChronoCtxMg("Total"):
[1,0]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,0]<stdout>:        if params["parallel"] == "HPC":
[1,0]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:        else:
[1,0]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Model"):
[1,0]<stdout>:        model = AFFE_MODELE(
[1,0]<stdout>:            MA[1,13]<stdout>:AILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                PHENOMENE="MECANIQUE",
[1,13]<stdout>:                MODELISATION="3D",
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Material"):
[1,13]<stdout>:        steel = DEFI_MATERIAU(
[1,13]<stdout>:            ELAS=_F(
[1,13]<stdout>:                E=200000.0,
[1,13]<stdout>:                NU=0.3,
[1,13]<stdout>:            ),
[1,13]<stdout>:            ECRO_LINE=_F(
[1,13]<stdout>:                D_SIGM_EPSI=2000.0,
[1,13]<stdout>:                SY=200.0,
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        mater = AFFE_MATERIAU(
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                MATER=steel,
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,13]<stdout>:        block = AFFE_CHAR_CINE(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            MECA_IMPO=(
[1,13]<stdout>:                _F(
[1,13]<stdout>:                    GROUP_MA="LEFT",
[1,13]<stdout>:                    DX=0,
[1,13]<stdout>:                    DY=0.0,
[1,13]<stdout>:                    DZ=0.0,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            MECA_IMPO=(
[1,13]<stdout>:                _F(
[1,13]<stdout>:                    GROUP_MA="RIGHT",
[1,13]<stdout>:                    DY=0.001,
[1,13]<stdout>:                    DZ=0.001,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,13]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            OPTION="RIGI_MECA",
[1,13]<stdout>:            CHAM_MATER=mater,
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Numbering"):
[1,13]<stdout>:        dofNum = NUME_DDL(
[1,13]<stdout>:            MATR_RIGI=stiff_elem,
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Assembly"):
[1,13]<stdout>:        stiffness = ASSE_MATRICE(
[1,13]<stdout>:            MATR_ELEM=stiff_elem,
[1,13]<stdout>:            NUME_DDL=dofNum,
[1,13]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,13]<stdout>:        rhs = CREA_CHAMP(
[1,13]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,13]<stdout>:            OPERATION="AFFE",
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                NOM_CMP=(
[1,13]<stdout>:                    "DX",
[1,13]<stdout>:                    "DY",
[1,13]<stdout>:                    "DZ",
[1,13]<stdout>:                ),
[1,13]<stdout>:                VALE=(
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,13]<stdout>:
[1,13]<stdout>:    if params["solver"] == "PETSC":
[1,13]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,13]<stdout>:    elif params["solver"] == "MUMPS":
[1,13]<stdout>:        solver = CA.MumpsSolver(
[1,13]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,13]<stdout>:            RENUM="PARMETIS",
[1,13]<stdout>:            ACCELERATION="FR+",
[1,13]<stdout>:            POSTTRAITEMENTS="MINI",
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Factorize"):
[1,13]<stdout>:        solver.factorize(stiffness)
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Solve"):
[1,13]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,13]<stdout>:
[1,13]<stdout>:# write_stats(dofNum)
[1,13]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,13]<stdout>:if params["parallel"] == "HPC":
[1,13]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,13]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,13]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,13]<stdout>:
[1,13]<stdout>:CA.close()
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Command line #1:
[1,13]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,14]<stdout>:AILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                PHENOMENE="MECANIQUE",
[1,14]<stdout>:                MODELISATION="3D",
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Material"):
[1,14]<stdout>:        steel = DEFI_MATERIAU(
[1,14]<stdout>:            ELAS=_F(
[1,14]<stdout>:                E=200000.0,
[1,14]<stdout>:                NU=0.3,
[1,14]<stdout>:            ),
[1,14]<stdout>:            ECRO_LINE=_F(
[1,14]<stdout>:                D_SIGM_EPSI=2000.0,
[1,14]<stdout>:                SY=200.0,
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        mater = AFFE_MATERIAU(
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                MATER=steel,
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,14]<stdout>:        block = AFFE_CHAR_CINE(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            MECA_IMPO=(
[1,14]<stdout>:                _F(
[1,14]<stdout>:                    GROUP_MA="LEFT",
[1,14]<stdout>:                    DX=0,
[1,14]<stdout>:                    DY=0.0,
[1,14]<stdout>:                    DZ=0.0,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            MECA_IMPO=(
[1,14]<stdout>:                _F(
[1,14]<stdout>:                    GROUP_MA="RIGHT",
[1,14]<stdout>:                    DY=0.001,
[1,14]<stdout>:                    DZ=0.001,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,14]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            OPTION="RIGI_MECA",
[1,14]<stdout>:            CHAM_MATER=mater,
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Numbering"):
[1,14]<stdout>:        dofNum = NUME_DDL(
[1,14]<stdout>:            MATR_RIGI=stiff_elem,
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Assembly"):
[1,14]<stdout>:        stiffness = ASSE_MATRICE(
[1,14]<stdout>:            MATR_ELEM=stiff_elem,
[1,14]<stdout>:            NUME_DDL=dofNum,
[1,14]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,14]<stdout>:        rhs = CREA_CHAMP(
[1,14]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,14]<stdout>:            OPERATION="AFFE",
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                NOM_CMP=(
[1,14]<stdout>:                    "DX",
[1,14]<stdout>:                    "DY",
[1,14]<stdout>:                    "DZ",
[1,14]<stdout>:                ),
[1,14]<stdout>:                VALE=(
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,14]<stdout>:
[1,14]<stdout>:    if params["solver"] == "PETSC":
[1,14]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,14]<stdout>:    elif params["solver"] == "MUMPS":
[1,14]<stdout>:        solver = CA.MumpsSolver(
[1,14]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,14]<stdout>:            RENUM="PARMETIS",
[1,14]<stdout>:            ACCELERATION="FR+",
[1,14]<stdout>:            POSTTRAITEMENTS="MINI",
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Factorize"):
[1,14]<stdout>:        solver.factorize(stiffness)
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Solve"):
[1,14]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,14]<stdout>:
[1,14]<stdout>:# write_stats(dofNum)
[1,14]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,14]<stdout>:if params["parallel"] == "HPC":
[1,14]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,14]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,14]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,14]<stdout>:
[1,14]<stdout>:CA.close()
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Command line #1:
[1,14]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,15]<stdout>:AILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                PHENOMENE="MECANIQUE",
[1,15]<stdout>:                MODELISATION="3D",
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Material"):
[1,15]<stdout>:        steel = DEFI_MATERIAU(
[1,15]<stdout>:            ELAS=_F(
[1,15]<stdout>:                E=200000.0,
[1,15]<stdout>:                NU=0.3,
[1,15]<stdout>:            ),
[1,15]<stdout>:            ECRO_LINE=_F(
[1,15]<stdout>:                D_SIGM_EPSI=2000.0,
[1,15]<stdout>:                SY=200.0,
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        mater = AFFE_MATERIAU(
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                MATER=steel,
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,15]<stdout>:        block = AFFE_CHAR_CINE(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            MECA_IMPO=(
[1,15]<stdout>:                _F(
[1,15]<stdout>:                    GROUP_MA="LEFT",
[1,15]<stdout>:                    DX=0,
[1,15]<stdout>:                    DY=0.0,
[1,15]<stdout>:                    DZ=0.0,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            MECA_IMPO=(
[1,15]<stdout>:                _F(
[1,15]<stdout>:                    GROUP_MA="RIGHT",
[1,15]<stdout>:                    DY=0.001,
[1,15]<stdout>:                    DZ=0.001,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,15]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            OPTION="RIGI_MECA",
[1,15]<stdout>:            CHAM_MATER=mater,
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Numbering"):
[1,15]<stdout>:        dofNum = NUME_DDL(
[1,15]<stdout>:            MATR_RIGI=stiff_elem,
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Assembly"):
[1,15]<stdout>:        stiffness = ASSE_MATRICE(
[1,15]<stdout>:            MATR_ELEM=stiff_elem,
[1,15]<stdout>:            NUME_DDL=dofNum,
[1,15]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,15]<stdout>:        rhs = CREA_CHAMP(
[1,15]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,15]<stdout>:            OPERATION="AFFE",
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                NOM_CMP=(
[1,15]<stdout>:                    "DX",
[1,15]<stdout>:                    "DY",
[1,15]<stdout>:                    "DZ",
[1,15]<stdout>:                ),
[1,15]<stdout>:                VALE=(
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,15]<stdout>:
[1,15]<stdout>:    if params["solver"] == "PETSC":
[1,15]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,15]<stdout>:    elif params["solver"] == "MUMPS":
[1,15]<stdout>:        solver = CA.MumpsSolver(
[1,15]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,15]<stdout>:            RENUM="PARMETIS",
[1,15]<stdout>:            ACCELERATION="FR+",
[1,15]<stdout>:            POSTTRAITEMENTS="MINI",
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Factorize"):
[1,15]<stdout>:        solver.factorize(stiffness)
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Solve"):
[1,15]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,15]<stdout>:
[1,15]<stdout>:# write_stats(dofNum)
[1,15]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,15]<stdout>:if params["parallel"] == "HPC":
[1,15]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,15]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,15]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,15]<stdout>:
[1,15]<stdout>:CA.close()
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Command line #1:
[1,15]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,16]<stdout>:AILLAGE=mesh,
[1,16]<stdout>:            AFFE=_F(
[1,16]<stdout>:                TOUT="OUI",
[1,16]<stdout>:                PHENOMENE="MECANIQUE",
[1,16]<stdout>:                MODELISATION="3D",
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Material"):
[1,16]<stdout>:        steel = DEFI_MATERIAU(
[1,16]<stdout>:            ELAS=_F(
[1,16]<stdout>:                E=200000.0,
[1,16]<stdout>:                NU=0.3,
[1,16]<stdout>:            ),
[1,16]<stdout>:            ECRO_LINE=_F(
[1,16]<stdout>:                D_SIGM_EPSI=2000.0,
[1,16]<stdout>:                SY=200.0,
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:        mater = AFFE_MATERIAU(
[1,16]<stdout>:            MAILLAGE=mesh,
[1,16]<stdout>:            AFFE=_F(
[1,16]<stdout>:                TOUT="OUI",
[1,16]<stdout>:                MATER=steel,
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,16]<stdout>:        block = AFFE_CHAR_CINE(
[1,16]<stdout>:            MODELE=model,
[1,16]<stdout>:            MECA_IMPO=(
[1,16]<stdout>:                _F(
[1,16]<stdout>:                    GROUP_MA="LEFT",
[1,16]<stdout>:                    DX=0,
[1,16]<stdout>:                    DY=0.0,
[1,16]<stdout>:                    DZ=0.0,
[1,16]<stdout>:                ),
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,16]<stdout>:            MODELE=model,
[1,16]<stdout>:            MECA_IMPO=(
[1,16]<stdout>:                _F(
[1,16]<stdout>:                    GROUP_MA="RIGHT",
[1,16]<stdout>:                    DY=0.001,
[1,16]<stdout>:                    DZ=0.001,
[1,16]<stdout>:                ),
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,16]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,16]<stdout>:            MODELE=model,
[1,16]<stdout>:            OPTION="RIGI_MECA",
[1,16]<stdout>:            CHAM_MATER=mater,
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Numbering"):
[1,16]<stdout>:        dofNum = NUME_DDL(
[1,16]<stdout>:            MATR_RIGI=stiff_elem,
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Assembly"):
[1,16]<stdout>:        stiffness = ASSE_MATRICE(
[1,16]<stdout>:            MATR_ELEM=stiff_elem,
[1,16]<stdout>:            NUME_DDL=dofNum,
[1,16]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,16]<stdout>:        rhs = CREA_CHAMP(
[1,16]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,16]<stdout>:            OPERATION="AFFE",
[1,16]<stdout>:            MAILLAGE=mesh,
[1,16]<stdout>:            AFFE=_F(
[1,16]<stdout>:                TOUT="OUI",
[1,16]<stdout>:                NOM_CMP=(
[1,16]<stdout>:                    "DX",
[1,16]<stdout>:                    "DY",
[1,16]<stdout>:                    "DZ",
[1,16]<stdout>:                ),
[1,16]<stdout>:                VALE=(
[1,16]<stdout>:                    0.0,
[1,16]<stdout>:                    0.0,
[1,16]<stdout>:                    0.0,
[1,16]<stdout>:                ),
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,16]<stdout>:
[1,16]<stdout>:    if params["solver"] == "PETSC":
[1,16]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,16]<stdout>:    elif params["solver"] == "MUMPS":
[1,16]<stdout>:        solver = CA.MumpsSolver(
[1,16]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,16]<stdout>:            RENUM="PARMETIS",
[1,16]<stdout>:            ACCELERATION="FR+",
[1,16]<stdout>:            POSTTRAITEMENTS="MINI",
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Factorize"):
[1,16]<stdout>:        solver.factorize(stiffness)
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Solve"):
[1,16]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,16]<stdout>:
[1,16]<stdout>:# write_stats(dofNum)
[1,16]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,16]<stdout>:if params["parallel"] == "HPC":
[1,16]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,16]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,16]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,16]<stdout>:
[1,16]<stdout>:CA.close()
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Command line #1:
[1,16]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,17]<stdout>:AILLAGE=mesh,
[1,17]<stdout>:            AFFE=_F(
[1,17]<stdout>:                TOUT="OUI",
[1,17]<stdout>:                PHENOMENE="MECANIQUE",
[1,17]<stdout>:                MODELISATION="3D",
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Material"):
[1,17]<stdout>:        steel = DEFI_MATERIAU(
[1,17]<stdout>:            ELAS=_F(
[1,17]<stdout>:                E=200000.0,
[1,17]<stdout>:                NU=0.3,
[1,17]<stdout>:            ),
[1,17]<stdout>:            ECRO_LINE=_F(
[1,17]<stdout>:                D_SIGM_EPSI=2000.0,
[1,17]<stdout>:                SY=200.0,
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:        mater = AFFE_MATERIAU(
[1,17]<stdout>:            MAILLAGE=mesh,
[1,17]<stdout>:            AFFE=_F(
[1,17]<stdout>:                TOUT="OUI",
[1,17]<stdout>:                MATER=steel,
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,17]<stdout>:        block = AFFE_CHAR_CINE(
[1,17]<stdout>:            MODELE=model,
[1,17]<stdout>:            MECA_IMPO=(
[1,17]<stdout>:                _F(
[1,17]<stdout>:                    GROUP_MA="LEFT",
[1,17]<stdout>:                    DX=0,
[1,17]<stdout>:                    DY=0.0,
[1,17]<stdout>:                    DZ=0.0,
[1,17]<stdout>:                ),
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,17]<stdout>:            MODELE=model,
[1,17]<stdout>:            MECA_IMPO=(
[1,17]<stdout>:                _F(
[1,17]<stdout>:                    GROUP_MA="RIGHT",
[1,17]<stdout>:                    DY=0.001,
[1,17]<stdout>:                    DZ=0.001,
[1,17]<stdout>:                ),
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,17]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,17]<stdout>:            MODELE=model,
[1,17]<stdout>:            OPTION="RIGI_MECA",
[1,17]<stdout>:            CHAM_MATER=mater,
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Numbering"):
[1,17]<stdout>:        dofNum = NUME_DDL(
[1,17]<stdout>:            MATR_RIGI=stiff_elem,
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Assembly"):
[1,17]<stdout>:        stiffness = ASSE_MATRICE(
[1,17]<stdout>:            MATR_ELEM=stiff_elem,
[1,17]<stdout>:            NUME_DDL=dofNum,
[1,17]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,17]<stdout>:        rhs = CREA_CHAMP(
[1,17]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,17]<stdout>:            OPERATION="AFFE",
[1,17]<stdout>:            MAILLAGE=mesh,
[1,17]<stdout>:            AFFE=_F(
[1,17]<stdout>:                TOUT="OUI",
[1,17]<stdout>:                NOM_CMP=(
[1,17]<stdout>:                    "DX",
[1,17]<stdout>:                    "DY",
[1,17]<stdout>:                    "DZ",
[1,17]<stdout>:                ),
[1,17]<stdout>:                VALE=(
[1,17]<stdout>:                    0.0,
[1,17]<stdout>:                    0.0,
[1,17]<stdout>:                    0.0,
[1,17]<stdout>:                ),
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,17]<stdout>:
[1,17]<stdout>:    if params["solver"] == "PETSC":
[1,17]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,17]<stdout>:    elif params["solver"] == "MUMPS":
[1,17]<stdout>:        solver = CA.MumpsSolver(
[1,17]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,17]<stdout>:            RENUM="PARMETIS",
[1,17]<stdout>:            ACCELERATION="FR+",
[1,17]<stdout>:            POSTTRAITEMENTS="MINI",
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Factorize"):
[1,17]<stdout>:        solver.factorize(stiffness)
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Solve"):
[1,17]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,17]<stdout>:
[1,17]<stdout>:# write_stats(dofNum)
[1,17]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,17]<stdout>:if params["parallel"] == "HPC":
[1,17]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,17]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,17]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,17]<stdout>:
[1,17]<stdout>:CA.close()
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Command line #1:
[1,17]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,18]<stdout>:AILLAGE=mesh,
[1,18]<stdout>:            AFFE=_F(
[1,18]<stdout>:                TOUT="OUI",
[1,18]<stdout>:                PHENOMENE="MECANIQUE",
[1,18]<stdout>:                MODELISATION="3D",
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Material"):
[1,18]<stdout>:        steel = DEFI_MATERIAU(
[1,18]<stdout>:            ELAS=_F(
[1,18]<stdout>:                E=200000.0,
[1,18]<stdout>:                NU=0.3,
[1,18]<stdout>:            ),
[1,18]<stdout>:            ECRO_LINE=_F(
[1,18]<stdout>:                D_SIGM_EPSI=2000.0,
[1,18]<stdout>:                SY=200.0,
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:        mater = AFFE_MATERIAU(
[1,18]<stdout>:            MAILLAGE=mesh,
[1,18]<stdout>:            AFFE=_F(
[1,18]<stdout>:                TOUT="OUI",
[1,18]<stdout>:                MATER=steel,
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,18]<stdout>:        block = AFFE_CHAR_CINE(
[1,18]<stdout>:            MODELE=model,
[1,18]<stdout>:            MECA_IMPO=(
[1,18]<stdout>:                _F(
[1,18]<stdout>:                    GROUP_MA="LEFT",
[1,18]<stdout>:                    DX=0,
[1,18]<stdout>:                    DY=0.0,
[1,18]<stdout>:                    DZ=0.0,
[1,18]<stdout>:                ),
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,18]<stdout>:            MODELE=model,
[1,18]<stdout>:            MECA_IMPO=(
[1,18]<stdout>:                _F(
[1,18]<stdout>:                    GROUP_MA="RIGHT",
[1,18]<stdout>:                    DY=0.001,
[1,18]<stdout>:                    DZ=0.001,
[1,18]<stdout>:                ),
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,18]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,18]<stdout>:            MODELE=model,
[1,18]<stdout>:            OPTION="RIGI_MECA",
[1,18]<stdout>:            CHAM_MATER=mater,
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Numbering"):
[1,18]<stdout>:        dofNum = NUME_DDL(
[1,18]<stdout>:            MATR_RIGI=stiff_elem,
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Assembly"):
[1,18]<stdout>:        stiffness = ASSE_MATRICE(
[1,18]<stdout>:            MATR_ELEM=stiff_elem,
[1,18]<stdout>:            NUME_DDL=dofNum,
[1,18]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,18]<stdout>:        rhs = CREA_CHAMP(
[1,18]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,18]<stdout>:            OPERATION="AFFE",
[1,18]<stdout>:            MAILLAGE=mesh,
[1,18]<stdout>:            AFFE=_F(
[1,18]<stdout>:                TOUT="OUI",
[1,18]<stdout>:                NOM_CMP=(
[1,18]<stdout>:                    "DX",
[1,18]<stdout>:                    "DY",
[1,18]<stdout>:                    "DZ",
[1,18]<stdout>:                ),
[1,18]<stdout>:                VALE=(
[1,18]<stdout>:                    0.0,
[1,18]<stdout>:                    0.0,
[1,18]<stdout>:                    0.0,
[1,18]<stdout>:                ),
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,18]<stdout>:
[1,18]<stdout>:    if params["solver"] == "PETSC":
[1,18]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,18]<stdout>:    elif params["solver"] == "MUMPS":
[1,18]<stdout>:        solver = CA.MumpsSolver(
[1,18]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,18]<stdout>:            RENUM="PARMETIS",
[1,18]<stdout>:            ACCELERATION="FR+",
[1,18]<stdout>:            POSTTRAITEMENTS="MINI",
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Factorize"):
[1,18]<stdout>:        solver.factorize(stiffness)
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Solve"):
[1,18]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,18]<stdout>:
[1,18]<stdout>:# write_stats(dofNum)
[1,18]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,18]<stdout>:if params["parallel"] == "HPC":
[1,18]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,18]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,18]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,18]<stdout>:
[1,18]<stdout>:CA.close()
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Command line #1:
[1,18]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,19]<stdout>:AILLAGE=mesh,
[1,19]<stdout>:            AFFE=_F(
[1,19]<stdout>:                TOUT="OUI",
[1,19]<stdout>:                PHENOMENE="MECANIQUE",
[1,19]<stdout>:                MODELISATION="3D",
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Material"):
[1,19]<stdout>:        steel = DEFI_MATERIAU(
[1,19]<stdout>:            ELAS=_F(
[1,19]<stdout>:                E=200000.0,
[1,19]<stdout>:                NU=0.3,
[1,19]<stdout>:            ),
[1,19]<stdout>:            ECRO_LINE=_F(
[1,19]<stdout>:                D_SIGM_EPSI=2000.0,
[1,19]<stdout>:                SY=200.0,
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:        mater = AFFE_MATERIAU(
[1,19]<stdout>:            MAILLAGE=mesh,
[1,19]<stdout>:            AFFE=_F(
[1,19]<stdout>:                TOUT="OUI",
[1,19]<stdout>:                MATER=steel,
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,19]<stdout>:        block = AFFE_CHAR_CINE(
[1,19]<stdout>:            MODELE=model,
[1,19]<stdout>:            MECA_IMPO=(
[1,19]<stdout>:                _F(
[1,19]<stdout>:                    GROUP_MA="LEFT",
[1,19]<stdout>:                    DX=0,
[1,19]<stdout>:                    DY=0.0,
[1,19]<stdout>:                    DZ=0.0,
[1,19]<stdout>:                ),
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,19]<stdout>:            MODELE=model,
[1,19]<stdout>:            MECA_IMPO=(
[1,19]<stdout>:                _F(
[1,19]<stdout>:                    GROUP_MA="RIGHT",
[1,19]<stdout>:                    DY=0.001,
[1,19]<stdout>:                    DZ=0.001,
[1,19]<stdout>:                ),
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,19]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,19]<stdout>:            MODELE=model,
[1,19]<stdout>:            OPTION="RIGI_MECA",
[1,19]<stdout>:            CHAM_MATER=mater,
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Numbering"):
[1,19]<stdout>:        dofNum = NUME_DDL(
[1,19]<stdout>:            MATR_RIGI=stiff_elem,
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Assembly"):
[1,19]<stdout>:        stiffness = ASSE_MATRICE(
[1,19]<stdout>:            MATR_ELEM=stiff_elem,
[1,19]<stdout>:            NUME_DDL=dofNum,
[1,19]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,19]<stdout>:        rhs = CREA_CHAMP(
[1,19]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,19]<stdout>:            OPERATION="AFFE",
[1,19]<stdout>:            MAILLAGE=mesh,
[1,19]<stdout>:            AFFE=_F(
[1,19]<stdout>:                TOUT="OUI",
[1,19]<stdout>:                NOM_CMP=(
[1,19]<stdout>:                    "DX",
[1,19]<stdout>:                    "DY",
[1,19]<stdout>:                    "DZ",
[1,19]<stdout>:                ),
[1,19]<stdout>:                VALE=(
[1,19]<stdout>:                    0.0,
[1,19]<stdout>:                    0.0,
[1,19]<stdout>:                    0.0,
[1,19]<stdout>:                ),
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,19]<stdout>:
[1,19]<stdout>:    if params["solver"] == "PETSC":
[1,19]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,19]<stdout>:    elif params["solver"] == "MUMPS":
[1,19]<stdout>:        solver = CA.MumpsSolver(
[1,19]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,19]<stdout>:            RENUM="PARMETIS",
[1,19]<stdout>:            ACCELERATION="FR+",
[1,19]<stdout>:            POSTTRAITEMENTS="MINI",
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Factorize"):
[1,19]<stdout>:        solver.factorize(stiffness)
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Solve"):
[1,19]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,19]<stdout>:
[1,19]<stdout>:# write_stats(dofNum)
[1,19]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,19]<stdout>:if params["parallel"] == "HPC":
[1,19]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,19]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,19]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,19]<stdout>:
[1,19]<stdout>:CA.close()
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Command line #1:
[1,19]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,20]<stdout>:AILLAGE=mesh,
[1,20]<stdout>:            AFFE=_F(
[1,20]<stdout>:                TOUT="OUI",
[1,20]<stdout>:                PHENOMENE="MECANIQUE",
[1,20]<stdout>:                MODELISATION="3D",
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Material"):
[1,20]<stdout>:        steel = DEFI_MATERIAU(
[1,20]<stdout>:            ELAS=_F(
[1,20]<stdout>:                E=200000.0,
[1,20]<stdout>:                NU=0.3,
[1,20]<stdout>:            ),
[1,20]<stdout>:            ECRO_LINE=_F(
[1,20]<stdout>:                D_SIGM_EPSI=2000.0,
[1,20]<stdout>:                SY=200.0,
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:        mater = AFFE_MATERIAU(
[1,20]<stdout>:            MAILLAGE=mesh,
[1,20]<stdout>:            AFFE=_F(
[1,20]<stdout>:                TOUT="OUI",
[1,20]<stdout>:                MATER=steel,
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,20]<stdout>:        block = AFFE_CHAR_CINE(
[1,20]<stdout>:            MODELE=model,
[1,20]<stdout>:            MECA_IMPO=(
[1,20]<stdout>:                _F(
[1,20]<stdout>:                    GROUP_MA="LEFT",
[1,20]<stdout>:                    DX=0,
[1,20]<stdout>:                    DY=0.0,
[1,20]<stdout>:                    DZ=0.0,
[1,20]<stdout>:                ),
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,20]<stdout>:            MODELE=model,
[1,20]<stdout>:            MECA_IMPO=(
[1,20]<stdout>:                _F(
[1,20]<stdout>:                    GROUP_MA="RIGHT",
[1,20]<stdout>:                    DY=0.001,
[1,20]<stdout>:                    DZ=0.001,
[1,20]<stdout>:                ),
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,20]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,20]<stdout>:            MODELE=model,
[1,20]<stdout>:            OPTION="RIGI_MECA",
[1,20]<stdout>:            CHAM_MATER=mater,
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Numbering"):
[1,20]<stdout>:        dofNum = NUME_DDL(
[1,20]<stdout>:            MATR_RIGI=stiff_elem,
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Assembly"):
[1,20]<stdout>:        stiffness = ASSE_MATRICE(
[1,20]<stdout>:            MATR_ELEM=stiff_elem,
[1,20]<stdout>:            NUME_DDL=dofNum,
[1,20]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,20]<stdout>:        rhs = CREA_CHAMP(
[1,20]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,20]<stdout>:            OPERATION="AFFE",
[1,20]<stdout>:            MAILLAGE=mesh,
[1,20]<stdout>:            AFFE=_F(
[1,20]<stdout>:                TOUT="OUI",
[1,20]<stdout>:                NOM_CMP=(
[1,20]<stdout>:                    "DX",
[1,20]<stdout>:                    "DY",
[1,20]<stdout>:                    "DZ",
[1,20]<stdout>:                ),
[1,20]<stdout>:                VALE=(
[1,20]<stdout>:                    0.0,
[1,20]<stdout>:                    0.0,
[1,20]<stdout>:                    0.0,
[1,20]<stdout>:                ),
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,20]<stdout>:
[1,20]<stdout>:    if params["solver"] == "PETSC":
[1,20]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,20]<stdout>:    elif params["solver"] == "MUMPS":
[1,20]<stdout>:        solver = CA.MumpsSolver(
[1,20]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,20]<stdout>:            RENUM="PARMETIS",
[1,20]<stdout>:            ACCELERATION="FR+",
[1,20]<stdout>:            POSTTRAITEMENTS="MINI",
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Factorize"):
[1,20]<stdout>:        solver.factorize(stiffness)
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Solve"):
[1,20]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,20]<stdout>:
[1,20]<stdout>:# write_stats(dofNum)
[1,20]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,20]<stdout>:if params["parallel"] == "HPC":
[1,20]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,20]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,20]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,20]<stdout>:
[1,20]<stdout>:CA.close()
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Command line #1:
[1,20]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,21]<stdout>:AILLAGE=mesh,
[1,21]<stdout>:            AFFE=_F(
[1,21]<stdout>:                TOUT="OUI",
[1,21]<stdout>:                PHENOMENE="MECANIQUE",
[1,21]<stdout>:                MODELISATION="3D",
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Material"):
[1,21]<stdout>:        steel = DEFI_MATERIAU(
[1,21]<stdout>:            ELAS=_F(
[1,21]<stdout>:                E=200000.0,
[1,21]<stdout>:                NU=0.3,
[1,21]<stdout>:            ),
[1,21]<stdout>:            ECRO_LINE=_F(
[1,21]<stdout>:                D_SIGM_EPSI=2000.0,
[1,21]<stdout>:                SY=200.0,
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:        mater = AFFE_MATERIAU(
[1,21]<stdout>:            MAILLAGE=mesh,
[1,21]<stdout>:            AFFE=_F(
[1,21]<stdout>:                TOUT="OUI",
[1,21]<stdout>:                MATER=steel,
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,21]<stdout>:        block = AFFE_CHAR_CINE(
[1,21]<stdout>:            MODELE=model,
[1,21]<stdout>:            MECA_IMPO=(
[1,21]<stdout>:                _F(
[1,21]<stdout>:                    GROUP_MA="LEFT",
[1,21]<stdout>:                    DX=0,
[1,21]<stdout>:                    DY=0.0,
[1,21]<stdout>:                    DZ=0.0,
[1,21]<stdout>:                ),
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,21]<stdout>:            MODELE=model,
[1,21]<stdout>:            MECA_IMPO=(
[1,21]<stdout>:                _F(
[1,21]<stdout>:                    GROUP_MA="RIGHT",
[1,21]<stdout>:                    DY=0.001,
[1,21]<stdout>:                    DZ=0.001,
[1,21]<stdout>:                ),
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,21]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,21]<stdout>:            MODELE=model,
[1,21]<stdout>:            OPTION="RIGI_MECA",
[1,21]<stdout>:            CHAM_MATER=mater,
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Numbering"):
[1,21]<stdout>:        dofNum = NUME_DDL(
[1,21]<stdout>:            MATR_RIGI=stiff_elem,
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Assembly"):
[1,21]<stdout>:        stiffness = ASSE_MATRICE(
[1,21]<stdout>:            MATR_ELEM=stiff_elem,
[1,21]<stdout>:            NUME_DDL=dofNum,
[1,21]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,21]<stdout>:        rhs = CREA_CHAMP(
[1,21]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,21]<stdout>:            OPERATION="AFFE",
[1,21]<stdout>:            MAILLAGE=mesh,
[1,21]<stdout>:            AFFE=_F(
[1,21]<stdout>:                TOUT="OUI",
[1,21]<stdout>:                NOM_CMP=(
[1,21]<stdout>:                    "DX",
[1,21]<stdout>:                    "DY",
[1,21]<stdout>:                    "DZ",
[1,21]<stdout>:                ),
[1,21]<stdout>:                VALE=(
[1,21]<stdout>:                    0.0,
[1,21]<stdout>:                    0.0,
[1,21]<stdout>:                    0.0,
[1,21]<stdout>:                ),
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,21]<stdout>:
[1,21]<stdout>:    if params["solver"] == "PETSC":
[1,21]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,21]<stdout>:    elif params["solver"] == "MUMPS":
[1,21]<stdout>:        solver = CA.MumpsSolver(
[1,21]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,21]<stdout>:            RENUM="PARMETIS",
[1,21]<stdout>:            ACCELERATION="FR+",
[1,21]<stdout>:            POSTTRAITEMENTS="MINI",
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Factorize"):
[1,21]<stdout>:        solver.factorize(stiffness)
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Solve"):
[1,21]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,21]<stdout>:
[1,21]<stdout>:# write_stats(dofNum)
[1,21]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,21]<stdout>:if params["parallel"] == "HPC":
[1,21]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,21]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,21]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,21]<stdout>:
[1,21]<stdout>:CA.close()
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Command line #1:
[1,21]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,22]<stdout>:AILLAGE=mesh,
[1,22]<stdout>:            AFFE=_F(
[1,22]<stdout>:                TOUT="OUI",
[1,22]<stdout>:                PHENOMENE="MECANIQUE",
[1,22]<stdout>:                MODELISATION="3D",
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Material"):
[1,22]<stdout>:        steel = DEFI_MATERIAU(
[1,22]<stdout>:            ELAS=_F(
[1,22]<stdout>:                E=200000.0,
[1,22]<stdout>:                NU=0.3,
[1,22]<stdout>:            ),
[1,22]<stdout>:            ECRO_LINE=_F(
[1,22]<stdout>:                D_SIGM_EPSI=2000.0,
[1,22]<stdout>:                SY=200.0,
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:        mater = AFFE_MATERIAU(
[1,22]<stdout>:            MAILLAGE=mesh,
[1,22]<stdout>:            AFFE=_F(
[1,22]<stdout>:                TOUT="OUI",
[1,22]<stdout>:                MATER=steel,
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,22]<stdout>:        block = AFFE_CHAR_CINE(
[1,22]<stdout>:            MODELE=model,
[1,22]<stdout>:            MECA_IMPO=(
[1,22]<stdout>:                _F(
[1,22]<stdout>:                    GROUP_MA="LEFT",
[1,22]<stdout>:                    DX=0,
[1,22]<stdout>:                    DY=0.0,
[1,22]<stdout>:                    DZ=0.0,
[1,22]<stdout>:                ),
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,22]<stdout>:            MODELE=model,
[1,22]<stdout>:            MECA_IMPO=(
[1,22]<stdout>:                _F(
[1,22]<stdout>:                    GROUP_MA="RIGHT",
[1,22]<stdout>:                    DY=0.001,
[1,22]<stdout>:                    DZ=0.001,
[1,22]<stdout>:                ),
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,22]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,22]<stdout>:            MODELE=model,
[1,22]<stdout>:            OPTION="RIGI_MECA",
[1,22]<stdout>:            CHAM_MATER=mater,
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Numbering"):
[1,22]<stdout>:        dofNum = NUME_DDL(
[1,22]<stdout>:            MATR_RIGI=stiff_elem,
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Assembly"):
[1,22]<stdout>:        stiffness = ASSE_MATRICE(
[1,22]<stdout>:            MATR_ELEM=stiff_elem,
[1,22]<stdout>:            NUME_DDL=dofNum,
[1,22]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,22]<stdout>:        rhs = CREA_CHAMP(
[1,22]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,22]<stdout>:            OPERATION="AFFE",
[1,22]<stdout>:            MAILLAGE=mesh,
[1,22]<stdout>:            AFFE=_F(
[1,22]<stdout>:                TOUT="OUI",
[1,22]<stdout>:                NOM_CMP=(
[1,22]<stdout>:                    "DX",
[1,22]<stdout>:                    "DY",
[1,22]<stdout>:                    "DZ",
[1,22]<stdout>:                ),
[1,22]<stdout>:                VALE=(
[1,22]<stdout>:                    0.0,
[1,22]<stdout>:                    0.0,
[1,22]<stdout>:                    0.0,
[1,22]<stdout>:                ),
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,22]<stdout>:
[1,22]<stdout>:    if params["solver"] == "PETSC":
[1,22]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,22]<stdout>:    elif params["solver"] == "MUMPS":
[1,22]<stdout>:        solver = CA.MumpsSolver(
[1,22]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,22]<stdout>:            RENUM="PARMETIS",
[1,22]<stdout>:            ACCELERATION="FR+",
[1,22]<stdout>:            POSTTRAITEMENTS="MINI",
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Factorize"):
[1,22]<stdout>:        solver.factorize(stiffness)
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Solve"):
[1,22]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,22]<stdout>:
[1,22]<stdout>:# write_stats(dofNum)
[1,22]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,22]<stdout>:if params["parallel"] == "HPC":
[1,22]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,22]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,22]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,22]<stdout>:
[1,22]<stdout>:CA.close()
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Command line #1:
[1,22]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,23]<stdout>:AILLAGE=mesh,
[1,23]<stdout>:            AFFE=_F(
[1,23]<stdout>:                TOUT="OUI",
[1,23]<stdout>:                PHENOMENE="MECANIQUE",
[1,23]<stdout>:                MODELISATION="3D",
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Material"):
[1,23]<stdout>:        steel = DEFI_MATERIAU(
[1,23]<stdout>:            ELAS=_F(
[1,23]<stdout>:                E=200000.0,
[1,23]<stdout>:                NU=0.3,
[1,23]<stdout>:            ),
[1,23]<stdout>:            ECRO_LINE=_F(
[1,23]<stdout>:                D_SIGM_EPSI=2000.0,
[1,23]<stdout>:                SY=200.0,
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:        mater = AFFE_MATERIAU(
[1,23]<stdout>:            MAILLAGE=mesh,
[1,23]<stdout>:            AFFE=_F(
[1,23]<stdout>:                TOUT="OUI",
[1,23]<stdout>:                MATER=steel,
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,23]<stdout>:        block = AFFE_CHAR_CINE(
[1,23]<stdout>:            MODELE=model,
[1,23]<stdout>:            MECA_IMPO=(
[1,23]<stdout>:                _F(
[1,23]<stdout>:                    GROUP_MA="LEFT",
[1,23]<stdout>:                    DX=0,
[1,23]<stdout>:                    DY=0.0,
[1,23]<stdout>:                    DZ=0.0,
[1,23]<stdout>:                ),
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,23]<stdout>:            MODELE=model,
[1,23]<stdout>:            MECA_IMPO=(
[1,23]<stdout>:                _F(
[1,23]<stdout>:                    GROUP_MA="RIGHT",
[1,23]<stdout>:                    DY=0.001,
[1,23]<stdout>:                    DZ=0.001,
[1,23]<stdout>:                ),
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,23]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,23]<stdout>:            MODELE=model,
[1,23]<stdout>:            OPTION="RIGI_MECA",
[1,23]<stdout>:            CHAM_MATER=mater,
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Numbering"):
[1,23]<stdout>:        dofNum = NUME_DDL(
[1,23]<stdout>:            MATR_RIGI=stiff_elem,
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Assembly"):
[1,23]<stdout>:        stiffness = ASSE_MATRICE(
[1,23]<stdout>:            MATR_ELEM=stiff_elem,
[1,23]<stdout>:            NUME_DDL=dofNum,
[1,23]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,23]<stdout>:        rhs = CREA_CHAMP(
[1,23]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,23]<stdout>:            OPERATION="AFFE",
[1,23]<stdout>:            MAILLAGE=mesh,
[1,23]<stdout>:            AFFE=_F(
[1,23]<stdout>:                TOUT="OUI",
[1,23]<stdout>:                NOM_CMP=(
[1,23]<stdout>:                    "DX",
[1,23]<stdout>:                    "DY",
[1,23]<stdout>:                    "DZ",
[1,23]<stdout>:                ),
[1,23]<stdout>:                VALE=(
[1,23]<stdout>:                    0.0,
[1,23]<stdout>:                    0.0,
[1,23]<stdout>:                    0.0,
[1,23]<stdout>:                ),
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,23]<stdout>:
[1,23]<stdout>:    if params["solver"] == "PETSC":
[1,23]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,23]<stdout>:    elif params["solver"] == "MUMPS":
[1,23]<stdout>:        solver = CA.MumpsSolver(
[1,23]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,23]<stdout>:            RENUM="PARMETIS",
[1,23]<stdout>:            ACCELERATION="FR+",
[1,23]<stdout>:            POSTTRAITEMENTS="MINI",
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Factorize"):
[1,23]<stdout>:        solver.factorize(stiffness)
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Solve"):
[1,23]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,23]<stdout>:
[1,23]<stdout>:# write_stats(dofNum)
[1,23]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,23]<stdout>:if params["parallel"] == "HPC":
[1,23]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,23]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,23]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,23]<stdout>:
[1,23]<stdout>:CA.close()
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Command line #1:
[1,23]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,24]<stdout>:AILLAGE=mesh,
[1,24]<stdout>:            AFFE=_F(
[1,24]<stdout>:                TOUT="OUI",
[1,24]<stdout>:                PHENOMENE="MECANIQUE",
[1,24]<stdout>:                MODELISATION="3D",
[1,24]<stdout>:            ),
[1,24]<stdout>:        )
[1,24]<stdout>:
[1,24]<stdout>:    with ChronoCtxMg("Material"):
[1,24]<stdout>:        steel = DEFI_MATERIAU(
[1,24]<stdout>:            ELAS=_F(
[1,24]<stdout>:                E=200000.0,
[1,24]<stdout>:                NU=0.3,
[1,24]<stdout>:            ),
[1,24]<stdout>:            ECRO_LINE=_F(
[1,24]<stdout>:                D_SIGM_EPSI=2000.0,
[1,24]<stdout>:                SY=200.0,
[1,24]<stdout>:            ),
[1,24]<stdout>:        )
[1,24]<stdout>:
[1,24]<stdout>:        mater = AFFE_MATERIAU(
[1,24]<stdout>:            MAILLAGE=mesh,
[1,24]<stdout>:            AFFE=_F(
[1,24]<stdout>:                TOUT="OUI",
[1,24]<stdout>:                MATER=steel,
[1,24]<stdout>:            ),
[1,24]<stdout>:        )
[1,24]<stdout>:
[1,24]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,24]<stdout>:        block = AFFE_CHAR_CINE(
[1,24]<stdout>:            MODELE=model,
[1,24]<stdout>:            MECA_IMPO=(
[1,24]<stdout>:                _F(
[1,24]<stdout>:                    GROUP_MA="LEFT",
[1,24]<stdout>:                    DX=0,
[1,24]<stdout>:                    DY=0.0,
[1,24]<stdout>:                    DZ=0.0,
[1,24]<stdout>:                ),
[1,24]<stdout>:            ),
[1,24]<stdout>:        )
[1,24]<stdout>:
[1,24]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,24]<stdout>:            MODELE=model,
[1,24]<stdout>:            MECA_IMPO=(
[1,24]<stdout>:                _F(
[1,24]<stdout>:                    GROUP_MA="RIGHT",
[1,24]<stdout>:                    DY=0.001,
[1,24]<stdout>:                    DZ=0.001,
[1,24]<stdout>:                ),
[1,24]<stdout>:            ),
[1,24]<stdout>:        )
[1,24]<stdout>:
[1,24]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,24]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,24]<stdout>:            MODELE=model,
[1,24]<stdout>:            OPTION="RIGI_MECA",
[1,24]<stdout>:            CHAM_MATER=mater,
[1,24]<stdout>:        )
[1,24]<stdout>:
[1,24]<stdout>:    with ChronoCtxMg("Numbering"):
[1,24]<stdout>:        dofNum = NUME_DDL(
[1,24]<stdout>:            MATR_RIGI=stiff_elem,
[1,24]<stdout>:        )
[1,24]<stdout>:
[1,24]<stdout>:    with ChronoCtxMg("Assembly"):
[1,24]<stdout>:        stiffness = ASSE_MATRICE(
[1,24]<stdout>:            MATR_ELEM=stiff_elem,
[1,24]<stdout>:            NUME_DDL=dofNum,
[1,24]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,24]<stdout>:        )
[1,24]<stdout>:
[1,24]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,24]<stdout>:        rhs = CREA_CHAMP(
[1,24]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,24]<stdout>:            OPERATION="AFFE",
[1,24]<stdout>:            MAILLAGE=mesh,
[1,24]<stdout>:            AFFE=_F(
[1,24]<stdout>:                TOUT="OUI",
[1,24]<stdout>:                NOM_CMP=(
[1,24]<stdout>:                    "DX",
[1,24]<stdout>:                    "DY",
[1,24]<stdout>:                    "DZ",
[1,24]<stdout>:                ),
[1,24]<stdout>:                VALE=(
[1,24]<stdout>:                    0.0,
[1,24]<stdout>:                    0.0,
[1,24]<stdout>:                    0.0,
[1,24]<stdout>:                ),
[1,24]<stdout>:            ),
[1,24]<stdout>:        )
[1,24]<stdout>:
[1,24]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,24]<stdout>:
[1,24]<stdout>:    if params["solver"] == "PETSC":
[1,24]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,24]<stdout>:    elif params["solver"] == "MUMPS":
[1,24]<stdout>:        solver = CA.MumpsSolver(
[1,24]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,24]<stdout>:            RENUM="PARMETIS",
[1,24]<stdout>:            ACCELERATION="FR+",
[1,24]<stdout>:            POSTTRAITEMENTS="MINI",
[1,24]<stdout>:        )
[1,24]<stdout>:
[1,24]<stdout>:    with ChronoCtxMg("Factorize"):
[1,24]<stdout>:        solver.factorize(stiffness)
[1,24]<stdout>:
[1,24]<stdout>:    with ChronoCtxMg("Solve"):
[1,24]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,24]<stdout>:
[1,24]<stdout>:# write_stats(dofNum)
[1,24]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,24]<stdout>:if params["parallel"] == "HPC":
[1,24]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,24]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,24]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,24]<stdout>:
[1,24]<stdout>:CA.close()
[1,24]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:# ------------------------------------------------------------------------------
[1,24]<stdout>:Command line #1:
[1,24]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,25]<stdout>:AILLAGE=mesh,
[1,25]<stdout>:            AFFE=_F(
[1,25]<stdout>:                TOUT="OUI",
[1,25]<stdout>:                PHENOMENE="MECANIQUE",
[1,25]<stdout>:                MODELISATION="3D",
[1,25]<stdout>:            ),
[1,25]<stdout>:        )
[1,25]<stdout>:
[1,25]<stdout>:    with ChronoCtxMg("Material"):
[1,25]<stdout>:        steel = DEFI_MATERIAU(
[1,25]<stdout>:            ELAS=_F(
[1,25]<stdout>:                E=200000.0,
[1,25]<stdout>:                NU=0.3,
[1,25]<stdout>:            ),
[1,25]<stdout>:            ECRO_LINE=_F(
[1,25]<stdout>:                D_SIGM_EPSI=2000.0,
[1,25]<stdout>:                SY=200.0,
[1,25]<stdout>:            ),
[1,25]<stdout>:        )
[1,25]<stdout>:
[1,25]<stdout>:        mater = AFFE_MATERIAU(
[1,25]<stdout>:            MAILLAGE=mesh,
[1,25]<stdout>:            AFFE=_F(
[1,25]<stdout>:                TOUT="OUI",
[1,25]<stdout>:                MATER=steel,
[1,25]<stdout>:            ),
[1,25]<stdout>:        )
[1,25]<stdout>:
[1,25]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,25]<stdout>:        block = AFFE_CHAR_CINE(
[1,25]<stdout>:            MODELE=model,
[1,25]<stdout>:            MECA_IMPO=(
[1,25]<stdout>:                _F(
[1,25]<stdout>:                    GROUP_MA="LEFT",
[1,25]<stdout>:                    DX=0,
[1,25]<stdout>:                    DY=0.0,
[1,25]<stdout>:                    DZ=0.0,
[1,25]<stdout>:                ),
[1,25]<stdout>:            ),
[1,25]<stdout>:        )
[1,25]<stdout>:
[1,25]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,25]<stdout>:            MODELE=model,
[1,25]<stdout>:            MECA_IMPO=(
[1,25]<stdout>:                _F(
[1,25]<stdout>:                    GROUP_MA="RIGHT",
[1,25]<stdout>:                    DY=0.001,
[1,25]<stdout>:                    DZ=0.001,
[1,25]<stdout>:                ),
[1,25]<stdout>:            ),
[1,25]<stdout>:        )
[1,25]<stdout>:
[1,25]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,25]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,25]<stdout>:            MODELE=model,
[1,25]<stdout>:            OPTION="RIGI_MECA",
[1,25]<stdout>:            CHAM_MATER=mater,
[1,25]<stdout>:        )
[1,25]<stdout>:
[1,25]<stdout>:    with ChronoCtxMg("Numbering"):
[1,25]<stdout>:        dofNum = NUME_DDL(
[1,25]<stdout>:            MATR_RIGI=stiff_elem,
[1,25]<stdout>:        )
[1,25]<stdout>:
[1,25]<stdout>:    with ChronoCtxMg("Assembly"):
[1,25]<stdout>:        stiffness = ASSE_MATRICE(
[1,25]<stdout>:            MATR_ELEM=stiff_elem,
[1,25]<stdout>:            NUME_DDL=dofNum,
[1,25]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,25]<stdout>:        )
[1,25]<stdout>:
[1,25]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,25]<stdout>:        rhs = CREA_CHAMP(
[1,25]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,25]<stdout>:            OPERATION="AFFE",
[1,25]<stdout>:            MAILLAGE=mesh,
[1,25]<stdout>:            AFFE=_F(
[1,25]<stdout>:                TOUT="OUI",
[1,25]<stdout>:                NOM_CMP=(
[1,25]<stdout>:                    "DX",
[1,25]<stdout>:                    "DY",
[1,25]<stdout>:                    "DZ",
[1,25]<stdout>:                ),
[1,25]<stdout>:                VALE=(
[1,25]<stdout>:                    0.0,
[1,25]<stdout>:                    0.0,
[1,25]<stdout>:                    0.0,
[1,25]<stdout>:                ),
[1,25]<stdout>:            ),
[1,25]<stdout>:        )
[1,25]<stdout>:
[1,25]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,25]<stdout>:
[1,25]<stdout>:    if params["solver"] == "PETSC":
[1,25]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,25]<stdout>:    elif params["solver"] == "MUMPS":
[1,25]<stdout>:        solver = CA.MumpsSolver(
[1,25]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,25]<stdout>:            RENUM="PARMETIS",
[1,25]<stdout>:            ACCELERATION="FR+",
[1,25]<stdout>:            POSTTRAITEMENTS="MINI",
[1,25]<stdout>:        )
[1,25]<stdout>:
[1,25]<stdout>:    with ChronoCtxMg("Factorize"):
[1,25]<stdout>:        solver.factorize(stiffness)
[1,25]<stdout>:
[1,25]<stdout>:    with ChronoCtxMg("Solve"):
[1,25]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,25]<stdout>:
[1,25]<stdout>:# write_stats(dofNum)
[1,25]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,25]<stdout>:if params["parallel"] == "HPC":
[1,25]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,25]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,25]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,25]<stdout>:
[1,25]<stdout>:CA.close()
[1,25]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:# ------------------------------------------------------------------------------
[1,25]<stdout>:Command line #1:
[1,25]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,26]<stdout>:AILLAGE=mesh,
[1,26]<stdout>:            AFFE=_F(
[1,26]<stdout>:                TOUT="OUI",
[1,26]<stdout>:                PHENOMENE="MECANIQUE",
[1,26]<stdout>:                MODELISATION="3D",
[1,26]<stdout>:            ),
[1,26]<stdout>:        )
[1,26]<stdout>:
[1,26]<stdout>:    with ChronoCtxMg("Material"):
[1,26]<stdout>:        steel = DEFI_MATERIAU(
[1,26]<stdout>:            ELAS=_F(
[1,26]<stdout>:                E=200000.0,
[1,26]<stdout>:                NU=0.3,
[1,26]<stdout>:            ),
[1,26]<stdout>:            ECRO_LINE=_F(
[1,26]<stdout>:                D_SIGM_EPSI=2000.0,
[1,26]<stdout>:                SY=200.0,
[1,26]<stdout>:            ),
[1,26]<stdout>:        )
[1,26]<stdout>:
[1,26]<stdout>:        mater = AFFE_MATERIAU(
[1,26]<stdout>:            MAILLAGE=mesh,
[1,26]<stdout>:            AFFE=_F(
[1,26]<stdout>:                TOUT="OUI",
[1,26]<stdout>:                MATER=steel,
[1,26]<stdout>:            ),
[1,26]<stdout>:        )
[1,26]<stdout>:
[1,26]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,26]<stdout>:        block = AFFE_CHAR_CINE(
[1,26]<stdout>:            MODELE=model,
[1,26]<stdout>:            MECA_IMPO=(
[1,26]<stdout>:                _F(
[1,26]<stdout>:                    GROUP_MA="LEFT",
[1,26]<stdout>:                    DX=0,
[1,26]<stdout>:                    DY=0.0,
[1,26]<stdout>:                    DZ=0.0,
[1,26]<stdout>:                ),
[1,26]<stdout>:            ),
[1,26]<stdout>:        )
[1,26]<stdout>:
[1,26]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,26]<stdout>:            MODELE=model,
[1,26]<stdout>:            MECA_IMPO=(
[1,26]<stdout>:                _F(
[1,26]<stdout>:                    GROUP_MA="RIGHT",
[1,26]<stdout>:                    DY=0.001,
[1,26]<stdout>:                    DZ=0.001,
[1,26]<stdout>:                ),
[1,26]<stdout>:            ),
[1,26]<stdout>:        )
[1,26]<stdout>:
[1,26]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,26]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,26]<stdout>:            MODELE=model,
[1,26]<stdout>:            OPTION="RIGI_MECA",
[1,26]<stdout>:            CHAM_MATER=mater,
[1,26]<stdout>:        )
[1,26]<stdout>:
[1,26]<stdout>:    with ChronoCtxMg("Numbering"):
[1,26]<stdout>:        dofNum = NUME_DDL(
[1,26]<stdout>:            MATR_RIGI=stiff_elem,
[1,26]<stdout>:        )
[1,26]<stdout>:
[1,26]<stdout>:    with ChronoCtxMg("Assembly"):
[1,26]<stdout>:        stiffness = ASSE_MATRICE(
[1,26]<stdout>:            MATR_ELEM=stiff_elem,
[1,26]<stdout>:            NUME_DDL=dofNum,
[1,26]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,26]<stdout>:        )
[1,26]<stdout>:
[1,26]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,26]<stdout>:        rhs = CREA_CHAMP(
[1,26]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,26]<stdout>:            OPERATION="AFFE",
[1,26]<stdout>:            MAILLAGE=mesh,
[1,26]<stdout>:            AFFE=_F(
[1,26]<stdout>:                TOUT="OUI",
[1,26]<stdout>:                NOM_CMP=(
[1,26]<stdout>:                    "DX",
[1,26]<stdout>:                    "DY",
[1,26]<stdout>:                    "DZ",
[1,26]<stdout>:                ),
[1,26]<stdout>:                VALE=(
[1,26]<stdout>:                    0.0,
[1,26]<stdout>:                    0.0,
[1,26]<stdout>:                    0.0,
[1,26]<stdout>:                ),
[1,26]<stdout>:            ),
[1,26]<stdout>:        )
[1,26]<stdout>:
[1,26]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,26]<stdout>:
[1,26]<stdout>:    if params["solver"] == "PETSC":
[1,26]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,26]<stdout>:    elif params["solver"] == "MUMPS":
[1,26]<stdout>:        solver = CA.MumpsSolver(
[1,26]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,26]<stdout>:            RENUM="PARMETIS",
[1,26]<stdout>:            ACCELERATION="FR+",
[1,26]<stdout>:            POSTTRAITEMENTS="MINI",
[1,26]<stdout>:        )
[1,26]<stdout>:
[1,26]<stdout>:    with ChronoCtxMg("Factorize"):
[1,26]<stdout>:        solver.factorize(stiffness)
[1,26]<stdout>:
[1,26]<stdout>:    with ChronoCtxMg("Solve"):
[1,26]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,26]<stdout>:
[1,26]<stdout>:# write_stats(dofNum)
[1,26]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,26]<stdout>:if params["parallel"] == "HPC":
[1,26]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,26]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,26]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,26]<stdout>:
[1,26]<stdout>:CA.close()
[1,26]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:# ------------------------------------------------------------------------------
[1,26]<stdout>:Command line #1:
[1,26]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,27]<stdout>:AILLAGE=mesh,
[1,27]<stdout>:            AFFE=_F(
[1,27]<stdout>:                TOUT="OUI",
[1,27]<stdout>:                PHENOMENE="MECANIQUE",
[1,27]<stdout>:                MODELISATION="3D",
[1,27]<stdout>:            ),
[1,27]<stdout>:        )
[1,27]<stdout>:
[1,27]<stdout>:    with ChronoCtxMg("Material"):
[1,27]<stdout>:        steel = DEFI_MATERIAU(
[1,27]<stdout>:            ELAS=_F(
[1,27]<stdout>:                E=200000.0,
[1,27]<stdout>:                NU=0.3,
[1,27]<stdout>:            ),
[1,27]<stdout>:            ECRO_LINE=_F(
[1,27]<stdout>:                D_SIGM_EPSI=2000.0,
[1,27]<stdout>:                SY=200.0,
[1,27]<stdout>:            ),
[1,27]<stdout>:        )
[1,27]<stdout>:
[1,27]<stdout>:        mater = AFFE_MATERIAU(
[1,27]<stdout>:            MAILLAGE=mesh,
[1,27]<stdout>:            AFFE=_F(
[1,27]<stdout>:                TOUT="OUI",
[1,27]<stdout>:                MATER=steel,
[1,27]<stdout>:            ),
[1,27]<stdout>:        )
[1,27]<stdout>:
[1,27]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,27]<stdout>:        block = AFFE_CHAR_CINE(
[1,27]<stdout>:            MODELE=model,
[1,27]<stdout>:            MECA_IMPO=(
[1,27]<stdout>:                _F(
[1,27]<stdout>:                    GROUP_MA="LEFT",
[1,27]<stdout>:                    DX=0,
[1,27]<stdout>:                    DY=0.0,
[1,27]<stdout>:                    DZ=0.0,
[1,27]<stdout>:                ),
[1,27]<stdout>:            ),
[1,27]<stdout>:        )
[1,27]<stdout>:
[1,27]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,27]<stdout>:            MODELE=model,
[1,27]<stdout>:            MECA_IMPO=(
[1,27]<stdout>:                _F(
[1,27]<stdout>:                    GROUP_MA="RIGHT",
[1,27]<stdout>:                    DY=0.001,
[1,27]<stdout>:                    DZ=0.001,
[1,27]<stdout>:                ),
[1,27]<stdout>:            ),
[1,27]<stdout>:        )
[1,27]<stdout>:
[1,27]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,27]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,27]<stdout>:            MODELE=model,
[1,27]<stdout>:            OPTION="RIGI_MECA",
[1,27]<stdout>:            CHAM_MATER=mater,
[1,27]<stdout>:        )
[1,27]<stdout>:
[1,27]<stdout>:    with ChronoCtxMg("Numbering"):
[1,27]<stdout>:        dofNum = NUME_DDL(
[1,27]<stdout>:            MATR_RIGI=stiff_elem,
[1,27]<stdout>:        )
[1,27]<stdout>:
[1,27]<stdout>:    with ChronoCtxMg("Assembly"):
[1,27]<stdout>:        stiffness = ASSE_MATRICE(
[1,27]<stdout>:            MATR_ELEM=stiff_elem,
[1,27]<stdout>:            NUME_DDL=dofNum,
[1,27]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,27]<stdout>:        )
[1,27]<stdout>:
[1,27]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,27]<stdout>:        rhs = CREA_CHAMP(
[1,27]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,27]<stdout>:            OPERATION="AFFE",
[1,27]<stdout>:            MAILLAGE=mesh,
[1,27]<stdout>:            AFFE=_F(
[1,27]<stdout>:                TOUT="OUI",
[1,27]<stdout>:                NOM_CMP=(
[1,27]<stdout>:                    "DX",
[1,27]<stdout>:                    "DY",
[1,27]<stdout>:                    "DZ",
[1,27]<stdout>:                ),
[1,27]<stdout>:                VALE=(
[1,27]<stdout>:                    0.0,
[1,27]<stdout>:                    0.0,
[1,27]<stdout>:                    0.0,
[1,27]<stdout>:                ),
[1,27]<stdout>:            ),
[1,27]<stdout>:        )
[1,27]<stdout>:
[1,27]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,27]<stdout>:
[1,27]<stdout>:    if params["solver"] == "PETSC":
[1,27]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,27]<stdout>:    elif params["solver"] == "MUMPS":
[1,27]<stdout>:        solver = CA.MumpsSolver(
[1,27]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,27]<stdout>:            RENUM="PARMETIS",
[1,27]<stdout>:            ACCELERATION="FR+",
[1,27]<stdout>:            POSTTRAITEMENTS="MINI",
[1,27]<stdout>:        )
[1,27]<stdout>:
[1,27]<stdout>:    with ChronoCtxMg("Factorize"):
[1,27]<stdout>:        solver.factorize(stiffness)
[1,27]<stdout>:
[1,27]<stdout>:    with ChronoCtxMg("Solve"):
[1,27]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,27]<stdout>:
[1,27]<stdout>:# write_stats(dofNum)
[1,27]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,27]<stdout>:if params["parallel"] == "HPC":
[1,27]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,27]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,27]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,27]<stdout>:
[1,27]<stdout>:CA.close()
[1,27]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:# ------------------------------------------------------------------------------
[1,27]<stdout>:Command line #1:
[1,27]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,28]<stdout>:AILLAGE=mesh,
[1,28]<stdout>:            AFFE=_F(
[1,28]<stdout>:                TOUT="OUI",
[1,28]<stdout>:                PHENOMENE="MECANIQUE",
[1,28]<stdout>:                MODELISATION="3D",
[1,28]<stdout>:            ),
[1,28]<stdout>:        )
[1,28]<stdout>:
[1,28]<stdout>:    with ChronoCtxMg("Material"):
[1,28]<stdout>:        steel = DEFI_MATERIAU(
[1,28]<stdout>:            ELAS=_F(
[1,28]<stdout>:                E=200000.0,
[1,28]<stdout>:                NU=0.3,
[1,28]<stdout>:            ),
[1,28]<stdout>:            ECRO_LINE=_F(
[1,28]<stdout>:                D_SIGM_EPSI=2000.0,
[1,28]<stdout>:                SY=200.0,
[1,28]<stdout>:            ),
[1,28]<stdout>:        )
[1,28]<stdout>:
[1,28]<stdout>:        mater = AFFE_MATERIAU(
[1,28]<stdout>:            MAILLAGE=mesh,
[1,28]<stdout>:            AFFE=_F(
[1,28]<stdout>:                TOUT="OUI",
[1,28]<stdout>:                MATER=steel,
[1,28]<stdout>:            ),
[1,28]<stdout>:        )
[1,28]<stdout>:
[1,28]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,28]<stdout>:        block = AFFE_CHAR_CINE(
[1,28]<stdout>:            MODELE=model,
[1,28]<stdout>:            MECA_IMPO=(
[1,28]<stdout>:                _F(
[1,28]<stdout>:                    GROUP_MA="LEFT",
[1,28]<stdout>:                    DX=0,
[1,28]<stdout>:                    DY=0.0,
[1,28]<stdout>:                    DZ=0.0,
[1,28]<stdout>:                ),
[1,28]<stdout>:            ),
[1,28]<stdout>:        )
[1,28]<stdout>:
[1,28]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,28]<stdout>:            MODELE=model,
[1,28]<stdout>:            MECA_IMPO=(
[1,28]<stdout>:                _F(
[1,28]<stdout>:                    GROUP_MA="RIGHT",
[1,28]<stdout>:                    DY=0.001,
[1,28]<stdout>:                    DZ=0.001,
[1,28]<stdout>:                ),
[1,28]<stdout>:            ),
[1,28]<stdout>:        )
[1,28]<stdout>:
[1,28]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,28]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,28]<stdout>:            MODELE=model,
[1,28]<stdout>:            OPTION="RIGI_MECA",
[1,28]<stdout>:            CHAM_MATER=mater,
[1,28]<stdout>:        )
[1,28]<stdout>:
[1,28]<stdout>:    with ChronoCtxMg("Numbering"):
[1,28]<stdout>:        dofNum = NUME_DDL(
[1,28]<stdout>:            MATR_RIGI=stiff_elem,
[1,28]<stdout>:        )
[1,28]<stdout>:
[1,28]<stdout>:    with ChronoCtxMg("Assembly"):
[1,28]<stdout>:        stiffness = ASSE_MATRICE(
[1,28]<stdout>:            MATR_ELEM=stiff_elem,
[1,28]<stdout>:            NUME_DDL=dofNum,
[1,28]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,28]<stdout>:        )
[1,28]<stdout>:
[1,28]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,28]<stdout>:        rhs = CREA_CHAMP(
[1,28]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,28]<stdout>:            OPERATION="AFFE",
[1,28]<stdout>:            MAILLAGE=mesh,
[1,28]<stdout>:            AFFE=_F(
[1,28]<stdout>:                TOUT="OUI",
[1,28]<stdout>:                NOM_CMP=(
[1,28]<stdout>:                    "DX",
[1,28]<stdout>:                    "DY",
[1,28]<stdout>:                    "DZ",
[1,28]<stdout>:                ),
[1,28]<stdout>:                VALE=(
[1,28]<stdout>:                    0.0,
[1,28]<stdout>:                    0.0,
[1,28]<stdout>:                    0.0,
[1,28]<stdout>:                ),
[1,28]<stdout>:            ),
[1,28]<stdout>:        )
[1,28]<stdout>:
[1,28]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,28]<stdout>:
[1,28]<stdout>:    if params["solver"] == "PETSC":
[1,28]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,28]<stdout>:    elif params["solver"] == "MUMPS":
[1,28]<stdout>:        solver = CA.MumpsSolver(
[1,28]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,28]<stdout>:            RENUM="PARMETIS",
[1,28]<stdout>:            ACCELERATION="FR+",
[1,28]<stdout>:            POSTTRAITEMENTS="MINI",
[1,28]<stdout>:        )
[1,28]<stdout>:
[1,28]<stdout>:    with ChronoCtxMg("Factorize"):
[1,28]<stdout>:        solver.factorize(stiffness)
[1,28]<stdout>:
[1,28]<stdout>:    with ChronoCtxMg("Solve"):
[1,28]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,28]<stdout>:
[1,28]<stdout>:# write_stats(dofNum)
[1,28]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,28]<stdout>:if params["parallel"] == "HPC":
[1,28]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,28]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,28]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,28]<stdout>:
[1,28]<stdout>:CA.close()
[1,28]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:# ------------------------------------------------------------------------------
[1,28]<stdout>:Command line #1:
[1,28]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,29]<stdout>:AILLAGE=mesh,
[1,29]<stdout>:            AFFE=_F(
[1,29]<stdout>:                TOUT="OUI",
[1,29]<stdout>:                PHENOMENE="MECANIQUE",
[1,29]<stdout>:                MODELISATION="3D",
[1,29]<stdout>:            ),
[1,29]<stdout>:        )
[1,29]<stdout>:
[1,29]<stdout>:    with ChronoCtxMg("Material"):
[1,29]<stdout>:        steel = DEFI_MATERIAU(
[1,29]<stdout>:            ELAS=_F(
[1,29]<stdout>:                E=200000.0,
[1,29]<stdout>:                NU=0.3,
[1,29]<stdout>:            ),
[1,29]<stdout>:            ECRO_LINE=_F(
[1,29]<stdout>:                D_SIGM_EPSI=2000.0,
[1,29]<stdout>:                SY=200.0,
[1,29]<stdout>:            ),
[1,29]<stdout>:        )
[1,29]<stdout>:
[1,29]<stdout>:        mater = AFFE_MATERIAU(
[1,29]<stdout>:            MAILLAGE=mesh,
[1,29]<stdout>:            AFFE=_F(
[1,29]<stdout>:                TOUT="OUI",
[1,29]<stdout>:                MATER=steel,
[1,29]<stdout>:            ),
[1,29]<stdout>:        )
[1,29]<stdout>:
[1,29]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,29]<stdout>:        block = AFFE_CHAR_CINE(
[1,29]<stdout>:            MODELE=model,
[1,29]<stdout>:            MECA_IMPO=(
[1,29]<stdout>:                _F(
[1,29]<stdout>:                    GROUP_MA="LEFT",
[1,29]<stdout>:                    DX=0,
[1,29]<stdout>:                    DY=0.0,
[1,29]<stdout>:                    DZ=0.0,
[1,29]<stdout>:                ),
[1,29]<stdout>:            ),
[1,29]<stdout>:        )
[1,29]<stdout>:
[1,29]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,29]<stdout>:            MODELE=model,
[1,29]<stdout>:            MECA_IMPO=(
[1,29]<stdout>:                _F(
[1,29]<stdout>:                    GROUP_MA="RIGHT",
[1,29]<stdout>:                    DY=0.001,
[1,29]<stdout>:                    DZ=0.001,
[1,29]<stdout>:                ),
[1,29]<stdout>:            ),
[1,29]<stdout>:        )
[1,29]<stdout>:
[1,29]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,29]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,29]<stdout>:            MODELE=model,
[1,29]<stdout>:            OPTION="RIGI_MECA",
[1,29]<stdout>:            CHAM_MATER=mater,
[1,29]<stdout>:        )
[1,29]<stdout>:
[1,29]<stdout>:    with ChronoCtxMg("Numbering"):
[1,29]<stdout>:        dofNum = NUME_DDL(
[1,29]<stdout>:            MATR_RIGI=stiff_elem,
[1,29]<stdout>:        )
[1,29]<stdout>:
[1,29]<stdout>:    with ChronoCtxMg("Assembly"):
[1,29]<stdout>:        stiffness = ASSE_MATRICE(
[1,29]<stdout>:            MATR_ELEM=stiff_elem,
[1,29]<stdout>:            NUME_DDL=dofNum,
[1,29]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,29]<stdout>:        )
[1,29]<stdout>:
[1,29]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,29]<stdout>:        rhs = CREA_CHAMP(
[1,29]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,29]<stdout>:            OPERATION="AFFE",
[1,29]<stdout>:            MAILLAGE=mesh,
[1,29]<stdout>:            AFFE=_F(
[1,29]<stdout>:                TOUT="OUI",
[1,29]<stdout>:                NOM_CMP=(
[1,29]<stdout>:                    "DX",
[1,29]<stdout>:                    "DY",
[1,29]<stdout>:                    "DZ",
[1,29]<stdout>:                ),
[1,29]<stdout>:                VALE=(
[1,29]<stdout>:                    0.0,
[1,29]<stdout>:                    0.0,
[1,29]<stdout>:                    0.0,
[1,29]<stdout>:                ),
[1,29]<stdout>:            ),
[1,29]<stdout>:        )
[1,29]<stdout>:
[1,29]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,29]<stdout>:
[1,29]<stdout>:    if params["solver"] == "PETSC":
[1,29]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,29]<stdout>:    elif params["solver"] == "MUMPS":
[1,29]<stdout>:        solver = CA.MumpsSolver(
[1,29]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,29]<stdout>:            RENUM="PARMETIS",
[1,29]<stdout>:            ACCELERATION="FR+",
[1,29]<stdout>:            POSTTRAITEMENTS="MINI",
[1,29]<stdout>:        )
[1,29]<stdout>:
[1,29]<stdout>:    with ChronoCtxMg("Factorize"):
[1,29]<stdout>:        solver.factorize(stiffness)
[1,29]<stdout>:
[1,29]<stdout>:    with ChronoCtxMg("Solve"):
[1,29]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,29]<stdout>:
[1,29]<stdout>:# write_stats(dofNum)
[1,29]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,29]<stdout>:if params["parallel"] == "HPC":
[1,29]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,29]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,29]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,29]<stdout>:
[1,29]<stdout>:CA.close()
[1,29]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:# ------------------------------------------------------------------------------
[1,29]<stdout>:Command line #1:
[1,29]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,0]<stdout>:ILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                PHENOMENE="MECANIQUE",
[1,0]<stdout>:                MODELISATION="3D",
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Material"):
[1,0]<stdout>:        steel = DEFI_MATERIAU(
[1,0]<stdout>:            ELAS=_F(
[1,0]<stdout>:                E=200000.0,
[1,0]<stdout>:                NU=0.3,
[1,0]<stdout>:            ),
[1,0]<stdout>:            ECRO_LINE=_F(
[1,0]<stdout>:                D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                SY=200.0,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        mater = AFFE_MATERIAU(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                MATER=steel,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,0]<stdout>:        block = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="LEFT",
[1,0]<stdout>:                    DX=0,
[1,0]<stdout>:                    DY=0.0,
[1,0]<stdout>:                    DZ=0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="RIGHT",
[1,0]<stdout>:                    DY=0.001,
[1,0]<stdout>:                    DZ=0.001,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,0]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            OPTION="RIGI_MECA",
[1,0]<stdout>:            CHAM_MATER=mater,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Numbering"):
[1,0]<stdout>:        dofNum = NUME_DDL(
[1,0]<stdout>:            MATR_RIGI=stiff_elem,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Assembly"):
[1,0]<stdout>:        stiffness = ASSE_MATRICE(
[1,0]<stdout>:            MATR_ELEM=stiff_elem,
[1,0]<stdout>:            NUME_DDL=dofNum,
[1,0]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,0]<stdout>:        rhs = CREA_CHAMP(
[1,0]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,0]<stdout>:            OPERATION="AFFE",
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                NOM_CMP=(
[1,0]<stdout>:                    "DX",
[1,0]<stdout>:                    "DY",
[1,0]<stdout>:                    "DZ",
[1,0]<stdout>:                ),
[1,0]<stdout>:                VALE=(
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,0]<stdout>:
[1,0]<stdout>:    if params["solver"] == "PETSC":
[1,0]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,0]<stdout>:    elif params["solver"] == "MUMPS":
[1,0]<stdout>:        solver = CA.MumpsSolver(
[1,0]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,0]<stdout>:            RENUM="PARMETIS",
[1,0]<stdout>:            ACCELERATION="FR+",
[1,0]<stdout>:            POSTTRAITEMENTS="MINI",
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Factorize"):
[1,0]<stdout>:        solver.factorize(stiffness)
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Solve"):
[1,0]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,0]<stdout>:
[1,0]<stdout>:# write_stats(dofNum)
[1,0]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,0]<stdout>:if params["parallel"] == "HPC":
[1,0]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,0]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,0]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,0]<stdout>:
[1,0]<stdout>:CA.close()
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command line #1:
[1,0]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,30]<stdout>:AILLAGE=mesh,
[1,30]<stdout>:            AFFE=_F(
[1,30]<stdout>:                TOUT="OUI",
[1,30]<stdout>:                PHENOMENE="MECANIQUE",
[1,30]<stdout>:                MODELISATION="3D",
[1,30]<stdout>:            ),
[1,30]<stdout>:        )
[1,30]<stdout>:
[1,30]<stdout>:    with ChronoCtxMg("Material"):
[1,30]<stdout>:        steel = DEFI_MATERIAU(
[1,30]<stdout>:            ELAS=_F(
[1,30]<stdout>:                E=200000.0,
[1,30]<stdout>:                NU=0.3,
[1,30]<stdout>:            ),
[1,30]<stdout>:            ECRO_LINE=_F(
[1,30]<stdout>:                D_SIGM_EPSI=2000.0,
[1,30]<stdout>:                SY=200.0,
[1,30]<stdout>:            ),
[1,30]<stdout>:        )
[1,30]<stdout>:
[1,30]<stdout>:        mater = AFFE_MATERIAU(
[1,30]<stdout>:            MAILLAGE=mesh,
[1,30]<stdout>:            AFFE=_F(
[1,30]<stdout>:                TOUT="OUI",
[1,30]<stdout>:                MATER=steel,
[1,30]<stdout>:            ),
[1,30]<stdout>:        )
[1,30]<stdout>:
[1,30]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,30]<stdout>:        block = AFFE_CHAR_CINE(
[1,30]<stdout>:            MODELE=model,
[1,30]<stdout>:            MECA_IMPO=(
[1,30]<stdout>:                _F(
[1,30]<stdout>:                    GROUP_MA="LEFT",
[1,30]<stdout>:                    DX=0,
[1,30]<stdout>:                    DY=0.0,
[1,30]<stdout>:                    DZ=0.0,
[1,30]<stdout>:                ),
[1,30]<stdout>:            ),
[1,30]<stdout>:        )
[1,30]<stdout>:
[1,30]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,30]<stdout>:            MODELE=model,
[1,30]<stdout>:            MECA_IMPO=(
[1,30]<stdout>:                _F(
[1,30]<stdout>:                    GROUP_MA="RIGHT",
[1,30]<stdout>:                    DY=0.001,
[1,30]<stdout>:                    DZ=0.001,
[1,30]<stdout>:                ),
[1,30]<stdout>:            ),
[1,30]<stdout>:        )
[1,30]<stdout>:
[1,30]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,30]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,30]<stdout>:            MODELE=model,
[1,30]<stdout>:            OPTION="RIGI_MECA",
[1,30]<stdout>:            CHAM_MATER=mater,
[1,30]<stdout>:        )
[1,30]<stdout>:
[1,30]<stdout>:    with ChronoCtxMg("Numbering"):
[1,30]<stdout>:        dofNum = NUME_DDL(
[1,30]<stdout>:            MATR_RIGI=stiff_elem,
[1,30]<stdout>:        )
[1,30]<stdout>:
[1,30]<stdout>:    with ChronoCtxMg("Assembly"):
[1,30]<stdout>:        stiffness = ASSE_MATRICE(
[1,30]<stdout>:            MATR_ELEM=stiff_elem,
[1,30]<stdout>:            NUME_DDL=dofNum,
[1,30]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,30]<stdout>:        )
[1,30]<stdout>:
[1,30]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,30]<stdout>:        rhs = CREA_CHAMP(
[1,30]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,30]<stdout>:            OPERATION="AFFE",
[1,30]<stdout>:            MAILLAGE=mesh,
[1,30]<stdout>:            AFFE=_F(
[1,30]<stdout>:                TOUT="OUI",
[1,30]<stdout>:                NOM_CMP=(
[1,30]<stdout>:                    "DX",
[1,30]<stdout>:                    "DY",
[1,30]<stdout>:                    "DZ",
[1,30]<stdout>:                ),
[1,30]<stdout>:                VALE=(
[1,30]<stdout>:                    0.0,
[1,30]<stdout>:                    0.0,
[1,30]<stdout>:                    0.0,
[1,30]<stdout>:                ),
[1,30]<stdout>:            ),
[1,30]<stdout>:        )
[1,30]<stdout>:
[1,30]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,30]<stdout>:
[1,30]<stdout>:    if params["solver"] == "PETSC":
[1,30]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,30]<stdout>:    elif params["solver"] == "MUMPS":
[1,30]<stdout>:        solver = CA.MumpsSolver(
[1,30]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,30]<stdout>:            RENUM="PARMETIS",
[1,30]<stdout>:            ACCELERATION="FR+",
[1,30]<stdout>:            POSTTRAITEMENTS="MINI",
[1,30]<stdout>:        )
[1,30]<stdout>:
[1,30]<stdout>:    with ChronoCtxMg("Factorize"):
[1,30]<stdout>:        solver.factorize(stiffness)
[1,30]<stdout>:
[1,30]<stdout>:    with ChronoCtxMg("Solve"):
[1,30]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,30]<stdout>:
[1,30]<stdout>:# write_stats(dofNum)
[1,30]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,30]<stdout>:if params["parallel"] == "HPC":
[1,30]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,30]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,30]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,30]<stdout>:
[1,30]<stdout>:CA.close()
[1,30]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:# ------------------------------------------------------------------------------
[1,30]<stdout>:Command line #1:
[1,30]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,1]<stdout>:ILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                PHENOMENE="MECANIQUE",
[1,1]<stdout>:                MODELISATION="3D",
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Material"):
[1,1]<stdout>:        steel = DEFI_MATERIAU(
[1,1]<stdout>:            ELAS=_F(
[1,1]<stdout>:                E=200000.0,
[1,1]<stdout>:                NU=0.3,
[1,1]<stdout>:            ),
[1,1]<stdout>:            ECRO_LINE=_F(
[1,1]<stdout>:                D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                SY=200.0,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        mater = AFFE_MATERIAU(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                MATER=steel,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,1]<stdout>:        block = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="LEFT",
[1,1]<stdout>:                    DX=0,
[1,1]<stdout>:                    DY=0.0,
[1,1]<stdout>:                    DZ=0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="RIGHT",
[1,1]<stdout>:                    DY=0.001,
[1,1]<stdout>:                    DZ=0.001,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,1]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            OPTION="RIGI_MECA",
[1,1]<stdout>:            CHAM_MATER=mater,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Numbering"):
[1,1]<stdout>:        dofNum = NUME_DDL(
[1,1]<stdout>:            MATR_RIGI=stiff_elem,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Assembly"):
[1,1]<stdout>:        stiffness = ASSE_MATRICE(
[1,1]<stdout>:            MATR_ELEM=stiff_elem,
[1,1]<stdout>:            NUME_DDL=dofNum,
[1,1]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,1]<stdout>:        rhs = CREA_CHAMP(
[1,1]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,1]<stdout>:            OPERATION="AFFE",
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                NOM_CMP=(
[1,1]<stdout>:                    "DX",
[1,1]<stdout>:                    "DY",
[1,1]<stdout>:                    "DZ",
[1,1]<stdout>:                ),
[1,1]<stdout>:                VALE=(
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,1]<stdout>:
[1,1]<stdout>:    if params["solver"] == "PETSC":
[1,1]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,1]<stdout>:    elif params["solver"] == "MUMPS":
[1,1]<stdout>:        solver = CA.MumpsSolver(
[1,1]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,1]<stdout>:            RENUM="PARMETIS",
[1,1]<stdout>:            ACCELERATION="FR+",
[1,1]<stdout>:            POSTTRAITEMENTS="MINI",
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Factorize"):
[1,1]<stdout>:        solver.factorize(stiffness)
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Solve"):
[1,1]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,1]<stdout>:
[1,1]<stdout>:# write_stats(dofNum)
[1,1]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,1]<stdout>:if params["parallel"] == "HPC":
[1,1]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,1]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,1]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,1]<stdout>:
[1,1]<stdout>:CA.close()
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command line #1:
[1,1]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,2]<stdout>:ILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                PHENOMENE="MECANIQUE",
[1,2]<stdout>:                MODELISATION="3D",
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Material"):
[1,2]<stdout>:        steel = DEFI_MATERIAU(
[1,2]<stdout>:            ELAS=_F(
[1,2]<stdout>:                E=200000.0,
[1,2]<stdout>:                NU=0.3,
[1,2]<stdout>:            ),
[1,2]<stdout>:            ECRO_LINE=_F(
[1,2]<stdout>:                D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                SY=200.0,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        mater = AFFE_MATERIAU(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                MATER=steel,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,2]<stdout>:        block = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="LEFT",
[1,2]<stdout>:                    DX=0,
[1,2]<stdout>:                    DY=0.0,
[1,2]<stdout>:                    DZ=0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="RIGHT",
[1,2]<stdout>:                    DY=0.001,
[1,2]<stdout>:                    DZ=0.001,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,2]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            OPTION="RIGI_MECA",
[1,2]<stdout>:            CHAM_MATER=mater,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Numbering"):
[1,2]<stdout>:        dofNum = NUME_DDL(
[1,2]<stdout>:            MATR_RIGI=stiff_elem,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Assembly"):
[1,2]<stdout>:        stiffness = ASSE_MATRICE(
[1,2]<stdout>:            MATR_ELEM=stiff_elem,
[1,2]<stdout>:            NUME_DDL=dofNum,
[1,2]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,2]<stdout>:        rhs = CREA_CHAMP(
[1,2]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,2]<stdout>:            OPERATION="AFFE",
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                NOM_CMP=(
[1,2]<stdout>:                    "DX",
[1,2]<stdout>:                    "DY",
[1,2]<stdout>:                    "DZ",
[1,2]<stdout>:                ),
[1,2]<stdout>:                VALE=(
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,2]<stdout>:
[1,2]<stdout>:    if params["solver"] == "PETSC":
[1,2]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,2]<stdout>:    elif params["solver"] == "MUMPS":
[1,2]<stdout>:        solver = CA.MumpsSolver(
[1,2]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,2]<stdout>:            RENUM="PARMETIS",
[1,2]<stdout>:            ACCELERATION="FR+",
[1,2]<stdout>:            POSTTRAITEMENTS="MINI",
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Factorize"):
[1,2]<stdout>:        solver.factorize(stiffness)
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Solve"):
[1,2]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,2]<stdout>:
[1,2]<stdout>:# write_stats(dofNum)
[1,2]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,2]<stdout>:if params["parallel"] == "HPC":
[1,2]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,2]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,2]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,2]<stdout>:
[1,2]<stdout>:CA.close()
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command line #1:
[1,2]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,3]<stdout>:ILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                PHENOMENE="MECANIQUE",
[1,3]<stdout>:                MODELISATION="3D",
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Material"):
[1,3]<stdout>:        steel = DEFI_MATERIAU(
[1,3]<stdout>:            ELAS=_F(
[1,3]<stdout>:                E=200000.0,
[1,3]<stdout>:                NU=0.3,
[1,3]<stdout>:            ),
[1,3]<stdout>:            ECRO_LINE=_F(
[1,3]<stdout>:                D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                SY=200.0,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        mater = AFFE_MATERIAU(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                MATER=steel,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,3]<stdout>:        block = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="LEFT",
[1,3]<stdout>:                    DX=0,
[1,3]<stdout>:                    DY=0.0,
[1,3]<stdout>:                    DZ=0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="RIGHT",
[1,3]<stdout>:                    DY=0.001,
[1,3]<stdout>:                    DZ=0.001,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,3]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            OPTION="RIGI_MECA",
[1,3]<stdout>:            CHAM_MATER=mater,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Numbering"):
[1,3]<stdout>:        dofNum = NUME_DDL(
[1,3]<stdout>:            MATR_RIGI=stiff_elem,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Assembly"):
[1,3]<stdout>:        stiffness = ASSE_MATRICE(
[1,3]<stdout>:            MATR_ELEM=stiff_elem,
[1,3]<stdout>:            NUME_DDL=dofNum,
[1,3]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,3]<stdout>:        rhs = CREA_CHAMP(
[1,3]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,3]<stdout>:            OPERATION="AFFE",
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                NOM_CMP=(
[1,3]<stdout>:                    "DX",
[1,3]<stdout>:                    "DY",
[1,3]<stdout>:                    "DZ",
[1,3]<stdout>:                ),
[1,3]<stdout>:                VALE=(
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,3]<stdout>:
[1,3]<stdout>:    if params["solver"] == "PETSC":
[1,3]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,3]<stdout>:    elif params["solver"] == "MUMPS":
[1,3]<stdout>:        solver = CA.MumpsSolver(
[1,3]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,3]<stdout>:            RENUM="PARMETIS",
[1,3]<stdout>:            ACCELERATION="FR+",
[1,3]<stdout>:            POSTTRAITEMENTS="MINI",
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Factorize"):
[1,3]<stdout>:        solver.factorize(stiffness)
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Solve"):
[1,3]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,3]<stdout>:
[1,3]<stdout>:# write_stats(dofNum)
[1,3]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,3]<stdout>:if params["parallel"] == "HPC":
[1,3]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,3]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,3]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,3]<stdout>:
[1,3]<stdout>:CA.close()
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command line #1:
[1,3]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,4]<stdout>:ILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                PHENOMENE="MECANIQUE",
[1,4]<stdout>:                MODELISATION="3D",
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Material"):
[1,4]<stdout>:        steel = DEFI_MATERIAU(
[1,4]<stdout>:            ELAS=_F(
[1,4]<stdout>:                E=200000.0,
[1,4]<stdout>:                NU=0.3,
[1,4]<stdout>:            ),
[1,4]<stdout>:            ECRO_LINE=_F(
[1,4]<stdout>:                D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                SY=200.0,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        mater = AFFE_MATERIAU(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                MATER=steel,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,4]<stdout>:        block = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="LEFT",
[1,4]<stdout>:                    DX=0,
[1,4]<stdout>:                    DY=0.0,
[1,4]<stdout>:                    DZ=0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="RIGHT",
[1,4]<stdout>:                    DY=0.001,
[1,4]<stdout>:                    DZ=0.001,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,4]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            OPTION="RIGI_MECA",
[1,4]<stdout>:            CHAM_MATER=mater,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Numbering"):
[1,4]<stdout>:        dofNum = NUME_DDL(
[1,4]<stdout>:            MATR_RIGI=stiff_elem,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Assembly"):
[1,4]<stdout>:        stiffness = ASSE_MATRICE(
[1,4]<stdout>:            MATR_ELEM=stiff_elem,
[1,4]<stdout>:            NUME_DDL=dofNum,
[1,4]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,4]<stdout>:        rhs = CREA_CHAMP(
[1,4]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,4]<stdout>:            OPERATION="AFFE",
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                NOM_CMP=(
[1,4]<stdout>:                    "DX",
[1,4]<stdout>:                    "DY",
[1,4]<stdout>:                    "DZ",
[1,4]<stdout>:                ),
[1,4]<stdout>:                VALE=(
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,4]<stdout>:
[1,4]<stdout>:    if params["solver"] == "PETSC":
[1,4]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,4]<stdout>:    elif params["solver"] == "MUMPS":
[1,4]<stdout>:        solver = CA.MumpsSolver(
[1,4]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,4]<stdout>:            RENUM="PARMETIS",
[1,4]<stdout>:            ACCELERATION="FR+",
[1,4]<stdout>:            POSTTRAITEMENTS="MINI",
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Factorize"):
[1,4]<stdout>:        solver.factorize(stiffness)
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Solve"):
[1,4]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,4]<stdout>:
[1,4]<stdout>:# write_stats(dofNum)
[1,4]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,4]<stdout>:if params["parallel"] == "HPC":
[1,4]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,4]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,4]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,4]<stdout>:
[1,4]<stdout>:CA.close()
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command line #1:
[1,4]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,5]<stdout>:ILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                PHENOMENE="MECANIQUE",
[1,5]<stdout>:                MODELISATION="3D",
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Material"):
[1,5]<stdout>:        steel = DEFI_MATERIAU(
[1,5]<stdout>:            ELAS=_F(
[1,5]<stdout>:                E=200000.0,
[1,5]<stdout>:                NU=0.3,
[1,5]<stdout>:            ),
[1,5]<stdout>:            ECRO_LINE=_F(
[1,5]<stdout>:                D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                SY=200.0,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        mater = AFFE_MATERIAU(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                MATER=steel,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,5]<stdout>:        block = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="LEFT",
[1,5]<stdout>:                    DX=0,
[1,5]<stdout>:                    DY=0.0,
[1,5]<stdout>:                    DZ=0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="RIGHT",
[1,5]<stdout>:                    DY=0.001,
[1,5]<stdout>:                    DZ=0.001,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,5]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            OPTION="RIGI_MECA",
[1,5]<stdout>:            CHAM_MATER=mater,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Numbering"):
[1,5]<stdout>:        dofNum = NUME_DDL(
[1,5]<stdout>:            MATR_RIGI=stiff_elem,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Assembly"):
[1,5]<stdout>:        stiffness = ASSE_MATRICE(
[1,5]<stdout>:            MATR_ELEM=stiff_elem,
[1,5]<stdout>:            NUME_DDL=dofNum,
[1,5]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,5]<stdout>:        rhs = CREA_CHAMP(
[1,5]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,5]<stdout>:            OPERATION="AFFE",
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                NOM_CMP=(
[1,5]<stdout>:                    "DX",
[1,5]<stdout>:                    "DY",
[1,5]<stdout>:                    "DZ",
[1,5]<stdout>:                ),
[1,5]<stdout>:                VALE=(
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,5]<stdout>:
[1,5]<stdout>:    if params["solver"] == "PETSC":
[1,5]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,5]<stdout>:    elif params["solver"] == "MUMPS":
[1,5]<stdout>:        solver = CA.MumpsSolver(
[1,5]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,5]<stdout>:            RENUM="PARMETIS",
[1,5]<stdout>:            ACCELERATION="FR+",
[1,5]<stdout>:            POSTTRAITEMENTS="MINI",
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Factorize"):
[1,5]<stdout>:        solver.factorize(stiffness)
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Solve"):
[1,5]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,5]<stdout>:
[1,5]<stdout>:# write_stats(dofNum)
[1,5]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,5]<stdout>:if params["parallel"] == "HPC":
[1,5]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,5]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,5]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,5]<stdout>:
[1,5]<stdout>:CA.close()
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command line #1:
[1,5]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,6]<stdout>:ILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                PHENOMENE="MECANIQUE",
[1,6]<stdout>:                MODELISATION="3D",
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Material"):
[1,6]<stdout>:        steel = DEFI_MATERIAU(
[1,6]<stdout>:            ELAS=_F(
[1,6]<stdout>:                E=200000.0,
[1,6]<stdout>:                NU=0.3,
[1,6]<stdout>:            ),
[1,6]<stdout>:            ECRO_LINE=_F(
[1,6]<stdout>:                D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                SY=200.0,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        mater = AFFE_MATERIAU(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                MATER=steel,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,6]<stdout>:        block = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="LEFT",
[1,6]<stdout>:                    DX=0,
[1,6]<stdout>:                    DY=0.0,
[1,6]<stdout>:                    DZ=0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="RIGHT",
[1,6]<stdout>:                    DY=0.001,
[1,6]<stdout>:                    DZ=0.001,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,6]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            OPTION="RIGI_MECA",
[1,6]<stdout>:            CHAM_MATER=mater,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Numbering"):
[1,6]<stdout>:        dofNum = NUME_DDL(
[1,6]<stdout>:            MATR_RIGI=stiff_elem,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Assembly"):
[1,6]<stdout>:        stiffness = ASSE_MATRICE(
[1,6]<stdout>:            MATR_ELEM=stiff_elem,
[1,6]<stdout>:            NUME_DDL=dofNum,
[1,6]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,6]<stdout>:        rhs = CREA_CHAMP(
[1,6]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,6]<stdout>:            OPERATION="AFFE",
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                NOM_CMP=(
[1,6]<stdout>:                    "DX",
[1,6]<stdout>:                    "DY",
[1,6]<stdout>:                    "DZ",
[1,6]<stdout>:                ),
[1,6]<stdout>:                VALE=(
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,6]<stdout>:
[1,6]<stdout>:    if params["solver"] == "PETSC":
[1,6]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,6]<stdout>:    elif params["solver"] == "MUMPS":
[1,6]<stdout>:        solver = CA.MumpsSolver(
[1,6]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,6]<stdout>:            RENUM="PARMETIS",
[1,6]<stdout>:            ACCELERATION="FR+",
[1,6]<stdout>:            POSTTRAITEMENTS="MINI",
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Factorize"):
[1,6]<stdout>:        solver.factorize(stiffness)
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Solve"):
[1,6]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,6]<stdout>:
[1,6]<stdout>:# write_stats(dofNum)
[1,6]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,6]<stdout>:if params["parallel"] == "HPC":
[1,6]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,6]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,6]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,6]<stdout>:
[1,6]<stdout>:CA.close()
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command line #1:
[1,6]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,7]<stdout>:ILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                PHENOMENE="MECANIQUE",
[1,7]<stdout>:                MODELISATION="3D",
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Material"):
[1,7]<stdout>:        steel = DEFI_MATERIAU(
[1,7]<stdout>:            ELAS=_F(
[1,7]<stdout>:                E=200000.0,
[1,7]<stdout>:                NU=0.3,
[1,7]<stdout>:            ),
[1,7]<stdout>:            ECRO_LINE=_F(
[1,7]<stdout>:                D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                SY=200.0,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        mater = AFFE_MATERIAU(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                MATER=steel,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,7]<stdout>:        block = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="LEFT",
[1,7]<stdout>:                    DX=0,
[1,7]<stdout>:                    DY=0.0,
[1,7]<stdout>:                    DZ=0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="RIGHT",
[1,7]<stdout>:                    DY=0.001,
[1,7]<stdout>:                    DZ=0.001,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,7]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            OPTION="RIGI_MECA",
[1,7]<stdout>:            CHAM_MATER=mater,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Numbering"):
[1,7]<stdout>:        dofNum = NUME_DDL(
[1,7]<stdout>:            MATR_RIGI=stiff_elem,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Assembly"):
[1,7]<stdout>:        stiffness = ASSE_MATRICE(
[1,7]<stdout>:            MATR_ELEM=stiff_elem,
[1,7]<stdout>:            NUME_DDL=dofNum,
[1,7]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,7]<stdout>:        rhs = CREA_CHAMP(
[1,7]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,7]<stdout>:            OPERATION="AFFE",
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                NOM_CMP=(
[1,7]<stdout>:                    "DX",
[1,7]<stdout>:                    "DY",
[1,7]<stdout>:                    "DZ",
[1,7]<stdout>:                ),
[1,7]<stdout>:                VALE=(
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,7]<stdout>:
[1,7]<stdout>:    if params["solver"] == "PETSC":
[1,7]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,7]<stdout>:    elif params["solver"] == "MUMPS":
[1,7]<stdout>:        solver = CA.MumpsSolver(
[1,7]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,7]<stdout>:            RENUM="PARMETIS",
[1,7]<stdout>:            ACCELERATION="FR+",
[1,7]<stdout>:            POSTTRAITEMENTS="MINI",
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Factorize"):
[1,7]<stdout>:        solver.factorize(stiffness)
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Solve"):
[1,7]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,7]<stdout>:
[1,7]<stdout>:# write_stats(dofNum)
[1,7]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,7]<stdout>:if params["parallel"] == "HPC":
[1,7]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,7]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,7]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,7]<stdout>:
[1,7]<stdout>:CA.close()
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command line #1:
[1,7]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,8]<stdout>:ILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                PHENOMENE="MECANIQUE",
[1,8]<stdout>:                MODELISATION="3D",
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Material"):
[1,8]<stdout>:        steel = DEFI_MATERIAU(
[1,8]<stdout>:            ELAS=_F(
[1,8]<stdout>:                E=200000.0,
[1,8]<stdout>:                NU=0.3,
[1,8]<stdout>:            ),
[1,8]<stdout>:            ECRO_LINE=_F(
[1,8]<stdout>:                D_SIGM_EPSI=2000.0,
[1,8]<stdout>:                SY=200.0,
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        mater = AFFE_MATERIAU(
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                MATER=steel,
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,8]<stdout>:        block = AFFE_CHAR_CINE(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            MECA_IMPO=(
[1,8]<stdout>:                _F(
[1,8]<stdout>:                    GROUP_MA="LEFT",
[1,8]<stdout>:                    DX=0,
[1,8]<stdout>:                    DY=0.0,
[1,8]<stdout>:                    DZ=0.0,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            MECA_IMPO=(
[1,8]<stdout>:                _F(
[1,8]<stdout>:                    GROUP_MA="RIGHT",
[1,8]<stdout>:                    DY=0.001,
[1,8]<stdout>:                    DZ=0.001,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,8]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            OPTION="RIGI_MECA",
[1,8]<stdout>:            CHAM_MATER=mater,
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Numbering"):
[1,8]<stdout>:        dofNum = NUME_DDL(
[1,8]<stdout>:            MATR_RIGI=stiff_elem,
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Assembly"):
[1,8]<stdout>:        stiffness = ASSE_MATRICE(
[1,8]<stdout>:            MATR_ELEM=stiff_elem,
[1,8]<stdout>:            NUME_DDL=dofNum,
[1,8]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,8]<stdout>:        rhs = CREA_CHAMP(
[1,8]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,8]<stdout>:            OPERATION="AFFE",
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                NOM_CMP=(
[1,8]<stdout>:                    "DX",
[1,8]<stdout>:                    "DY",
[1,8]<stdout>:                    "DZ",
[1,8]<stdout>:                ),
[1,8]<stdout>:                VALE=(
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,8]<stdout>:
[1,8]<stdout>:    if params["solver"] == "PETSC":
[1,8]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,8]<stdout>:    elif params["solver"] == "MUMPS":
[1,8]<stdout>:        solver = CA.MumpsSolver(
[1,8]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,8]<stdout>:            RENUM="PARMETIS",
[1,8]<stdout>:            ACCELERATION="FR+",
[1,8]<stdout>:            POSTTRAITEMENTS="MINI",
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Factorize"):
[1,8]<stdout>:        solver.factorize(stiffness)
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Solve"):
[1,8]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,8]<stdout>:
[1,8]<stdout>:# write_stats(dofNum)
[1,8]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,8]<stdout>:if params["parallel"] == "HPC":
[1,8]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,8]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,8]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,8]<stdout>:
[1,8]<stdout>:CA.close()
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Command line #1:
[1,8]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,9]<stdout>:ILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                PHENOMENE="MECANIQUE",
[1,9]<stdout>:                MODELISATION="3D",
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Material"):
[1,9]<stdout>:        steel = DEFI_MATERIAU(
[1,9]<stdout>:            ELAS=_F(
[1,9]<stdout>:                E=200000.0,
[1,9]<stdout>:                NU=0.3,
[1,9]<stdout>:            ),
[1,9]<stdout>:            ECRO_LINE=_F(
[1,9]<stdout>:                D_SIGM_EPSI=2000.0,
[1,9]<stdout>:                SY=200.0,
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        mater = AFFE_MATERIAU(
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                MATER=steel,
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,9]<stdout>:        block = AFFE_CHAR_CINE(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            MECA_IMPO=(
[1,9]<stdout>:                _F(
[1,9]<stdout>:                    GROUP_MA="LEFT",
[1,9]<stdout>:                    DX=0,
[1,9]<stdout>:                    DY=0.0,
[1,9]<stdout>:                    DZ=0.0,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            MECA_IMPO=(
[1,9]<stdout>:                _F(
[1,9]<stdout>:                    GROUP_MA="RIGHT",
[1,9]<stdout>:                    DY=0.001,
[1,9]<stdout>:                    DZ=0.001,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,9]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            OPTION="RIGI_MECA",
[1,9]<stdout>:            CHAM_MATER=mater,
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Numbering"):
[1,9]<stdout>:        dofNum = NUME_DDL(
[1,9]<stdout>:            MATR_RIGI=stiff_elem,
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Assembly"):
[1,9]<stdout>:        stiffness = ASSE_MATRICE(
[1,9]<stdout>:            MATR_ELEM=stiff_elem,
[1,9]<stdout>:            NUME_DDL=dofNum,
[1,9]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,9]<stdout>:        rhs = CREA_CHAMP(
[1,9]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,9]<stdout>:            OPERATION="AFFE",
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                NOM_CMP=(
[1,9]<stdout>:                    "DX",
[1,9]<stdout>:                    "DY",
[1,9]<stdout>:                    "DZ",
[1,9]<stdout>:                ),
[1,9]<stdout>:                VALE=(
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,9]<stdout>:
[1,9]<stdout>:    if params["solver"] == "PETSC":
[1,9]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,9]<stdout>:    elif params["solver"] == "MUMPS":
[1,9]<stdout>:        solver = CA.MumpsSolver(
[1,9]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,9]<stdout>:            RENUM="PARMETIS",
[1,9]<stdout>:            ACCELERATION="FR+",
[1,9]<stdout>:            POSTTRAITEMENTS="MINI",
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Factorize"):
[1,9]<stdout>:        solver.factorize(stiffness)
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Solve"):
[1,9]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,9]<stdout>:
[1,9]<stdout>:# write_stats(dofNum)
[1,9]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,9]<stdout>:if params["parallel"] == "HPC":
[1,9]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,9]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,9]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,9]<stdout>:
[1,9]<stdout>:CA.close()
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Command line #1:
[1,9]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,10]<stdout>:AILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                PHENOMENE="MECANIQUE",
[1,10]<stdout>:                MODELISATION="3D",
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Material"):
[1,10]<stdout>:        steel = DEFI_MATERIAU(
[1,10]<stdout>:            ELAS=_F(
[1,10]<stdout>:                E=200000.0,
[1,10]<stdout>:                NU=0.3,
[1,10]<stdout>:            ),
[1,10]<stdout>:            ECRO_LINE=_F(
[1,10]<stdout>:                D_SIGM_EPSI=2000.0,
[1,10]<stdout>:                SY=200.0,
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        mater = AFFE_MATERIAU(
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                MATER=steel,
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,10]<stdout>:        block = AFFE_CHAR_CINE(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            MECA_IMPO=(
[1,10]<stdout>:                _F(
[1,10]<stdout>:                    GROUP_MA="LEFT",
[1,10]<stdout>:                    DX=0,
[1,10]<stdout>:                    DY=0.0,
[1,10]<stdout>:                    DZ=0.0,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            MECA_IMPO=(
[1,10]<stdout>:                _F(
[1,10]<stdout>:                    GROUP_MA="RIGHT",
[1,10]<stdout>:                    DY=0.001,
[1,10]<stdout>:                    DZ=0.001,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,10]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            OPTION="RIGI_MECA",
[1,10]<stdout>:            CHAM_MATER=mater,
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Numbering"):
[1,10]<stdout>:        dofNum = NUME_DDL(
[1,10]<stdout>:            MATR_RIGI=stiff_elem,
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Assembly"):
[1,10]<stdout>:        stiffness = ASSE_MATRICE(
[1,10]<stdout>:            MATR_ELEM=stiff_elem,
[1,10]<stdout>:            NUME_DDL=dofNum,
[1,10]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,10]<stdout>:        rhs = CREA_CHAMP(
[1,10]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,10]<stdout>:            OPERATION="AFFE",
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                NOM_CMP=(
[1,10]<stdout>:                    "DX",
[1,10]<stdout>:                    "DY",
[1,10]<stdout>:                    "DZ",
[1,10]<stdout>:                ),
[1,10]<stdout>:                VALE=(
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,10]<stdout>:
[1,10]<stdout>:    if params["solver"] == "PETSC":
[1,10]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,10]<stdout>:    elif params["solver"] == "MUMPS":
[1,10]<stdout>:        solver = CA.MumpsSolver(
[1,10]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,10]<stdout>:            RENUM="PARMETIS",
[1,10]<stdout>:            ACCELERATION="FR+",
[1,10]<stdout>:            POSTTRAITEMENTS="MINI",
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Factorize"):
[1,10]<stdout>:        solver.factorize(stiffness)
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Solve"):
[1,10]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,10]<stdout>:
[1,10]<stdout>:# write_stats(dofNum)
[1,10]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,10]<stdout>:if params["parallel"] == "HPC":
[1,10]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,10]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,10]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,10]<stdout>:
[1,10]<stdout>:CA.close()
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Command line #1:
[1,10]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,11]<stdout>:AILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                PHENOMENE="MECANIQUE",
[1,11]<stdout>:                MODELISATION="3D",
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Material"):
[1,11]<stdout>:        steel = DEFI_MATERIAU(
[1,11]<stdout>:            ELAS=_F(
[1,11]<stdout>:                E=200000.0,
[1,11]<stdout>:                NU=0.3,
[1,11]<stdout>:            ),
[1,11]<stdout>:            ECRO_LINE=_F(
[1,11]<stdout>:                D_SIGM_EPSI=2000.0,
[1,11]<stdout>:                SY=200.0,
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        mater = AFFE_MATERIAU(
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                MATER=steel,
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,11]<stdout>:        block = AFFE_CHAR_CINE(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            MECA_IMPO=(
[1,11]<stdout>:                _F(
[1,11]<stdout>:                    GROUP_MA="LEFT",
[1,11]<stdout>:                    DX=0,
[1,11]<stdout>:                    DY=0.0,
[1,11]<stdout>:                    DZ=0.0,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            MECA_IMPO=(
[1,11]<stdout>:                _F(
[1,11]<stdout>:                    GROUP_MA="RIGHT",
[1,11]<stdout>:                    DY=0.001,
[1,11]<stdout>:                    DZ=0.001,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,11]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            OPTION="RIGI_MECA",
[1,11]<stdout>:            CHAM_MATER=mater,
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Numbering"):
[1,11]<stdout>:        dofNum = NUME_DDL(
[1,11]<stdout>:            MATR_RIGI=stiff_elem,
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Assembly"):
[1,11]<stdout>:        stiffness = ASSE_MATRICE(
[1,11]<stdout>:            MATR_ELEM=stiff_elem,
[1,11]<stdout>:            NUME_DDL=dofNum,
[1,11]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,11]<stdout>:        rhs = CREA_CHAMP(
[1,11]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,11]<stdout>:            OPERATION="AFFE",
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                NOM_CMP=(
[1,11]<stdout>:                    "DX",
[1,11]<stdout>:                    "DY",
[1,11]<stdout>:                    "DZ",
[1,11]<stdout>:                ),
[1,11]<stdout>:                VALE=(
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,11]<stdout>:
[1,11]<stdout>:    if params["solver"] == "PETSC":
[1,11]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,11]<stdout>:    elif params["solver"] == "MUMPS":
[1,11]<stdout>:        solver = CA.MumpsSolver(
[1,11]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,11]<stdout>:            RENUM="PARMETIS",
[1,11]<stdout>:            ACCELERATION="FR+",
[1,11]<stdout>:            POSTTRAITEMENTS="MINI",
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Factorize"):
[1,11]<stdout>:        solver.factorize(stiffness)
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Solve"):
[1,11]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,11]<stdout>:
[1,11]<stdout>:# write_stats(dofNum)
[1,11]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,11]<stdout>:if params["parallel"] == "HPC":
[1,11]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,11]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,11]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,11]<stdout>:
[1,11]<stdout>:CA.close()
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Command line #1:
[1,11]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,12]<stdout>:AILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                PHENOMENE="MECANIQUE",
[1,12]<stdout>:                MODELISATION="3D",
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Material"):
[1,12]<stdout>:        steel = DEFI_MATERIAU(
[1,12]<stdout>:            ELAS=_F(
[1,12]<stdout>:                E=200000.0,
[1,12]<stdout>:                NU=0.3,
[1,12]<stdout>:            ),
[1,12]<stdout>:            ECRO_LINE=_F(
[1,12]<stdout>:                D_SIGM_EPSI=2000.0,
[1,12]<stdout>:                SY=200.0,
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        mater = AFFE_MATERIAU(
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                MATER=steel,
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,12]<stdout>:        block = AFFE_CHAR_CINE(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            MECA_IMPO=(
[1,12]<stdout>:                _F(
[1,12]<stdout>:                    GROUP_MA="LEFT",
[1,12]<stdout>:                    DX=0,
[1,12]<stdout>:                    DY=0.0,
[1,12]<stdout>:                    DZ=0.0,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            MECA_IMPO=(
[1,12]<stdout>:                _F(
[1,12]<stdout>:                    GROUP_MA="RIGHT",
[1,12]<stdout>:                    DY=0.001,
[1,12]<stdout>:                    DZ=0.001,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,12]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            OPTION="RIGI_MECA",
[1,12]<stdout>:            CHAM_MATER=mater,
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Numbering"):
[1,12]<stdout>:        dofNum = NUME_DDL(
[1,12]<stdout>:            MATR_RIGI=stiff_elem,
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Assembly"):
[1,12]<stdout>:        stiffness = ASSE_MATRICE(
[1,12]<stdout>:            MATR_ELEM=stiff_elem,
[1,12]<stdout>:            NUME_DDL=dofNum,
[1,12]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,12]<stdout>:        rhs = CREA_CHAMP(
[1,12]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,12]<stdout>:            OPERATION="AFFE",
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                NOM_CMP=(
[1,12]<stdout>:                    "DX",
[1,12]<stdout>:                    "DY",
[1,12]<stdout>:                    "DZ",
[1,12]<stdout>:                ),
[1,12]<stdout>:                VALE=(
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,12]<stdout>:
[1,12]<stdout>:    if params["solver"] == "PETSC":
[1,12]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,12]<stdout>:    elif params["solver"] == "MUMPS":
[1,12]<stdout>:        solver = CA.MumpsSolver(
[1,12]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,12]<stdout>:            RENUM="PARMETIS",
[1,12]<stdout>:            ACCELERATION="FR+",
[1,12]<stdout>:            POSTTRAITEMENTS="MINI",
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Factorize"):
[1,12]<stdout>:        solver.factorize(stiffness)
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Solve"):
[1,12]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,12]<stdout>:
[1,12]<stdout>:# write_stats(dofNum)
[1,12]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,12]<stdout>:if params["parallel"] == "HPC":
[1,12]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,12]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,12]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,12]<stdout>:
[1,12]<stdout>:CA.close()
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Command line #1:
[1,12]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,31]<stdout>:
[1,31]<stdout>:# ------------------------------------------------------------------------------
[1,31]<stdout>:Execution of code_aster
[1,31]<stdout>:
[1,31]<stdout>:# ------------------------------------------------------------------------------
[1,31]<stdout>:Prepare environment in /tmp/run_aster_jnzipism/proc.31
[1,31]<stdout>:
[1,31]<stdout>:# ------------------------------------------------------------------------------
[1,31]<stdout>:Command file #1 / 1
[1,31]<stdout>:
[1,31]<stdout>:Content of the file to execute:
[1,31]<stdout>:# coding=utf-8
[1,31]<stdout>:#!/usr/bin/python
[1,31]<stdout>:
[1,31]<stdout>:import os
[1,31]<stdout>:from statistics import mean
[1,31]<stdout>:from datetime import datetime
[1,31]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,31]<stdout>:
[1,31]<stdout>:from code_aster.Commands import *
[1,31]<stdout>:from code_aster import CA
[1,31]<stdout>:from code_aster.Utilities import petscInitialize
[1,31]<stdout>:
[1,31]<stdout>:CA.init()
[1,31]<stdout>:
[1,31]<stdout>:params = {}
[1,31]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,31]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,31]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,31]<stdout>:
[1,31]<stdout>:# General parameters
[1,31]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,31]<stdout>:rank = comm.Get_rank()
[1,31]<stdout>:size = comm.Get_size()
[1,31]<stdout>:
[1,31]<stdout>:nbHexa = 8 ** params["refinements"]
[1,31]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:def memory_peak(mess=None):
[1,31]<stdout>:    """Return memory peak in MB"""
[1,31]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,31]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:class ChronoCtxMgGen:
[1,31]<stdout>:    stats = {}
[1,31]<stdout>:
[1,31]<stdout>:    def __init__(self, what):
[1,31]<stdout>:        self._what = what
[1,31]<stdout>:
[1,31]<stdout>:    def __enter__(self):
[1,31]<stdout>:        self.start = datetime.now()
[1,31]<stdout>:
[1,31]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,31]<stdout>:        self.stop = datetime.now()
[1,31]<stdout>:        delta = self.stop - self.start
[1,31]<stdout>:        mem = memory_peak(self._what)
[1,31]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,31]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,31]<stdout>:    pass
[1,31]<stdout>:    # def __init__(self, what):
[1,31]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,31]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:def write_stats(nume_ddl):
[1,31]<stdout>:    if rank == 0:
[1,31]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,31]<stdout>:        print()
[1,31]<stdout>:        print("NB PROC")
[1,31]<stdout>:        print(size)
[1,31]<stdout>:        print()
[1,31]<stdout>:        print(
[1,31]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,31]<stdout>:        )
[1,31]<stdout>:
[1,31]<stdout>:    for key, values in stats.items():
[1,31]<stdout>:        time = comm.gather(values[0], root=0)
[1,31]<stdout>:        mem = comm.gather(values[1], root=0)
[1,31]<stdout>:        if rank == 0:
[1,31]<stdout>:            print(
[1,31]<stdout>:                key
[1,31]<stdout>:                + ", "
[1,31]<stdout>:                + str(min(time))
[1,31]<stdout>:                + ", "
[1,31]<stdout>:                + str(max(time))
[1,31]<stdout>:                + ", "
[1,31]<stdout>:                + str(mean(time))
[1,31]<stdout>:                + ", "
[1,31]<stdout>:                + str(min(mem))
[1,31]<stdout>:                + ", "
[1,31]<stdout>:                + str(max(mem))
[1,31]<stdout>:                + ", "
[1,31]<stdout>:                + str(mean(mem))
[1,31]<stdout>:            )
[1,31]<stdout>:
[1,31]<stdout>:    mesh = nume_ddl.getMesh()
[1,31]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,31]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,31]<stdout>:
[1,31]<stdout>:    if rank == 0:
[1,31]<stdout>:        print()
[1,31]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,31]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,31]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,31]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,31]<stdout>:
[1,31]<stdout>:    def show(*args, **kwargs):
[1,31]<stdout>:        if rank == 0:
[1,31]<stdout>:            print(*args, **kwargs)
[1,31]<stdout>:
[1,31]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,31]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,31]<stdout>:    separ = "| :--------------- | ----------: |"
[1,31]<stdout>:    show(fmti.format("Refinement", refine))
[1,31]<stdout>:    show(separ)
[1,31]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,31]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,31]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,31]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,31]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,31]<stdout>:    for key, values in data.items():
[1,31]<stdout>:        times = comm.gather(values[0], root=0)
[1,31]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,31]<stdout>:        if rank == 0:
[1,31]<stdout>:            show(fmtt.format(key, mean(times)))
[1,31]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,31]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,31]<stdout>:
[1,31]<stdout>:with ChronoCtxMg("Total"):
[1,31]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,31]<stdout>:        if params["parallel"] == "HPC":
[1,31]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,31]<stdout>:        else:
[1,31]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,31]<stdout>:
[1,31]<stdout>:    with ChronoCtxMg("Model"):
[1,31]<stdout>:        model = AFFE_MODELE(
[1,31]<stdout>:            MAILLAGE=mesh,
[1,31]<stdout>:            AFFE=_F(
[1,31]<stdout>:                TOUT="OUI",
[1,31]<stdout>:                PHENOMENE="MECANIQUE",
[1,31]<stdout>:                MODELISATION="3D",
[1,31]<stdout>:            ),
[1,31]<stdout>:        )
[1,31]<stdout>:
[1,31]<stdout>:    with ChronoCtxMg("Material"):
[1,31]<stdout>:        steel = DEFI_MATERIAU(
[1,31]<stdout>:            ELAS=_F(
[1,31]<stdout>:                E=200000.0,
[1,31]<stdout>:                NU=0.3,
[1,31]<stdout>:            ),
[1,31]<stdout>:            ECRO_LINE=_F(
[1,31]<stdout>:   [1,31]<stdout>:             D_SIGM_EPSI=2000.0,
[1,31]<stdout>:                SY=200.0,
[1,31]<stdout>:            ),
[1,31]<stdout>:        )
[1,31]<stdout>:
[1,31]<stdout>:        mater = AFFE_MATERIAU(
[1,31]<stdout>:            MAILLAGE=mesh,
[1,31]<stdout>:            AFFE=_F(
[1,31]<stdout>:                TOUT="OUI",
[1,31]<stdout>:                MATER=steel,
[1,31]<stdout>:            ),
[1,31]<stdout>:        )
[1,31]<stdout>:
[1,31]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,31]<stdout>:        block = AFFE_CHAR_CINE(
[1,31]<stdout>:            MODELE=model,
[1,31]<stdout>:            MECA_IMPO=(
[1,31]<stdout>:                _F(
[1,31]<stdout>:                    GROUP_MA="LEFT",
[1,31]<stdout>:                    DX=0,
[1,31]<stdout>:                    DY=0.0,
[1,31]<stdout>:                    DZ=0.0,
[1,31]<stdout>:                ),
[1,31]<stdout>:            ),
[1,31]<stdout>:        )
[1,31]<stdout>:
[1,31]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,31]<stdout>:            MODELE=model,
[1,31]<stdout>:            MECA_IMPO=(
[1,31]<stdout>:                _F(
[1,31]<stdout>:                    GROUP_MA="RIGHT",
[1,31]<stdout>:                    DY=0.001,
[1,31]<stdout>:                    DZ=0.001,
[1,31]<stdout>:                ),
[1,31]<stdout>:            ),
[1,31]<stdout>:        )
[1,31]<stdout>:
[1,31]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,31]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,31]<stdout>:            MODELE=model,
[1,31]<stdout>:            OPTION="RIGI_MECA",
[1,31]<stdout>:            CHAM_MATER=mater,
[1,31]<stdout>:        )
[1,31]<stdout>:
[1,31]<stdout>:    with ChronoCtxMg("Numbering"):
[1,31]<stdout>:        dofNum = NUME_DDL(
[1,31]<stdout>:            MATR_RIGI=stiff_elem,
[1,31]<stdout>:        )
[1,31]<stdout>:
[1,31]<stdout>:    with ChronoCtxMg("Assembly"):
[1,31]<stdout>:        stiffness = ASSE_MATRICE(
[1,31]<stdout>:            MATR_ELEM=stiff_elem,
[1,31]<stdout>:            NUME_DDL=dofNum,
[1,31]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,31]<stdout>:        )
[1,31]<stdout>:
[1,31]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,31]<stdout>:        rhs = CREA_CHAMP(
[1,31]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,31]<stdout>:            OPERATION="AFFE",
[1,31]<stdout>:            MAILLAGE=mesh,
[1,31]<stdout>:            AFFE=_F(
[1,31]<stdout>:                TOUT="OUI",
[1,31]<stdout>:                NOM_CMP=(
[1,31]<stdout>:                    "DX",
[1,31]<stdout>:                    "DY",
[1,31]<stdout>:                    "DZ",
[1,31]<stdout>:                ),
[1,31]<stdout>:                VALE=(
[1,31]<stdout>:                    0.0,
[1,31]<stdout>:                    0.0,
[1,31]<stdout>:                    0.0,
[1,31]<stdout>:                ),
[1,31]<stdout>:            ),
[1,31]<stdout>:        )
[1,31]<stdout>:
[1,31]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,31]<stdout>:
[1,31]<stdout>:    if params["solver"] == "PETSC":
[1,31]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,31]<stdout>:    elif params["solver"] == "MUMPS":
[1,31]<stdout>:        solver = CA.MumpsSolver(
[1,31]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,31]<stdout>:            RENUM="PARMETIS",
[1,31]<stdout>:            ACCELERATION="FR+",
[1,31]<stdout>:            POSTTRAITEMENTS="MINI",
[1,31]<stdout>:        )
[1,31]<stdout>:
[1,31]<stdout>:    with ChronoCtxMg("Factorize"):
[1,31]<stdout>:        solver.factorize(stiffness)
[1,31]<stdout>:
[1,31]<stdout>:    with ChronoCtxMg("Solve"):
[1,31]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,31]<stdout>:
[1,31]<stdout>:# write_stats(dofNum)
[1,31]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,31]<stdout>:if params["parallel"] == "HPC":
[1,31]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,31]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,31]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,31]<stdout>:
[1,31]<stdout>:CA.close()
[1,31]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:# ------------------------------------------------------------------------------
[1,31]<stdout>:Command line #1:
[1,31]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,22]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,10]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,23]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,20]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,22]<stdout>:checking MPI initialization...
[1,22]<stdout>:using COMM_WORLD.
[1,22]<stdout>:MPI is initialized.
[1,22]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,22]<stdout>:
[1,22]<stdout>:<INFO> Démarrage de l'exécution.
[1,22]<stdout>:
[1,21]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,22]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,22]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,22]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,22]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,22]<stdout>:                                                                                                    
[1,22]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,22]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,22]<stdout>:                                        Architecture : 64bit                                        
[1,22]<stdout>:                                    Type de processeur : aarch64                                    
[1,22]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,22]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,22]<stdout>:                                     Version de Python : 3.11.2                                     
[1,22]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,22]<stdout>:                                      Parallélisme MPI : actif                                      
[1,22]<stdout>:                                  Rang du processeur courant : 22                                   
[1,22]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,22]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,22]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,10]<stdout>:checking MPI initialization...
[1,10]<stdout>:using COMM_WORLD.
[1,10]<stdout>:MPI is initialized.
[1,10]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,10]<stdout>:
[1,22]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,10]<stdout>:<INFO> Démarrage de l'exécution.
[1,10]<stdout>:
[1,22]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,22]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,10]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,22]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,22]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,10]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,10]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,22]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,10]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,10]<stdout>:                                                                                                    
[1,10]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,10]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,10]<stdout>:                                        Architecture : 64bit                                        
[1,10]<stdout>:                                    Type de processeur : aarch64                                    
[1,10]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,10]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,10]<stdout>:                                     Version de Python : 3.11.2                                     
[1,10]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,10]<stdout>:                                      Parallélisme MPI : actif                                      
[1,10]<stdout>:                                  Rang du processeur courant : 10                                   
[1,10]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,10]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,10]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,22]<stdout>:
[1,22]<stdout>:starting the execution...
[1,10]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,10]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,10]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,10]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,10]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,10]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,19]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,10]<stdout>:
[1,10]<stdout>:starting the execution...
[1,22]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,22]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,22]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,22]<stdout>:
[1,10]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,10]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,10]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,10]<stdout>:
[1,31]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,7]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,20]<stdout>:checking MPI initialization...
[1,20]<stdout>:using COMM_WORLD.
[1,20]<stdout>:MPI is initialized.
[1,20]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,20]<stdout>:
[1,23]<stdout>:checking MPI initialization...
[1,23]<stdout>:using COMM_WORLD.
[1,23]<stdout>:MPI is initialized.
[1,23]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,23]<stdout>:
[1,15]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,12]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,20]<stdout>:<INFO> Démarrage de l'exécution.
[1,20]<stdout>:
[1,23]<stdout>:<INFO> Démarrage de l'exécution.
[1,23]<stdout>:
[1,20]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,23]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,20]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,20]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,23]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,23]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,20]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,20]<stdout>:                                                                                                    
[1,20]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,20]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,20]<stdout>:                                        Architecture : 64bit                                        
[1,20]<stdout>:                                    Type de processeur : aarch64                                    
[1,20]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,20]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,23]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,23]<stdout>:                                                                                                    
[1,23]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,23]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,23]<stdout>:                                        Architecture : 64bit                                        
[1,23]<stdout>:                                    Type de processeur : aarch64                                    
[1,23]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,23]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,20]<stdout>:                                     Version de Python : 3.11.2                                     
[1,20]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,23]<stdout>:                                     Version de Python : 3.11.2                                     
[1,23]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,20]<stdout>:                                      Parallélisme MPI : actif                                      
[1,20]<stdout>:                                  Rang du processeur courant : 20                                   
[1,20]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,23]<stdout>:                                      Parallélisme MPI : actif                                      
[1,23]<stdout>:                                  Rang du processeur courant : 23                                   
[1,23]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,20]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,20]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,23]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,23]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,20]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,23]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,9]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,20]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,26]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,23]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,20]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,23]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,20]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,23]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,20]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,23]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,20]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,23]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,21]<stdout>:checking MPI initialization...
[1,21]<stdout>:using COMM_WORLD.
[1,21]<stdout>:MPI is initialized.
[1,21]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,21]<stdout>:
[1,6]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,20]<stdout>:
[1,23]<stdout>:
[1,20]<stdout>:starting the execution...
[1,23]<stdout>:starting the execution...
[1,21]<stdout>:<INFO> Démarrage de l'exécution.
[1,21]<stdout>:
[1,21]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,21]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,21]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,13]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,21]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,21]<stdout>:                                                                                                    
[1,21]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,21]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,21]<stdout>:                                        Architecture : 64bit                                        
[1,21]<stdout>:                                    Type de processeur : aarch64                                    
[1,21]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,21]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,21]<stdout>:                                     Version de Python : 3.11.2                                     
[1,21]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,21]<stdout>:                                      Parallélisme MPI : actif                                      
[1,21]<stdout>:                                  Rang du processeur courant : 21                                   
[1,21]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,21]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,21]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,20]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,20]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,20]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,20]<stdout>:
[1,23]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,23]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,23]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,23]<stdout>:
[1,21]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,21]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,22]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,22]<stdout>:
[1,21]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,21]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,21]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,21]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,19]<stdout>:checking MPI initialization...
[1,19]<stdout>:using COMM_WORLD.
[1,19]<stdout>:MPI is initialized.
[1,19]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,19]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:starting the execution...
[1,19]<stdout>:<INFO> Démarrage de l'exécution.
[1,19]<stdout>:
[1,19]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,19]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,19]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,19]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,19]<stdout>:                                                                                                    
[1,19]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,19]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,19]<stdout>:                                        Architecture : 64bit                                        
[1,19]<stdout>:                                    Type de processeur : aarch64                                    
[1,19]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,19]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,28]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,19]<stdout>:                                     Version de Python : 3.11.2                                     
[1,19]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,24]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,19]<stdout>:                                      Parallélisme MPI : actif                                      
[1,19]<stdout>:                                  Rang du processeur courant : 19                                   
[1,19]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,10]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,10]<stdout>:
[1,19]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,19]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,21]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,21]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,21]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,21]<stdout>:
[1,19]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,19]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,19]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,19]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,19]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,19]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,31]<stdout>:checking MPI initialization...
[1,31]<stdout>:using COMM_WORLD.
[1,31]<stdout>:MPI is initialized.
[1,31]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,31]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:starting the execution...
[1,31]<stdout>:<INFO> Démarrage de l'exécution.
[1,31]<stdout>:
[1,7]<stdout>:checking MPI initialization...
[1,7]<stdout>:using COMM_WORLD.
[1,7]<stdout>:MPI is initialized.
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,31]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,31]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,31]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,14]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,31]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,31]<stdout>:                                                                                                    
[1,31]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,31]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,31]<stdout>:                                        Architecture : 64bit                                        
[1,31]<stdout>:                                    Type de processeur : aarch64                                    
[1,31]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,31]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,16]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,31]<stdout>:                                     Version de Python : 3.11.2                                     
[1,31]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,31]<stdout>:                                      Parallélisme MPI : actif                                      
[1,31]<stdout>:                                  Rang du processeur courant : 31                                   
[1,31]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,7]<stdout>:<INFO> Démarrage de l'exécution.
[1,7]<stdout>:
[1,31]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,31]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,12]<stdout>:checking MPI initialization...
[1,12]<stdout>:using COMM_WORLD.
[1,12]<stdout>:MPI is initialized.
[1,12]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,12]<stdout>:
[1,7]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,19]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,19]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,19]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,19]<stdout>:
[1,7]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,7]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,7]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,7]<stdout>:                                                                                                    
[1,7]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,7]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,7]<stdout>:                                        Architecture : 64bit                                        
[1,7]<stdout>:                                    Type de processeur : aarch64                                    
[1,7]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,7]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,7]<stdout>:                                     Version de Python : 3.11.2                                     
[1,7]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,5]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,15]<stdout>:checking MPI initialization...
[1,15]<stdout>:using COMM_WORLD.
[1,15]<stdout>:MPI is initialized.
[1,7]<stdout>:                                      Parallélisme MPI : actif                                      
[1,7]<stdout>:                                   Rang du processeur courant : 7                                   
[1,7]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,15]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,15]<stdout>:
[1,31]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,7]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,7]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,12]<stdout>:<INFO> Démarrage de l'exécution.
[1,12]<stdout>:
[1,31]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,31]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,12]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,31]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,31]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,12]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,12]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,31]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,12]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,12]<stdout>:                                                                                                    
[1,12]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,12]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,12]<stdout>:                                        Architecture : 64bit                                        
[1,12]<stdout>:                                    Type de processeur : aarch64                                    
[1,12]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,12]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,12]<stdout>:                                     Version de Python : 3.11.2                                     
[1,12]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,15]<stdout>:<INFO> Démarrage de l'exécution.
[1,15]<stdout>:
[1,12]<stdout>:                                      Parallélisme MPI : actif                                      
[1,12]<stdout>:                                  Rang du processeur courant : 12                                   
[1,12]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,12]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,12]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,7]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,7]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,31]<stdout>:
[1,15]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,7]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,15]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,15]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,9]<stdout>:checking MPI initialization...
[1,9]<stdout>:using COMM_WORLD.
[1,9]<stdout>:MPI is initialized.
[1,9]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,9]<stdout>:
[1,7]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,31]<stdout>:starting the execution...
[1,15]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,15]<stdout>:                                                                                                    
[1,15]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,15]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,15]<stdout>:                                        Architecture : 64bit                                        
[1,15]<stdout>:                                    Type de processeur : aarch64                                    
[1,15]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,15]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,7]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,7]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,11]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,15]<stdout>:                                     Version de Python : 3.11.2                                     
[1,15]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,15]<stdout>:                                      Parallélisme MPI : actif                                      
[1,15]<stdout>:                                  Rang du processeur courant : 15                                   
[1,15]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,26]<stdout>:checking MPI initialization...
[1,26]<stdout>:using COMM_WORLD.
[1,26]<stdout>:MPI is initialized.
[1,26]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,26]<stdout>:
[1,15]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,15]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,12]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,7]<stdout>:
[1,12]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,9]<stdout>:<INFO> Démarrage de l'exécution.
[1,9]<stdout>:
[1,12]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,7]<stdout>:starting the execution...
[1,12]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,9]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,12]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,6]<stdout>:checking MPI initialization...
[1,6]<stdout>:using COMM_WORLD.
[1,6]<stdout>:MPI is initialized.
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,12]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,9]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,9]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,26]<stdout>:<INFO> Démarrage de l'exécution.
[1,26]<stdout>:
[1,9]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,9]<stdout>:                                                                                                    
[1,9]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,9]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,9]<stdout>:                                        Architecture : 64bit                                        
[1,9]<stdout>:                                    Type de processeur : aarch64                                    
[1,9]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,9]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,15]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,9]<stdout>:                                     Version de Python : 3.11.2                                     
[1,9]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,13]<stdout>:checking MPI initialization...
[1,13]<stdout>:using COMM_WORLD.
[1,13]<stdout>:MPI is initialized.
[1,13]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,13]<stdout>:
[1,26]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,15]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,9]<stdout>:                                      Parallélisme MPI : actif                                      
[1,9]<stdout>:                                   Rang du processeur courant : 9                                   
[1,9]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,15]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,26]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,26]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,12]<stdout>:
[1,15]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,9]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,9]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,15]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,26]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,26]<stdout>:                                                                                                    
[1,26]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,26]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,26]<stdout>:                                        Architecture : 64bit                                        
[1,26]<stdout>:                                    Type de processeur : aarch64                                    
[1,26]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,26]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,15]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,12]<stdout>:starting the execution...
[1,6]<stdout>:<INFO> Démarrage de l'exécution.
[1,6]<stdout>:
[1,26]<stdout>:                                     Version de Python : 3.11.2                                     
[1,26]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,31]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,31]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,31]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,31]<stdout>:
[1,26]<stdout>:                                      Parallélisme MPI : actif                                      
[1,26]<stdout>:                                  Rang du processeur courant : 26                                   
[1,26]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,6]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,26]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,26]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,13]<stdout>:<INFO> Démarrage de l'exécution.
[1,13]<stdout>:
[1,6]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,6]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,15]<stdout>:
[1,20]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,20]<stdout>:
[1,23]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,23]<stdout>:
[1,13]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,6]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,6]<stdout>:                                                                                                    
[1,6]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,6]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,6]<stdout>:                                        Architecture : 64bit                                        
[1,6]<stdout>:                                    Type de processeur : aarch64                                    
[1,6]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,6]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,6]<stdout>:                                     Version de Python : 3.11.2                                     
[1,6]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,15]<stdout>:starting the execution...
[1,9]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,13]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,13]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,7]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,7]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,7]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,7]<stdout>:
[1,9]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,6]<stdout>:                                      Parallélisme MPI : actif                                      
[1,6]<stdout>:                                   Rang du processeur courant : 6                                   
[1,6]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,9]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,13]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,13]<stdout>:                                                                                                    
[1,13]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,13]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,13]<stdout>:                                        Architecture : 64bit                                        
[1,13]<stdout>:                                    Type de processeur : aarch64                                    
[1,13]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,13]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,6]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,6]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,9]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,13]<stdout>:                                     Version de Python : 3.11.2                                     
[1,13]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,9]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,13]<stdout>:                                      Parallélisme MPI : actif                                      
[1,13]<stdout>:                                  Rang du processeur courant : 13                                   
[1,13]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,9]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,30]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,26]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,13]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,13]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,26]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,24]<stdout>:checking MPI initialization...
[1,24]<stdout>:using COMM_WORLD.
[1,24]<stdout>:MPI is initialized.
[1,24]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,24]<stdout>:
[1,26]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,28]<stdout>:checking MPI initialization...
[1,28]<stdout>:using COMM_WORLD.
[1,28]<stdout>:MPI is initialized.
[1,28]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,28]<stdout>:
[1,26]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,9]<stdout>:
[1,26]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,26]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,12]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,12]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,12]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,12]<stdout>:
[1,9]<stdout>:starting the execution...
[1,6]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,6]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,24]<stdout>:<INFO> Démarrage de l'exécution.
[1,24]<stdout>:
[1,26]<stdout>:
[1,6]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,6]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,13]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,28]<stdout>:<INFO> Démarrage de l'exécution.
[1,28]<stdout>:
[1,6]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,26]<stdout>:starting the execution...
[1,24]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,13]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,15]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,15]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,15]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,15]<stdout>:
[1,6]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,13]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,24]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,24]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,28]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,13]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,28]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,28]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,13]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,14]<stdout>:checking MPI initialization...
[1,14]<stdout>:using COMM_WORLD.
[1,14]<stdout>:MPI is initialized.
[1,14]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,14]<stdout>:
[1,24]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,24]<stdout>:                                                                                                    
[1,24]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,24]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,24]<stdout>:                                        Architecture : 64bit                                        
[1,24]<stdout>:                                    Type de processeur : aarch64                                    
[1,24]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,24]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,16]<stdout>:checking MPI initialization...
[1,16]<stdout>:using COMM_WORLD.
[1,16]<stdout>:MPI is initialized.
[1,16]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,16]<stdout>:
[1,13]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,6]<stdout>:
[1,24]<stdout>:                                     Version de Python : 3.11.2                                     
[1,24]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,28]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,28]<stdout>:                                                                                                    
[1,28]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,28]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,28]<stdout>:                                        Architecture : 64bit                                        
[1,28]<stdout>:                                    Type de processeur : aarch64                                    
[1,28]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,28]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,24]<stdout>:                                      Parallélisme MPI : actif                                      
[1,24]<stdout>:                                  Rang du processeur courant : 24                                   
[1,24]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,28]<stdout>:                                     Version de Python : 3.11.2                                     
[1,28]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,6]<stdout>:starting the execution...
[1,24]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,24]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,13]<stdout>:
[1,28]<stdout>:                                      Parallélisme MPI : actif                                      
[1,28]<stdout>:                                  Rang du processeur courant : 28                                   
[1,28]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,25]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,5]<stdout>:checking MPI initialization...
[1,5]<stdout>:using COMM_WORLD.
[1,5]<stdout>:MPI is initialized.
[1,28]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,28]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,14]<stdout>:<INFO> Démarrage de l'exécution.
[1,14]<stdout>:
[1,13]<stdout>:starting the execution...
[1,16]<stdout>:<INFO> Démarrage de l'exécution.
[1,16]<stdout>:
[1,9]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,9]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,9]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,9]<stdout>:
[1,14]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,11]<stdout>:checking MPI initialization...
[1,11]<stdout>:using COMM_WORLD.
[1,11]<stdout>:MPI is initialized.
[1,11]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,11]<stdout>:
[1,16]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,14]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,14]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,16]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,16]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,2]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,14]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,14]<stdout>:                                                                                                    
[1,14]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,14]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,14]<stdout>:                                        Architecture : 64bit                                        
[1,14]<stdout>:                                    Type de processeur : aarch64                                    
[1,14]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,14]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,5]<stdout>:<INFO> Démarrage de l'exécution.
[1,5]<stdout>:
[1,16]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,16]<stdout>:                                                                                                    
[1,16]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,16]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,16]<stdout>:                                        Architecture : 64bit                                        
[1,16]<stdout>:                                    Type de processeur : aarch64                                    
[1,16]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,16]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,24]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,14]<stdout>:                                     Version de Python : 3.11.2                                     
[1,14]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,27]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,4]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,16]<stdout>:                                     Version de Python : 3.11.2                                     
[1,16]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,21]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,21]<stdout>:
[1,26]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,26]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,26]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,26]<stdout>:
[1,24]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:                                      Parallélisme MPI : actif                                      
[1,14]<stdout>:                                  Rang du processeur courant : 14                                   
[1,14]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,5]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,28]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,8]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,16]<stdout>:                                      Parallélisme MPI : actif                                      
[1,16]<stdout>:                                  Rang du processeur courant : 16                                   
[1,16]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,24]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,11]<stdout>:<INFO> Démarrage de l'exécution.
[1,11]<stdout>:
[1,28]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,5]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,5]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,14]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,14]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,24]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,16]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,16]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,28]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,24]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,30]<stdout>:checking MPI initialization...
[1,30]<stdout>:using COMM_WORLD.
[1,30]<stdout>:MPI is initialized.
[1,30]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,30]<stdout>:
[1,5]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,5]<stdout>:                                                                                                    
[1,5]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,5]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,5]<stdout>:                                        Architecture : 64bit                                        
[1,5]<stdout>:                                    Type de processeur : aarch64                                    
[1,5]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,5]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,28]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,24]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,18]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,11]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,28]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,5]<stdout>:                                     Version de Python : 3.11.2                                     
[1,5]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,0]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,28]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,3]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,11]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,11]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,1]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,29]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,17]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,5]<stdout>:                                      Parallélisme MPI : actif                                      
[1,5]<stdout>:                                   Rang du processeur courant : 5                                   
[1,5]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,6]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,6]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,6]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,6]<stdout>:
[1,11]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,11]<stdout>:                                                                                                    
[1,11]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,11]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,11]<stdout>:                                        Architecture : 64bit                                        
[1,11]<stdout>:                                    Type de processeur : aarch64                                    
[1,11]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,11]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,24]<stdout>:
[1,5]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,5]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,11]<stdout>:                                     Version de Python : 3.11.2                                     
[1,11]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,11]<stdout>:                                      Parallélisme MPI : actif                                      
[1,11]<stdout>:                                  Rang du processeur courant : 11                                   
[1,11]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,28]<stdout>:
[1,24]<stdout>:starting the execution...
[1,11]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,11]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,14]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,30]<stdout>:<INFO> Démarrage de l'exécution.
[1,30]<stdout>:
[1,13]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,13]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,13]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,13]<stdout>:
[1,16]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,14]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,28]<stdout>:starting the execution...
[1,16]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,16]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,30]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,14]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,16]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,14]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,30]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,30]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,16]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,14]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,5]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,16]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,30]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,30]<stdout>:                                                                                                    
[1,30]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,30]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,30]<stdout>:                                        Architecture : 64bit                                        
[1,30]<stdout>:                                    Type de processeur : aarch64                                    
[1,30]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,30]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,5]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,30]<stdout>:                                     Version de Python : 3.11.2                                     
[1,30]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,5]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,30]<stdout>:                                      Parallélisme MPI : actif                                      
[1,30]<stdout>:                                  Rang du processeur courant : 30                                   
[1,30]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,5]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,11]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,5]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,14]<stdout>:
[1,16]<stdout>:
[1,30]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,30]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,11]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,5]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,11]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,14]<stdout>:starting the execution...
[1,16]<stdout>:starting the execution...
[1,11]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,11]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,11]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,5]<stdout>:
[1,24]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,24]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,24]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,24]<stdout>:
[1,5]<stdout>:starting the execution...
[1,11]<stdout>:
[1,30]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,28]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,28]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,28]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,28]<stdout>:
[1,30]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,11]<stdout>:starting the execution...
[1,30]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,25]<stdout>:checking MPI initialization...
[1,25]<stdout>:using COMM_WORLD.
[1,25]<stdout>:MPI is initialized.
[1,25]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,25]<stdout>:
[1,30]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,30]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,30]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,30]<stdout>:
[1,25]<stdout>:<INFO> Démarrage de l'exécution.
[1,25]<stdout>:
[1,16]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,16]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,16]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,16]<stdout>:
[1,14]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,14]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,14]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,14]<stdout>:
[1,30]<stdout>:starting the execution...
[1,25]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,25]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,25]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,25]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,25]<stdout>:                                                                                                    
[1,25]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,25]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,25]<stdout>:                                        Architecture : 64bit                                        
[1,25]<stdout>:                                    Type de processeur : aarch64                                    
[1,25]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,25]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,5]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,5]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,5]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,5]<stdout>:
[1,25]<stdout>:                                     Version de Python : 3.11.2                                     
[1,25]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,25]<stdout>:                                      Parallélisme MPI : actif                                      
[1,25]<stdout>:                                  Rang du processeur courant : 25                                   
[1,25]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,11]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,11]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,11]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,11]<stdout>:
[1,25]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,25]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,19]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,19]<stdout>:
[1,30]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,30]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,30]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,30]<stdout>:
[1,25]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,25]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,25]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,2]<stdout>:checking MPI initialization...
[1,2]<stdout>:using COMM_WORLD.
[1,2]<stdout>:MPI is initialized.
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,25]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,25]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,25]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,25]<stdout>:
[1,27]<stdout>:checking MPI initialization...
[1,27]<stdout>:using COMM_WORLD.
[1,27]<stdout>:MPI is initialized.
[1,27]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,27]<stdout>:
[1,4]<stdout>:checking MPI initialization...
[1,4]<stdout>:using COMM_WORLD.
[1,4]<stdout>:MPI is initialized.
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,25]<stdout>:starting the execution...
[1,8]<stdout>:checking MPI initialization...
[1,8]<stdout>:using COMM_WORLD.
[1,8]<stdout>:MPI is initialized.
[1,8]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,8]<stdout>:
[1,2]<stdout>:<INFO> Démarrage de l'exécution.
[1,2]<stdout>:
[1,18]<stdout>:checking MPI initialization...
[1,18]<stdout>:using COMM_WORLD.
[1,18]<stdout>:MPI is initialized.
[1,18]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,18]<stdout>:
[1,2]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,0]<stdout>:checking MPI initialization...
[1,0]<stdout>:using COMM_WORLD.
[1,0]<stdout>:MPI is initialized.
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,2]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,2]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,1]<stdout>:checking MPI initialization...
[1,1]<stdout>:using COMM_WORLD.
[1,1]<stdout>:MPI is initialized.
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,3]<stdout>:checking MPI initialization...
[1,3]<stdout>:using COMM_WORLD.
[1,3]<stdout>:MPI is initialized.
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,29]<stdout>:checking MPI initialization...
[1,29]<stdout>:using COMM_WORLD.
[1,29]<stdout>:MPI is initialized.
[1,29]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,29]<stdout>:
[1,17]<stdout>:checking MPI initialization...
[1,17]<stdout>:using COMM_WORLD.
[1,17]<stdout>:MPI is initialized.
[1,17]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,17]<stdout>:
[1,27]<stdout>:<INFO> Démarrage de l'exécution.
[1,27]<stdout>:
[1,4]<stdout>:<INFO> Démarrage de l'exécution.
[1,4]<stdout>:
[1,2]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,2]<stdout>:                                                                                                    
[1,2]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,2]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,2]<stdout>:                                        Architecture : 64bit                                        
[1,2]<stdout>:                                    Type de processeur : aarch64                                    
[1,2]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,2]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,2]<stdout>:                                     Version de Python : 3.11.2                                     
[1,2]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,8]<stdout>:<INFO> Démarrage de l'exécution.
[1,8]<stdout>:
[1,27]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,4]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,2]<stdout>:                                      Parallélisme MPI : actif                                      
[1,2]<stdout>:                                   Rang du processeur courant : 2                                   
[1,2]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,27]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,27]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,18]<stdout>:<INFO> Démarrage de l'exécution.
[1,18]<stdout>:
[1,4]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,4]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,8]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,2]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,2]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,27]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,27]<stdout>:                                                                                                    
[1,27]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,27]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,27]<stdout>:                                        Architecture : 64bit                                        
[1,27]<stdout>:                                    Type de processeur : aarch64                                    
[1,27]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,27]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,1]<stdout>:<INFO> Démarrage de l'exécution.
[1,1]<stdout>:
[1,8]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,8]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,0]<stdout>:<INFO> Démarrage de l'exécution.
[1,0]<stdout>:
[1,4]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,4]<stdout>:                                                                                                    
[1,4]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,4]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,4]<stdout>:                                        Architecture : 64bit                                        
[1,4]<stdout>:                                    Type de processeur : aarch64                                    
[1,4]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,4]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,3]<stdout>:<INFO> Démarrage de l'exécution.
[1,3]<stdout>:
[1,18]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,27]<stdout>:                                     Version de Python : 3.11.2                                     
[1,27]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,29]<stdout>:<INFO> Démarrage de l'exécution.
[1,29]<stdout>:
[1,17]<stdout>:<INFO> Démarrage de l'exécution.
[1,17]<stdout>:
[1,4]<stdout>:                                     Version de Python : 3.11.2                                     
[1,4]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,8]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,8]<stdout>:                                                                                                    
[1,8]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,8]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,8]<stdout>:                                        Architecture : 64bit                                        
[1,8]<stdout>:                                    Type de processeur : aarch64                                    
[1,8]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,8]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,18]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,18]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,1]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,27]<stdout>:                                      Parallélisme MPI : actif                                      
[1,27]<stdout>:                                  Rang du processeur courant : 27                                   
[1,27]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,0]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,4]<stdout>:                                      Parallélisme MPI : actif                                      
[1,4]<stdout>:                                   Rang du processeur courant : 4                                   
[1,4]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,8]<stdout>:                                     Version de Python : 3.11.2                                     
[1,8]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,3]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,29]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,18]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,18]<stdout>:                                                                                                    
[1,18]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,18]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,18]<stdout>:                                        Architecture : 64bit                                        
[1,18]<stdout>:                                    Type de processeur : aarch64                                    
[1,18]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,18]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,17]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,27]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,27]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,0]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,0]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,1]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,1]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,8]<stdout>:                                      Parallélisme MPI : actif                                      
[1,8]<stdout>:                                   Rang du processeur courant : 8                                   
[1,8]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,4]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,4]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,3]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,3]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,29]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,29]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,18]<stdout>:                                     Version de Python : 3.11.2                                     
[1,18]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,25]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,25]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,25]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,25]<stdout>:
[1,1]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,1]<stdout>:                                                                                                    
[1,1]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,1]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,1]<stdout>:                                        Architecture : 64bit                                        
[1,1]<stdout>:                                    Type de processeur : aarch64                                    
[1,1]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,1]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,17]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,17]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,0]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,0]<stdout>:                                                                                                    
[1,0]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,0]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,0]<stdout>:                                        Architecture : 64bit                                        
[1,0]<stdout>:                                    Type de processeur : aarch64                                    
[1,0]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,0]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,8]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,8]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,18]<stdout>:                                      Parallélisme MPI : actif                                      
[1,18]<stdout>:                                  Rang du processeur courant : 18                                   
[1,18]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,3]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,3]<stdout>:                                                                                                    
[1,3]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,3]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,3]<stdout>:                                        Architecture : 64bit                                        
[1,3]<stdout>:                                    Type de processeur : aarch64                                    
[1,3]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,3]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,1]<stdout>:                                     Version de Python : 3.11.2                                     
[1,1]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,29]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,29]<stdout>:                                                                                                    
[1,29]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,29]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,29]<stdout>:                                        Architecture : 64bit                                        
[1,29]<stdout>:                                    Type de processeur : aarch64                                    
[1,29]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,29]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,17]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,17]<stdout>:                                                                                                    
[1,17]<stdout>:                              Exécution du : Thu Jan 23 16:33:52 2025                               
[1,17]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,17]<stdout>:                                        Architecture : 64bit                                        
[1,17]<stdout>:                                    Type de processeur : aarch64                                    
[1,17]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,17]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,0]<stdout>:                                     Version de Python : 3.11.2                                     
[1,0]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,3]<stdout>:                                     Version de Python : 3.11.2                                     
[1,3]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,18]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,18]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,1]<stdout>:                                      Parallélisme MPI : actif                                      
[1,1]<stdout>:                                   Rang du processeur courant : 1                                   
[1,1]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,29]<stdout>:                                     Version de Python : 3.11.2                                     
[1,29]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,17]<stdout>:                                     Version de Python : 3.11.2                                     
[1,17]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,0]<stdout>:                                      Parallélisme MPI : actif                                      
[1,0]<stdout>:                                   Rang du processeur courant : 0                                   
[1,0]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,2]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,3]<stdout>:                                      Parallélisme MPI : actif                                      
[1,3]<stdout>:                                   Rang du processeur courant : 3                                   
[1,3]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,17]<stdout>:                                      Parallélisme MPI : actif                                      
[1,17]<stdout>:                                  Rang du processeur courant : 17                                   
[1,17]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,29]<stdout>:                                      Parallélisme MPI : actif                                      
[1,29]<stdout>:                                  Rang du processeur courant : 29                                   
[1,29]<stdout>:                              Nombre de processeurs MPI utilisés : 32                               
[1,1]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,1]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,0]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,0]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,29]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,29]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,3]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,3]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,17]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,17]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,2]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,2]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,2]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,27]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,4]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,27]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,27]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,4]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,8]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,27]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,4]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,8]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,2]<stdout>:
[1,4]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,18]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,27]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,8]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,4]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,27]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,18]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,8]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,4]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,2]<stdout>:starting the execution...
[1,18]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,1]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,8]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,18]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,3]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,29]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,8]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,1]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,0]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,17]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,18]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,1]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,0]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,3]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,27]<stdout>:
[1,29]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,17]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,18]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,4]<stdout>:
[1,3]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,17]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,1]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,0]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,29]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,3]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,8]<stdout>:
[1,29]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,17]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,1]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,0]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,27]<stdout>:starting the execution...
[1,1]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,3]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,29]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,17]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,0]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,4]<stdout>:starting the execution...
[1,18]<stdout>:
[1,3]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,29]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,17]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,8]<stdout>:starting the execution...
[1,18]<stdout>:starting the execution...
[1,1]<stdout>:
[1,0]<stdout>:
[1,3]<stdout>:
[1,29]<stdout>:
[1,17]<stdout>:
[1,0]<stdout>:starting the execution...
[1,1]<stdout>:starting the execution...
[1,29]<stdout>:starting the execution...
[1,17]<stdout>:starting the execution...
[1,3]<stdout>:starting the execution...
[1,2]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,2]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,2]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,2]<stdout>:
[1,27]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,27]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,27]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,27]<stdout>:
[1,4]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,4]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,4]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,4]<stdout>:
[1,8]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,8]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,8]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,8]<stdout>:
[1,18]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,18]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,18]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,18]<stdout>:
[1,1]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,1]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,1]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,1]<stdout>:
[1,0]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,0]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,0]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,0]<stdout>:
[1,17]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,17]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,17]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,17]<stdout>:
[1,29]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,29]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,29]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,29]<stdout>:
[1,3]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,3]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,3]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,3]<stdout>:
[1,31]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,31]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,7]<stdout>:
[1,12]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,12]<stdout>:
[1,15]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,15]<stdout>:
[1,9]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,9]<stdout>:
[1,26]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,26]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,6]<stdout>:
[1,13]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,13]<stdout>:
[1,24]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,24]<stdout>:
[1,28]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,28]<stdout>:
[1,16]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,16]<stdout>:
[1,14]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,14]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,5]<stdout>:
[1,11]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,11]<stdout>:
[1,30]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,30]<stdout>:
[1,25]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,25]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,2]<stdout>:
[1,27]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,27]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,4]<stdout>:
[1,8]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,8]<stdout>:
[1,18]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,18]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,0]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,1]<stdout>:
[1,29]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,29]<stdout>:
[1,17]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,17]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,3]<stdout>:
[1,22]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,22]<stdout>:
[1,10]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,10]<stdout>:
[1,23]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,23]<stdout>:
[1,20]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,20]<stdout>:
[1,21]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,21]<stdout>:
[1,19]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,19]<stdout>:
[1,31]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,31]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,12]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,12]<stdout>:
[1,15]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,15]<stdout>:
[1,26]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,26]<stdout>:
[1,9]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,9]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,13]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,13]<stdout>:
[1,24]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,24]<stdout>:
[1,28]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,28]<stdout>:
[1,16]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,16]<stdout>:
[1,11]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,11]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,14]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,14]<stdout>:
[1,25]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,25]<stdout>:
[1,30]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,30]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,18]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,18]<stdout>:
[1,17]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,17]<stdout>:
[1,27]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,27]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,29]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,29]<stdout>:
[1,8]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,8]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,22]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,22]<stdout>:
[1,22]<stdout>:Nom de la base                          :  ELEMBASE
[1,22]<stdout>:     Créée avec la version                   :  17.02.04
[1,22]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,22]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,22]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,22]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,22]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,22]<stdout>:     Taille maximum du répertoire            :  300
[1,22]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,22]<stdout>:
[1,22]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,22]<stdout>:
[1,10]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,10]<stdout>:
[1,10]<stdout>:Nom de la base                          :  ELEMBASE
[1,10]<stdout>:     Créée avec la version                   :  17.02.04
[1,10]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,10]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,10]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,10]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,10]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,10]<stdout>:     Taille maximum du répertoire            :  300
[1,10]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,10]<stdout>:
[1,10]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,10]<stdout>:
[1,23]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,23]<stdout>:
[1,23]<stdout>:Nom de la base                          :  ELEMBASE
[1,23]<stdout>:     Créée avec la version                   :  17.02.04
[1,23]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,23]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,23]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,23]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,23]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,23]<stdout>:     Taille maximum du répertoire            :  300
[1,23]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,23]<stdout>:
[1,23]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,23]<stdout>:
[1,20]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,20]<stdout>:
[1,20]<stdout>:Nom de la base                          :  ELEMBASE
[1,20]<stdout>:     Créée avec la version                   :  17.02.04
[1,20]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,20]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,20]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,20]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,20]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,20]<stdout>:     Taille maximum du répertoire            :  300
[1,20]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,20]<stdout>:
[1,20]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,20]<stdout>:
[1,21]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,21]<stdout>:
[1,21]<stdout>:Nom de la base                          :  ELEMBASE
[1,21]<stdout>:     Créée avec la version                   :  17.02.04
[1,21]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,21]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,21]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,21]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,21]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,21]<stdout>:     Taille maximum du répertoire            :  300
[1,21]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,21]<stdout>:
[1,21]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,21]<stdout>:
[1,19]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,19]<stdout>:
[1,19]<stdout>:Nom de la base                          :  ELEMBASE
[1,19]<stdout>:     Créée avec la version                   :  17.02.04
[1,19]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,19]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,19]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,19]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,19]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,19]<stdout>:     Taille maximum du répertoire            :  300
[1,19]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,19]<stdout>:
[1,19]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,19]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Créée avec la version                   :  17.02.04
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,31]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,31]<stdout>:
[1,31]<stdout>:Nom de la base                          :  ELEMBASE
[1,31]<stdout>:     Créée avec la version                   :  17.02.04
[1,31]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,31]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,31]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,31]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,31]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,31]<stdout>:     Taille maximum du répertoire            :  300
[1,31]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,31]<stdout>:
[1,31]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,31]<stdout>:
[1,12]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,12]<stdout>:
[1,12]<stdout>:Nom de la base                          :  ELEMBASE
[1,12]<stdout>:     Créée avec la version                   :  17.02.04
[1,12]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,12]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,12]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,12]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,12]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,12]<stdout>:     Taille maximum du répertoire            :  300
[1,12]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,12]<stdout>:
[1,12]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,12]<stdout>:
[1,15]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,15]<stdout>:
[1,15]<stdout>:Nom de la base                          :  ELEMBASE
[1,15]<stdout>:     Créée avec la version                   :  17.02.04
[1,15]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,15]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,15]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,15]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,15]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,15]<stdout>:     Taille maximum du répertoire            :  300
[1,15]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,15]<stdout>:
[1,15]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,15]<stdout>:
[1,26]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,26]<stdout>:
[1,9]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,9]<stdout>:
[1,26]<stdout>:Nom de la base                          :  ELEMBASE
[1,26]<stdout>:     Créée avec la version                   :  17.02.04
[1,26]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,26]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,26]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,26]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,26]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,26]<stdout>:     Taille maximum du répertoire            :  300
[1,26]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,26]<stdout>:
[1,26]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,26]<stdout>:
[1,9]<stdout>:Nom de la base                          :  ELEMBASE
[1,9]<stdout>:     Créée avec la version                   :  17.02.04
[1,9]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,9]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,9]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,9]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,9]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,9]<stdout>:     Taille maximum du répertoire            :  300
[1,9]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,9]<stdout>:
[1,9]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,9]<stdout>:
[1,22]<stdout>:Nom de la base                          :  ELEMBASE
[1,22]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,22]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,22]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,22]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,22]<stdout>:     Nombre total d'accès en lecture         :  63
[1,22]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,22]<stdout>:     Nombre total d'accès en écriture        :  0
[1,22]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,22]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,22]<stdout>:     Taille maximum du répertoire            :  300
[1,22]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,22]<stdout>:
[1,22]<stdout>:Relecture des catalogues des éléments faite.
[1,22]<stdout>:
[1,22]<stdout>:Fin de lecture (durée  0.036249  s.) 
[1,22]<stdout>:
[1,22]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,22]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,22]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,22]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Créée avec la version                   :  17.02.04
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,22]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.24s, elaps:        0.27s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,13]<stdout>:
[1,13]<stdout>:Nom de la base                          :  ELEMBASE
[1,13]<stdout>:     Créée avec la version                   :  17.02.04
[1,13]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,13]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,13]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,13]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,13]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,13]<stdout>:     Taille maximum du répertoire            :  300
[1,13]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,13]<stdout>:
[1,13]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,13]<stdout>:
[1,24]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,24]<stdout>:
[1,24]<stdout>:Nom de la base                          :  ELEMBASE
[1,24]<stdout>:     Créée avec la version                   :  17.02.04
[1,24]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,24]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,24]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,24]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,24]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,24]<stdout>:     Taille maximum du répertoire            :  300
[1,24]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,24]<stdout>:
[1,24]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,24]<stdout>:
[1,28]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,28]<stdout>:
[1,28]<stdout>:Nom de la base                          :  ELEMBASE
[1,28]<stdout>:     Créée avec la version                   :  17.02.04
[1,28]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,28]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,28]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,28]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,28]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,28]<stdout>:     Taille maximum du répertoire            :  300
[1,28]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,28]<stdout>:
[1,28]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,28]<stdout>:
[1,10]<stdout>:Nom de la base                          :  ELEMBASE
[1,10]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,10]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,10]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,10]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,10]<stdout>:     Nombre total d'accès en lecture         :  63
[1,10]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,10]<stdout>:     Nombre total d'accès en écriture        :  0
[1,10]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,10]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,10]<stdout>:     Taille maximum du répertoire            :  300
[1,10]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,10]<stdout>:
[1,10]<stdout>:Relecture des catalogues des éléments faite.
[1,10]<stdout>:
[1,10]<stdout>:Fin de lecture (durée  0.036149  s.) 
[1,10]<stdout>:
[1,10]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,10]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,10]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,10]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,16]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,16]<stdout>:
[1,16]<stdout>:Nom de la base                          :  ELEMBASE
[1,16]<stdout>:     Créée avec la version                   :  17.02.04
[1,16]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,16]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,16]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,16]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,16]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,16]<stdout>:     Taille maximum du répertoire            :  300
[1,16]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,16]<stdout>:
[1,16]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,16]<stdout>:
[1,11]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,11]<stdout>:
[1,11]<stdout>:Nom de la base                          :  ELEMBASE
[1,11]<stdout>:     Créée avec la version                   :  17.02.04
[1,11]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,11]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,11]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,11]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,11]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,11]<stdout>:     Taille maximum du répertoire            :  300
[1,11]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,11]<stdout>:
[1,10]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,11]<stdout>:
[1,10]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.26s, elaps:        0.27s)
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Créée avec la version                   :  17.02.04
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,14]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,14]<stdout>:
[1,14]<stdout>:Nom de la base                          :  ELEMBASE
[1,14]<stdout>:     Créée avec la version                   :  17.02.04
[1,14]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,14]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,14]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,14]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,14]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,14]<stdout>:     Taille maximum du répertoire            :  300
[1,14]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,14]<stdout>:
[1,14]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,14]<stdout>:
[1,25]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,25]<stdout>:
[1,25]<stdout>:Nom de la base                          :  ELEMBASE
[1,25]<stdout>:     Créée avec la version                   :  17.02.04
[1,25]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,25]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,25]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,25]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,25]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,25]<stdout>:     Taille maximum du répertoire            :  300
[1,25]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,25]<stdout>:
[1,25]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,25]<stdout>:
[1,30]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,30]<stdout>:
[1,30]<stdout>:Nom de la base                          :  ELEMBASE
[1,30]<stdout>:     Créée avec la version                   :  17.02.04
[1,30]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,30]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,30]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,30]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,30]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,30]<stdout>:     Taille maximum du répertoire            :  300
[1,30]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,30]<stdout>:
[1,30]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,30]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Créée avec la version                   :  17.02.04
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,18]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,18]<stdout>:
[1,18]<stdout>:Nom de la base                          :  ELEMBASE
[1,18]<stdout>:     Créée avec la version                   :  17.02.04
[1,18]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,18]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,18]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,18]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,18]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,18]<stdout>:     Taille maximum du répertoire            :  300
[1,18]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,18]<stdout>:
[1,18]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,18]<stdout>:
[1,17]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,17]<stdout>:
[1,17]<stdout>:Nom de la base                          :  ELEMBASE
[1,17]<stdout>:     Créée avec la version                   :  17.02.04
[1,17]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,17]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,17]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,17]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,17]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,17]<stdout>:     Taille maximum du répertoire            :  300
[1,17]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,17]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,29]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,29]<stdout>:
[1,17]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,17]<stdout>:
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Créée avec la version                   :  17.02.04
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,29]<stdout>:Nom de la base                          :  ELEMBASE
[1,29]<stdout>:     Créée avec la version                   :  17.02.04
[1,29]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,29]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,29]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,29]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,29]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,29]<stdout>:     Taille maximum du répertoire            :  300
[1,29]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,29]<stdout>:
[1,29]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,29]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,27]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,27]<stdout>:
[1,27]<stdout>:Nom de la base                          :  ELEMBASE
[1,27]<stdout>:     Créée avec la version                   :  17.02.04
[1,27]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,27]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,27]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,27]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,27]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,27]<stdout>:     Taille maximum du répertoire            :  300
[1,27]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,27]<stdout>:
[1,27]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,27]<stdout>:
[1,8]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,8]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,8]<stdout>:Nom de la base                          :  ELEMBASE
[1,8]<stdout>:     Créée avec la version                   :  17.02.04
[1,8]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,8]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,8]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,8]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,8]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,8]<stdout>:     Taille maximum du répertoire            :  300
[1,8]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,8]<stdout>:
[1,8]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,8]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Créée avec la version                   :  17.02.04
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Créée avec la version                   :  17.02.04
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Créée avec la version                   :  17.02.04
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,23]<stdout>:Nom de la base                          :  ELEMBASE
[1,23]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,23]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,23]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,23]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,23]<stdout>:     Nombre total d'accès en lecture         :  63
[1,23]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,23]<stdout>:     Nombre total d'accès en écriture        :  0
[1,23]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,23]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,23]<stdout>:     Taille maximum du répertoire            :  300
[1,23]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,23]<stdout>:
[1,23]<stdout>:Relecture des catalogues des éléments faite.
[1,23]<stdout>:
[1,20]<stdout>:Nom de la base                          :  ELEMBASE
[1,20]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,20]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,20]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,20]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,20]<stdout>:     Nombre total d'accès en lecture         :  63
[1,20]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,20]<stdout>:     Nombre total d'accès en écriture        :  0
[1,20]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,20]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,20]<stdout>:     Taille maximum du répertoire            :  300
[1,20]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,20]<stdout>:
[1,23]<stdout>:Fin de lecture (durée  0.035924  s.) 
[1,23]<stdout>:
[1,20]<stdout>:Relecture des catalogues des éléments faite.
[1,20]<stdout>:
[1,20]<stdout>:Fin de lecture (durée  0.035828  s.) 
[1,20]<stdout>:
[1,23]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,23]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,23]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,23]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,20]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,20]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,20]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,20]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,23]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.25s, elaps:        0.27s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.26s, elaps:        0.27s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:Nom de la base                          :  ELEMBASE
[1,21]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,21]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,21]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,21]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,21]<stdout>:     Nombre total d'accès en lecture         :  63
[1,21]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,21]<stdout>:     Nombre total d'accès en écriture        :  0
[1,21]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,21]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,21]<stdout>:     Taille maximum du répertoire            :  300
[1,21]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,21]<stdout>:
[1,21]<stdout>:Relecture des catalogues des éléments faite.
[1,21]<stdout>:
[1,21]<stdout>:Fin de lecture (durée  0.035515  s.) 
[1,21]<stdout>:
[1,21]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,21]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,21]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,21]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,21]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.25s, elaps:        0.28s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:Nom de la base                          :  ELEMBASE
[1,19]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,19]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,19]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,19]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,19]<stdout>:     Nombre total d'accès en lecture         :  63
[1,19]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,19]<stdout>:     Nombre total d'accès en écriture        :  0
[1,19]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,19]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,19]<stdout>:     Taille maximum du répertoire            :  300
[1,19]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,19]<stdout>:
[1,19]<stdout>:Relecture des catalogues des éléments faite.
[1,19]<stdout>:
[1,19]<stdout>:Fin de lecture (durée  0.035165  s.) 
[1,19]<stdout>:
[1,19]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,19]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,19]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,19]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,19]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.28s, elaps:        0.28s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre total d'accès en lecture         :  63
[1,7]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,7]<stdout>:     Nombre total d'accès en écriture        :  0
[1,7]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,7]<stdout>:Relecture des catalogues des éléments faite.
[1,7]<stdout>:
[1,7]<stdout>:Fin de lecture (durée  0.034371  s.) 
[1,7]<stdout>:
[1,7]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,7]<stdout>:                         ajouté à l'initialisation du processus : 709.64 Mo                         
[1,7]<stdout>:                               Limite cible du processus : 4908.04 Mo                               
[1,7]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,7]<stdout>:# Mémoire (Mo) :   709.64 /   700.64 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.28s, elaps:        0.29s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:Nom de la base                          :  ELEMBASE
[1,31]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,31]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,31]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,31]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,31]<stdout>:     Nombre total d'accès en lecture         :  63
[1,31]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,31]<stdout>:     Nombre total d'accès en écriture        :  0
[1,31]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,31]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,31]<stdout>:     Taille maximum du répertoire            :  300
[1,31]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,31]<stdout>:
[1,31]<stdout>:Relecture des catalogues des éléments faite.
[1,31]<stdout>:
[1,31]<stdout>:Fin de lecture (durée  0.034567  s.) 
[1,31]<stdout>:
[1,31]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,31]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,31]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,31]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,12]<stdout>:Nom de la base                          :  ELEMBASE
[1,12]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,12]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,12]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,12]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,12]<stdout>:     Nombre total d'accès en lecture         :  63
[1,12]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,12]<stdout>:     Nombre total d'accès en écriture        :  0
[1,12]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,12]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,12]<stdout>:     Taille maximum du répertoire            :  300
[1,12]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,12]<stdout>:
[1,12]<stdout>:Relecture des catalogues des éléments faite.
[1,12]<stdout>:
[1,12]<stdout>:Fin de lecture (durée  0.034157  s.) 
[1,12]<stdout>:
[1,31]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,12]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,12]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,31]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.28s, elaps:        0.29s)
[1,12]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:Nom de la base                          :  ELEMBASE
[1,15]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,15]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,15]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,15]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,15]<stdout>:     Nombre total d'accès en lecture         :  63
[1,15]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,15]<stdout>:     Nombre total d'accès en écriture        :  0
[1,15]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,15]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,15]<stdout>:     Taille maximum du répertoire            :  300
[1,15]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,15]<stdout>:
[1,15]<stdout>:Relecture des catalogues des éléments faite.
[1,15]<stdout>:
[1,12]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.26s, elaps:        0.29s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:Fin de lecture (durée  0.033936  s.) 
[1,15]<stdout>:
[1,15]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,15]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,15]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,15]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,15]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.27s, elaps:        0.29s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:Nom de la base                          :  ELEMBASE
[1,26]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,26]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,26]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,26]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,26]<stdout>:     Nombre total d'accès en lecture         :  63
[1,26]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,26]<stdout>:     Nombre total d'accès en écriture        :  0
[1,26]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,26]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,26]<stdout>:     Taille maximum du répertoire            :  300
[1,26]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,26]<stdout>:
[1,26]<stdout>:Relecture des catalogues des éléments faite.
[1,26]<stdout>:
[1,9]<stdout>:Nom de la base                          :  ELEMBASE
[1,9]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,9]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,9]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,9]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,9]<stdout>:     Nombre total d'accès en lecture         :  63
[1,9]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,9]<stdout>:     Nombre total d'accès en écriture        :  0
[1,9]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,9]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,9]<stdout>:     Taille maximum du répertoire            :  300
[1,9]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,9]<stdout>:
[1,26]<stdout>:Fin de lecture (durée  0.034014  s.) 
[1,26]<stdout>:
[1,9]<stdout>:Relecture des catalogues des éléments faite.
[1,9]<stdout>:
[1,9]<stdout>:Fin de lecture (durée  0.033977  s.) 
[1,9]<stdout>:
[1,26]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,26]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,26]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,9]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,9]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,9]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,26]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,9]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,26]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.27s, elaps:        0.29s)
[1,9]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.26s, elaps:        0.29s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre total d'accès en lecture         :  63
[1,6]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,6]<stdout>:     Nombre total d'accès en écriture        :  0
[1,6]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:Relecture des catalogues des éléments faite.
[1,6]<stdout>:
[1,6]<stdout>:Fin de lecture (durée  0.033265  s.) 
[1,6]<stdout>:
[1,6]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,6]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,6]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,6]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,13]<stdout>:Nom de la base                          :  ELEMBASE
[1,13]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,13]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,13]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,13]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,13]<stdout>:     Nombre total d'accès en lecture         :  63
[1,13]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,13]<stdout>:     Nombre total d'accès en écriture        :  0
[1,13]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,13]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,13]<stdout>:     Taille maximum du répertoire            :  300
[1,13]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,13]<stdout>:
[1,13]<stdout>:Relecture des catalogues des éléments faite.
[1,13]<stdout>:
[1,13]<stdout>:Fin de lecture (durée  0.033036  s.) 
[1,13]<stdout>:
[1,6]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.27s, elaps:        0.29s)
[1,13]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,13]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,13]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,13]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.26s, elaps:        0.29s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:Nom de la base                          :  ELEMBASE
[1,24]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,24]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,24]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,24]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,24]<stdout>:     Nombre total d'accès en lecture         :  63
[1,24]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,24]<stdout>:     Nombre total d'accès en écriture        :  0
[1,24]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,24]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,24]<stdout>:     Taille maximum du répertoire            :  300
[1,24]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,24]<stdout>:
[1,24]<stdout>:Relecture des catalogues des éléments faite.
[1,24]<stdout>:
[1,24]<stdout>:Fin de lecture (durée  0.032797  s.) 
[1,24]<stdout>:
[1,24]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,24]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,24]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,24]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,24]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:Nom de la base                          :  ELEMBASE
[1,28]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,28]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,28]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,28]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,28]<stdout>:     Nombre total d'accès en lecture         :  63
[1,28]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,28]<stdout>:     Nombre total d'accès en écriture        :  0
[1,28]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,28]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,28]<stdout>:     Taille maximum du répertoire            :  300
[1,28]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,28]<stdout>:
[1,28]<stdout>:Relecture des catalogues des éléments faite.
[1,28]<stdout>:
[1,24]<stdout>:# Fin commande #0001   user+syst:        0.05s (syst:        0.24s, elaps:        0.29s)
[1,28]<stdout>:Fin de lecture (durée  0.032062  s.) 
[1,28]<stdout>:
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,28]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,28]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,28]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,16]<stdout>:Nom de la base                          :  ELEMBASE
[1,16]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,16]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,16]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,16]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,16]<stdout>:     Nombre total d'accès en lecture         :  63
[1,16]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,16]<stdout>:     Nombre total d'accès en écriture        :  0
[1,16]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,16]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,16]<stdout>:     Taille maximum du répertoire            :  300
[1,16]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,16]<stdout>:
[1,28]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:Relecture des catalogues des éléments faite.
[1,16]<stdout>:
[1,28]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.27s, elaps:        0.29s)
[1,16]<stdout>:Fin de lecture (durée  0.031594  s.) 
[1,16]<stdout>:
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:Nom de la base                          :  ELEMBASE
[1,11]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,11]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,11]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,11]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,11]<stdout>:     Nombre total d'accès en lecture         :  63
[1,11]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,11]<stdout>:     Nombre total d'accès en écriture        :  0
[1,11]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,11]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,11]<stdout>:     Taille maximum du répertoire            :  300
[1,11]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,11]<stdout>:
[1,16]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,16]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,16]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,11]<stdout>:Relecture des catalogues des éléments faite.
[1,11]<stdout>:
[1,16]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,11]<stdout>:Fin de lecture (durée  0.031697  s.) 
[1,11]<stdout>:
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre total d'accès en lecture         :  63
[1,5]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,5]<stdout>:     Nombre total d'accès en écriture        :  0
[1,5]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,5]<stdout>:Relecture des catalogues des éléments faite.
[1,5]<stdout>:
[1,11]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,11]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,11]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,5]<stdout>:Fin de lecture (durée  0.031562  s.) 
[1,5]<stdout>:
[1,11]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,16]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.27s, elaps:        0.28s)
[1,5]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,5]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,5]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,25]<stdout>:Nom de la base                          :  ELEMBASE
[1,25]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,25]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,25]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,25]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,25]<stdout>:     Nombre total d'accès en lecture         :  63
[1,25]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,25]<stdout>:     Nombre total d'accès en écriture        :  0
[1,25]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,25]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,25]<stdout>:     Taille maximum du répertoire            :  300
[1,25]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,25]<stdout>:
[1,25]<stdout>:Relecture des catalogues des éléments faite.
[1,25]<stdout>:
[1,11]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:Fin de lecture (durée  0.031088  s.) 
[1,25]<stdout>:
[1,11]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.28s, elaps:        0.28s)
[1,14]<stdout>:Nom de la base                          :  ELEMBASE
[1,14]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,14]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,14]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,14]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,14]<stdout>:     Nombre total d'accès en lecture         :  63
[1,14]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,14]<stdout>:     Nombre total d'accès en écriture        :  0
[1,14]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,14]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,14]<stdout>:     Taille maximum du répertoire            :  300
[1,14]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,14]<stdout>:
[1,5]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:Relecture des catalogues des éléments faite.
[1,14]<stdout>:
[1,25]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,25]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,25]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,5]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.27s, elaps:        0.29s)
[1,14]<stdout>:Fin de lecture (durée  0.031639  s.) 
[1,14]<stdout>:
[1,25]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,14]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,14]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,14]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,25]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.29s, elaps:        0.29s)
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:Nom de la base                          :  ELEMBASE
[1,30]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,30]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,30]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,30]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,30]<stdout>:     Nombre total d'accès en lecture         :  63
[1,30]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,30]<stdout>:     Nombre total d'accès en écriture        :  0
[1,30]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,30]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,30]<stdout>:     Taille maximum du répertoire            :  300
[1,30]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,30]<stdout>:
[1,14]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:Relecture des catalogues des éléments faite.
[1,30]<stdout>:
[1,14]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.27s, elaps:        0.29s)
[1,30]<stdout>:Fin de lecture (durée  0.030800  s.) 
[1,30]<stdout>:
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,30]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,30]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,30]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,30]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.28s, elaps:        0.29s)
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:Nom de la base                          :  ELEMBASE
[1,18]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,18]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,18]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,18]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,18]<stdout>:     Nombre total d'accès en lecture         :  63
[1,18]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,18]<stdout>:     Nombre total d'accès en écriture        :  0
[1,18]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,18]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,18]<stdout>:     Taille maximum du répertoire            :  300
[1,18]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,18]<stdout>:
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre total d'accès en lecture         :  63
[1,0]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,0]<stdout>:     Nombre total d'accès en écriture        :  0
[1,0]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,18]<stdout>:Relecture des catalogues des éléments faite.
[1,18]<stdout>:
[1,0]<stdout>:Relecture des catalogues des éléments faite.
[1,0]<stdout>:
[1,18]<stdout>:Fin de lecture (durée  0.029741  s.) 
[1,18]<stdout>:
[1,0]<stdout>:Fin de lecture (durée  0.030242  s.) 
[1,0]<stdout>:
[1,18]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,18]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,18]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,0]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.49 Mo                       
[1,0]<stdout>:                         ajouté à l'initialisation du processus : 709.68 Mo                         
[1,0]<stdout>:                               Limite cible du processus : 4908.18 Mo                               
[1,18]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,0]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,29]<stdout>:Nom de la base                          :  ELEMBASE
[1,29]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,29]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,29]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,29]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,29]<stdout>:     Nombre total d'accès en lecture         :  63
[1,29]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,29]<stdout>:     Nombre total d'accès en écriture        :  0
[1,29]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,29]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,29]<stdout>:     Taille maximum du répertoire            :  300
[1,29]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,29]<stdout>:
[1,17]<stdout>:Nom de la base                          :  ELEMBASE
[1,17]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,17]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,17]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,17]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,17]<stdout>:     Nombre total d'accès en lecture         :  63
[1,17]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,17]<stdout>:     Nombre total d'accès en écriture        :  0
[1,17]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,17]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,17]<stdout>:     Taille maximum du répertoire            :  300
[1,17]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,17]<stdout>:
[1,29]<stdout>:Relecture des catalogues des éléments faite.
[1,29]<stdout>:
[1,27]<stdout>:Nom de la base                          :  ELEMBASE
[1,27]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,27]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,27]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,27]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,27]<stdout>:     Nombre total d'accès en lecture         :  63
[1,27]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,27]<stdout>:     Nombre total d'accès en écriture        :  0
[1,27]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,27]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,27]<stdout>:     Taille maximum du répertoire            :  300
[1,27]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,27]<stdout>:
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre total d'accès en lecture         :  63
[1,1]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,1]<stdout>:     Nombre total d'accès en écriture        :  0
[1,1]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,17]<stdout>:Relecture des catalogues des éléments faite.
[1,17]<stdout>:
[1,29]<stdout>:Fin de lecture (durée  0.029734  s.) 
[1,29]<stdout>:
[1,18]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Mémoire (Mo) :   709.68 /   700.80 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:Fin de lecture (durée  0.029914  s.) 
[1,17]<stdout>:
[1,27]<stdout>:Relecture des catalogues des éléments faite.
[1,27]<stdout>:
[1,1]<stdout>:Relecture des catalogues des éléments faite.
[1,1]<stdout>:
[1,0]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.26s, elaps:        0.29s)
[1,27]<stdout>:Fin de lecture (durée  0.029614  s.) 
[1,27]<stdout>:
[1,1]<stdout>:Fin de lecture (durée  0.029854  s.) 
[1,1]<stdout>:
[1,18]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.26s, elaps:        0.29s)
[1,29]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,29]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,29]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:Nom de la base                          :  ELEMBASE
[1,8]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,8]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,8]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,8]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,8]<stdout>:     Nombre total d'accès en lecture         :  63
[1,8]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,8]<stdout>:     Nombre total d'accès en écriture        :  0
[1,8]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,8]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,8]<stdout>:     Taille maximum du répertoire            :  300
[1,8]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,8]<stdout>:
[1,29]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,17]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,17]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,17]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,17]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,8]<stdout>:Relecture des catalogues des éléments faite.
[1,8]<stdout>:
[1,27]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,27]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,27]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre total d'accès en lecture         :  63
[1,3]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,3]<stdout>:     Nombre total d'accès en écriture        :  0
[1,3]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,1]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,1]<stdout>:                         ajouté à l'initialisation du processus : 709.61 Mo                         
[1,1]<stdout>:                               Limite cible du processus : 4908.01 Mo                               
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre total d'accès en lecture         :  63
[1,2]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,2]<stdout>:     Nombre total d'accès en écriture        :  0
[1,2]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,27]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,1]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,8]<stdout>:Fin de lecture (durée  0.029203  s.) 
[1,8]<stdout>:
[1,3]<stdout>:Relecture des catalogues des éléments faite.
[1,3]<stdout>:
[1,2]<stdout>:Relecture des catalogues des éléments faite.
[1,2]<stdout>:
[1,3]<stdout>:Fin de lecture (durée  0.029190  s.) 
[1,3]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre total d'accès en lecture         :  63
[1,4]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,4]<stdout>:     Nombre total d'accès en écriture        :  0
[1,4]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,2]<stdout>:Fin de lecture (durée  0.028854  s.) 
[1,2]<stdout>:
[1,4]<stdout>:Relecture des catalogues des éléments faite.
[1,4]<stdout>:
[1,8]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,8]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,8]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,29]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:Fin de lecture (durée  0.028861  s.) 
[1,4]<stdout>:
[1,3]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,3]<stdout>:                         ajouté à l'initialisation du processus : 709.64 Mo                         
[1,3]<stdout>:                               Limite cible du processus : 4908.04 Mo                               
[1,8]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,17]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Fin commande #0001   user+syst:        0.04s (syst:        0.24s, elaps:        0.29s)
[1,2]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,2]<stdout>:                         ajouté à l'initialisation du processus : 709.60 Mo                         
[1,2]<stdout>:                               Limite cible du processus : 4908.00 Mo                               
[1,1]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,27]<stdout>:# Mémoire (Mo) :   709.61 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.27s, elaps:        0.29s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,4]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,4]<stdout>:                         ajouté à l'initialisation du processus : 709.64 Mo                         
[1,4]<stdout>:                               Limite cible du processus : 4908.04 Mo                               
[1,1]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.27s, elaps:        0.29s)
[1,27]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.27s, elaps:        0.29s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :   709.64 /   700.64 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.26s, elaps:        0.29s)
[1,2]<stdout>:# Mémoire (Mo) :   709.60 /   700.75 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.26s, elaps:        0.29s)
[1,2]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.26s, elaps:        0.29s)
[1,4]<stdout>:# Mémoire (Mo) :   709.64 /   700.64 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0001   user+syst:        0.04s (syst:        0.25s, elaps:        0.29s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:PETSc initialized...
[1,24]<stdout>:PETSc initialized...
[1,9]<stdout>:PETSc initialized...
[1,12]<stdout>:PETSc initialized...
[1,28]<stdout>:PETSc initialized...
[1,25]<stdout>:PETSc initialized...
[1,16]<stdout>:PETSc initialized...
[1,20]<stdout>:PETSc initialized...
[1,14]<stdout>:PETSc initialized...
[1,0]<stdout>:PETSc initialized...
[1,29]<stdout>:PETSc initialized...
[1,23]<stdout>:PETSc initialized...
[1,27]<stdout>:PETSc initialized...
[1,7]<stdout>:PETSc initialized...
[1,17]<stdout>:PETSc initialized...
[1,10]<stdout>:PETSc initialized...
[1,11]<stdout>:PETSc initialized...
[1,5]<stdout>:PETSc initialized...
[1,8]<stdout>:PETSc initialized...
[1,1]<stdout>:PETSc initialized...
[1,21]<stdout>:PETSc initialized...
[1,15]<stdout>:PETSc initialized...
[1,2]<stdout>:PETSc initialized...
[1,18]<stdout>:PETSc initialized...
[1,6]<stdout>:PETSc initialized...
[1,13]<stdout>:PETSc initialized...
[1,30]<stdout>:PETSc initialized...
[1,4]<stdout>:PETSc initialized...
[1,26]<stdout>:PETSc initialized...
[1,3]<stdout>:PETSc initialized...
[1,19]<stdout>:PETSc initialized...
[1,22]<stdout>:PETSc initialized...
[1,0]<stdout>:Nom MED du maillage : PARALLEPIPED
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000001 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                      274625
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                     287488
[1,0]<stdout>:                              SEG2                  768
[1,0]<stdout>:                              QUAD4               24576
[1,0]<stdout>:                              HEXA8              262144
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                8
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES              19
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACCES='NEW',
[1,0]<stdout>:             ACTION='ASSOCIER',
[1,0]<stdout>:             FICHIER='/tmp/buildCubel_4ucqjn/buildCube.med',
[1,0]<stdout>:             TYPE='BINARY',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:Deleting '/tmp/buildCubel_4ucqjn/buildCube.med': No such file or directory
[1,0]<stdout>:# Mémoire (Mo) :  1231.32 /   900.84 /   249.04 /   213.86 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0002   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:Création du fichier au format MED 3.3.1.
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0003 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACTION='LIBERER',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1231.32 /   900.96 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0003   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,20]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,14]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,22]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,29]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,23]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,27]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,7]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,17]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,10]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,11]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,31]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,5]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,8]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,1]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,21]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,15]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,2]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,18]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,6]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,13]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,3]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,30]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,19]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,4]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,26]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,24]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,9]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,12]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,28]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,25]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,16]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,0]<stdout>:
[1,0]<stdout>:Nom MED du maillage : 00000001
[1,0]<stdout>:
[1,22]<stdout>:Nom MED du maillage : 00000001
[1,22]<stdout>:
[1,27]<stdout>:Nom MED du maillage : 00000001
[1,27]<stdout>:
[1,11]<stdout>:Nom MED du maillage : 00000001
[1,11]<stdout>:
[1,21]<stdout>:Nom MED du maillage : 00000001
[1,21]<stdout>:
[1,16]<stdout>:Nom MED du maillage : 00000001
[1,16]<stdout>:
[1,8]<stdout>:Nom MED du maillage : 00000001
[1,8]<stdout>:
[1,15]<stdout>:Nom MED du maillage : 00000001
[1,15]<stdout>:
[1,28]<stdout>:Nom MED du maillage : 00000001
[1,28]<stdout>:
[1,10]<stdout>:Nom MED du maillage : 00000001
[1,10]<stdout>:
[1,17]<stdout>:Nom MED du maillage : 00000001
[1,17]<stdout>:
[1,2]<stdout>:Nom MED du maillage : 00000001
[1,2]<stdout>:
[1,12]<stdout>:Nom MED du maillage : 00000001
[1,12]<stdout>:
[1,1]<stdout>:Nom MED du maillage : 00000001
[1,1]<stdout>:
[1,18]<stdout>:Nom MED du maillage : 00000001
[1,18]<stdout>:
[1,24]<stdout>:Nom MED du maillage : 00000001
[1,24]<stdout>:
[1,7]<stdout>:Nom MED du maillage : 00000001
[1,7]<stdout>:
[1,29]<stdout>:Nom MED du maillage : 00000001
[1,29]<stdout>:
[1,4]<stdout>:Nom MED du maillage : 00000001
[1,4]<stdout>:
[1,25]<stdout>:Nom MED du maillage : 00000001
[1,25]<stdout>:
[1,13]<stdout>:Nom MED du maillage : 00000001
[1,13]<stdout>:
[1,26]<stdout>:Nom MED du maillage : 00000001
[1,26]<stdout>:
[1,3]<stdout>:Nom MED du maillage : 00000001
[1,3]<stdout>:
[1,19]<stdout>:Nom MED du maillage : 00000001
[1,19]<stdout>:
[1,23]<stdout>:Nom MED du maillage : 00000001
[1,23]<stdout>:
[1,30]<stdout>:Nom MED du maillage : 00000001
[1,30]<stdout>:
[1,20]<stdout>:Nom MED du maillage : 00000001
[1,20]<stdout>:
[1,31]<stdout>:Nom MED du maillage : 00000001
[1,31]<stdout>:
[1,5]<stdout>:Nom MED du maillage : 00000001
[1,5]<stdout>:
[1,14]<stdout>:Nom MED du maillage : 00000001
[1,14]<stdout>:
[1,6]<stdout>:Nom MED du maillage : 00000001
[1,6]<stdout>:
[1,9]<stdout>:Nom MED du maillage : 00000001
[1,9]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:--------------------------------------------------------------------------------
[1,24]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:--------------------------------------------------------------------------------
[1,26]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:--------------------------------------------------------------------------------
[1,25]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:--------------------------------------------------------------------------------
[1,28]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:--------------------------------------------------------------------------------
[1,27]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:--------------------------------------------------------------------------------
[1,29]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:--------------------------------------------------------------------------------
[1,30]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:--------------------------------------------------------------------------------
[1,31]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:--------------------------------------------------------------------------------
[1,30]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:--------------------------------------------------------------------------------
[1,26]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:--------------------------------------------------------------------------------
[1,31]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:--------------------------------------------------------------------------------
[1,25]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:--------------------------------------------------------------------------------
[1,29]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:
[1,2]<stdout>:
[1,6]<stdout>:
[1,21]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:--------------------------------------------------------------------------------
[1,28]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:--------------------------------------------------------------------------------
[1,24]<stdout>:
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:--------------------------------------------------------------------------------
[1,27]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt282
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt282
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt282
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt282
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt282
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt282
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt282
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt282
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt282
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt282
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt282
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt282
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt282
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt282
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt282
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt282
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt282
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt282
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt282
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt282
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt282
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt282
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt282
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt282
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt282
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt282
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt282
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt282
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt282
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt282
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt282
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt282
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,6]<stdout>:ligne 282
[1,28]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,28]<stdout>:ligne 282
[1,21]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,21]<stdout>:ligne 282
[1,20]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,20]<stdout>:ligne 282
[1,4]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,4]<stdout>:ligne 282
[1,1]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,1]<stdout>:ligne 282
[1,23]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,23]<stdout>:ligne 282
[1,27]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,27]<stdout>:ligne 282
[1,31]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,31]<stdout>:ligne 282
[1,12]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,12]<stdout>:ligne 282
[1,24]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,24]<stdout>:ligne 282
[1,19]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,19]<stdout>:ligne 282
[1,17]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,17]<stdout>:ligne 282
[1,9]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,9]<stdout>:ligne 282
[1,0]<stdout>:# Commande #0004 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,0]<stdout>:ligne 282
[1,25]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,25]<stdout>:ligne 282
[1,29]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,29]<stdout>:ligne 282
[1,13]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,13]<stdout>:ligne 282
[1,7]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,7]<stdout>:ligne 282
[1,10]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,10]<stdout>:ligne 282
[1,16]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,16]<stdout>:ligne 282
[1,2]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,2]<stdout>:ligne 282
[1,3]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,3]<stdout>:ligne 282
[1,8]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,8]<stdout>:ligne 282
[1,22]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,22]<stdout>:ligne 282
[1,30]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,30]<stdout>:ligne 282
[1,5]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,5]<stdout>:ligne 282
[1,15]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,15]<stdout>:ligne 282
[1,14]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,14]<stdout>:ligne 282
[1,11]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,11]<stdout>:ligne 282
[1,18]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,18]<stdout>:ligne 282
[1,26]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,26]<stdout>:ligne 282
[1,6]<stdout>:CREA_MAILLAGE(INFO=1,
[1,6]<stdout>:              MAILLAGE='<00000002>',
[1,6]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,6]<stdout>:                             TOUT='OUI'))
[1,6]<stdout>:
[1,1]<stdout>:CREA_MAILLAGE(INFO=1,
[1,1]<stdout>:              MAILLAGE='<00000002>',
[1,1]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,1]<stdout>:                             TOUT='OUI'))
[1,1]<stdout>:
[1,11]<stdout>:CREA_MAILLAGE(INFO=1,
[1,11]<stdout>:              MAILLAGE='<00000002>',
[1,11]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,11]<stdout>:                             TOUT='OUI'))
[1,11]<stdout>:
[1,21]<stdout>:CREA_MAILLAGE(INFO=1,
[1,21]<stdout>:              MAILLAGE='<00000002>',
[1,21]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,21]<stdout>:                             TOUT='OUI'))
[1,21]<stdout>:
[1,18]<stdout>:CREA_MAILLAGE(INFO=1,
[1,18]<stdout>:              MAILLAGE='<00000002>',
[1,18]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,18]<stdout>:                             TOUT='OUI'))
[1,18]<stdout>:
[1,20]<stdout>:CREA_MAILLAGE(INFO=1,
[1,20]<stdout>:              MAILLAGE='<00000002>',
[1,20]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,20]<stdout>:                             TOUT='OUI'))
[1,20]<stdout>:
[1,23]<stdout>:CREA_MAILLAGE(INFO=1,
[1,23]<stdout>:              MAILLAGE='<00000002>',
[1,23]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,23]<stdout>:                             TOUT='OUI'))
[1,23]<stdout>:
[1,4]<stdout>:CREA_MAILLAGE(INFO=1,
[1,4]<stdout>:              MAILLAGE='<00000002>',
[1,4]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,4]<stdout>:                             TOUT='OUI'))
[1,4]<stdout>:
[1,31]<stdout>:CREA_MAILLAGE(INFO=1,
[1,31]<stdout>:              MAILLAGE='<00000002>',
[1,31]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,31]<stdout>:                             TOUT='OUI'))
[1,31]<stdout>:
[1,12]<stdout>:CREA_MAILLAGE(INFO=1,
[1,12]<stdout>:              MAILLAGE='<00000002>',
[1,12]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,12]<stdout>:                             TOUT='OUI'))
[1,12]<stdout>:
[1,24]<stdout>:CREA_MAILLAGE(INFO=1,
[1,24]<stdout>:              MAILLAGE='<00000002>',
[1,24]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,24]<stdout>:                             TOUT='OUI'))
[1,24]<stdout>:
[1,19]<stdout>:CREA_MAILLAGE(INFO=1,
[1,19]<stdout>:              MAILLAGE='<00000002>',
[1,19]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,19]<stdout>:                             TOUT='OUI'))
[1,19]<stdout>:
[1,17]<stdout>:CREA_MAILLAGE(INFO=1,
[1,17]<stdout>:              MAILLAGE='<00000002>',
[1,17]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,17]<stdout>:                             TOUT='OUI'))
[1,17]<stdout>:
[1,9]<stdout>:CREA_MAILLAGE(INFO=1,
[1,9]<stdout>:              MAILLAGE='<00000002>',
[1,9]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,9]<stdout>:                             TOUT='OUI'))
[1,9]<stdout>:
[1,0]<stdout>:CREA_MAILLAGE(INFO=1,
[1,0]<stdout>:              MAILLAGE='<00000002>',
[1,0]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,0]<stdout>:                             TOUT='OUI'))
[1,0]<stdout>:
[1,25]<stdout>:CREA_MAILLAGE(INFO=1,
[1,25]<stdout>:              MAILLAGE='<00000002>',
[1,25]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,25]<stdout>:                             TOUT='OUI'))
[1,25]<stdout>:
[1,29]<stdout>:CREA_MAILLAGE(INFO=1,
[1,29]<stdout>:              MAILLAGE='<00000002>',
[1,29]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,29]<stdout>:                             TOUT='OUI'))
[1,29]<stdout>:
[1,13]<stdout>:CREA_MAILLAGE(INFO=1,
[1,13]<stdout>:              MAILLAGE='<00000002>',
[1,13]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,13]<stdout>:                             TOUT='OUI'))
[1,13]<stdout>:
[1,7]<stdout>:CREA_MAILLAGE(INFO=1,
[1,7]<stdout>:              MAILLAGE='<00000002>',
[1,7]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,7]<stdout>:                             TOUT='OUI'))
[1,7]<stdout>:
[1,10]<stdout>:CREA_MAILLAGE(INFO=1,
[1,10]<stdout>:              MAILLAGE='<00000002>',
[1,10]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,10]<stdout>:                             TOUT='OUI'))
[1,10]<stdout>:
[1,16]<stdout>:CREA_MAILLAGE(INFO=1,
[1,16]<stdout>:              MAILLAGE='<00000002>',
[1,16]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,16]<stdout>:                             TOUT='OUI'))
[1,16]<stdout>:
[1,2]<stdout>:CREA_MAILLAGE(INFO=1,
[1,2]<stdout>:              MAILLAGE='<00000002>',
[1,2]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,2]<stdout>:                             TOUT='OUI'))
[1,2]<stdout>:
[1,3]<stdout>:CREA_MAILLAGE(INFO=1,
[1,3]<stdout>:              MAILLAGE='<00000002>',
[1,3]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,3]<stdout>:                             TOUT='OUI'))
[1,3]<stdout>:
[1,8]<stdout>:CREA_MAILLAGE(INFO=1,
[1,8]<stdout>:              MAILLAGE='<00000002>',
[1,8]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,8]<stdout>:                             TOUT='OUI'))
[1,8]<stdout>:
[1,22]<stdout>:CREA_MAILLAGE(INFO=1,
[1,22]<stdout>:              MAILLAGE='<00000002>',
[1,22]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,22]<stdout>:                             TOUT='OUI'))
[1,22]<stdout>:
[1,26]<stdout>:CREA_MAILLAGE(INFO=1,
[1,26]<stdout>:              MAILLAGE='<00000002>',
[1,26]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,26]<stdout>:                             TOUT='OUI'))
[1,26]<stdout>:
[1,28]<stdout>:CREA_MAILLAGE(INFO=1,
[1,28]<stdout>:              MAILLAGE='<00000002>',
[1,28]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,28]<stdout>:                             TOUT='OUI'))
[1,28]<stdout>:
[1,15]<stdout>:CREA_MAILLAGE(INFO=1,
[1,15]<stdout>:              MAILLAGE='<00000002>',
[1,15]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,15]<stdout>:                             TOUT='OUI'))
[1,15]<stdout>:
[1,14]<stdout>:CREA_MAILLAGE(INFO=1,
[1,14]<stdout>:              MAILLAGE='<00000002>',
[1,14]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,14]<stdout>:                             TOUT='OUI'))
[1,14]<stdout>:
[1,27]<stdout>:CREA_MAILLAGE(INFO=1,
[1,27]<stdout>:              MAILLAGE='<00000002>',
[1,27]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,27]<stdout>:                             TOUT='OUI'))
[1,27]<stdout>:
[1,30]<stdout>:CREA_MAILLAGE(INFO=1,
[1,30]<stdout>:              MAILLAGE='<00000002>',
[1,30]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,30]<stdout>:                             TOUT='OUI'))
[1,30]<stdout>:
[1,5]<stdout>:CREA_MAILLAGE(INFO=1,
[1,5]<stdout>:              MAILLAGE='<00000002>',
[1,5]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,5]<stdout>:                             TOUT='OUI'))
[1,5]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,22]<stdout>:
[1,22]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,22]<stdout>:MAILLAGE_P                                                                      
[1,22]<stdout>:
[1,22]<stdout>:NOMBRE DE NOEUDS                       74520
[1,22]<stdout>:
[1,22]<stdout>:NOMBRE DE MAILLES                      74347
[1,22]<stdout>:                              SEG2                  132
[1,22]<stdout>:                              QUAD4                5383
[1,22]<stdout>:                              HEXA8               68832
[1,22]<stdout>:
[1,22]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,22]<stdout>:
[1,22]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,22]<stdout>:
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.24      0.00      0.23
[1,5]<stdout>:
[1,5]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,5]<stdout>:
[1,5]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,5]<stdout>:MAILLAGE_P                                                                      
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE NOEUDS                       71940
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE MAILLES                      71939
[1,5]<stdout>:                              SEG2                  131
[1,5]<stdout>:                              QUAD4                5248
[1,5]<stdout>:                              HEXA8               66560
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.50      0.00      0.51
[1,26]<stdout>:
[1,26]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,26]<stdout>:
[1,26]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,26]<stdout>:MAILLAGE_P                                                                      
[1,26]<stdout>:
[1,26]<stdout>:NOMBRE DE NOEUDS                       67434
[1,26]<stdout>:
[1,26]<stdout>:NOMBRE DE MAILLES                      67367
[1,26]<stdout>:                              SEG2                  126
[1,26]<stdout>:                              QUAD4                4953
[1,26]<stdout>:                              HEXA8               62288
[1,26]<stdout>:
[1,26]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,26]<stdout>:
[1,26]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,26]<stdout>:
[1,26]<stdout>:--------------------------------------------------------------------------------
[1,26]<stdout>:
[1,26]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.61      0.00      0.60
[1,28]<stdout>:
[1,28]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,28]<stdout>:
[1,28]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,28]<stdout>:MAILLAGE_P                                                                      
[1,28]<stdout>:
[1,28]<stdout>:NOMBRE DE NOEUDS                       77062
[1,28]<stdout>:
[1,28]<stdout>:NOMBRE DE MAILLES                      74668
[1,28]<stdout>:                              SEG2                   31
[1,28]<stdout>:                              QUAD4                3149
[1,28]<stdout>:                              HEXA8               71488
[1,28]<stdout>:
[1,28]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,28]<stdout>:
[1,28]<stdout>:--------------------------------------------------------------------------------
[1,28]<stdout>:
[1,28]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.06      0.01      0.04
[1,15]<stdout>:
[1,15]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,15]<stdout>:
[1,15]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,15]<stdout>:MAILLAGE_P                                                                      
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE NOEUDS                       73262
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE MAILLES                      73175
[1,15]<stdout>:                              SEG2                  128
[1,15]<stdout>:                              QUAD4                5247
[1,15]<stdout>:                              HEXA8               67800
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.31      0.00      0.32
[1,1]<stdout>:
[1,1]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,1]<stdout>:
[1,1]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,1]<stdout>:MAILLAGE_P                                                                      
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE NOEUDS                       75100
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE MAILLES                      72281
[1,1]<stdout>:                              SEG2                   29
[1,1]<stdout>:                              QUAD4                2996
[1,1]<stdout>:                              HEXA8               69256
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.17      0.00      0.16
[1,11]<stdout>:
[1,11]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,11]<stdout>:
[1,11]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,11]<stdout>:MAILLAGE_P                                                                      
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE NOEUDS                       70578
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE MAILLES                      70447
[1,11]<stdout>:                              SEG2                  128
[1,11]<stdout>:                              QUAD4                5123
[1,11]<stdout>:                              HEXA8               65196
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.44      0.00      0.44
[1,21]<stdout>:
[1,21]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,21]<stdout>:
[1,21]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,21]<stdout>:MAILLAGE_P                                                                      
[1,21]<stdout>:
[1,21]<stdout>:NOMBRE DE NOEUDS                       79028
[1,21]<stdout>:
[1,21]<stdout>:NOMBRE DE MAILLES                      76698
[1,21]<stdout>:                              SEG2                   36
[1,21]<stdout>:                              QUAD4                3536
[1,21]<stdout>:                              HEXA8               73126
[1,21]<stdout>:
[1,21]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,21]<stdout>:
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.05      0.01      0.04
[1,18]<stdout>:
[1,18]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,18]<stdout>:
[1,18]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,18]<stdout>:MAILLAGE_P                                                                      
[1,18]<stdout>:
[1,18]<stdout>:NOMBRE DE NOEUDS                       72602
[1,18]<stdout>:
[1,18]<stdout>:NOMBRE DE MAILLES                      71919
[1,18]<stdout>:                              SEG2                  114
[1,18]<stdout>:                              QUAD4                4747
[1,18]<stdout>:                              HEXA8               67058
[1,18]<stdout>:
[1,18]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,18]<stdout>:
[1,18]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,18]<stdout>:
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.28      0.00      0.28
[1,6]<stdout>:
[1,6]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,6]<stdout>:
[1,6]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,6]<stdout>:MAILLAGE_P                                                                      
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE NOEUDS                       77154
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE MAILLES                      74849
[1,6]<stdout>:                              SEG2                   33
[1,6]<stdout>:                              QUAD4                3800
[1,6]<stdout>:                              HEXA8               71016
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.19      0.00      0.19
[1,20]<stdout>:
[1,20]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,20]<stdout>:
[1,20]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,20]<stdout>:MAILLAGE_P                                                                      
[1,20]<stdout>:
[1,20]<stdout>:NOMBRE DE NOEUDS                       76714
[1,20]<stdout>:
[1,20]<stdout>:NOMBRE DE MAILLES                      72356
[1,20]<stdout>:                              QUAD4                1294
[1,20]<stdout>:                              HEXA8               71062
[1,20]<stdout>:
[1,20]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,20]<stdout>:
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.07
[1,14]<stdout>:
[1,14]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,14]<stdout>:
[1,14]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,14]<stdout>:MAILLAGE_P                                                                      
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE NOEUDS                       77986
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE MAILLES                      75562
[1,14]<stdout>:                              SEG2                   37
[1,14]<stdout>:                              QUAD4                3297
[1,14]<stdout>:                              HEXA8               72228
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.05      0.02      0.02
[1,23]<stdout>:
[1,23]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,23]<stdout>:
[1,23]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,23]<stdout>:MAILLAGE_P                                                                      
[1,23]<stdout>:
[1,23]<stdout>:NOMBRE DE NOEUDS                       70424
[1,23]<stdout>:
[1,23]<stdout>:NOMBRE DE MAILLES                      68200
[1,23]<stdout>:                              SEG2                   38
[1,23]<stdout>:                              QUAD4                3228
[1,23]<stdout>:                              HEXA8               64934
[1,23]<stdout>:
[1,23]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,23]<stdout>:
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.11      0.01      0.10
[1,4]<stdout>:
[1,4]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,4]<stdout>:
[1,4]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,4]<stdout>:MAILLAGE_P                                                                      
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE NOEUDS                       76784
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE MAILLES                      74377
[1,4]<stdout>:                              SEG2                   31
[1,4]<stdout>:                              QUAD4                3178
[1,4]<stdout>:                              HEXA8               71168
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.17      0.00      0.17
[1,31]<stdout>:
[1,31]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,31]<stdout>:
[1,31]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,31]<stdout>:MAILLAGE_P                                                                      
[1,31]<stdout>:
[1,31]<stdout>:NOMBRE DE NOEUDS                       72214
[1,31]<stdout>:
[1,31]<stdout>:NOMBRE DE MAILLES                      69640
[1,31]<stdout>:                              SEG2                   34
[1,31]<stdout>:                              QUAD4                2960
[1,31]<stdout>:                              HEXA8               66646
[1,31]<stdout>:
[1,31]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,31]<stdout>:
[1,31]<stdout>:--------------------------------------------------------------------------------
[1,31]<stdout>:
[1,31]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,12]<stdout>:
[1,12]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,12]<stdout>:
[1,12]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,12]<stdout>:MAILLAGE_P                                                                      
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE NOEUDS                       80688
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE MAILLES                      76063
[1,12]<stdout>:                              QUAD4                1263
[1,12]<stdout>:                              HEXA8               74800
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.01
[1,24]<stdout>:
[1,24]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,24]<stdout>:
[1,24]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,24]<stdout>:MAILLAGE_P                                                                      
[1,24]<stdout>:
[1,24]<stdout>:NOMBRE DE NOEUDS                       79276
[1,24]<stdout>:
[1,24]<stdout>:NOMBRE DE MAILLES                      76823
[1,24]<stdout>:                              SEG2                   33
[1,24]<stdout>:                              QUAD4                3534
[1,24]<stdout>:                              HEXA8               73256
[1,24]<stdout>:
[1,24]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,24]<stdout>:
[1,24]<stdout>:--------------------------------------------------------------------------------
[1,24]<stdout>:
[1,24]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.05      0.01      0.03
[1,19]<stdout>:
[1,19]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,19]<stdout>:
[1,19]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,19]<stdout>:MAILLAGE_P                                                                      
[1,19]<stdout>:
[1,19]<stdout>:NOMBRE DE NOEUDS                       74988
[1,19]<stdout>:
[1,19]<stdout>:NOMBRE DE MAILLES                      72044
[1,19]<stdout>:                              SEG2                   37
[1,19]<stdout>:                              QUAD4                3198
[1,19]<stdout>:                              HEXA8               68809
[1,19]<stdout>:
[1,19]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,19]<stdout>:
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.09      0.02      0.06
[1,17]<stdout>:
[1,17]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,17]<stdout>:
[1,17]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,17]<stdout>:MAILLAGE_P                                                                      
[1,17]<stdout>:
[1,17]<stdout>:NOMBRE DE NOEUDS                       73836
[1,17]<stdout>:
[1,17]<stdout>:NOMBRE DE MAILLES                      71609
[1,17]<stdout>:                              SEG2                   36
[1,17]<stdout>:                              QUAD4                3286
[1,17]<stdout>:                              HEXA8               68287
[1,17]<stdout>:
[1,17]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,17]<stdout>:
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.19      0.00      0.19
[1,9]<stdout>:
[1,9]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,9]<stdout>:
[1,9]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,9]<stdout>:MAILLAGE_P                                                                      
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE NOEUDS                       71380
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE MAILLES                      68854
[1,9]<stdout>:                              SEG2                   35
[1,9]<stdout>:                              QUAD4                3035
[1,9]<stdout>:                              HEXA8               65784
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.26      0.00      0.27
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,0]<stdout>:MAILLAGE_P                                                                      
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                       74945
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                      74944
[1,0]<stdout>:                              SEG2                  132
[1,0]<stdout>:                              QUAD4                5436
[1,0]<stdout>:                              HEXA8               69376
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.57      0.00      0.57
[1,25]<stdout>:
[1,25]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,25]<stdout>:
[1,25]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,25]<stdout>:MAILLAGE_P                                                                      
[1,25]<stdout>:
[1,25]<stdout>:NOMBRE DE NOEUDS                       74614
[1,25]<stdout>:
[1,25]<stdout>:NOMBRE DE MAILLES                      69934
[1,25]<stdout>:                              QUAD4                 954
[1,25]<stdout>:                              HEXA8               68980
[1,25]<stdout>:
[1,25]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,25]<stdout>:
[1,25]<stdout>:--------------------------------------------------------------------------------
[1,25]<stdout>:
[1,25]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.05
[1,29]<stdout>:
[1,29]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,29]<stdout>:
[1,29]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,29]<stdout>:MAILLAGE_P                                                                      
[1,29]<stdout>:
[1,29]<stdout>:NOMBRE DE NOEUDS                       71680
[1,29]<stdout>:
[1,29]<stdout>:NOMBRE DE MAILLES                      71679
[1,29]<stdout>:                              SEG2                  128
[1,29]<stdout>:                              QUAD4                5149
[1,29]<stdout>:                              HEXA8               66402
[1,29]<stdout>:
[1,29]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,29]<stdout>:
[1,29]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,29]<stdout>:
[1,29]<stdout>:--------------------------------------------------------------------------------
[1,29]<stdout>:
[1,29]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.31      0.00      0.32
[1,13]<stdout>:
[1,13]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,13]<stdout>:
[1,13]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,13]<stdout>:MAILLAGE_P                                                                      
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE NOEUDS                       71676
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE MAILLES                      69532
[1,13]<stdout>:                              SEG2                   33
[1,13]<stdout>:                              QUAD4                3167
[1,13]<stdout>:                              HEXA8               66332
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.29      0.00      0.28
[1,7]<stdout>:
[1,7]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,7]<stdout>:
[1,7]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,7]<stdout>:MAILLAGE_P                                                                      
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE NOEUDS                       77922
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE MAILLES                      72402
[1,7]<stdout>:                              QUAD4                 528
[1,7]<stdout>:                              HEXA8               71874
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.05      0.01      0.03
[1,10]<stdout>:
[1,10]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,10]<stdout>:
[1,10]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,10]<stdout>:MAILLAGE_P                                                                      
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE NOEUDS                       72976
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE MAILLES                      70682
[1,10]<stdout>:                              SEG2                   32
[1,10]<stdout>:                              QUAD4                3094
[1,10]<stdout>:                              HEXA8               67556
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.22      0.00      0.22
[1,16]<stdout>:
[1,16]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,16]<stdout>:
[1,16]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,16]<stdout>:MAILLAGE_P                                                                      
[1,16]<stdout>:
[1,16]<stdout>:NOMBRE DE NOEUDS                       79828
[1,16]<stdout>:
[1,16]<stdout>:NOMBRE DE MAILLES                      74594
[1,16]<stdout>:                              QUAD4                 930
[1,16]<stdout>:                              HEXA8               73664
[1,16]<stdout>:
[1,16]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,16]<stdout>:
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.04      0.01      0.03
[1,2]<stdout>:
[1,2]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,2]<stdout>:
[1,2]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,2]<stdout>:MAILLAGE_P                                                                      
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE NOEUDS                       81756
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE MAILLES                      77206
[1,2]<stdout>:                              QUAD4                1330
[1,2]<stdout>:                              HEXA8               75876
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,3]<stdout>:
[1,3]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,3]<stdout>:
[1,3]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,3]<stdout>:MAILLAGE_P                                                                      
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE NOEUDS                       74768
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE MAILLES                      72466
[1,3]<stdout>:                              SEG2                   35
[1,3]<stdout>:                              QUAD4                3169
[1,3]<stdout>:                              HEXA8               69262
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.17      0.00      0.17
[1,8]<stdout>:
[1,8]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,8]<stdout>:
[1,8]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,8]<stdout>:MAILLAGE_P                                                                      
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE NOEUDS                       80974
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE MAILLES                      76404
[1,8]<stdout>:                              QUAD4                1400
[1,8]<stdout>:                              HEXA8               75004
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,27]<stdout>:
[1,27]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,27]<stdout>:
[1,27]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,27]<stdout>:MAILLAGE_P                                                                      
[1,27]<stdout>:
[1,27]<stdout>:NOMBRE DE NOEUDS                       69594
[1,27]<stdout>:
[1,27]<stdout>:NOMBRE DE MAILLES                      67464
[1,27]<stdout>:                              SEG2                   35
[1,27]<stdout>:                              QUAD4                3142
[1,27]<stdout>:                              HEXA8               64287
[1,27]<stdout>:
[1,27]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,27]<stdout>:
[1,27]<stdout>:--------------------------------------------------------------------------------
[1,27]<stdout>:
[1,27]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.26      0.00      0.27
[1,30]<stdout>:
[1,30]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,30]<stdout>:
[1,30]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:59 DE TYPE        
[1,30]<stdout>:MAILLAGE_P                                                                      
[1,30]<stdout>:
[1,30]<stdout>:NOMBRE DE NOEUDS                       78856
[1,30]<stdout>:
[1,30]<stdout>:NOMBRE DE MAILLES                      74152
[1,30]<stdout>:                              QUAD4                1258
[1,30]<stdout>:                              HEXA8               72894
[1,30]<stdout>:
[1,30]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,30]<stdout>:
[1,30]<stdout>:--------------------------------------------------------------------------------
[1,30]<stdout>:
[1,30]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,23]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,26]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,23]<stdout>:# Mémoire (Mo) :  1192.51 /   808.42 /   221.57 /   189.73 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Mémoire (Mo) :  1095.37 /   805.09 /   220.41 /   188.61 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0002   user+syst:        1.03s (syst:        0.94s, elaps:        1.98s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:# Fin commande #0002   user+syst:        1.36s (syst:        0.62s, elaps:        1.98s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,27]<stdout>:# Mémoire (Mo) :  1173.05 /   805.91 /   221.02 /   189.20 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Fin commande #0002   user+syst:        1.10s (syst:        0.87s, elaps:        1.97s)
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,9]<stdout>:# Mémoire (Mo) :  1178.16 /   807.54 /   221.39 /   189.56 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0002   user+syst:        1.07s (syst:        0.91s, elaps:        1.98s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,31]<stdout>:# Mémoire (Mo) :  1202.41 /   809.57 /   221.98 /   190.13 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:# Fin commande #0002   user+syst:        0.94s (syst:        1.02s, elaps:        1.98s)
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,13]<stdout>:# Mémoire (Mo) :  1177.84 /   806.61 /   221.52 /   189.68 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0002   user+syst:        1.17s (syst:        0.81s, elaps:        1.98s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,25]<stdout>:# Mémoire (Mo) :  1191.58 /   810.08 /   222.35 /   190.48 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# Fin commande #0002   user+syst:        0.95s (syst:        1.03s, elaps:        1.99s)
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,10]<stdout>:# Mémoire (Mo) :  1172.34 /   806.57 /   221.59 /   189.74 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0002   user+syst:        1.10s (syst:        0.88s, elaps:        1.98s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,11]<stdout>:# Mémoire (Mo) :  1115.86 /   807.37 /   221.38 /   189.54 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0002   user+syst:        1.22s (syst:        0.76s, elaps:        1.99s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,29]<stdout>:# Mémoire (Mo) :  1114.86 /   807.52 /   221.60 /   189.75 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Fin commande #0002   user+syst:        1.25s (syst:        0.74s, elaps:        1.99s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,5]<stdout>:# Mémoire (Mo) :  1101.05 /   806.17 /   221.55 /   189.70 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0002   user+syst:        1.33s (syst:        0.66s, elaps:        1.98s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,1]<stdout>:# Mémoire (Mo) :  1183.17 /   807.75 /   222.21 /   190.34 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,1]<stdout>:# Fin commande #0002   user+syst:        1.04s (syst:        0.95s, elaps:        1.98s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,7]<stdout>:# Mémoire (Mo) :  1208.39 /   811.47 /   223.42 /   191.52 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Mémoire (Mo) :  1185.20 /   809.12 /   222.82 /   190.94 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0002   user+syst:        0.91s (syst:        1.07s, elaps:        1.98s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Fin commande #0002   user+syst:        1.01s (syst:        0.96s, elaps:        1.99s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,18]<stdout>:# Mémoire (Mo) :  1171.08 /   808.14 /   221.80 /   189.95 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0002   user+syst:        1.16s (syst:        0.82s, elaps:        1.98s)
[1,3]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Mémoire (Mo) :  1195.86 /   808.56 /   222.36 /   190.49 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,3]<stdout>:# Fin commande #0002   user+syst:        1.04s (syst:        0.95s, elaps:        1.98s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Mémoire (Mo) :  1207.30 /   810.39 /   222.49 /   190.61 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0002   user+syst:        1.01s (syst:        0.98s, elaps:        1.98s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,17]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,15]<stdout>:# Mémoire (Mo) :  1127.30 /   808.91 /   222.19 /   190.33 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Mémoire (Mo) :  1178.69 /   808.01 /   221.82 /   189.96 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0002   user+syst:        1.19s (syst:        0.79s, elaps:        1.99s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Fin commande #0002   user+syst:        1.02s (syst:        0.97s, elaps:        1.99s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,30]<stdout>:# Mémoire (Mo) :  1222.20 /   813.19 /   223.76 /   191.85 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Résultat commande #0004 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,30]<stdout>:# Fin commande #0002   user+syst:        1.00s (syst:        0.99s, elaps:        1.99s)
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  1231.32 /   920.18 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0004   user+syst:        1.40s (syst:        0.59s, elaps:        1.99s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,6]<stdout>:# Mémoire (Mo) :  1199.67 /   810.17 /   222.96 /   191.07 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0002   user+syst:        1.05s (syst:        0.93s, elaps:        1.98s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,22]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,16]<stdout>:# Mémoire (Mo) :  1192.82 /   811.36 /   223.39 /   191.49 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Mémoire (Mo) :  1120.02 /   809.36 /   222.38 /   190.51 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0002   user+syst:        0.98s (syst:        1.01s, elaps:        1.99s)
[1,22]<stdout>:# Fin commande #0002   user+syst:        1.21s (syst:        0.78s, elaps:        1.98s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,28]<stdout>:# Mémoire (Mo) :  1202.28 /   809.62 /   223.11 /   191.22 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Fin commande #0002   user+syst:        0.98s (syst:        1.00s, elaps:        1.98s)
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,4]<stdout>:# Mémoire (Mo) :  1194.00 /   809.90 /   222.81 /   190.93 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0002   user+syst:        1.09s (syst:        0.90s, elaps:        1.98s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,14]<stdout>:# Mémoire (Mo) :  1213.13 /   810.78 /   223.74 /   191.84 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0002   user+syst:        1.07s (syst:        0.91s, elaps:        1.98s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,12]<stdout>:# Mémoire (Mo) :  1212.80 /   812.99 /   224.21 /   192.29 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0002   user+syst:        0.95s (syst:        1.04s, elaps:        1.99s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,24]<stdout>:# Mémoire (Mo) :  1209.59 /   811.65 /   223.77 /   191.86 (VmPeak / VmSize / Optimum / Minimum)
[1,24]<stdout>:# Fin commande #0002   user+syst:        0.92s (syst:        1.07s, elaps:        1.99s)
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,8]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,2]<stdout>:# Mémoire (Mo) :  1204.63 /   811.66 /   224.23 /   192.31 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  1201.84 /   812.18 /   224.03 /   192.11 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0002   user+syst:        0.97s (syst:        1.02s, elaps:        1.99s)
[1,8]<stdout>:# Fin commande #0002   user+syst:        1.00s (syst:        1.00s, elaps:        2.00s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,21]<stdout>:# Mémoire (Mo) :  1215.29 /   811.98 /   223.85 /   191.94 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0002   user+syst:        1.06s (syst:        0.94s, elaps:        1.99s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt131
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt131
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt131
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt131
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt131
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt131
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt131
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt131
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt131
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt131
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt131
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt131
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt131
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt131
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt131
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt131
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt131
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt131
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt131
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt131
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt131
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt131
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt131
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt131
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt131
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt131
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt131
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt131
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt131
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt131
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt131
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0003 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 131
[1,7]<stdout>:# Commande #0003 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 131
[1,25]<stdout>:# Commande #0003 de
[1,25]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,25]<stdout>:Cube_perf.py, ligne 131
[1,26]<stdout>:# Commande #0003 de
[1,26]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,26]<stdout>:Cube_perf.py, ligne 131
[1,24]<stdout>:# Commande #0003 de
[1,24]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,24]<stdout>:Cube_perf.py, ligne 131
[1,19]<stdout>:# Commande #0003 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 131
[1,10]<stdout>:# Commande #0003 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 131
[1,20]<stdout>:# Commande #0003 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 131
[1,1]<stdout>:# Commande #0003 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 131
[1,17]<stdout>:# Commande #0003 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 131
[1,9]<stdout>:# Commande #0003 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 131
[1,27]<stdout>:# Commande #0003 de
[1,27]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,27]<stdout>:Cube_perf.py, ligne 131
[1,13]<stdout>:# Commande #0003 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 131
[1,6]<stdout>:# Commande #0003 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 131
[1,28]<stdout>:# Commande #0003 de
[1,28]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,28]<stdout>:Cube_perf.py, ligne 131
[1,14]<stdout>:# Commande #0003 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 131
[1,12]<stdout>:# Commande #0003 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 131
[1,15]<stdout>:# Commande #0003 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 131
[1,3]<stdout>:# Commande #0003 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 131
[1,4]<stdout>:# Commande #0003 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 131
[1,31]<stdout>:# Commande #0003 de
[1,31]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,31]<stdout>:Cube_perf.py, ligne 131
[1,29]<stdout>:# Commande #0003 de
[1,29]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,29]<stdout>:Cube_perf.py, ligne 131
[1,21]<stdout>:# Commande #0003 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 131
[1,22]<stdout>:# Commande #0003 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 131
[1,18]<stdout>:# Commande #0003 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 131
[1,2]<stdout>:# Commande #0003 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 131
[1,16]<stdout>:# Commande #0003 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 131
[1,5]<stdout>:# Commande #0003 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 131
[1,8]<stdout>:# Commande #0003 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 131
[1,30]<stdout>:# Commande #0003 de
[1,30]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,30]<stdout>:Cube_perf.py, ligne 131
[1,23]<stdout>:# Commande #0003 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 131
[1,12]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,12]<stdout>:                            PHENOMENE='MECANIQUE',
[1,12]<stdout>:                            TOUT='OUI'),
[1,12]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,12]<stdout>:                    INFO=1,
[1,12]<stdout>:                    MAILLAGE='<00000004>',
[1,12]<stdout>:                    VERI_JACOBIEN='OUI',
[1,12]<stdout>:                    VERI_NORM_IFS='OUI',
[1,12]<stdout>:                    VERI_PLAN='OUI')
[1,12]<stdout>:
[1,9]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,9]<stdout>:                            PHENOMENE='MECANIQUE',
[1,9]<stdout>:                            TOUT='OUI'),
[1,9]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,9]<stdout>:                    INFO=1,
[1,9]<stdout>:                    MAILLAGE='<00000004>',
[1,9]<stdout>:                    VERI_JACOBIEN='OUI',
[1,9]<stdout>:                    VERI_NORM_IFS='OUI',
[1,9]<stdout>:                    VERI_PLAN='OUI')
[1,9]<stdout>:
[1,27]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,27]<stdout>:                            PHENOMENE='MECANIQUE',
[1,27]<stdout>:                            TOUT='OUI'),
[1,27]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,27]<stdout>:                    INFO=1,
[1,27]<stdout>:                    MAILLAGE='<00000004>',
[1,27]<stdout>:                    VERI_JACOBIEN='OUI',
[1,27]<stdout>:                    VERI_NORM_IFS='OUI',
[1,27]<stdout>:                    VERI_PLAN='OUI')
[1,27]<stdout>:
[1,11]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,11]<stdout>:                            PHENOMENE='MECANIQUE',
[1,11]<stdout>:                            TOUT='OUI'),
[1,11]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,11]<stdout>:                    INFO=1,
[1,11]<stdout>:                    MAILLAGE='<00000004>',
[1,11]<stdout>:                    VERI_JACOBIEN='OUI',
[1,11]<stdout>:                    VERI_NORM_IFS='OUI',
[1,11]<stdout>:                    VERI_PLAN='OUI')
[1,11]<stdout>:
[1,7]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,7]<stdout>:                            PHENOMENE='MECANIQUE',
[1,7]<stdout>:                            TOUT='OUI'),
[1,7]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,7]<stdout>:                    INFO=1,
[1,7]<stdout>:                    MAILLAGE='<00000004>',
[1,7]<stdout>:                    VERI_JACOBIEN='OUI',
[1,7]<stdout>:                    VERI_NORM_IFS='OUI',
[1,7]<stdout>:                    VERI_PLAN='OUI')
[1,7]<stdout>:
[1,25]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,25]<stdout>:                            PHENOMENE='MECANIQUE',
[1,25]<stdout>:                            TOUT='OUI'),
[1,25]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,25]<stdout>:                    INFO=1,
[1,25]<stdout>:                    MAILLAGE='<00000004>',
[1,25]<stdout>:                    VERI_JACOBIEN='OUI',
[1,25]<stdout>:                    VERI_NORM_IFS='OUI',
[1,25]<stdout>:                    VERI_PLAN='OUI')
[1,25]<stdout>:
[1,22]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,22]<stdout>:                            PHENOMENE='MECANIQUE',
[1,22]<stdout>:                            TOUT='OUI'),
[1,22]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,22]<stdout>:                    INFO=1,
[1,22]<stdout>:                    MAILLAGE='<00000004>',
[1,22]<stdout>:                    VERI_JACOBIEN='OUI',
[1,22]<stdout>:                    VERI_NORM_IFS='OUI',
[1,22]<stdout>:                    VERI_PLAN='OUI')
[1,22]<stdout>:
[1,26]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,26]<stdout>:                            PHENOMENE='MECANIQUE',
[1,26]<stdout>:                            TOUT='OUI'),
[1,26]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,26]<stdout>:                    INFO=1,
[1,26]<stdout>:                    MAILLAGE='<00000004>',
[1,26]<stdout>:                    VERI_JACOBIEN='OUI',
[1,26]<stdout>:                    VERI_NORM_IFS='OUI',
[1,26]<stdout>:                    VERI_PLAN='OUI')
[1,26]<stdout>:
[1,24]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,24]<stdout>:                            PHENOMENE='MECANIQUE',
[1,24]<stdout>:                            TOUT='OUI'),
[1,24]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,24]<stdout>:                    INFO=1,
[1,24]<stdout>:                    MAILLAGE='<00000004>',
[1,24]<stdout>:                    VERI_JACOBIEN='OUI',
[1,24]<stdout>:                    VERI_NORM_IFS='OUI',
[1,24]<stdout>:                    VERI_PLAN='OUI')
[1,24]<stdout>:
[1,19]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,19]<stdout>:                            PHENOMENE='MECANIQUE',
[1,19]<stdout>:                            TOUT='OUI'),
[1,19]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,19]<stdout>:                    INFO=1,
[1,19]<stdout>:                    MAILLAGE='<00000004>',
[1,19]<stdout>:                    VERI_JACOBIEN='OUI',
[1,19]<stdout>:                    VERI_NORM_IFS='OUI',
[1,19]<stdout>:                    VERI_PLAN='OUI')
[1,19]<stdout>:
[1,10]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,10]<stdout>:                            PHENOMENE='MECANIQUE',
[1,10]<stdout>:                            TOUT='OUI'),
[1,10]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,10]<stdout>:                    INFO=1,
[1,10]<stdout>:                    MAILLAGE='<00000004>',
[1,10]<stdout>:                    VERI_JACOBIEN='OUI',
[1,10]<stdout>:                    VERI_NORM_IFS='OUI',
[1,10]<stdout>:                    VERI_PLAN='OUI')
[1,10]<stdout>:
[1,20]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,20]<stdout>:                            PHENOMENE='MECANIQUE',
[1,20]<stdout>:                            TOUT='OUI'),
[1,20]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,20]<stdout>:                    INFO=1,
[1,20]<stdout>:                    MAILLAGE='<00000004>',
[1,20]<stdout>:                    VERI_JACOBIEN='OUI',
[1,20]<stdout>:                    VERI_NORM_IFS='OUI',
[1,20]<stdout>:                    VERI_PLAN='OUI')
[1,20]<stdout>:
[1,13]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,13]<stdout>:                            PHENOMENE='MECANIQUE',
[1,13]<stdout>:                            TOUT='OUI'),
[1,13]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,13]<stdout>:                    INFO=1,
[1,13]<stdout>:                    MAILLAGE='<00000004>',
[1,13]<stdout>:                    VERI_JACOBIEN='OUI',
[1,13]<stdout>:                    VERI_NORM_IFS='OUI',
[1,13]<stdout>:                    VERI_PLAN='OUI')
[1,13]<stdout>:
[1,1]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,1]<stdout>:                            PHENOMENE='MECANIQUE',
[1,1]<stdout>:                            TOUT='OUI'),
[1,1]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,1]<stdout>:                    INFO=1,
[1,1]<stdout>:                    MAILLAGE='<00000004>',
[1,1]<stdout>:                    VERI_JACOBIEN='OUI',
[1,1]<stdout>:                    VERI_NORM_IFS='OUI',
[1,1]<stdout>:                    VERI_PLAN='OUI')
[1,1]<stdout>:
[1,6]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,6]<stdout>:                            PHENOMENE='MECANIQUE',
[1,6]<stdout>:                            TOUT='OUI'),
[1,6]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,6]<stdout>:                    INFO=1,
[1,6]<stdout>:                    MAILLAGE='<00000004>',
[1,6]<stdout>:                    VERI_JACOBIEN='OUI',
[1,6]<stdout>:                    VERI_NORM_IFS='OUI',
[1,6]<stdout>:                    VERI_PLAN='OUI')
[1,6]<stdout>:
[1,17]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,17]<stdout>:                            PHENOMENE='MECANIQUE',
[1,17]<stdout>:                            TOUT='OUI'),
[1,17]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,17]<stdout>:                    INFO=1,
[1,17]<stdout>:                    MAILLAGE='<00000004>',
[1,17]<stdout>:                    VERI_JACOBIEN='OUI',
[1,17]<stdout>:                    VERI_NORM_IFS='OUI',
[1,17]<stdout>:                    VERI_PLAN='OUI')
[1,17]<stdout>:
[1,28]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,28]<stdout>:                            PHENOMENE='MECANIQUE',
[1,28]<stdout>:                            TOUT='OUI'),
[1,28]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,28]<stdout>:                    INFO=1,
[1,28]<stdout>:                    MAILLAGE='<00000004>',
[1,28]<stdout>:                    VERI_JACOBIEN='OUI',
[1,28]<stdout>:                    VERI_NORM_IFS='OUI',
[1,28]<stdout>:                    VERI_PLAN='OUI')
[1,28]<stdout>:
[1,14]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,14]<stdout>:                            PHENOMENE='MECANIQUE',
[1,14]<stdout>:                            TOUT='OUI'),
[1,14]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,14]<stdout>:                    INFO=1,
[1,14]<stdout>:                    MAILLAGE='<00000004>',
[1,14]<stdout>:                    VERI_JACOBIEN='OUI',
[1,14]<stdout>:                    VERI_NORM_IFS='OUI',
[1,14]<stdout>:                    VERI_PLAN='OUI')
[1,14]<stdout>:
[1,23]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,23]<stdout>:                            PHENOMENE='MECANIQUE',
[1,23]<stdout>:                            TOUT='OUI'),
[1,23]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,23]<stdout>:                    INFO=1,
[1,23]<stdout>:                    MAILLAGE='<00000004>',
[1,23]<stdout>:                    VERI_JACOBIEN='OUI',
[1,23]<stdout>:                    VERI_NORM_IFS='OUI',
[1,23]<stdout>:                    VERI_PLAN='OUI')
[1,23]<stdout>:
[1,15]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,15]<stdout>:                            PHENOMENE='MECANIQUE',
[1,15]<stdout>:                            TOUT='OUI'),
[1,15]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,15]<stdout>:                    INFO=1,
[1,15]<stdout>:                    MAILLAGE='<00000004>',
[1,15]<stdout>:                    VERI_JACOBIEN='OUI',
[1,15]<stdout>:                    VERI_NORM_IFS='OUI',
[1,15]<stdout>:                    VERI_PLAN='OUI')
[1,15]<stdout>:
[1,8]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,8]<stdout>:                            PHENOMENE='MECANIQUE',
[1,8]<stdout>:                            TOUT='OUI'),
[1,8]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,8]<stdout>:                    INFO=1,
[1,8]<stdout>:                    MAILLAGE='<00000004>',
[1,8]<stdout>:                    VERI_JACOBIEN='OUI',
[1,8]<stdout>:                    VERI_NORM_IFS='OUI',
[1,8]<stdout>:                    VERI_PLAN='OUI')
[1,8]<stdout>:
[1,3]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,3]<stdout>:                            PHENOMENE='MECANIQUE',
[1,3]<stdout>:                            TOUT='OUI'),
[1,3]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,3]<stdout>:                    INFO=1,
[1,3]<stdout>:                    MAILLAGE='<00000004>',
[1,3]<stdout>:                    VERI_JACOBIEN='OUI',
[1,3]<stdout>:                    VERI_NORM_IFS='OUI',
[1,3]<stdout>:                    VERI_PLAN='OUI')
[1,3]<stdout>:
[1,4]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,4]<stdout>:                            PHENOMENE='MECANIQUE',
[1,4]<stdout>:                            TOUT='OUI'),
[1,4]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,4]<stdout>:                    INFO=1,
[1,4]<stdout>:                    MAILLAGE='<00000004>',
[1,4]<stdout>:                    VERI_JACOBIEN='OUI',
[1,4]<stdout>:                    VERI_NORM_IFS='OUI',
[1,4]<stdout>:                    VERI_PLAN='OUI')
[1,4]<stdout>:
[1,18]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,18]<stdout>:                            PHENOMENE='MECANIQUE',
[1,18]<stdout>:                            TOUT='OUI'),
[1,18]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,18]<stdout>:                    INFO=1,
[1,18]<stdout>:                    MAILLAGE='<00000004>',
[1,18]<stdout>:                    VERI_JACOBIEN='OUI',
[1,18]<stdout>:                    VERI_NORM_IFS='OUI',
[1,18]<stdout>:                    VERI_PLAN='OUI')
[1,18]<stdout>:
[1,31]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,31]<stdout>:                            PHENOMENE='MECANIQUE',
[1,31]<stdout>:                            TOUT='OUI'),
[1,31]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,31]<stdout>:                    INFO=1,
[1,31]<stdout>:                    MAILLAGE='<00000004>',
[1,31]<stdout>:                    VERI_JACOBIEN='OUI',
[1,31]<stdout>:                    VERI_NORM_IFS='OUI',
[1,31]<stdout>:                    VERI_PLAN='OUI')
[1,31]<stdout>:
[1,30]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,30]<stdout>:                            PHENOMENE='MECANIQUE',
[1,30]<stdout>:                            TOUT='OUI'),
[1,30]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,30]<stdout>:                    INFO=1,
[1,30]<stdout>:                    MAILLAGE='<00000004>',
[1,30]<stdout>:                    VERI_JACOBIEN='OUI',
[1,30]<stdout>:                    VERI_NORM_IFS='OUI',
[1,30]<stdout>:                    VERI_PLAN='OUI')
[1,30]<stdout>:
[1,29]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,29]<stdout>:                            PHENOMENE='MECANIQUE',
[1,29]<stdout>:                            TOUT='OUI'),
[1,29]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,29]<stdout>:                    INFO=1,
[1,29]<stdout>:                    MAILLAGE='<00000004>',
[1,29]<stdout>:                    VERI_JACOBIEN='OUI',
[1,29]<stdout>:                    VERI_NORM_IFS='OUI',
[1,29]<stdout>:                    VERI_PLAN='OUI')
[1,29]<stdout>:
[1,21]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,21]<stdout>:                            PHENOMENE='MECANIQUE',
[1,21]<stdout>:                            TOUT='OUI'),
[1,21]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,21]<stdout>:                    INFO=1,
[1,21]<stdout>:                    MAILLAGE='<00000004>',
[1,21]<stdout>:                    VERI_JACOBIEN='OUI',
[1,21]<stdout>:                    VERI_NORM_IFS='OUI',
[1,21]<stdout>:                    VERI_PLAN='OUI')
[1,21]<stdout>:
[1,16]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,16]<stdout>:                            PHENOMENE='MECANIQUE',
[1,16]<stdout>:                            TOUT='OUI'),
[1,16]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,16]<stdout>:                    INFO=1,
[1,16]<stdout>:                    MAILLAGE='<00000004>',
[1,16]<stdout>:                    VERI_JACOBIEN='OUI',
[1,16]<stdout>:                    VERI_NORM_IFS='OUI',
[1,16]<stdout>:                    VERI_PLAN='OUI')
[1,16]<stdout>:
[1,5]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,5]<stdout>:                            PHENOMENE='MECANIQUE',
[1,5]<stdout>:                            TOUT='OUI'),
[1,5]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,5]<stdout>:                    INFO=1,
[1,5]<stdout>:                    MAILLAGE='<00000004>',
[1,5]<stdout>:                    VERI_JACOBIEN='OUI',
[1,5]<stdout>:                    VERI_NORM_IFS='OUI',
[1,5]<stdout>:                    VERI_PLAN='OUI')
[1,5]<stdout>:
[1,2]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,2]<stdout>:                            PHENOMENE='MECANIQUE',
[1,2]<stdout>:                            TOUT='OUI'),
[1,2]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,2]<stdout>:                    INFO=1,
[1,2]<stdout>:                    MAILLAGE='<00000004>',
[1,2]<stdout>:                    VERI_JACOBIEN='OUI',
[1,2]<stdout>:                    VERI_NORM_IFS='OUI',
[1,2]<stdout>:                    VERI_PLAN='OUI')
[1,2]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt131
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0005 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 131
[1,0]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,0]<stdout>:                            PHENOMENE='MECANIQUE',
[1,0]<stdout>:                            TOUT='OUI'),
[1,0]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,0]<stdout>:                    INFO=1,
[1,0]<stdout>:                    MAILLAGE='<00000004>',
[1,0]<stdout>:                    VERI_JACOBIEN='OUI',
[1,0]<stdout>:                    VERI_NORM_IFS='OUI',
[1,0]<stdout>:                    VERI_PLAN='OUI')
[1,0]<stdout>:
[1,27]<stdout>:Sur les 67464 mailles du maillage 00000004, on a demandé l'affectation de 67464, on a pu en affecter
[1,27]<stdout>:67464.
[1,11]<stdout>:Sur les 70447 mailles du maillage 00000004, on a demandé l'affectation de 70447, on a pu en affecter
[1,11]<stdout>:70447.
[1,25]<stdout>:Sur les 69934 mailles du maillage 00000004, on a demandé l'affectation de 69934, on a pu en affecter
[1,25]<stdout>:69934.
[1,23]<stdout>:Sur les 68200 mailles du maillage 00000004, on a demandé l'affectation de 68200, on a pu en affecter
[1,23]<stdout>:68200.
[1,26]<stdout>:Sur les 67367 mailles du maillage 00000004, on a demandé l'affectation de 67367, on a pu en affecter
[1,26]<stdout>:67367.
[1,10]<stdout>:Sur les 70682 mailles du maillage 00000004, on a demandé l'affectation de 70682, on a pu en affecter
[1,10]<stdout>:70682.
[1,17]<stdout>:Sur les 71609 mailles du maillage 00000004, on a demandé l'affectation de 71609, on a pu en affecter
[1,17]<stdout>:71609.
[1,13]<stdout>:Sur les 69532 mailles du maillage 00000004, on a demandé l'affectation de 69532, on a pu en affecter
[1,13]<stdout>:69532.
[1,15]<stdout>:Sur les 73175 mailles du maillage 00000004, on a demandé l'affectation de 73175, on a pu en affecter
[1,15]<stdout>:73175.
[1,9]<stdout>:Sur les 68854 mailles du maillage 00000004, on a demandé l'affectation de 68854, on a pu en affecter
[1,9]<stdout>:68854.
[1,29]<stdout>:Sur les 71679 mailles du maillage 00000004, on a demandé l'affectation de 71679, on a pu en affecter
[1,29]<stdout>:71679.
[1,7]<stdout>:Sur les 72402 mailles du maillage 00000004, on a demandé l'affectation de 72402, on a pu en affecter
[1,7]<stdout>:72402.
[1,5]<stdout>:Sur les 71939 mailles du maillage 00000004, on a demandé l'affectation de 71939, on a pu en affecter
[1,5]<stdout>:71939.
[1,31]<stdout>:Sur les 69640 mailles du maillage 00000004, on a demandé l'affectation de 69640, on a pu en affecter
[1,31]<stdout>:69640.
[1,20]<stdout>:Sur les 72356 mailles du maillage 00000004, on a demandé l'affectation de 72356, on a pu en affecter
[1,20]<stdout>:72356.
[1,1]<stdout>:Sur les 72281 mailles du maillage 00000004, on a demandé l'affectation de 72281, on a pu en affecter
[1,1]<stdout>:72281.
[1,0]<stdout>:Sur les 74944 mailles du maillage 00000004, on a demandé l'affectation de 74944, on a pu en affecter
[1,0]<stdout>:74944.
[1,19]<stdout>:Sur les 72044 mailles du maillage 00000004, on a demandé l'affectation de 72044, on a pu en affecter
[1,19]<stdout>:72044.
[1,16]<stdout>:Sur les 74594 mailles du maillage 00000004, on a demandé l'affectation de 74594, on a pu en affecter
[1,16]<stdout>:74594.
[1,22]<stdout>:Sur les 74347 mailles du maillage 00000004, on a demandé l'affectation de 74347, on a pu en affecter
[1,22]<stdout>:74347.
[1,6]<stdout>:Sur les 74849 mailles du maillage 00000004, on a demandé l'affectation de 74849, on a pu en affecter
[1,6]<stdout>:74849.
[1,2]<stdout>:Sur les 77206 mailles du maillage 00000004, on a demandé l'affectation de 77206, on a pu en affecter
[1,2]<stdout>:77206.
[1,28]<stdout>:Sur les 74668 mailles du maillage 00000004, on a demandé l'affectation de 74668, on a pu en affecter
[1,28]<stdout>:74668.
[1,12]<stdout>:Sur les 76063 mailles du maillage 00000004, on a demandé l'affectation de 76063, on a pu en affecter
[1,12]<stdout>:76063.
[1,8]<stdout>:Sur les 76404 mailles du maillage 00000004, on a demandé l'affectation de 76404, on a pu en affecter
[1,8]<stdout>:76404.
[1,18]<stdout>:Sur les 71919 mailles du maillage 00000004, on a demandé l'affectation de 71919, on a pu en affecter
[1,18]<stdout>:71919.
[1,30]<stdout>:Sur les 74152 mailles du maillage 00000004, on a demandé l'affectation de 74152, on a pu en affecter
[1,30]<stdout>:74152.
[1,21]<stdout>:Sur les 76698 mailles du maillage 00000004, on a demandé l'affectation de 76698, on a pu en affecter
[1,21]<stdout>:76698.
[1,4]<stdout>:Sur les 74377 mailles du maillage 00000004, on a demandé l'affectation de 74377, on a pu en affecter
[1,4]<stdout>:74377.
[1,3]<stdout>:Sur les 72466 mailles du maillage 00000004, on a demandé l'affectation de 72466, on a pu en affecter
[1,3]<stdout>:72466.
[1,14]<stdout>:Sur les 75562 mailles du maillage 00000004, on a demandé l'affectation de 75562, on a pu en affecter
[1,14]<stdout>:75562.
[1,24]<stdout>:Sur les 76823 mailles du maillage 00000004, on a demandé l'affectation de 76823, on a pu en affecter
[1,24]<stdout>:76823.
[1,26]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,27]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,26]<stdout>:_                _                SEG2         MECA_ARETE2      126
[1,27]<stdout>:_                _                SEG2         MECA_ARETE2      35
[1,26]<stdout>:_                _                QUAD4        MECA_FACE4       4953
[1,27]<stdout>:_                _                QUAD4        MECA_FACE4       3142
[1,26]<stdout>:3D               _                HEXA8        MECA_HEXA8       62288
[1,27]<stdout>:3D               _                HEXA8        MECA_HEXA8       64287
[1,9]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,11]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,13]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,9]<stdout>:_                _                SEG2         MECA_ARETE2      35
[1,23]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,31]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,9]<stdout>:_                _                QUAD4        MECA_FACE4       3035
[1,9]<stdout>:3D               _                HEXA8        MECA_HEXA8       65784
[1,11]<stdout>:_                _                SEG2         MECA_ARETE2      128
[1,11]<stdout>:_                _                QUAD4        MECA_FACE4       5123
[1,10]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,11]<stdout>:3D               _                HEXA8        MECA_HEXA8       65196
[1,25]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,13]<stdout>:_                _                SEG2         MECA_ARETE2      33
[1,23]<stdout>:_                _                SEG2         MECA_ARETE2      38
[1,13]<stdout>:_                _                QUAD4        MECA_FACE4       3167
[1,29]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,5]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,31]<stdout>:_                _                SEG2         MECA_ARETE2      34
[1,23]<stdout>:_                _                QUAD4        MECA_FACE4       3228
[1,13]<stdout>:3D               _                HEXA8        MECA_HEXA8       66332
[1,31]<stdout>:_                _                QUAD4        MECA_FACE4       2960
[1,23]<stdout>:3D               _                HEXA8        MECA_HEXA8       64934
[1,31]<stdout>:3D               _                HEXA8        MECA_HEXA8       66646
[1,25]<stdout>:_                _                QUAD4        MECA_FACE4       954
[1,10]<stdout>:_                _                SEG2         MECA_ARETE2      32
[1,25]<stdout>:3D               _                HEXA8        MECA_HEXA8       68980
[1,10]<stdout>:_                _                QUAD4        MECA_FACE4       3094
[1,10]<stdout>:3D               _                HEXA8        MECA_HEXA8       67556
[1,29]<stdout>:_                _                SEG2         MECA_ARETE2      128
[1,5]<stdout>:_                _                SEG2         MECA_ARETE2      131
[1,19]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,1]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,5]<stdout>:_                _                QUAD4        MECA_FACE4       5248
[1,15]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,29]<stdout>:_                _                QUAD4        MECA_FACE4       5149
[1,5]<stdout>:3D               _                HEXA8        MECA_HEXA8       66560
[1,29]<stdout>:3D               _                HEXA8        MECA_HEXA8       66402
[1,18]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,20]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,1]<stdout>:_                _                SEG2         MECA_ARETE2      29
[1,19]<stdout>:_                _                SEG2         MECA_ARETE2      37
[1,15]<stdout>:_                _                SEG2         MECA_ARETE2      128
[1,1]<stdout>:_                _                QUAD4        MECA_FACE4       2996
[1,19]<stdout>:_                _                QUAD4        MECA_FACE4       3198
[1,18]<stdout>:_                _                SEG2         MECA_ARETE2      114
[1,15]<stdout>:_                _                QUAD4        MECA_FACE4       5247
[1,1]<stdout>:3D               _                HEXA8        MECA_HEXA8       69256
[1,19]<stdout>:3D               _                HEXA8        MECA_HEXA8       68809
[1,18]<stdout>:_                _                QUAD4        MECA_FACE4       4747
[1,15]<stdout>:3D               _                HEXA8        MECA_HEXA8       67800
[1,18]<stdout>:3D               _                HEXA8        MECA_HEXA8       67058
[1,20]<stdout>:_                _                QUAD4        MECA_FACE4       1294
[1,20]<stdout>:3D               _                HEXA8        MECA_HEXA8       71062
[1,17]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,7]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,22]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,6]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,28]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,30]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,7]<stdout>:_                _                QUAD4        MECA_FACE4       528
[1,0]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,7]<stdout>:3D               _                HEXA8        MECA_HEXA8       71874
[1,17]<stdout>:_                _                SEG2         MECA_ARETE2      36
[1,22]<stdout>:_                _                SEG2         MECA_ARETE2      132
[1,17]<stdout>:_                _                QUAD4        MECA_FACE4       3286
[1,6]<stdout>:_                _                SEG2         MECA_ARETE2      33
[1,16]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,22]<stdout>:_                _                QUAD4        MECA_FACE4       5383
[1,30]<stdout>:_                _                QUAD4        MECA_FACE4       1258
[1,17]<stdout>:3D               _                HEXA8        MECA_HEXA8       68287
[1,6]<stdout>:_                _                QUAD4        MECA_FACE4       3800
[1,28]<stdout>:_                _                SEG2         MECA_ARETE2      31
[1,14]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,22]<stdout>:3D               _                HEXA8        MECA_HEXA8       68832
[1,30]<stdout>:3D               _                HEXA8        MECA_HEXA8       72894
[1,6]<stdout>:3D               _                HEXA8        MECA_HEXA8       71016
[1,28]<stdout>:_                _                QUAD4        MECA_FACE4       3149
[1,4]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,28]<stdout>:3D               _                HEXA8        MECA_HEXA8       71488
[1,0]<stdout>:_                _                SEG2         MECA_ARETE2      132
[1,0]<stdout>:_                _                QUAD4        MECA_FACE4       5436
[1,16]<stdout>:_                _                QUAD4        MECA_FACE4       930
[1,0]<stdout>:3D               _                HEXA8        MECA_HEXA8       69376
[1,3]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,12]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,21]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,16]<stdout>:3D               _                HEXA8        MECA_HEXA8       73664
[1,14]<stdout>:_                _                SEG2         MECA_ARETE2      37
[1,8]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,4]<stdout>:_                _                SEG2         MECA_ARETE2      31
[1,14]<stdout>:_                _                QUAD4        MECA_FACE4       3297
[1,24]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,14]<stdout>:3D               _                HEXA8        MECA_HEXA8       72228
[1,4]<stdout>:_                _                QUAD4        MECA_FACE4       3178
[1,12]<stdout>:_                _                QUAD4        MECA_FACE4       1263
[1,4]<stdout>:3D               _                HEXA8        MECA_HEXA8       71168
[1,12]<stdout>:3D               _                HEXA8        MECA_HEXA8       74800
[1,3]<stdout>:_                _                SEG2         MECA_ARETE2      35
[1,8]<stdout>:_                _                QUAD4        MECA_FACE4       1400
[1,21]<stdout>:_                _                SEG2         MECA_ARETE2      36
[1,3]<stdout>:_                _                QUAD4        MECA_FACE4       3169
[1,8]<stdout>:3D               _                HEXA8        MECA_HEXA8       75004
[1,21]<stdout>:_                _                QUAD4        MECA_FACE4       3536
[1,3]<stdout>:3D               _                HEXA8        MECA_HEXA8       69262
[1,21]<stdout>:3D               _                HEXA8        MECA_HEXA8       73126
[1,24]<stdout>:_                _                SEG2         MECA_ARETE2      33
[1,24]<stdout>:_                _                QUAD4        MECA_FACE4       3534
[1,24]<stdout>:3D               _                HEXA8        MECA_HEXA8       73256
[1,2]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,2]<stdout>:_                _                QUAD4        MECA_FACE4       1330
[1,2]<stdout>:3D               _                HEXA8        MECA_HEXA8       75876
[1,27]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,27]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,18]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,18]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.01      0.02
[1,13]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.01      0.04
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,20]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,20]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,1]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,16]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.01      0.04
[1,16]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.02
[1,25]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.01      0.04
[1,25]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,0]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,11]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.01      0.04
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,22]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,22]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,5]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,9]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,12]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.04
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,19]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,19]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,26]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.04
[1,26]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,23]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,23]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,8]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,31]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.04
[1,31]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,17]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.04
[1,17]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,4]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,2]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.04
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,14]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,10]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,29]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.04
[1,29]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,15]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,30]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.04
[1,30]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,6]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,3]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,28]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,28]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,21]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.04
[1,21]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,24]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,24]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,7]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,31]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,7]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,30]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,1]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,0]<stdout>:# Résultat commande #0005 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,7]<stdout>:# Mémoire (Mo) :  1208.39 /   844.20 /   225.14 /   211.48 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:# Mémoire (Mo) :  1222.20 /   845.92 /   225.52 /   211.73 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1183.17 /   841.59 /   224.36 /   211.20 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:# Mémoire (Mo) :  1202.41 /   842.30 /   223.52 /   210.71 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Mémoire (Mo) :  1231.32 /   910.37 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:# Fin commande #0003   user+syst:        0.30s (syst:        0.01s, elaps:        0.29s)
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.29s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.29s)
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.29s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0005   user+syst:        0.27s (syst:        0.00s, elaps:        0.26s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,27]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,27]<stdout>:# Mémoire (Mo) :  1173.05 /   838.64 /   222.78 /   210.29 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Mémoire (Mo) :  1095.37 /   837.82 /   222.35 /   210.08 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Fin commande #0003   user+syst:        0.30s (syst:        0.00s, elaps:        0.30s)
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,26]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,25]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,11]<stdout>:# Mémoire (Mo) :  1115.86 /   840.10 /   223.29 /   210.63 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,9]<stdout>:# Mémoire (Mo) :  1178.16 /   840.27 /   223.27 /   210.56 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0003   user+syst:        0.28s (syst:        0.01s, elaps:        0.30s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Mémoire (Mo) :  1191.58 /   842.81 /   224.02 /   210.97 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,18]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,9]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,23]<stdout>:# Mémoire (Mo) :  1192.51 /   841.15 /   223.01 /   210.42 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Fin commande #0003   user+syst:        0.28s (syst:        0.01s, elaps:        0.30s)
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Mémoire (Mo) :  1177.84 /   839.34 /   223.41 /   210.67 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Mémoire (Mo) :  1171.08 /   840.87 /   223.85 /   210.94 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0003   user+syst:        0.28s (syst:        0.02s, elaps:        0.30s)
[1,18]<stdout>:# Fin commande #0003   user+syst:        0.28s (syst:        0.01s, elaps:        0.30s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,15]<stdout>:# Mémoire (Mo) :  1127.30 /   841.64 /   224.11 /   211.12 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,10]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,3]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,15]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.01s, elaps:        0.30s)
[1,5]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,20]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,29]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,28]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,17]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,16]<stdout>:# Mémoire (Mo) :  1192.82 /   844.09 /   225.76 /   211.85 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :  1172.34 /   840.39 /   223.79 /   210.89 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,19]<stdout>:# Mémoire (Mo) :  1207.30 /   843.12 /   224.30 /   211.15 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  1195.86 /   841.29 /   224.33 /   211.21 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,5]<stdout>:# Mémoire (Mo) :  1101.05 /   840.00 /   223.72 /   210.89 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,3]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.01s, elaps:        0.30s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Mémoire (Mo) :  1202.28 /   842.35 /   225.25 /   211.62 (VmPeak / VmSize / Optimum / Minimum)
[1,24]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,2]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,14]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,4]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,20]<stdout>:# Mémoire (Mo) :  1185.20 /   841.85 /   224.92 /   211.38 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.01s, elaps:        0.30s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Fin commande #0003   user+syst:        0.28s (syst:        0.01s, elaps:        0.30s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,29]<stdout>:# Mémoire (Mo) :  1114.86 /   841.36 /   223.65 /   210.85 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,17]<stdout>:# Mémoire (Mo) :  1178.69 /   841.84 /   224.05 /   211.04 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,6]<stdout>:# Mémoire (Mo) :  1199.67 /   842.91 /   225.26 /   211.60 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Mémoire (Mo) :  1120.02 /   843.22 /   224.48 /   211.33 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Mémoire (Mo) :  1212.80 /   845.72 /   226.32 /   212.07 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.01s, elaps:        0.30s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :  1213.13 /   843.51 /   225.74 /   211.77 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Mémoire (Mo) :  1209.59 /   845.56 /   226.12 /   211.99 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :  1204.63 /   844.39 /   226.65 /   212.28 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :  1194.00 /   843.77 /   225.16 /   211.56 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,21]<stdout>:# Mémoire (Mo) :  1215.29 /   844.71 /   226.06 /   211.96 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.01s, elaps:        0.30s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Fin commande #0003   user+syst:        0.28s (syst:        0.00s, elaps:        0.30s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Mémoire (Mo) :  1201.84 /   844.91 /   226.41 /   212.12 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.01s, elaps:        0.30s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.01s, elaps:        0.30s)
[1,21]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.00s, elaps:        0.30s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Fin commande #0003   user+syst:        0.29s (syst:        0.01s, elaps:        0.30s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt141
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt141
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt141
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt141
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt141
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0006 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 141
[1,7]<stdout>:# Commande #0004 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 141
[1,1]<stdout>:# Commande #0004 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 141
[1,31]<stdout>:# Commande #0004 de
[1,31]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,31]<stdout>:Cube_perf.py, ligne 141
[1,30]<stdout>:# Commande #0004 de
[1,30]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,30]<stdout>:Cube_perf.py, ligne 141
[1,0]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                                   SY=200.0),
[1,0]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,0]<stdout>:                              COEF_AMOR=1.0,
[1,0]<stdout>:                              E=200000.0,
[1,0]<stdout>:                              K_DESSIC=0.0,
[1,0]<stdout>:                              NU=0.3),
[1,0]<stdout>:                      INFO=1)
[1,0]<stdout>:
[1,7]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                                   SY=200.0),
[1,7]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,7]<stdout>:                              COEF_AMOR=1.0,
[1,7]<stdout>:                              E=200000.0,
[1,7]<stdout>:                              K_DESSIC=0.0,
[1,7]<stdout>:                              NU=0.3),
[1,7]<stdout>:                      INFO=1)
[1,7]<stdout>:
[1,1]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                                   SY=200.0),
[1,1]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,1]<stdout>:                              COEF_AMOR=1.0,
[1,1]<stdout>:                              E=200000.0,
[1,1]<stdout>:                              K_DESSIC=0.0,
[1,1]<stdout>:                              NU=0.3),
[1,1]<stdout>:                      INFO=1)
[1,1]<stdout>:
[1,31]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,31]<stdout>:                                   SY=200.0),
[1,31]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,31]<stdout>:                              COEF_AMOR=1.0,
[1,31]<stdout>:                              E=200000.0,
[1,31]<stdout>:                              K_DESSIC=0.0,
[1,31]<stdout>:                              NU=0.3),
[1,31]<stdout>:                      INFO=1)
[1,31]<stdout>:
[1,30]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,30]<stdout>:                                   SY=200.0),
[1,30]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,30]<stdout>:                              COEF_AMOR=1.0,
[1,30]<stdout>:                              E=200000.0,
[1,30]<stdout>:                              K_DESSIC=0.0,
[1,30]<stdout>:                              NU=0.3),
[1,30]<stdout>:                      INFO=1)
[1,30]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt141
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt141
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:# Commande #0004 de
[1,26]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,26]<stdout>:Cube_perf.py, ligne 141
[1,27]<stdout>:# Commande #0004 de
[1,27]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,27]<stdout>:Cube_perf.py, ligne 141
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt141
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt141
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt141
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0004 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 141
[1,26]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,26]<stdout>:                                   SY=200.0),
[1,26]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,26]<stdout>:                              COEF_AMOR=1.0,
[1,26]<stdout>:                              E=200000.0,
[1,26]<stdout>:                              K_DESSIC=0.0,
[1,26]<stdout>:                              NU=0.3),
[1,26]<stdout>:                      INFO=1)
[1,26]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt141
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt141
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt141
[1,27]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,27]<stdout>:                                   SY=200.0),
[1,27]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,27]<stdout>:                              COEF_AMOR=1.0,
[1,27]<stdout>:                              E=200000.0,
[1,27]<stdout>:                              K_DESSIC=0.0,
[1,27]<stdout>:                              NU=0.3),
[1,27]<stdout>:                      INFO=1)
[1,27]<stdout>:
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0004 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 141
[1,25]<stdout>:# Commande #0004 de
[1,25]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,25]<stdout>:Cube_perf.py, ligne 141
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0004 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 141
[1,13]<stdout>:# Commande #0004 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 141
[1,18]<stdout>:# Commande #0004 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 141
[1,11]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,11]<stdout>:                                   SY=200.0),
[1,11]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,11]<stdout>:                              COEF_AMOR=1.0,
[1,11]<stdout>:                              E=200000.0,
[1,11]<stdout>:                              K_DESSIC=0.0,
[1,11]<stdout>:                              NU=0.3),
[1,11]<stdout>:                      INFO=1)
[1,11]<stdout>:
[1,25]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,25]<stdout>:                                   SY=200.0),
[1,25]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,25]<stdout>:                              COEF_AMOR=1.0,
[1,25]<stdout>:                              E=200000.0,
[1,25]<stdout>:                              K_DESSIC=0.0,
[1,25]<stdout>:                              NU=0.3),
[1,25]<stdout>:                      INFO=1)
[1,25]<stdout>:
[1,9]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,9]<stdout>:                                   SY=200.0),
[1,9]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,9]<stdout>:                              COEF_AMOR=1.0,
[1,9]<stdout>:                              E=200000.0,
[1,9]<stdout>:                              K_DESSIC=0.0,
[1,9]<stdout>:                              NU=0.3),
[1,9]<stdout>:                      INFO=1)
[1,9]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt141
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,13]<stdout>:                                   SY=200.0),
[1,13]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,13]<stdout>:                              COEF_AMOR=1.0,
[1,13]<stdout>:                              E=200000.0,
[1,13]<stdout>:                              K_DESSIC=0.0,
[1,13]<stdout>:                              NU=0.3),
[1,13]<stdout>:                      INFO=1)
[1,13]<stdout>:
[1,23]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,23]<stdout>:                                   SY=200.0),
[1,23]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,23]<stdout>:                              COEF_AMOR=1.0,
[1,23]<stdout>:                              E=200000.0,
[1,23]<stdout>:                              K_DESSIC=0.0,
[1,23]<stdout>:                              NU=0.3),
[1,23]<stdout>:                      INFO=1)
[1,23]<stdout>:
[1,18]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,18]<stdout>:                                   SY=200.0),
[1,18]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,18]<stdout>:                              COEF_AMOR=1.0,
[1,18]<stdout>:                              E=200000.0,
[1,18]<stdout>:                              K_DESSIC=0.0,
[1,18]<stdout>:                              NU=0.3),
[1,18]<stdout>:                      INFO=1)
[1,18]<stdout>:
[1,15]<stdout>:# Commande #0004 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 141
[1,15]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,15]<stdout>:                                   SY=200.0),
[1,15]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,15]<stdout>:                              COEF_AMOR=1.0,
[1,15]<stdout>:                              E=200000.0,
[1,15]<stdout>:                              K_DESSIC=0.0,
[1,15]<stdout>:                              NU=0.3),
[1,15]<stdout>:                      INFO=1)
[1,15]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt141
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt141
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0004 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 141
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt141
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt141
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt141
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt141
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt141
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt141
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt141
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0004 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 141
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0004 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 141
[1,20]<stdout>:# Commande #0004 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 141
[1,29]<stdout>:# Commande #0004 de
[1,29]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,29]<stdout>:Cube_perf.py, ligne 141
[1,10]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,10]<stdout>:                                   SY=200.0),
[1,10]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,10]<stdout>:                              COEF_AMOR=1.0,
[1,10]<stdout>:                              E=200000.0,
[1,10]<stdout>:                              K_DESSIC=0.0,
[1,10]<stdout>:                              NU=0.3),
[1,10]<stdout>:                      INFO=1)
[1,10]<stdout>:
[1,19]<stdout>:# Commande #0004 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 141
[1,17]<stdout>:# Commande #0004 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 141
[1,28]<stdout>:# Commande #0004 de
[1,28]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,28]<stdout>:Cube_perf.py, ligne 141
[1,5]<stdout>:# Commande #0004 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 141
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt141
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt141
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt141
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt141
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt141
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt141
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt141
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt141
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt141
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,16]<stdout>:                                   SY=200.0),
[1,16]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,16]<stdout>:                              COEF_AMOR=1.0,
[1,16]<stdout>:                              E=200000.0,
[1,16]<stdout>:                              K_DESSIC=0.0,
[1,16]<stdout>:                              NU=0.3),
[1,16]<stdout>:                      INFO=1)
[1,16]<stdout>:
[1,24]<stdout>:# Commande #0004 de
[1,24]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,24]<stdout>:Cube_perf.py, ligne 141
[1,21]<stdout>:# Commande #0004 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 141
[1,6]<stdout>:# Commande #0004 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 141
[1,3]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                                   SY=200.0),
[1,3]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,3]<stdout>:                              COEF_AMOR=1.0,
[1,3]<stdout>:                              E=200000.0,
[1,3]<stdout>:                              K_DESSIC=0.0,
[1,3]<stdout>:                              NU=0.3),
[1,3]<stdout>:                      INFO=1)
[1,3]<stdout>:
[1,17]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,17]<stdout>:                                   SY=200.0),
[1,17]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,17]<stdout>:                              COEF_AMOR=1.0,
[1,17]<stdout>:                              E=200000.0,
[1,17]<stdout>:                              K_DESSIC=0.0,
[1,17]<stdout>:                              NU=0.3),
[1,17]<stdout>:                      INFO=1)
[1,17]<stdout>:
[1,20]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,20]<stdout>:                                   SY=200.0),
[1,20]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,20]<stdout>:                              COEF_AMOR=1.0,
[1,20]<stdout>:                              E=200000.0,
[1,20]<stdout>:                              K_DESSIC=0.0,
[1,20]<stdout>:                              NU=0.3),
[1,20]<stdout>:                      INFO=1)
[1,20]<stdout>:
[1,4]<stdout>:# Commande #0004 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 141
[1,29]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,29]<stdout>:                                   SY=200.0),
[1,29]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,29]<stdout>:                              COEF_AMOR=1.0,
[1,29]<stdout>:                              E=200000.0,
[1,29]<stdout>:                              K_DESSIC=0.0,
[1,29]<stdout>:                              NU=0.3),
[1,29]<stdout>:                      INFO=1)
[1,29]<stdout>:
[1,12]<stdout>:# Commande #0004 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 141
[1,2]<stdout>:# Commande #0004 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 141
[1,28]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,28]<stdout>:                                   SY=200.0),
[1,28]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,28]<stdout>:                              COEF_AMOR=1.0,
[1,28]<stdout>:                              E=200000.0,
[1,28]<stdout>:                              K_DESSIC=0.0,
[1,28]<stdout>:                              NU=0.3),
[1,28]<stdout>:                      INFO=1)
[1,28]<stdout>:
[1,22]<stdout>:# Commande #0004 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 141
[1,8]<stdout>:# Commande #0004 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 141
[1,19]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,19]<stdout>:                                   SY=200.0),
[1,19]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,19]<stdout>:                              COEF_AMOR=1.0,
[1,19]<stdout>:                              E=200000.0,
[1,19]<stdout>:                              K_DESSIC=0.0,
[1,19]<stdout>:                              NU=0.3),
[1,19]<stdout>:                      INFO=1)
[1,19]<stdout>:
[1,14]<stdout>:# Commande #0004 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 141
[1,5]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                                   SY=200.0),
[1,5]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,5]<stdout>:                              COEF_AMOR=1.0,
[1,5]<stdout>:                              E=200000.0,
[1,5]<stdout>:                              K_DESSIC=0.0,
[1,5]<stdout>:                              NU=0.3),
[1,5]<stdout>:                      INFO=1)
[1,5]<stdout>:
[1,21]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,21]<stdout>:                                   SY=200.0),
[1,21]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,21]<stdout>:                              COEF_AMOR=1.0,
[1,21]<stdout>:                              E=200000.0,
[1,21]<stdout>:                              K_DESSIC=0.0,
[1,21]<stdout>:                              NU=0.3),
[1,21]<stdout>:                      INFO=1)
[1,21]<stdout>:
[1,24]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,24]<stdout>:                                   SY=200.0),
[1,24]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,24]<stdout>:                              COEF_AMOR=1.0,
[1,24]<stdout>:                              E=200000.0,
[1,24]<stdout>:                              K_DESSIC=0.0,
[1,24]<stdout>:                              NU=0.3),
[1,24]<stdout>:                      INFO=1)
[1,24]<stdout>:
[1,6]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                                   SY=200.0),
[1,6]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,6]<stdout>:                              COEF_AMOR=1.0,
[1,6]<stdout>:                              E=200000.0,
[1,6]<stdout>:                              K_DESSIC=0.0,
[1,6]<stdout>:                              NU=0.3),
[1,6]<stdout>:                      INFO=1)
[1,6]<stdout>:
[1,12]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,12]<stdout>:                                   SY=200.0),
[1,12]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,12]<stdout>:                              COEF_AMOR=1.0,
[1,12]<stdout>:                              E=200000.0,
[1,12]<stdout>:                              K_DESSIC=0.0,
[1,12]<stdout>:                              NU=0.3),
[1,12]<stdout>:                      INFO=1)
[1,12]<stdout>:
[1,14]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,14]<stdout>:                                   SY=200.0),
[1,14]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,14]<stdout>:                              COEF_AMOR=1.0,
[1,14]<stdout>:                              E=200000.0,
[1,14]<stdout>:                              K_DESSIC=0.0,
[1,14]<stdout>:                              NU=0.3),
[1,14]<stdout>:                      INFO=1)
[1,14]<stdout>:
[1,22]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,22]<stdout>:                                   SY=200.0),
[1,22]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,22]<stdout>:                              COEF_AMOR=1.0,
[1,22]<stdout>:                              E=200000.0,
[1,22]<stdout>:                              K_DESSIC=0.0,
[1,22]<stdout>:                              NU=0.3),
[1,22]<stdout>:                      INFO=1)
[1,22]<stdout>:
[1,8]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,8]<stdout>:                                   SY=200.0),
[1,8]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,8]<stdout>:                              COEF_AMOR=1.0,
[1,8]<stdout>:                              E=200000.0,
[1,8]<stdout>:                              K_DESSIC=0.0,
[1,8]<stdout>:                              NU=0.3),
[1,8]<stdout>:                      INFO=1)
[1,8]<stdout>:
[1,4]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                                   SY=200.0),
[1,4]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,4]<stdout>:                              COEF_AMOR=1.0,
[1,4]<stdout>:                              E=200000.0,
[1,4]<stdout>:                              K_DESSIC=0.0,
[1,4]<stdout>:                              NU=0.3),
[1,4]<stdout>:                      INFO=1)
[1,4]<stdout>:
[1,2]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                                   SY=200.0),
[1,2]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,2]<stdout>:                              COEF_AMOR=1.0,
[1,2]<stdout>:                              E=200000.0,
[1,2]<stdout>:                              K_DESSIC=0.0,
[1,2]<stdout>:                              NU=0.3),
[1,2]<stdout>:                      INFO=1)
[1,2]<stdout>:
[1,7]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,7]<stdout>:# Mémoire (Mo) :  1208.39 /   844.20 /   225.14 /   211.48 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,30]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,1]<stdout>:# Mémoire (Mo) :  1183.17 /   841.59 /   224.36 /   211.20 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Mémoire (Mo) :  1222.20 /   845.92 /   225.52 /   211.73 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,31]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,25]<stdout>:# Mémoire (Mo) :  1191.58 /   842.81 /   224.02 /   210.97 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,31]<stdout>:# Mémoire (Mo) :  1202.41 /   842.30 /   223.52 /   210.71 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,9]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,25]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,13]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,11]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,31]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,26]<stdout>:# Mémoire (Mo) :  1095.37 /   837.82 /   222.35 /   210.08 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Mémoire (Mo) :  1173.05 /   838.64 /   222.78 /   210.29 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  1177.84 /   839.34 /   223.41 /   210.67 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :  1178.16 /   840.27 /   223.27 /   210.56 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Mémoire (Mo) :  1192.51 /   841.15 /   223.01 /   210.42 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Mémoire (Mo) :  1115.86 /   840.10 /   223.29 /   210.63 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,13]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,18]<stdout>:# Mémoire (Mo) :  1171.08 /   840.87 /   223.85 /   210.94 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,15]<stdout>:# Mémoire (Mo) :  1127.30 /   841.64 /   224.11 /   211.12 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0006 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,10]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,20]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,0]<stdout>:# Mémoire (Mo) :  1231.32 /   910.37 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,24]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,17]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,10]<stdout>:# Mémoire (Mo) :  1172.34 /   840.39 /   223.79 /   210.89 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,19]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,28]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,21]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,0]<stdout>:# Fin commande #0006   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,20]<stdout>:# Mémoire (Mo) :  1185.20 /   841.85 /   224.92 /   211.38 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,24]<stdout>:# Mémoire (Mo) :  1209.59 /   845.56 /   226.12 /   211.99 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt152
[1,17]<stdout>:# Mémoire (Mo) :  1178.69 /   841.84 /   224.05 /   211.04 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,12]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,19]<stdout>:# Mémoire (Mo) :  1207.30 /   843.12 /   224.30 /   211.15 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Mémoire (Mo) :  1192.82 /   844.09 /   225.76 /   211.85 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,22]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,28]<stdout>:# Mémoire (Mo) :  1202.28 /   842.35 /   225.25 /   211.62 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Mémoire (Mo) :  1215.29 /   844.71 /   226.06 /   211.96 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,16]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# Mémoire (Mo) :  1199.67 /   842.91 /   225.26 /   211.60 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Mémoire (Mo) :  1212.80 /   845.72 /   226.32 /   212.07 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,29]<stdout>:# Mémoire (Mo) :  1114.86 /   841.36 /   223.65 /   210.85 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Mémoire (Mo) :  1120.02 /   843.22 /   224.48 /   211.33 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Commande #0005 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 152
[1,6]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt152
[1,22]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :  1213.13 /   843.51 /   225.74 /   211.77 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Mémoire (Mo) :  1195.86 /   841.29 /   224.33 /   211.21 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt152
[1,4]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,14]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0005 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,7]<stdout>:                              TOUT='OUI'),
[1,7]<stdout>:                      INFO=1,
[1,7]<stdout>:                      MAILLAGE='<00000004>')
[1,7]<stdout>:
[1,5]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,8]<stdout>:# Mémoire (Mo) :  1201.84 /   844.91 /   226.41 /   212.12 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :  1194.00 /   843.77 /   225.16 /   211.56 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:# Commande #0005 de
[1,30]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,30]<stdout>:Cube_perf.py, ligne 152
[1,2]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,8]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Mémoire (Mo) :  1101.05 /   840.00 /   223.72 /   210.89 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,1]<stdout>:                              TOUT='OUI'),
[1,1]<stdout>:                      INFO=1,
[1,1]<stdout>:                      MAILLAGE='<00000004>')
[1,1]<stdout>:
[1,5]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  1204.63 /   844.39 /   226.65 /   212.28 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt152
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,30]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,30]<stdout>:                              TOUT='OUI'),
[1,30]<stdout>:                      INFO=1,
[1,30]<stdout>:                      MAILLAGE='<00000004>')
[1,30]<stdout>:
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt152
[1,25]<stdout>:# Commande #0005 de
[1,25]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,25]<stdout>:Cube_perf.py, ligne 152
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt152
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt152
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt152
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt152
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt152
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:# Commande #0005 de
[1,31]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,31]<stdout>:Cube_perf.py, ligne 152
[1,26]<stdout>:# Commande #0005 de
[1,26]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,26]<stdout>:Cube_perf.py, ligne 152
[1,27]<stdout>:# Commande #0005 de
[1,27]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,27]<stdout>:Cube_perf.py, ligne 152
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt152
[1,13]<stdout>:# Commande #0005 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 152
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0005 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 152
[1,25]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,25]<stdout>:                              TOUT='OUI'),
[1,25]<stdout>:                      INFO=1,
[1,25]<stdout>:                      MAILLAGE='<00000004>')
[1,25]<stdout>:
[1,11]<stdout>:# Commande #0005 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 152
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt152
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0005 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 152
[1,31]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,31]<stdout>:                              TOUT='OUI'),
[1,31]<stdout>:                      INFO=1,
[1,31]<stdout>:                      MAILLAGE='<00000004>')
[1,31]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt152
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0005 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 152
[1,26]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,26]<stdout>:                              TOUT='OUI'),
[1,26]<stdout>:                      INFO=1,
[1,26]<stdout>:                      MAILLAGE='<00000004>')
[1,26]<stdout>:
[1,27]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,27]<stdout>:                              TOUT='OUI'),
[1,27]<stdout>:                      INFO=1,
[1,27]<stdout>:                      MAILLAGE='<00000004>')
[1,27]<stdout>:
[1,13]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,13]<stdout>:                              TOUT='OUI'),
[1,13]<stdout>:                      INFO=1,
[1,13]<stdout>:                      MAILLAGE='<00000004>')
[1,13]<stdout>:
[1,9]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,9]<stdout>:                              TOUT='OUI'),
[1,9]<stdout>:                      INFO=1,
[1,9]<stdout>:                      MAILLAGE='<00000004>')
[1,9]<stdout>:
[1,11]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,11]<stdout>:                              TOUT='OUI'),
[1,11]<stdout>:                      INFO=1,
[1,11]<stdout>:                      MAILLAGE='<00000004>')
[1,11]<stdout>:
[1,15]<stdout>:# Commande #0005 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 152
[1,23]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,23]<stdout>:                              TOUT='OUI'),
[1,23]<stdout>:                      INFO=1,
[1,23]<stdout>:                      MAILLAGE='<00000004>')
[1,23]<stdout>:
[1,18]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,18]<stdout>:                              TOUT='OUI'),
[1,18]<stdout>:                      INFO=1,
[1,18]<stdout>:                      MAILLAGE='<00000004>')
[1,18]<stdout>:
[1,15]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,15]<stdout>:                              TOUT='OUI'),
[1,15]<stdout>:                      INFO=1,
[1,15]<stdout>:                      MAILLAGE='<00000004>')
[1,15]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt152
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt152
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt152
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt152
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt152
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt152
[1,10]<stdout>:# Commande #0005 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 152
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt152
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0007 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 152
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt152
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt152
[1,20]<stdout>:# Commande #0005 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 152
[1,24]<stdout>:# Commande #0005 de
[1,24]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,24]<stdout>:Cube_perf.py, ligne 152
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt152
[1,21]<stdout>:# Commande #0005 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 152
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt152
[1,17]<stdout>:# Commande #0005 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 152
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt152
[1,19]<stdout>:# Commande #0005 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 152
[1,16]<stdout>:# Commande #0005 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 152
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt152
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Commande #0005 de
[1,28]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,28]<stdout>:Cube_perf.py, ligne 152
[1,10]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,10]<stdout>:                              TOUT='OUI'),
[1,10]<stdout>:                      INFO=1,
[1,10]<stdout>:                      MAILLAGE='<00000004>')
[1,10]<stdout>:
[1,6]<stdout>:# Commande #0005 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 152
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt152
[1,0]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,0]<stdout>:                              TOUT='OUI'),
[1,0]<stdout>:                      INFO=1,
[1,0]<stdout>:                      MAILLAGE='<00000004>')
[1,0]<stdout>:
[1,12]<stdout>:# Commande #0005 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 152
[1,20]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,20]<stdout>:                              TOUT='OUI'),
[1,20]<stdout>:                      INFO=1,
[1,20]<stdout>:                      MAILLAGE='<00000004>')
[1,20]<stdout>:
[1,29]<stdout>:# Commande #0005 de
[1,29]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,29]<stdout>:Cube_perf.py, ligne 152
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt152
[1,22]<stdout>:# Commande #0005 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 152
[1,24]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,24]<stdout>:                              TOUT='OUI'),
[1,24]<stdout>:                      INFO=1,
[1,24]<stdout>:                      MAILLAGE='<00000004>')
[1,24]<stdout>:
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,19]<stdout>:                              TOUT='OUI'),
[1,19]<stdout>:                      INFO=1,
[1,19]<stdout>:                      MAILLAGE='<00000004>')
[1,19]<stdout>:
[1,17]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,17]<stdout>:                              TOUT='OUI'),
[1,17]<stdout>:                      INFO=1,
[1,17]<stdout>:                      MAILLAGE='<00000004>')
[1,17]<stdout>:
[1,21]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,21]<stdout>:                              TOUT='OUI'),
[1,21]<stdout>:                      INFO=1,
[1,21]<stdout>:                      MAILLAGE='<00000004>')
[1,21]<stdout>:
[1,16]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,16]<stdout>:                              TOUT='OUI'),
[1,16]<stdout>:                      INFO=1,
[1,16]<stdout>:                      MAILLAGE='<00000004>')
[1,16]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt152
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0005 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 152
[1,28]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,28]<stdout>:                              TOUT='OUI'),
[1,28]<stdout>:                      INFO=1,
[1,28]<stdout>:                      MAILLAGE='<00000004>')
[1,28]<stdout>:
[1,3]<stdout>:# Commande #0005 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 152
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt152
[1,6]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,6]<stdout>:                              TOUT='OUI'),
[1,6]<stdout>:                      INFO=1,
[1,6]<stdout>:                      MAILLAGE='<00000004>')
[1,6]<stdout>:
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,12]<stdout>:                              TOUT='OUI'),
[1,12]<stdout>:                      INFO=1,
[1,12]<stdout>:                      MAILLAGE='<00000004>')
[1,12]<stdout>:
[1,29]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,29]<stdout>:                              TOUT='OUI'),
[1,29]<stdout>:                      INFO=1,
[1,29]<stdout>:                      MAILLAGE='<00000004>')
[1,29]<stdout>:
[1,8]<stdout>:# Commande #0005 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 152
[1,22]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,22]<stdout>:                              TOUT='OUI'),
[1,22]<stdout>:                      INFO=1,
[1,22]<stdout>:                      MAILLAGE='<00000004>')
[1,22]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt152
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt152
[1,4]<stdout>:# Commande #0005 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 152
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,14]<stdout>:                              TOUT='OUI'),
[1,14]<stdout>:                      INFO=1,
[1,14]<stdout>:                      MAILLAGE='<00000004>')
[1,14]<stdout>:
[1,3]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,3]<stdout>:                              TOUT='OUI'),
[1,3]<stdout>:                      INFO=1,
[1,3]<stdout>:                      MAILLAGE='<00000004>')
[1,3]<stdout>:
[1,5]<stdout>:# Commande #0005 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 152
[1,8]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,8]<stdout>:                              TOUT='OUI'),
[1,8]<stdout>:                      INFO=1,
[1,8]<stdout>:                      MAILLAGE='<00000004>')
[1,8]<stdout>:
[1,2]<stdout>:# Commande #0005 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 152
[1,4]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,4]<stdout>:                              TOUT='OUI'),
[1,4]<stdout>:                      INFO=1,
[1,4]<stdout>:                      MAILLAGE='<00000004>')
[1,4]<stdout>:
[1,5]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,5]<stdout>:                              TOUT='OUI'),
[1,5]<stdout>:                      INFO=1,
[1,5]<stdout>:                      MAILLAGE='<00000004>')
[1,5]<stdout>:
[1,2]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,2]<stdout>:                              TOUT='OUI'),
[1,2]<stdout>:                      INFO=1,
[1,2]<stdout>:                      MAILLAGE='<00000004>')
[1,2]<stdout>:
[1,7]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,7]<stdout>:# Mémoire (Mo) :  1208.39 /   844.20 /   225.14 /   211.48 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,1]<stdout>:# Mémoire (Mo) :  1183.17 /   841.59 /   224.36 /   211.20 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,25]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,1]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Mémoire (Mo) :  1222.20 /   845.92 /   225.52 /   211.73 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# Mémoire (Mo) :  1191.58 /   842.81 /   224.02 /   210.97 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,23]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,15]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,11]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,13]<stdout>:# Mémoire (Mo) :  1177.84 /   839.34 /   223.41 /   210.67 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,27]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,23]<stdout>:# Mémoire (Mo) :  1192.51 /   841.15 /   223.01 /   210.42 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,15]<stdout>:# Mémoire (Mo) :  1127.30 /   841.64 /   224.11 /   211.12 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Mémoire (Mo) :  1115.86 /   840.10 /   223.29 /   210.63 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Mémoire (Mo) :  1095.37 /   837.82 /   222.35 /   210.08 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Mémoire (Mo) :  1173.05 /   838.64 /   222.78 /   210.29 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :  1178.16 /   840.27 /   223.27 /   210.56 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,26]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,18]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Mémoire (Mo) :  1171.08 /   840.87 /   223.85 /   210.94 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,18]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt161
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:# Mémoire (Mo) :  1202.41 /   842.30 /   223.52 /   210.71 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,7]<stdout>:# Commande #0006 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 161
[1,20]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,24]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt161
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,20]<stdout>:# Mémoire (Mo) :  1185.20 /   841.85 /   224.92 /   211.38 (VmPeak / VmSize / Optimum / Minimum)
[1,24]<stdout>:# Mémoire (Mo) :  1209.59 /   845.56 /   226.12 /   211.99 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,7]<stdout>:                                    DY=0.0,
[1,7]<stdout>:                                    DZ=0.0,
[1,7]<stdout>:                                    GROUP_MA='LEFT'),
[1,7]<stdout>:                       MODELE=model,
[1,7]<stdout>:                       SYNTAXE='NON')
[1,7]<stdout>:
[1,6]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,21]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,22]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,10]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,20]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,24]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0006 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 161
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt161
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Mémoire (Mo) :  1207.30 /   843.12 /   224.30 /   211.15 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Mémoire (Mo) :  1178.69 /   841.84 /   224.05 /   211.04 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt161
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,6]<stdout>:# Mémoire (Mo) :  1199.67 /   842.91 /   225.26 /   211.60 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Mémoire (Mo) :  1215.29 /   844.71 /   226.06 /   211.96 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,10]<stdout>:# Mémoire (Mo) :  1172.34 /   840.39 /   223.79 /   210.89 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Mémoire (Mo) :  1120.02 /   843.22 /   224.48 /   211.33 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,17]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Commande #0006 de
[1,25]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,25]<stdout>:Cube_perf.py, ligne 161
[1,29]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,30]<stdout>:# Commande #0006 de
[1,30]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,30]<stdout>:Cube_perf.py, ligne 161
[1,6]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,1]<stdout>:                                    DY=0.0,
[1,1]<stdout>:                                    DZ=0.0,
[1,1]<stdout>:                                    GROUP_MA='LEFT'),
[1,1]<stdout>:                       MODELE=model,
[1,1]<stdout>:                       SYNTAXE='NON')
[1,1]<stdout>:
[1,21]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,22]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Mémoire (Mo) :  1192.82 /   844.09 /   225.76 /   211.85 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Mémoire (Mo) :  1202.28 /   842.35 /   225.25 /   211.62 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Mémoire (Mo) :  1114.86 /   841.36 /   223.65 /   210.85 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,25]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,25]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,25]<stdout>:                                    DY=0.0,
[1,25]<stdout>:                                    DZ=0.0,
[1,25]<stdout>:                                    GROUP_MA='LEFT'),
[1,25]<stdout>:                       MODELE=model,
[1,25]<stdout>:                       SYNTAXE='NON')
[1,25]<stdout>:
[1,30]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,30]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,30]<stdout>:                                    DY=0.0,
[1,30]<stdout>:                                    DZ=0.0,
[1,30]<stdout>:                                    GROUP_MA='LEFT'),
[1,30]<stdout>:                       MODELE=model,
[1,30]<stdout>:                       SYNTAXE='NON')
[1,30]<stdout>:
[1,12]<stdout>:# Mémoire (Mo) :  1212.80 /   845.72 /   226.32 /   212.07 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt161
[1,12]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt161
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt161
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt161
[1,8]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,14]<stdout>:# Mémoire (Mo) :  1213.13 /   843.51 /   225.74 /   211.77 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt161
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt161
[1,13]<stdout>:# Commande #0006 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 161
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt161
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0006 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 161
[1,15]<stdout>:# Commande #0006 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 161
[1,14]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,11]<stdout>:# Commande #0006 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 161
[1,26]<stdout>:# Commande #0006 de
[1,26]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,26]<stdout>:Cube_perf.py, ligne 161
[1,8]<stdout>:# Mémoire (Mo) :  1201.84 /   844.91 /   226.41 /   212.12 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Commande #0006 de
[1,27]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,27]<stdout>:Cube_perf.py, ligne 161
[1,13]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,13]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,13]<stdout>:                                    DY=0.0,
[1,13]<stdout>:                                    DZ=0.0,
[1,13]<stdout>:                                    GROUP_MA='LEFT'),
[1,13]<stdout>:                       MODELE=model,
[1,13]<stdout>:                       SYNTAXE='NON')
[1,13]<stdout>:
[1,9]<stdout>:# Commande #0006 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 161
[1,8]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,23]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,23]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,23]<stdout>:                                    DY=0.0,
[1,23]<stdout>:                                    DZ=0.0,
[1,23]<stdout>:                                    GROUP_MA='LEFT'),
[1,23]<stdout>:                       MODELE=model,
[1,23]<stdout>:                       SYNTAXE='NON')
[1,23]<stdout>:
[1,15]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,15]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,15]<stdout>:                                    DY=0.0,
[1,15]<stdout>:                                    DZ=0.0,
[1,15]<stdout>:                                    GROUP_MA='LEFT'),
[1,15]<stdout>:                       MODELE=model,
[1,15]<stdout>:                       SYNTAXE='NON')
[1,15]<stdout>:
[1,3]<stdout>:# Mémoire (Mo) :  1195.86 /   841.29 /   224.33 /   211.21 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,11]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,11]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,11]<stdout>:                                    DY=0.0,
[1,11]<stdout>:                                    DZ=0.0,
[1,11]<stdout>:                                    GROUP_MA='LEFT'),
[1,11]<stdout>:                       MODELE=model,
[1,11]<stdout>:                       SYNTAXE='NON')
[1,11]<stdout>:
[1,27]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,27]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,27]<stdout>:                                    DY=0.0,
[1,27]<stdout>:                                    DZ=0.0,
[1,27]<stdout>:                                    GROUP_MA='LEFT'),
[1,27]<stdout>:                       MODELE=model,
[1,27]<stdout>:                       SYNTAXE='NON')
[1,27]<stdout>:
[1,26]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,26]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,26]<stdout>:                                    DY=0.0,
[1,26]<stdout>:                                    DZ=0.0,
[1,26]<stdout>:                                    GROUP_MA='LEFT'),
[1,26]<stdout>:                       MODELE=model,
[1,26]<stdout>:                       SYNTAXE='NON')
[1,26]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt161
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,9]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,9]<stdout>:                                    DY=0.0,
[1,9]<stdout>:                                    DZ=0.0,
[1,9]<stdout>:                                    GROUP_MA='LEFT'),
[1,9]<stdout>:                       MODELE=model,
[1,9]<stdout>:                       SYNTAXE='NON')
[1,9]<stdout>:
[1,2]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt161
[1,4]<stdout>:# Mémoire (Mo) :  1194.00 /   843.77 /   225.16 /   211.56 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Commande #0006 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 161
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  1204.63 /   844.39 /   226.65 /   212.28 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,31]<stdout>:# Commande #0006 de
[1,31]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,31]<stdout>:Cube_perf.py, ligne 161
[1,18]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,18]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,18]<stdout>:                                    DY=0.0,
[1,18]<stdout>:                                    DZ=0.0,
[1,18]<stdout>:                                    GROUP_MA='LEFT'),
[1,18]<stdout>:                       MODELE=model,
[1,18]<stdout>:                       SYNTAXE='NON')
[1,18]<stdout>:
[1,2]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt161
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt161
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Mémoire (Mo) :  1101.05 /   840.00 /   223.72 /   210.89 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,31]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,31]<stdout>:                                    DY=0.0,
[1,31]<stdout>:                                    DZ=0.0,
[1,31]<stdout>:                                    GROUP_MA='LEFT'),
[1,31]<stdout>:                       MODELE=model,
[1,31]<stdout>:                       SYNTAXE='NON')
[1,31]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt161
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt161
[1,5]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Commande #0006 de
[1,24]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,24]<stdout>:Cube_perf.py, ligne 161
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Commande #0006 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 161
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt161
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt161
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt161
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt161
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0006 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:# Résultat commande #0007 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,17]<stdout>:# Commande #0006 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 161
[1,20]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,20]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,20]<stdout>:                                    DY=0.0,
[1,20]<stdout>:                                    DZ=0.0,
[1,20]<stdout>:                                    GROUP_MA='LEFT'),
[1,20]<stdout>:                       MODELE=model,
[1,20]<stdout>:                       SYNTAXE='NON')
[1,20]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt161
[1,24]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,24]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,24]<stdout>:                                    DY=0.0,
[1,24]<stdout>:                                    DZ=0.0,
[1,24]<stdout>:                                    GROUP_MA='LEFT'),
[1,24]<stdout>:                       MODELE=model,
[1,24]<stdout>:                       SYNTAXE='NON')
[1,24]<stdout>:
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt161
[1,10]<stdout>:# Commande #0006 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 161
[1,6]<stdout>:# Commande #0006 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 161
[1,21]<stdout>:# Commande #0006 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 161
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Commande #0006 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 161
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt161
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt161
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,19]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,19]<stdout>:                                    DY=0.0,
[1,19]<stdout>:                                    DZ=0.0,
[1,19]<stdout>:                                    GROUP_MA='LEFT'),
[1,19]<stdout>:                       MODELE=model,
[1,19]<stdout>:                       SYNTAXE='NON')
[1,19]<stdout>:
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,17]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,17]<stdout>:                                    DY=0.0,
[1,17]<stdout>:                                    DZ=0.0,
[1,17]<stdout>:                                    GROUP_MA='LEFT'),
[1,17]<stdout>:                       MODELE=model,
[1,17]<stdout>:                       SYNTAXE='NON')
[1,17]<stdout>:
[1,16]<stdout>:# Commande #0006 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:# Mémoire (Mo) :  1231.32 /   910.37 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Commande #0006 de
[1,28]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,28]<stdout>:Cube_perf.py, ligne 161
[1,21]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,21]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,21]<stdout>:                                    DY=0.0,
[1,21]<stdout>:                                    DZ=0.0,
[1,21]<stdout>:                                    GROUP_MA='LEFT'),
[1,21]<stdout>:                       MODELE=model,
[1,21]<stdout>:                       SYNTAXE='NON')
[1,21]<stdout>:
[1,6]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,6]<stdout>:                                    DY=0.0,
[1,6]<stdout>:                                    DZ=0.0,
[1,6]<stdout>:                                    GROUP_MA='LEFT'),
[1,6]<stdout>:                       MODELE=model,
[1,6]<stdout>:                       SYNTAXE='NON')
[1,6]<stdout>:
[1,22]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,22]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,22]<stdout>:                                    DY=0.0,
[1,22]<stdout>:                                    DZ=0.0,
[1,22]<stdout>:                                    GROUP_MA='LEFT'),
[1,22]<stdout>:                       MODELE=model,
[1,22]<stdout>:                       SYNTAXE='NON')
[1,22]<stdout>:
[1,10]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,10]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,10]<stdout>:                                    DY=0.0,
[1,10]<stdout>:                                    DZ=0.0,
[1,10]<stdout>:                                    GROUP_MA='LEFT'),
[1,10]<stdout>:                       MODELE=model,
[1,10]<stdout>:                       SYNTAXE='NON')
[1,10]<stdout>:
[1,29]<stdout>:# Commande #0006 de
[1,29]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,29]<stdout>:Cube_perf.py, ligne 161
[1,12]<stdout>:# Commande #0006 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:# Fin commande #0007   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt161
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,16]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,16]<stdout>:                                    DY=0.0,
[1,16]<stdout>:                                    DZ=0.0,
[1,16]<stdout>:                                    GROUP_MA='LEFT'),
[1,16]<stdout>:                       MODELE=model,
[1,16]<stdout>:                       SYNTAXE='NON')
[1,16]<stdout>:
[1,28]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,28]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,28]<stdout>:                                    DY=0.0,
[1,28]<stdout>:                                    DZ=0.0,
[1,28]<stdout>:                                    GROUP_MA='LEFT'),
[1,28]<stdout>:                       MODELE=model,
[1,28]<stdout>:                       SYNTAXE='NON')
[1,28]<stdout>:
[1,29]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,29]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,29]<stdout>:                                    DY=0.0,
[1,29]<stdout>:                                    DZ=0.0,
[1,29]<stdout>:                                    GROUP_MA='LEFT'),
[1,29]<stdout>:                       MODELE=model,
[1,29]<stdout>:                       SYNTAXE='NON')
[1,29]<stdout>:
[1,12]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,12]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,12]<stdout>:                                    DY=0.0,
[1,12]<stdout>:                                    DZ=0.0,
[1,12]<stdout>:                                    GROUP_MA='LEFT'),
[1,12]<stdout>:                       MODELE=model,
[1,12]<stdout>:                       SYNTAXE='NON')
[1,12]<stdout>:
[1,14]<stdout>:# Commande #0006 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 161
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt161
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt161
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,14]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,14]<stdout>:                                    DY=0.0,
[1,14]<stdout>:                                    DZ=0.0,
[1,14]<stdout>:                                    GROUP_MA='LEFT'),
[1,14]<stdout>:                       MODELE=model,
[1,14]<stdout>:                       SYNTAXE='NON')
[1,14]<stdout>:
[1,8]<stdout>:# Commande #0006 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 161
[1,3]<stdout>:# Commande #0006 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 161
[1,8]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,8]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,8]<stdout>:                                    DY=0.0,
[1,8]<stdout>:                                    DZ=0.0,
[1,8]<stdout>:                                    GROUP_MA='LEFT'),
[1,8]<stdout>:                       MODELE=model,
[1,8]<stdout>:                       SYNTAXE='NON')
[1,8]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt161
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt161
[1,3]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,3]<stdout>:                                    DY=0.0,
[1,3]<stdout>:                                    DZ=0.0,
[1,3]<stdout>:                                    GROUP_MA='LEFT'),
[1,3]<stdout>:                       MODELE=model,
[1,3]<stdout>:                       SYNTAXE='NON')
[1,3]<stdout>:
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0006 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 161
[1,2]<stdout>:# Commande #0006 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 161
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt161
[1,4]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,4]<stdout>:                                    DY=0.0,
[1,4]<stdout>:                                    DZ=0.0,
[1,4]<stdout>:                                    GROUP_MA='LEFT'),
[1,4]<stdout>:                       MODELE=model,
[1,4]<stdout>:                       SYNTAXE='NON')
[1,4]<stdout>:
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,2]<stdout>:                                    DY=0.0,
[1,2]<stdout>:                                    DZ=0.0,
[1,2]<stdout>:                                    GROUP_MA='LEFT'),
[1,2]<stdout>:                       MODELE=model,
[1,2]<stdout>:                       SYNTAXE='NON')
[1,2]<stdout>:
[1,5]<stdout>:# Commande #0006 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 161
[1,5]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,5]<stdout>:                                    DY=0.0,
[1,5]<stdout>:                                    DZ=0.0,
[1,5]<stdout>:                                    GROUP_MA='LEFT'),
[1,5]<stdout>:                       MODELE=model,
[1,5]<stdout>:                       SYNTAXE='NON')
[1,5]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt161
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0008 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,0]<stdout>:                                    DY=0.0,
[1,0]<stdout>:                                    DZ=0.0,
[1,0]<stdout>:                                    GROUP_MA='LEFT'),
[1,0]<stdout>:                       MODELE=model,
[1,0]<stdout>:                       SYNTAXE='NON')
[1,0]<stdout>:
[1,26]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,26]<stdout>:# Mémoire (Mo) :  1095.37 /   837.82 /   222.35 /   210.08 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt173
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:# Commande #0007 de
[1,26]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,26]<stdout>:Cube_perf.py, ligne 173
[1,26]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,26]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,26]<stdout>:                                            DZ=0.001,
[1,26]<stdout>:                                            GROUP_MA='RIGHT'),
[1,26]<stdout>:                               MODELE=model,
[1,26]<stdout>:                               SYNTAXE='NON')
[1,26]<stdout>:
[1,27]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,27]<stdout>:# Mémoire (Mo) :  1173.05 /   838.64 /   222.78 /   210.29 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,27]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Mémoire (Mo) :  1192.51 /   841.15 /   223.01 /   210.42 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,11]<stdout>:# Mémoire (Mo) :  1115.86 /   840.10 /   223.29 /   210.63 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,9]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,29]<stdout>:# Mémoire (Mo) :  1114.86 /   841.36 /   223.65 /   210.85 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,9]<stdout>:# Mémoire (Mo) :  1178.16 /   840.27 /   223.27 /   210.56 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt173
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt173
[1,27]<stdout>:# Commande #0007 de
[1,27]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,27]<stdout>:Cube_perf.py, ligne 173
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,27]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,27]<stdout>:                                            DZ=0.001,
[1,27]<stdout>:                                            GROUP_MA='RIGHT'),
[1,27]<stdout>:                               MODELE=model,
[1,27]<stdout>:                               SYNTAXE='NON')
[1,27]<stdout>:
[1,13]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,23]<stdout>:# Commande #0007 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 173
[1,5]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,13]<stdout>:# Mémoire (Mo) :  1177.84 /   839.34 /   223.41 /   210.67 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,23]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,23]<stdout>:                                            DZ=0.001,
[1,23]<stdout>:                                            GROUP_MA='RIGHT'),
[1,23]<stdout>:                               MODELE=model,
[1,23]<stdout>:                               SYNTAXE='NON')
[1,23]<stdout>:
[1,18]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,31]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,10]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,5]<stdout>:# Mémoire (Mo) :  1101.05 /   840.00 /   223.72 /   210.89 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt173
[1,31]<stdout>:# Mémoire (Mo) :  1202.41 /   842.30 /   223.52 /   210.71 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Mémoire (Mo) :  1171.08 /   840.87 /   223.85 /   210.94 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  1172.34 /   840.39 /   223.79 /   210.89 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,31]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,10]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0007 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 173
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,11]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,11]<stdout>:                                            DZ=0.001,
[1,11]<stdout>:                                            GROUP_MA='RIGHT'),
[1,11]<stdout>:                               MODELE=model,
[1,11]<stdout>:                               SYNTAXE='NON')
[1,11]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt173
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt173
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Commande #0007 de
[1,29]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,29]<stdout>:Cube_perf.py, ligne 173
[1,15]<stdout>:# Mémoire (Mo) :  1127.30 /   841.64 /   224.11 /   211.12 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Commande #0007 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 173
[1,29]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,29]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,29]<stdout>:                                            DZ=0.001,
[1,29]<stdout>:                                            GROUP_MA='RIGHT'),
[1,29]<stdout>:                               MODELE=model,
[1,29]<stdout>:                               SYNTAXE='NON')
[1,29]<stdout>:
[1,15]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,9]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,9]<stdout>:                                            DZ=0.001,
[1,9]<stdout>:                                            GROUP_MA='RIGHT'),
[1,9]<stdout>:                               MODELE=model,
[1,9]<stdout>:                               SYNTAXE='NON')
[1,9]<stdout>:
[1,17]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt173
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Mémoire (Mo) :  1178.69 /   841.84 /   224.05 /   211.04 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt173
[1,13]<stdout>:# Commande #0007 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 173
[1,17]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt173
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt173
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt173
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,13]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,13]<stdout>:                                            DZ=0.001,
[1,13]<stdout>:                                            GROUP_MA='RIGHT'),
[1,13]<stdout>:                               MODELE=model,
[1,13]<stdout>:                               SYNTAXE='NON')
[1,13]<stdout>:
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,5]<stdout>:# Commande #0007 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 173
[1,22]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,18]<stdout>:# Commande #0007 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 173
[1,10]<stdout>:# Commande #0007 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 173
[1,1]<stdout>:# Mémoire (Mo) :  1183.17 /   841.59 /   224.36 /   211.20 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:# Commande #0007 de
[1,31]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,31]<stdout>:Cube_perf.py, ligne 173
[1,5]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,5]<stdout>:                                            DZ=0.001,
[1,5]<stdout>:                                            GROUP_MA='RIGHT'),
[1,5]<stdout>:                               MODELE=model,
[1,5]<stdout>:                               SYNTAXE='NON')
[1,5]<stdout>:
[1,25]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,10]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,10]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,10]<stdout>:                                            DZ=0.001,
[1,10]<stdout>:                                            GROUP_MA='RIGHT'),
[1,10]<stdout>:                               MODELE=model,
[1,10]<stdout>:                               SYNTAXE='NON')
[1,10]<stdout>:
[1,18]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,18]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,18]<stdout>:                                            DZ=0.001,
[1,18]<stdout>:                                            GROUP_MA='RIGHT'),
[1,18]<stdout>:                               MODELE=model,
[1,18]<stdout>:                               SYNTAXE='NON')
[1,18]<stdout>:
[1,31]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,31]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,31]<stdout>:                                            DZ=0.001,
[1,31]<stdout>:                                            GROUP_MA='RIGHT'),
[1,31]<stdout>:                               MODELE=model,
[1,31]<stdout>:                               SYNTAXE='NON')
[1,31]<stdout>:
[1,1]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,22]<stdout>:# Mémoire (Mo) :  1120.02 /   843.22 /   224.48 /   211.33 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Mémoire (Mo) :  1191.58 /   842.81 /   224.02 /   210.97 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0008 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,3]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,19]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt173
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  1231.32 /   910.37 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  1195.86 /   841.29 /   224.33 /   211.21 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Commande #0007 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 173
[1,19]<stdout>:# Mémoire (Mo) :  1207.30 /   843.12 /   224.30 /   211.15 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0008   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,3]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,15]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,15]<stdout>:                                            DZ=0.001,
[1,15]<stdout>:                                            GROUP_MA='RIGHT'),
[1,15]<stdout>:                               MODELE=model,
[1,15]<stdout>:                               SYNTAXE='NON')
[1,15]<stdout>:
[1,19]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt173
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Commande #0007 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 173
[1,17]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,17]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,17]<stdout>:                                            DZ=0.001,
[1,17]<stdout>:                                            GROUP_MA='RIGHT'),
[1,17]<stdout>:                               MODELE=model,
[1,17]<stdout>:                               SYNTAXE='NON')
[1,17]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt173
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt173
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt173
[1,1]<stdout>:# Commande #0007 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 173
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,22]<stdout>:# Commande #0007 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 173
[1,1]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,1]<stdout>:                                            DZ=0.001,
[1,1]<stdout>:                                            GROUP_MA='RIGHT'),
[1,1]<stdout>:                               MODELE=model,
[1,1]<stdout>:                               SYNTAXE='NON')
[1,1]<stdout>:
[1,25]<stdout>:# Commande #0007 de
[1,25]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,25]<stdout>:Cube_perf.py, ligne 173
[1,22]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,22]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,22]<stdout>:                                            DZ=0.001,
[1,22]<stdout>:                                            GROUP_MA='RIGHT'),
[1,22]<stdout>:                               MODELE=model,
[1,22]<stdout>:                               SYNTAXE='NON')
[1,22]<stdout>:
[1,25]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,25]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,25]<stdout>:                                            DZ=0.001,
[1,25]<stdout>:                                            GROUP_MA='RIGHT'),
[1,25]<stdout>:                               MODELE=model,
[1,25]<stdout>:                               SYNTAXE='NON')
[1,25]<stdout>:
[1,20]<stdout>:# Mémoire (Mo) :  1185.20 /   841.85 /   224.92 /   211.38 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt173
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt173
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt173
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0007 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 173
[1,28]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,3]<stdout>:# Commande #0007 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 173
[1,0]<stdout>:# Commande #0009 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 173
[1,4]<stdout>:# Mémoire (Mo) :  1194.00 /   843.77 /   225.16 /   211.56 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,19]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,19]<stdout>:                                            DZ=0.001,
[1,19]<stdout>:                                            GROUP_MA='RIGHT'),
[1,19]<stdout>:                               MODELE=model,
[1,19]<stdout>:                               SYNTAXE='NON')
[1,19]<stdout>:
[1,0]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,0]<stdout>:                                            DZ=0.001,
[1,0]<stdout>:                                            GROUP_MA='RIGHT'),
[1,0]<stdout>:                               MODELE=model,
[1,0]<stdout>:                               SYNTAXE='NON')
[1,0]<stdout>:
[1,3]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,3]<stdout>:                                            DZ=0.001,
[1,3]<stdout>:                                            GROUP_MA='RIGHT'),
[1,3]<stdout>:                               MODELE=model,
[1,3]<stdout>:                               SYNTAXE='NON')
[1,3]<stdout>:
[1,28]<stdout>:# Mémoire (Mo) :  1202.28 /   842.35 /   225.25 /   211.62 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,6]<stdout>:# Mémoire (Mo) :  1199.67 /   842.91 /   225.26 /   211.60 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt173
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,20]<stdout>:# Commande #0007 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 173
[1,7]<stdout>:# Mémoire (Mo) :  1208.39 /   844.20 /   225.14 /   211.48 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,20]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,20]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,20]<stdout>:                                            DZ=0.001,
[1,20]<stdout>:                                            GROUP_MA='RIGHT'),
[1,20]<stdout>:                               MODELE=model,
[1,20]<stdout>:                               SYNTAXE='NON')
[1,20]<stdout>:
[1,7]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,14]<stdout>:# Mémoire (Mo) :  1213.13 /   843.51 /   225.74 /   211.77 (VmPeak / VmSize / Optimum / Minimum)
[1,24]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt173
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,14]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt173
[1,30]<stdout>:# Mémoire (Mo) :  1222.20 /   845.92 /   225.52 /   211.73 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Mémoire (Mo) :  1209.59 /   845.56 /   226.12 /   211.99 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Commande #0007 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 173
[1,30]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Mémoire (Mo) :  1215.29 /   844.71 /   226.06 /   211.96 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,4]<stdout>:                                            DZ=0.001,
[1,4]<stdout>:                                            GROUP_MA='RIGHT'),
[1,4]<stdout>:                               MODELE=model,
[1,4]<stdout>:                               SYNTAXE='NON')
[1,4]<stdout>:
[1,24]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Commande #0007 de
[1,28]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,28]<stdout>:Cube_perf.py, ligne 173
[1,21]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,28]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,28]<stdout>:                                            DZ=0.001,
[1,28]<stdout>:                                            GROUP_MA='RIGHT'),
[1,28]<stdout>:                               MODELE=model,
[1,28]<stdout>:                               SYNTAXE='NON')
[1,28]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt173
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0007 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 173
[1,6]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,6]<stdout>:                                            DZ=0.001,
[1,6]<stdout>:                                            GROUP_MA='RIGHT'),
[1,6]<stdout>:                               MODELE=model,
[1,6]<stdout>:                               SYNTAXE='NON')
[1,6]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt173
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0007 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 173
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt173
[1,16]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,7]<stdout>:                                            DZ=0.001,
[1,7]<stdout>:                                            GROUP_MA='RIGHT'),
[1,7]<stdout>:                               MODELE=model,
[1,7]<stdout>:                               SYNTAXE='NON')
[1,7]<stdout>:
[1,14]<stdout>:# Commande #0007 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 173
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt173
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt173
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Mémoire (Mo) :  1192.82 /   844.09 /   225.76 /   211.85 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt173
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,14]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,14]<stdout>:                                            DZ=0.001,
[1,14]<stdout>:                                            GROUP_MA='RIGHT'),
[1,14]<stdout>:                               MODELE=model,
[1,14]<stdout>:                               SYNTAXE='NON')
[1,14]<stdout>:
[1,16]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.01s, elaps:        0.04s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Commande #0007 de
[1,24]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,24]<stdout>:Cube_perf.py, ligne 173
[1,30]<stdout>:# Commande #0007 de
[1,30]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,30]<stdout>:Cube_perf.py, ligne 173
[1,21]<stdout>:# Commande #0007 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 173
[1,24]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,24]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,24]<stdout>:                                            DZ=0.001,
[1,24]<stdout>:                                            GROUP_MA='RIGHT'),
[1,24]<stdout>:                               MODELE=model,
[1,24]<stdout>:                               SYNTAXE='NON')
[1,24]<stdout>:
[1,8]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,30]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,30]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,30]<stdout>:                                            DZ=0.001,
[1,30]<stdout>:                                            GROUP_MA='RIGHT'),
[1,30]<stdout>:                               MODELE=model,
[1,30]<stdout>:                               SYNTAXE='NON')
[1,30]<stdout>:
[1,21]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,21]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,21]<stdout>:                                            DZ=0.001,
[1,21]<stdout>:                                            GROUP_MA='RIGHT'),
[1,21]<stdout>:                               MODELE=model,
[1,21]<stdout>:                               SYNTAXE='NON')
[1,21]<stdout>:
[1,8]<stdout>:# Mémoire (Mo) :  1201.84 /   844.91 /   226.41 /   212.12 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,12]<stdout>:# Mémoire (Mo) :  1212.80 /   845.72 /   226.32 /   212.07 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0006   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt173
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0007 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 173
[1,16]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,16]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,16]<stdout>:                                            DZ=0.001,
[1,16]<stdout>:                                            GROUP_MA='RIGHT'),
[1,16]<stdout>:                               MODELE=model,
[1,16]<stdout>:                               SYNTAXE='NON')
[1,16]<stdout>:
[1,2]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt173
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  1204.63 /   844.39 /   226.65 /   212.28 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Commande #0007 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 173
[1,2]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,8]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,8]<stdout>:                                            DZ=0.001,
[1,8]<stdout>:                                            GROUP_MA='RIGHT'),
[1,8]<stdout>:                               MODELE=model,
[1,8]<stdout>:                               SYNTAXE='NON')
[1,8]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt173
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0007 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 173
[1,12]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,12]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,12]<stdout>:                                            DZ=0.001,
[1,12]<stdout>:                                            GROUP_MA='RIGHT'),
[1,12]<stdout>:                               MODELE=model,
[1,12]<stdout>:                               SYNTAXE='NON')
[1,12]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt173
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0007 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 173
[1,2]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,2]<stdout>:                                            DZ=0.001,
[1,2]<stdout>:                                            GROUP_MA='RIGHT'),
[1,2]<stdout>:                               MODELE=model,
[1,2]<stdout>:                               SYNTAXE='NON')
[1,2]<stdout>:
[1,26]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,26]<stdout>:<MechanicalDirichletBC>
[1,26]<stdout>:# Mémoire (Mo) :  1095.37 /   837.82 /   222.35 /   210.08 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,11]<stdout>:<MechanicalDirichletBC>
[1,11]<stdout>:# Mémoire (Mo) :  1115.86 /   840.10 /   223.29 /   210.63 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,27]<stdout>:<MechanicalDirichletBC>
[1,11]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Mémoire (Mo) :  1173.05 /   838.64 /   222.78 /   210.29 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,23]<stdout>:<MechanicalDirichletBC>
[1,27]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Mémoire (Mo) :  1192.51 /   841.15 /   223.01 /   210.42 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,9]<stdout>:<MechanicalDirichletBC>
[1,9]<stdout>:# Mémoire (Mo) :  1178.16 /   840.27 /   223.27 /   210.56 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,13]<stdout>:<MechanicalDirichletBC>
[1,5]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,5]<stdout>:<MechanicalDirichletBC>
[1,29]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,29]<stdout>:<MechanicalDirichletBC>
[1,13]<stdout>:# Mémoire (Mo) :  1177.84 /   839.34 /   223.41 /   210.67 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt185
[1,5]<stdout>:# Mémoire (Mo) :  1101.05 /   840.00 /   223.72 /   210.89 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Mémoire (Mo) :  1114.86 /   841.36 /   223.65 /   210.85 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:# Commande #0008 de
[1,26]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,26]<stdout>:Cube_perf.py, ligne 185
[1,10]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,10]<stdout>:<MechanicalDirichletBC>
[1,18]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,18]<stdout>:<MechanicalDirichletBC>
[1,26]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,26]<stdout>:                            CHAM_MATER=mater,
[1,26]<stdout>:                            INST=0.0,
[1,26]<stdout>:                            MODELE=model,
[1,26]<stdout>:                            MODE_FOURIER=0,
[1,26]<stdout>:                            OPTION='RIGI_MECA')
[1,26]<stdout>:
[1,31]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,31]<stdout>:<MechanicalDirichletBC>
[1,10]<stdout>:# Mémoire (Mo) :  1172.34 /   840.39 /   223.79 /   210.89 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Mémoire (Mo) :  1171.08 /   840.87 /   223.85 /   210.94 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,15]<stdout>:<MechanicalDirichletBC>
[1,31]<stdout>:# Mémoire (Mo) :  1202.41 /   842.30 /   223.52 /   210.71 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.01s, elaps:        0.04s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Mémoire (Mo) :  1127.30 /   841.64 /   224.11 /   211.12 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,17]<stdout>:<MechanicalDirichletBC>
[1,17]<stdout>:# Mémoire (Mo) :  1178.69 /   841.84 /   224.05 /   211.04 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,25]<stdout>:<MechanicalDirichletBC>
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt185
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Mémoire (Mo) :  1191.58 /   842.81 /   224.02 /   210.97 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt185
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0008 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 185
[1,22]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,22]<stdout>:<MechanicalDirichletBC>
[1,0]<stdout>:# Résultat commande #0009 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,0]<stdout>:<MechanicalDirichletBC>
[1,1]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,1]<stdout>:<MechanicalDirichletBC>
[1,3]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,3]<stdout>:<MechanicalDirichletBC>
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt185
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,19]<stdout>:<MechanicalDirichletBC>
[1,22]<stdout>:# Mémoire (Mo) :  1120.02 /   843.22 /   224.48 /   211.33 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1183.17 /   841.59 /   224.36 /   211.20 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Mémoire (Mo) :  1231.32 /   910.37 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  1195.86 /   841.29 /   224.33 /   211.21 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Commande #0008 de
[1,27]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,27]<stdout>:Cube_perf.py, ligne 185
[1,22]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,19]<stdout>:# Mémoire (Mo) :  1207.30 /   843.12 /   224.30 /   211.15 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,11]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,11]<stdout>:                            CHAM_MATER=mater,
[1,11]<stdout>:                            INST=0.0,
[1,11]<stdout>:                            MODELE=model,
[1,11]<stdout>:                            MODE_FOURIER=0,
[1,11]<stdout>:                            OPTION='RIGI_MECA')
[1,11]<stdout>:
[1,3]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0009   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,19]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0008 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 185
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt185
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,27]<stdout>:                            CHAM_MATER=mater,
[1,27]<stdout>:                            INST=0.0,
[1,27]<stdout>:                            MODELE=model,
[1,27]<stdout>:                            MODE_FOURIER=0,
[1,27]<stdout>:                            OPTION='RIGI_MECA')
[1,27]<stdout>:
[1,23]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,23]<stdout>:                            CHAM_MATER=mater,
[1,23]<stdout>:                            INST=0.0,
[1,23]<stdout>:                            MODELE=model,
[1,23]<stdout>:                            MODE_FOURIER=0,
[1,23]<stdout>:                            OPTION='RIGI_MECA')
[1,23]<stdout>:
[1,9]<stdout>:# Commande #0008 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 185
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt185
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt185
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt185
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,9]<stdout>:                            CHAM_MATER=mater,
[1,9]<stdout>:                            INST=0.0,
[1,9]<stdout>:                            MODELE=model,
[1,9]<stdout>:                            MODE_FOURIER=0,
[1,9]<stdout>:                            OPTION='RIGI_MECA')
[1,9]<stdout>:
[1,13]<stdout>:# Commande #0008 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 185
[1,4]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,4]<stdout>:<MechanicalDirichletBC>
[1,5]<stdout>:# Commande #0008 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 185
[1,29]<stdout>:# Commande #0008 de
[1,29]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,29]<stdout>:Cube_perf.py, ligne 185
[1,4]<stdout>:# Mémoire (Mo) :  1194.00 /   843.77 /   225.16 /   211.56 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,20]<stdout>:<MechanicalDirichletBC>
[1,4]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,13]<stdout>:                            CHAM_MATER=mater,
[1,13]<stdout>:                            INST=0.0,
[1,13]<stdout>:                            MODELE=model,
[1,13]<stdout>:                            MODE_FOURIER=0,
[1,13]<stdout>:                            OPTION='RIGI_MECA')
[1,13]<stdout>:
[1,29]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,29]<stdout>:                            CHAM_MATER=mater,
[1,29]<stdout>:                            INST=0.0,
[1,29]<stdout>:                            MODELE=model,
[1,29]<stdout>:                            MODE_FOURIER=0,
[1,29]<stdout>:                            OPTION='RIGI_MECA')
[1,29]<stdout>:
[1,5]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,5]<stdout>:                            CHAM_MATER=mater,
[1,5]<stdout>:                            INST=0.0,
[1,5]<stdout>:                            MODELE=model,
[1,5]<stdout>:                            MODE_FOURIER=0,
[1,5]<stdout>:                            OPTION='RIGI_MECA')
[1,5]<stdout>:
[1,20]<stdout>:# Mémoire (Mo) :  1185.20 /   841.85 /   224.92 /   211.38 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt185
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt185
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,6]<stdout>:<MechanicalDirichletBC>
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt185
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt185
[1,6]<stdout>:# Mémoire (Mo) :  1199.67 /   842.91 /   225.26 /   211.60 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0008 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 185
[1,10]<stdout>:# Commande #0008 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 185
[1,6]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,7]<stdout>:<MechanicalDirichletBC>
[1,31]<stdout>:# Commande #0008 de
[1,31]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,31]<stdout>:Cube_perf.py, ligne 185
[1,28]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,28]<stdout>:<MechanicalDirichletBC>
[1,15]<stdout>:# Commande #0008 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 185
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt185
[1,10]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,10]<stdout>:                            CHAM_MATER=mater,
[1,10]<stdout>:                            INST=0.0,
[1,10]<stdout>:                            MODELE=model,
[1,10]<stdout>:                            MODE_FOURIER=0,
[1,10]<stdout>:                            OPTION='RIGI_MECA')
[1,10]<stdout>:
[1,7]<stdout>:# Mémoire (Mo) :  1208.39 /   844.20 /   225.14 /   211.48 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,18]<stdout>:                            CHAM_MATER=mater,
[1,18]<stdout>:                            INST=0.0,
[1,18]<stdout>:                            MODELE=model,
[1,18]<stdout>:                            MODE_FOURIER=0,
[1,18]<stdout>:                            OPTION='RIGI_MECA')
[1,18]<stdout>:
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Mémoire (Mo) :  1202.28 /   842.35 /   225.25 /   211.62 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,28]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.01s, elaps:        0.04s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,31]<stdout>:                            CHAM_MATER=mater,
[1,31]<stdout>:                            INST=0.0,
[1,31]<stdout>:                            MODELE=model,
[1,31]<stdout>:                            MODE_FOURIER=0,
[1,31]<stdout>:                            OPTION='RIGI_MECA')
[1,31]<stdout>:
[1,15]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,15]<stdout>:                            CHAM_MATER=mater,
[1,15]<stdout>:                            INST=0.0,
[1,15]<stdout>:                            MODELE=model,
[1,15]<stdout>:                            MODE_FOURIER=0,
[1,15]<stdout>:                            OPTION='RIGI_MECA')
[1,15]<stdout>:
[1,14]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,14]<stdout>:<MechanicalDirichletBC>
[1,17]<stdout>:# Commande #0008 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 185
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt185
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :  1213.13 /   843.51 /   225.74 /   211.77 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.01s, elaps:        0.04s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,17]<stdout>:                            CHAM_MATER=mater,
[1,17]<stdout>:                            INST=0.0,
[1,17]<stdout>:                            MODELE=model,
[1,17]<stdout>:                            MODE_FOURIER=0,
[1,17]<stdout>:                            OPTION='RIGI_MECA')
[1,17]<stdout>:
[1,30]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,30]<stdout>:<MechanicalDirichletBC>
[1,25]<stdout>:# Commande #0008 de
[1,25]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,25]<stdout>:Cube_perf.py, ligne 185
[1,24]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,24]<stdout>:<MechanicalDirichletBC>
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt185
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Mémoire (Mo) :  1222.20 /   845.92 /   225.52 /   211.73 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt185
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt185
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt185
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt185
[1,24]<stdout>:# Mémoire (Mo) :  1209.59 /   845.56 /   226.12 /   211.99 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.05s)
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.01s, elaps:        0.05s)
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,25]<stdout>:                            CHAM_MATER=mater,
[1,25]<stdout>:                            INST=0.0,
[1,25]<stdout>:                            MODELE=model,
[1,25]<stdout>:                            MODE_FOURIER=0,
[1,25]<stdout>:                            OPTION='RIGI_MECA')
[1,25]<stdout>:
[1,22]<stdout>:# Commande #0008 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 185
[1,1]<stdout>:# Commande #0008 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 185
[1,3]<stdout>:# Commande #0008 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 185
[1,0]<stdout>:# Commande #0010 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 185
[1,19]<stdout>:# Commande #0008 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 185
[1,21]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,21]<stdout>:<MechanicalDirichletBC>
[1,22]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,22]<stdout>:                            CHAM_MATER=mater,
[1,22]<stdout>:                            INST=0.0,
[1,22]<stdout>:                            MODELE=model,
[1,22]<stdout>:                            MODE_FOURIER=0,
[1,22]<stdout>:                            OPTION='RIGI_MECA')
[1,22]<stdout>:
[1,21]<stdout>:# Mémoire (Mo) :  1215.29 /   844.71 /   226.06 /   211.96 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,1]<stdout>:                            CHAM_MATER=mater,
[1,1]<stdout>:                            INST=0.0,
[1,1]<stdout>:                            MODELE=model,
[1,1]<stdout>:                            MODE_FOURIER=0,
[1,1]<stdout>:                            OPTION='RIGI_MECA')
[1,1]<stdout>:
[1,3]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,3]<stdout>:                            CHAM_MATER=mater,
[1,3]<stdout>:                            INST=0.0,
[1,3]<stdout>:                            MODELE=model,
[1,3]<stdout>:                            MODE_FOURIER=0,
[1,3]<stdout>:                            OPTION='RIGI_MECA')
[1,3]<stdout>:
[1,19]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,19]<stdout>:                            CHAM_MATER=mater,
[1,19]<stdout>:                            INST=0.0,
[1,19]<stdout>:                            MODELE=model,
[1,19]<stdout>:                            MODE_FOURIER=0,
[1,19]<stdout>:                            OPTION='RIGI_MECA')
[1,19]<stdout>:
[1,16]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,16]<stdout>:<MechanicalDirichletBC>
[1,0]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,0]<stdout>:                            CHAM_MATER=mater,
[1,0]<stdout>:                            INST=0.0,
[1,0]<stdout>:                            MODELE=model,
[1,0]<stdout>:                            MODE_FOURIER=0,
[1,0]<stdout>:                            OPTION='RIGI_MECA')
[1,0]<stdout>:
[1,21]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.05s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Mémoire (Mo) :  1192.82 /   844.09 /   225.76 /   211.85 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.05s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,8]<stdout>:<MechanicalDirichletBC>
[1,12]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,12]<stdout>:<MechanicalDirichletBC>
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt185
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Mémoire (Mo) :  1201.84 /   844.91 /   226.41 /   212.12 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  1212.80 /   845.72 /   226.32 /   212.07 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt185
[1,8]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.05s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.01s, elaps:        0.05s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0008 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 185
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt185
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Commande #0008 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 185
[1,4]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,4]<stdout>:                            CHAM_MATER=mater,
[1,4]<stdout>:                            INST=0.0,
[1,4]<stdout>:                            MODELE=model,
[1,4]<stdout>:                            MODE_FOURIER=0,
[1,4]<stdout>:                            OPTION='RIGI_MECA')
[1,4]<stdout>:
[1,2]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,2]<stdout>:<MechanicalDirichletBC>
[1,6]<stdout>:# Commande #0008 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 185
[1,20]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,20]<stdout>:                            CHAM_MATER=mater,
[1,20]<stdout>:                            INST=0.0,
[1,20]<stdout>:                            MODELE=model,
[1,20]<stdout>:                            MODE_FOURIER=0,
[1,20]<stdout>:                            OPTION='RIGI_MECA')
[1,20]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt185
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt185
[1,2]<stdout>:# Mémoire (Mo) :  1204.63 /   844.39 /   226.65 /   212.28 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0007   user+syst:        0.04s (syst:        0.00s, elaps:        0.05s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,6]<stdout>:                            CHAM_MATER=mater,
[1,6]<stdout>:                            INST=0.0,
[1,6]<stdout>:                            MODELE=model,
[1,6]<stdout>:                            MODE_FOURIER=0,
[1,6]<stdout>:                            OPTION='RIGI_MECA')
[1,6]<stdout>:
[1,7]<stdout>:# Commande #0008 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 185
[1,28]<stdout>:# Commande #0008 de
[1,28]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,28]<stdout>:Cube_perf.py, ligne 185
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt185
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,7]<stdout>:                            CHAM_MATER=mater,
[1,7]<stdout>:                            INST=0.0,
[1,7]<stdout>:                            MODELE=model,
[1,7]<stdout>:                            MODE_FOURIER=0,
[1,7]<stdout>:                            OPTION='RIGI_MECA')
[1,7]<stdout>:
[1,28]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,28]<stdout>:                            CHAM_MATER=mater,
[1,28]<stdout>:                            INST=0.0,
[1,28]<stdout>:                            MODELE=model,
[1,28]<stdout>:                            MODE_FOURIER=0,
[1,28]<stdout>:                            OPTION='RIGI_MECA')
[1,28]<stdout>:
[1,14]<stdout>:# Commande #0008 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 185
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt185
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt185
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,14]<stdout>:                            CHAM_MATER=mater,
[1,14]<stdout>:                            INST=0.0,
[1,14]<stdout>:                            MODELE=model,
[1,14]<stdout>:                            MODE_FOURIER=0,
[1,14]<stdout>:                            OPTION='RIGI_MECA')
[1,14]<stdout>:
[1,30]<stdout>:# Commande #0008 de
[1,30]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,30]<stdout>:Cube_perf.py, ligne 185
[1,24]<stdout>:# Commande #0008 de
[1,24]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,24]<stdout>:Cube_perf.py, ligne 185
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt185
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,24]<stdout>:                            CHAM_MATER=mater,
[1,24]<stdout>:                            INST=0.0,
[1,24]<stdout>:                            MODELE=model,
[1,24]<stdout>:                            MODE_FOURIER=0,
[1,24]<stdout>:                            OPTION='RIGI_MECA')
[1,24]<stdout>:
[1,30]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,30]<stdout>:                            CHAM_MATER=mater,
[1,30]<stdout>:                            INST=0.0,
[1,30]<stdout>:                            MODELE=model,
[1,30]<stdout>:                            MODE_FOURIER=0,
[1,30]<stdout>:                            OPTION='RIGI_MECA')
[1,30]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt185
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Commande #0008 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 185
[1,16]<stdout>:# Commande #0008 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 185
[1,21]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,21]<stdout>:                            CHAM_MATER=mater,
[1,21]<stdout>:                            INST=0.0,
[1,21]<stdout>:                            MODELE=model,
[1,21]<stdout>:                            MODE_FOURIER=0,
[1,21]<stdout>:                            OPTION='RIGI_MECA')
[1,21]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt185
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt185
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,16]<stdout>:                            CHAM_MATER=mater,
[1,16]<stdout>:                            INST=0.0,
[1,16]<stdout>:                            MODELE=model,
[1,16]<stdout>:                            MODE_FOURIER=0,
[1,16]<stdout>:                            OPTION='RIGI_MECA')
[1,16]<stdout>:
[1,12]<stdout>:# Commande #0008 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 185
[1,8]<stdout>:# Commande #0008 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 185
[1,12]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,12]<stdout>:                            CHAM_MATER=mater,
[1,12]<stdout>:                            INST=0.0,
[1,12]<stdout>:                            MODELE=model,
[1,12]<stdout>:                            MODE_FOURIER=0,
[1,12]<stdout>:                            OPTION='RIGI_MECA')
[1,12]<stdout>:
[1,8]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,8]<stdout>:                            CHAM_MATER=mater,
[1,8]<stdout>:                            INST=0.0,
[1,8]<stdout>:                            MODELE=model,
[1,8]<stdout>:                            MODE_FOURIER=0,
[1,8]<stdout>:                            OPTION='RIGI_MECA')
[1,8]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt185
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0008 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 185
[1,2]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,2]<stdout>:                            CHAM_MATER=mater,
[1,2]<stdout>:                            INST=0.0,
[1,2]<stdout>:                            MODELE=model,
[1,2]<stdout>:                            MODE_FOURIER=0,
[1,2]<stdout>:                            OPTION='RIGI_MECA')
[1,2]<stdout>:
[1,26]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,26]<stdout>:<ElementaryMatrixDisplacementReal>
[1,26]<stdout>:# Mémoire (Mo) :  1095.37 /   980.48 /   364.21 /   210.61 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Fin commande #0008   user+syst:        0.59s (syst:        0.03s, elaps:        0.62s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt192
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:# Commande #0009 de
[1,26]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,26]<stdout>:Cube_perf.py, ligne 192
[1,26]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,26]<stdout>:                  MATR_RIGI=stiff_elem)
[1,26]<stdout>:
[1,27]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,27]<stdout>:<ElementaryMatrixDisplacementReal>
[1,27]<stdout>:# Mémoire (Mo) :  1173.05 /   985.92 /   369.14 /   210.75 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Fin commande #0008   user+syst:        0.59s (syst:        0.05s, elaps:        0.64s)
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt192
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Commande #0009 de
[1,27]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,27]<stdout>:Cube_perf.py, ligne 192
[1,27]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,27]<stdout>:                  MATR_RIGI=stiff_elem)
[1,27]<stdout>:
[1,23]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,23]<stdout>:<ElementaryMatrixDisplacementReal>
[1,23]<stdout>:# Mémoire (Mo) :  1192.51 /   989.94 /   370.78 /   210.88 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0008   user+syst:        0.63s (syst:        0.02s, elaps:        0.65s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt192
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0009 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 192
[1,23]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,23]<stdout>:                  MATR_RIGI=stiff_elem)
[1,23]<stdout>:
[1,11]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,11]<stdout>:<ElementaryMatrixDisplacementReal>
[1,11]<stdout>:# Mémoire (Mo) :  1115.86 /   989.38 /   371.77 /   210.99 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0008   user+syst:        0.61s (syst:        0.04s, elaps:        0.65s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt192
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0009 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 192
[1,11]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,11]<stdout>:                  MATR_RIGI=stiff_elem)
[1,11]<stdout>:
[1,13]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,13]<stdout>:<ElementaryMatrixDisplacementReal>
[1,9]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,9]<stdout>:<ElementaryMatrixDisplacementReal>
[1,9]<stdout>:# Mémoire (Mo) :  1178.16 /   991.02 /   373.02 /   210.97 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  1177.84 /   991.40 /   374.39 /   211.01 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0008   user+syst:        0.63s (syst:        0.03s, elaps:        0.66s)
[1,9]<stdout>:# Fin commande #0008   user+syst:        0.63s (syst:        0.03s, elaps:        0.66s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt192
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt192
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0009 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 192
[1,13]<stdout>:# Commande #0009 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 192
[1,13]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,13]<stdout>:                  MATR_RIGI=stiff_elem)
[1,13]<stdout>:
[1,9]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,9]<stdout>:                  MATR_RIGI=stiff_elem)
[1,9]<stdout>:
[1,5]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,5]<stdout>:<ElementaryMatrixDisplacementReal>
[1,5]<stdout>:# Mémoire (Mo) :  1101.05 /   992.44 /   375.19 /   211.19 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0008   user+syst:        0.62s (syst:        0.04s, elaps:        0.67s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,29]<stdout>:<ElementaryMatrixDisplacementReal>
[1,29]<stdout>:# Mémoire (Mo) :  1114.86 /   993.43 /   374.72 /   211.15 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Fin commande #0008   user+syst:        0.65s (syst:        0.02s, elaps:        0.67s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt192
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0009 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 192
[1,5]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,5]<stdout>:                  MATR_RIGI=stiff_elem)
[1,5]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt192
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Commande #0009 de
[1,29]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,29]<stdout>:Cube_perf.py, ligne 192
[1,29]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,29]<stdout>:                  MATR_RIGI=stiff_elem)
[1,29]<stdout>:
[1,31]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,31]<stdout>:<ElementaryMatrixDisplacementReal>
[1,31]<stdout>:# Mémoire (Mo) :  1202.41 /   995.07 /   375.16 /   211.06 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:# Fin commande #0008   user+syst:        0.63s (syst:        0.03s, elaps:        0.67s)
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,18]<stdout>:<ElementaryMatrixDisplacementReal>
[1,18]<stdout>:# Mémoire (Mo) :  1171.08 /   994.44 /   376.35 /   211.19 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt192
[1,18]<stdout>:# Fin commande #0008   user+syst:        0.61s (syst:        0.04s, elaps:        0.67s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:# Commande #0009 de
[1,31]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,31]<stdout>:Cube_perf.py, ligne 192
[1,31]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,31]<stdout>:                  MATR_RIGI=stiff_elem)
[1,31]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt192
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0009 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 192
[1,18]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,18]<stdout>:                  MATR_RIGI=stiff_elem)
[1,18]<stdout>:
[1,10]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,10]<stdout>:<ElementaryMatrixDisplacementReal>
[1,10]<stdout>:# Mémoire (Mo) :  1172.34 /   995.11 /   377.41 /   211.18 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0008   user+syst:        0.64s (syst:        0.03s, elaps:        0.68s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt192
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0009 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 192
[1,10]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,10]<stdout>:                  MATR_RIGI=stiff_elem)
[1,10]<stdout>:
[1,0]<stdout>:# Résultat commande #0010 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,0]<stdout>:<ElementaryMatrixDisplacementReal>
[1,15]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,15]<stdout>:<ElementaryMatrixDisplacementReal>
[1,0]<stdout>:# Mémoire (Mo) :  1231.32 /  1010.23 /   382.48 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  1127.30 /   997.03 /   378.36 /   211.37 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0010   user+syst:        0.67s (syst:        0.01s, elaps:        0.68s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0008   user+syst:        0.66s (syst:        0.01s, elaps:        0.68s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,17]<stdout>:<ElementaryMatrixDisplacementReal>
[1,17]<stdout>:# Mémoire (Mo) :  1178.69 /   998.34 /   379.43 /   211.26 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0008   user+syst:        0.66s (syst:        0.02s, elaps:        0.68s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt192
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt192
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0009 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 192
[1,0]<stdout>:# Commande #0011 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 192
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt192
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,15]<stdout>:                  MATR_RIGI=stiff_elem)
[1,15]<stdout>:
[1,0]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,0]<stdout>:                  MATR_RIGI=stiff_elem)
[1,0]<stdout>:
[1,17]<stdout>:# Commande #0009 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 192
[1,17]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,17]<stdout>:                  MATR_RIGI=stiff_elem)
[1,17]<stdout>:
[1,25]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,25]<stdout>:<ElementaryMatrixDisplacementReal>
[1,25]<stdout>:# Mémoire (Mo) :  1191.58 /  1000.76 /   380.88 /   211.25 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# Fin commande #0008   user+syst:        0.67s (syst:        0.01s, elaps:        0.69s)
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt192
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Commande #0009 de
[1,25]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,25]<stdout>:Cube_perf.py, ligne 192
[1,25]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,25]<stdout>:                  MATR_RIGI=stiff_elem)
[1,25]<stdout>:
[1,22]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,22]<stdout>:<ElementaryMatrixDisplacementReal>
[1,22]<stdout>:# Mémoire (Mo) :  1120.02 /  1000.90 /   381.08 /   211.51 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0008   user+syst:        0.66s (syst:        0.02s, elaps:        0.69s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,19]<stdout>:<ElementaryMatrixDisplacementReal>
[1,19]<stdout>:# Mémoire (Mo) :  1207.30 /  1000.80 /   380.80 /   211.38 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0008   user+syst:        0.64s (syst:        0.04s, elaps:        0.69s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt192
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Commande #0009 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 192
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt192
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,1]<stdout>:<ElementaryMatrixDisplacementReal>
[1,19]<stdout>:# Commande #0009 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 192
[1,22]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,22]<stdout>:                  MATR_RIGI=stiff_elem)
[1,22]<stdout>:
[1,1]<stdout>:# Mémoire (Mo) :  1183.17 /  1000.28 /   381.78 /   211.37 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0008   user+syst:        0.67s (syst:        0.02s, elaps:        0.69s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,19]<stdout>:                  MATR_RIGI=stiff_elem)
[1,19]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt192
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0009 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 192
[1,1]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,1]<stdout>:                  MATR_RIGI=stiff_elem)
[1,1]<stdout>:
[1,3]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,3]<stdout>:<ElementaryMatrixDisplacementReal>
[1,3]<stdout>:# Mémoire (Mo) :  1195.86 /  1000.01 /   381.85 /   211.38 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0008   user+syst:        0.64s (syst:        0.05s, elaps:        0.69s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt192
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0009 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 192
[1,3]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,3]<stdout>:                  MATR_RIGI=stiff_elem)
[1,3]<stdout>:
[1,20]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,20]<stdout>:<ElementaryMatrixDisplacementReal>
[1,20]<stdout>:# Mémoire (Mo) :  1185.20 /  1004.69 /   386.39 /   211.47 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0008   user+syst:        0.66s (syst:        0.04s, elaps:        0.71s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,6]<stdout>:<ElementaryMatrixDisplacementReal>
[1,6]<stdout>:# Mémoire (Mo) :  1199.67 /  1005.56 /   386.76 /   211.64 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0008   user+syst:        0.69s (syst:        0.02s, elaps:        0.70s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt192
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Commande #0009 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 192
[1,20]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,20]<stdout>:                  MATR_RIGI=stiff_elem)
[1,20]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt192
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0009 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 192
[1,6]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,6]<stdout>:                  MATR_RIGI=stiff_elem)
[1,6]<stdout>:
[1,4]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,4]<stdout>:<ElementaryMatrixDisplacementReal>
[1,4]<stdout>:# Mémoire (Mo) :  1194.00 /  1006.74 /   386.95 /   211.61 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0008   user+syst:        0.68s (syst:        0.03s, elaps:        0.71s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt192
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0009 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 192
[1,4]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,4]<stdout>:                  MATR_RIGI=stiff_elem)
[1,4]<stdout>:
[1,7]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,7]<stdout>:<ElementaryMatrixDisplacementReal>
[1,28]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,28]<stdout>:<ElementaryMatrixDisplacementReal>
[1,7]<stdout>:# Mémoire (Mo) :  1208.39 /  1008.80 /   388.53 /   211.59 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0008   user+syst:        0.67s (syst:        0.04s, elaps:        0.71s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Mémoire (Mo) :  1202.28 /  1006.04 /   387.73 /   211.67 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Fin commande #0008   user+syst:        0.69s (syst:        0.02s, elaps:        0.71s)
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt192
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt192
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0009 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 192
[1,28]<stdout>:# Commande #0009 de
[1,28]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,28]<stdout>:Cube_perf.py, ligne 192
[1,7]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,7]<stdout>:                  MATR_RIGI=stiff_elem)
[1,7]<stdout>:
[1,28]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,28]<stdout>:                  MATR_RIGI=stiff_elem)
[1,28]<stdout>:
[1,14]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,14]<stdout>:<ElementaryMatrixDisplacementReal>
[1,14]<stdout>:# Mémoire (Mo) :  1213.13 /  1009.02 /   389.90 /   211.77 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0008   user+syst:        0.67s (syst:        0.03s, elaps:        0.71s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt192
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0009 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 192
[1,14]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,14]<stdout>:                  MATR_RIGI=stiff_elem)
[1,14]<stdout>:
[1,30]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,30]<stdout>:<ElementaryMatrixDisplacementReal>
[1,30]<stdout>:# Mémoire (Mo) :  1222.20 /  1012.89 /   391.21 /   211.76 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:# Fin commande #0008   user+syst:        0.68s (syst:        0.03s, elaps:        0.72s)
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt192
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Commande #0009 de
[1,30]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,30]<stdout>:Cube_perf.py, ligne 192
[1,30]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,30]<stdout>:                  MATR_RIGI=stiff_elem)
[1,30]<stdout>:
[1,24]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,24]<stdout>:<ElementaryMatrixDisplacementReal>
[1,24]<stdout>:# Mémoire (Mo) :  1209.59 /  1013.49 /   392.63 /   211.99 (VmPeak / VmSize / Optimum / Minimum)
[1,24]<stdout>:# Fin commande #0008   user+syst:        0.67s (syst:        0.05s, elaps:        0.72s)
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt192
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Commande #0009 de
[1,24]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,24]<stdout>:Cube_perf.py, ligne 192
[1,24]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,24]<stdout>:                  MATR_RIGI=stiff_elem)
[1,24]<stdout>:
[1,21]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,21]<stdout>:<ElementaryMatrixDisplacementReal>
[1,21]<stdout>:# Mémoire (Mo) :  1215.29 /  1012.13 /   392.28 /   211.96 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0008   user+syst:        0.67s (syst:        0.04s, elaps:        0.72s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt192
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Commande #0009 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 192
[1,21]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,21]<stdout>:                  MATR_RIGI=stiff_elem)
[1,21]<stdout>:
[1,16]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,16]<stdout>:<ElementaryMatrixDisplacementReal>
[1,16]<stdout>:# Mémoire (Mo) :  1192.82 /  1012.91 /   393.08 /   211.85 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0008   user+syst:        0.70s (syst:        0.03s, elaps:        0.72s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt192
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0009 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 192
[1,16]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,16]<stdout>:                  MATR_RIGI=stiff_elem)
[1,16]<stdout>:
[1,12]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,12]<stdout>:<ElementaryMatrixDisplacementReal>
[1,12]<stdout>:# Mémoire (Mo) :  1212.80 /  1017.11 /   396.31 /   212.07 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0008   user+syst:        0.70s (syst:        0.03s, elaps:        0.73s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt192
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0009 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 192
[1,12]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,12]<stdout>:                  MATR_RIGI=stiff_elem)
[1,12]<stdout>:
[1,8]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,8]<stdout>:<ElementaryMatrixDisplacementReal>
[1,8]<stdout>:# Mémoire (Mo) :  1201.84 /  1016.77 /   396.84 /   212.12 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0008   user+syst:        0.72s (syst:        0.02s, elaps:        0.74s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt192
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0009 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 192
[1,8]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,8]<stdout>:                  MATR_RIGI=stiff_elem)
[1,8]<stdout>:
[1,2]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,2]<stdout>:<ElementaryMatrixDisplacementReal>
[1,2]<stdout>:# Mémoire (Mo) :  1204.63 /  1018.18 /   399.06 /   212.28 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0008   user+syst:        0.72s (syst:        0.03s, elaps:        0.74s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt192
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0009 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 192
[1,2]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,2]<stdout>:                  MATR_RIGI=stiff_elem)
[1,2]<stdout>:
[1,9]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,9]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,9]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,9]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,9]<stdout>:     aux 0 relations linéaires dualisées.
[1,17]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,17]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,17]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,17]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,17]<stdout>:     aux 0 relations linéaires dualisées.
[1,29]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,29]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,29]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,29]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,29]<stdout>:     aux 0 relations linéaires dualisées.
[1,11]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,11]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,11]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,11]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,11]<stdout>:     aux 0 relations linéaires dualisées.
[1,19]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,19]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,19]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,19]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,19]<stdout>:     aux 0 relations linéaires dualisées.
[1,23]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,23]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,23]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,23]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,23]<stdout>:     aux 0 relations linéaires dualisées.
[1,15]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,15]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,15]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,15]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,15]<stdout>:     aux 0 relations linéaires dualisées.
[1,25]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,25]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,25]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,25]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,25]<stdout>:     aux 0 relations linéaires dualisées.
[1,5]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,5]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,5]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,5]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,5]<stdout>:     aux 0 relations linéaires dualisées.
[1,0]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,0]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,0]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,0]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,0]<stdout>:     aux 0 relations linéaires dualisées.
[1,7]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,7]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,7]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,7]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,7]<stdout>:     aux 0 relations linéaires dualisées.
[1,16]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,16]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,16]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,16]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,16]<stdout>:     aux 0 relations linéaires dualisées.
[1,14]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,14]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,14]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,14]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,14]<stdout>:     aux 0 relations linéaires dualisées.
[1,3]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,3]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,3]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,3]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,3]<stdout>:     aux 0 relations linéaires dualisées.
[1,6]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,6]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,6]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,6]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,6]<stdout>:     aux 0 relations linéaires dualisées.
[1,1]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,1]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,1]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,1]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,1]<stdout>:     aux 0 relations linéaires dualisées.
[1,13]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,13]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,13]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,13]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,13]<stdout>:     aux 0 relations linéaires dualisées.
[1,31]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,31]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,31]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,31]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,31]<stdout>:     aux 0 relations linéaires dualisées.
[1,27]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,27]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,27]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,27]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,27]<stdout>:     aux 0 relations linéaires dualisées.
[1,2]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,2]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,2]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,2]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,2]<stdout>:     aux 0 relations linéaires dualisées.
[1,4]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,4]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,4]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,4]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,4]<stdout>:     aux 0 relations linéaires dualisées.
[1,12]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,12]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,12]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,12]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,12]<stdout>:     aux 0 relations linéaires dualisées.
[1,18]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,18]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,18]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,18]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,18]<stdout>:     aux 0 relations linéaires dualisées.
[1,26]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,26]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,26]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,26]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,26]<stdout>:     aux 0 relations linéaires dualisées.
[1,10]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,10]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,10]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,10]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,10]<stdout>:     aux 0 relations linéaires dualisées.
[1,24]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,24]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,24]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,24]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,24]<stdout>:     aux 0 relations linéaires dualisées.
[1,8]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,8]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,8]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,8]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,8]<stdout>:     aux 0 relations linéaires dualisées.
[1,20]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,20]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,20]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,20]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,20]<stdout>:     aux 0 relations linéaires dualisées.
[1,28]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,28]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,28]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,28]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,28]<stdout>:     aux 0 relations linéaires dualisées.
[1,21]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,21]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,21]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,21]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,21]<stdout>:     aux 0 relations linéaires dualisées.
[1,30]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,30]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,30]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,30]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,30]<stdout>:     aux 0 relations linéaires dualisées.
[1,22]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,22]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,22]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,22]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,22]<stdout>:     aux 0 relations linéaires dualisées.
[1,23]<stdout>:La matrice est de taille 211272 équations.
[1,23]<stdout>:  Elle contient 8213808 termes non nuls si elle est symétrique et 16216344 termes non nuls si elle
[1,23]<stdout>:n'est pas symétrique.
[1,23]<stdout>:  Soit un taux de remplissage de   0.036 %.
[1,22]<stdout>:La matrice est de taille 223560 équations.
[1,22]<stdout>:  Elle contient 8701470 termes non nuls si elle est symétrique et 17179380 termes non nuls si elle
[1,22]<stdout>:n'est pas symétrique.
[1,22]<stdout>:  Soit un taux de remplissage de   0.034 %.
[1,31]<stdout>:La matrice est de taille 216642 équations.
[1,31]<stdout>:  Elle contient 8427606 termes non nuls si elle est symétrique et 16638570 termes non nuls si elle
[1,31]<stdout>:n'est pas symétrique.
[1,31]<stdout>:  Soit un taux de remplissage de   0.035 %.
[1,28]<stdout>:La matrice est de taille 231186 équations.
[1,28]<stdout>:  Elle contient 9023532 termes non nuls si elle est symétrique et 17815878 termes non nuls si elle
[1,28]<stdout>:n'est pas symétrique.
[1,28]<stdout>:  Soit un taux de remplissage de   0.033 %.
[1,27]<stdout>:La matrice est de taille 208782 équations.
[1,27]<stdout>:  Elle contient 8126622 termes non nuls si elle est symétrique et 16044462 termes non nuls si elle
[1,27]<stdout>:n'est pas symétrique.
[1,27]<stdout>:  Soit un taux de remplissage de   0.037 %.
[1,11]<stdout>:La matrice est de taille 211734 équations.
[1,11]<stdout>:  Elle contient 8241606 termes non nuls si elle est symétrique et 16271478 termes non nuls si elle
[1,11]<stdout>:n'est pas symétrique.
[1,11]<stdout>:  Soit un taux de remplissage de   0.036 %.
[1,3]<stdout>:La matrice est de taille 224304 équations.
[1,3]<stdout>:  Elle contient 8746878 termes non nuls si elle est symétrique et 17269452 termes non nuls si elle
[1,3]<stdout>:n'est pas symétrique.
[1,3]<stdout>:  Soit un taux de remplissage de   0.034 %.
[1,14]<stdout>:La matrice est de taille 233958 équations.
[1,14]<stdout>:  Elle contient 9122172 termes non nuls si elle est symétrique et 18010386 termes non nuls si elle
[1,14]<stdout>:n'est pas symétrique.
[1,14]<stdout>:  Soit un taux de remplissage de   0.033 %.
[1,26]<stdout>:La matrice est de taille 202302 équations.
[1,26]<stdout>:  Elle contient 7874064 termes non nuls si elle est symétrique et 15545826 termes non nuls si elle
[1,26]<stdout>:n'est pas symétrique.
[1,26]<stdout>:  Soit un taux de remplissage de   0.038 %.
[1,9]<stdout>:La matrice est de taille 214140 équations.
[1,9]<stdout>:  Elle contient 8322702 termes non nuls si elle est symétrique et 16431264 termes non nuls si elle
[1,9]<stdout>:n'est pas symétrique.
[1,9]<stdout>:  Soit un taux de remplissage de   0.036 %.
[1,13]<stdout>:La matrice est de taille 215028 équations.
[1,13]<stdout>:  Elle contient 8379738 termes non nuls si elle est symétrique et 16544448 termes non nuls si elle
[1,13]<stdout>:n'est pas symétrique.
[1,13]<stdout>:  Soit un taux de remplissage de   0.036 %.
[1,29]<stdout>:La matrice est de taille 215040 équations.
[1,29]<stdout>:  Elle contient 8385630 termes non nuls si elle est symétrique et 16556220 termes non nuls si elle
[1,29]<stdout>:n'est pas symétrique.
[1,29]<stdout>:  Soit un taux de remplissage de   0.036 %.
[1,15]<stdout>:La matrice est de taille 219786 équations.
[1,15]<stdout>:  Elle contient 8565150 termes non nuls si elle est symétrique et 16910514 termes non nuls si elle
[1,15]<stdout>:n'est pas symétrique.
[1,15]<stdout>:  Soit un taux de remplissage de   0.035 %.
[1,30]<stdout>:La matrice est de taille 236568 équations.
[1,30]<stdout>:  Elle contient 9212496 termes non nuls si elle est symétrique et 18188424 termes non nuls si elle
[1,30]<stdout>:n'est pas symétrique.
[1,30]<stdout>:  Soit un taux de remplissage de   0.032 %.
[1,5]<stdout>:La matrice est de taille 215820 équations.
[1,5]<stdout>:  Elle contient 8409267 termes non nuls si elle est symétrique et 16602714 termes non nuls si elle
[1,5]<stdout>:n'est pas symétrique.
[1,5]<stdout>:  Soit un taux de remplissage de   0.036 %.
[1,20]<stdout>:La matrice est de taille 230142 équations.
[1,20]<stdout>:  Elle contient 8974356 termes non nuls si elle est symétrique et 17718570 termes non nuls si elle
[1,20]<stdout>:n'est pas symétrique.
[1,20]<stdout>:  Soit un taux de remplissage de   0.033 %.
[1,18]<stdout>:La matrice est de taille 217806 équations.
[1,18]<stdout>:  Elle contient 8477274 termes non nuls si elle est symétrique et 16736742 termes non nuls si elle
[1,18]<stdout>:n'est pas symétrique.
[1,18]<stdout>:  Soit un taux de remplissage de   0.035 %.
[1,7]<stdout>:La matrice est de taille 233766 équations.
[1,7]<stdout>:  Elle contient 9090567 termes non nuls si elle est symétrique et 17947368 termes non nuls si elle
[1,7]<stdout>:n'est pas symétrique.
[1,7]<stdout>:  Soit un taux de remplissage de   0.033 %.
[1,19]<stdout>:La matrice est de taille 224964 équations.
[1,19]<stdout>:  Elle contient 8718858 termes non nuls si elle est symétrique et 17212752 termes non nuls si elle
[1,19]<stdout>:n'est pas symétrique.
[1,19]<stdout>:  Soit un taux de remplissage de   0.034 %.
[1,10]<stdout>:La matrice est de taille 218928 équations.
[1,10]<stdout>:  Elle contient 8533455 termes non nuls si elle est symétrique et 16847982 termes non nuls si elle
[1,10]<stdout>:n'est pas symétrique.
[1,10]<stdout>:  Soit un taux de remplissage de   0.035 %.
[1,12]<stdout>:La matrice est de taille 242064 équations.
[1,12]<stdout>:  Elle contient 9443934 termes non nuls si elle est symétrique et 18645804 termes non nuls si elle
[1,12]<stdout>:n'est pas symétrique.
[1,12]<stdout>:  Soit un taux de remplissage de   0.032 %.
[1,17]<stdout>:La matrice est de taille 221508 équations.
[1,17]<stdout>:  Elle contient 8628732 termes non nuls si elle est symétrique et 17035956 termes non nuls si elle
[1,17]<stdout>:n'est pas symétrique.
[1,17]<stdout>:  Soit un taux de remplissage de   0.035 %.
[1,0]<stdout>:La matrice est de taille 224835 équations.
[1,0]<stdout>:  Elle contient 8763546 termes non nuls si elle est symétrique et 17302257 termes non nuls si elle
[1,0]<stdout>:n'est pas symétrique.
[1,0]<stdout>:  Soit un taux de remplissage de   0.034 %.
[1,6]<stdout>:La matrice est de taille 231462 équations.
[1,6]<stdout>:  Elle contient 8988705 termes non nuls si elle est symétrique et 17745948 termes non nuls si elle
[1,6]<stdout>:n'est pas symétrique.
[1,6]<stdout>:  Soit un taux de remplissage de   0.033 %.
[1,25]<stdout>:La matrice est de taille 223842 équations.
[1,25]<stdout>:  Elle contient 8717487 termes non nuls si elle est symétrique et 17211132 termes non nuls si elle
[1,25]<stdout>:n'est pas symétrique.
[1,25]<stdout>:  Soit un taux de remplissage de   0.034 %.
[1,1]<stdout>:La matrice est de taille 225300 équations.
[1,1]<stdout>:  Elle contient 8760147 termes non nuls si elle est symétrique et 17294994 termes non nuls si elle
[1,1]<stdout>:n'est pas symétrique.
[1,1]<stdout>:  Soit un taux de remplissage de   0.034 %.
[1,16]<stdout>:La matrice est de taille 239484 équations.
[1,16]<stdout>:  Elle contient 9315501 termes non nuls si elle est symétrique et 18391518 termes non nuls si elle
[1,16]<stdout>:n'est pas symétrique.
[1,16]<stdout>:  Soit un taux de remplissage de   0.032 %.
[1,21]<stdout>:La matrice est de taille 237084 équations.
[1,21]<stdout>:  Elle contient 9238566 termes non nuls si elle est symétrique et 18240048 termes non nuls si elle
[1,21]<stdout>:n'est pas symétrique.
[1,21]<stdout>:  Soit un taux de remplissage de   0.032 %.
[1,4]<stdout>:La matrice est de taille 230352 équations.
[1,4]<stdout>:  Elle contient 8985909 termes non nuls si elle est symétrique et 17741466 termes non nuls si elle
[1,4]<stdout>:n'est pas symétrique.
[1,4]<stdout>:  Soit un taux de remplissage de   0.033 %.
[1,2]<stdout>:La matrice est de taille 245268 équations.
[1,2]<stdout>:  Elle contient 9575973 termes non nuls si elle est symétrique et 18906678 termes non nuls si elle
[1,2]<stdout>:n'est pas symétrique.
[1,2]<stdout>:  Soit un taux de remplissage de   0.031 %.
[1,24]<stdout>:La matrice est de taille 237828 équations.
[1,24]<stdout>:  Elle contient 9259377 termes non nuls si elle est symétrique et 18280926 termes non nuls si elle
[1,24]<stdout>:n'est pas symétrique.
[1,24]<stdout>:  Soit un taux de remplissage de   0.032 %.
[1,8]<stdout>:La matrice est de taille 242922 équations.
[1,8]<stdout>:  Elle contient 9472389 termes non nuls si elle est symétrique et 18701856 termes non nuls si elle
[1,8]<stdout>:n'est pas symétrique.
[1,8]<stdout>:  Soit un taux de remplissage de   0.032 %.
[1,20]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,24]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,23]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,21]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,25]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,9]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,7]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,20]<stdout>:# Mémoire (Mo) :  1251.75 /  1056.50 /   631.09 /   421.83 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Mémoire (Mo) :  1260.74 /  1065.49 /   638.43 /   423.66 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,24]<stdout>:# Mémoire (Mo) :  1260.40 /  1065.16 /   638.92 /   423.81 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,13]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,17]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,23]<stdout>:# Mémoire (Mo) :  1231.04 /  1035.79 /   611.01 /   417.15 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,15]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,12]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,9]<stdout>:# Mémoire (Mo) :  1232.73 /  1037.49 /   613.91 /   417.83 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0009   user+syst:        0.47s (syst:        0.88s, elaps:        1.34s)
[1,25]<stdout>:# Mémoire (Mo) :  1244.65 /  1049.40 /   624.10 /   420.20 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0009   user+syst:        0.44s (syst:        0.88s, elaps:        1.32s)
[1,22]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,26]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,24]<stdout>:# Fin commande #0009   user+syst:        0.44s (syst:        0.88s, elaps:        1.32s)
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,6]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,19]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,23]<stdout>:# Fin commande #0009   user+syst:        0.63s (syst:        0.77s, elaps:        1.40s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Fin commande #0009   user+syst:        0.51s (syst:        0.86s, elaps:        1.36s)
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Mémoire (Mo) :  1253.36 /  1058.12 /   632.59 /   422.25 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Mémoire (Mo) :  1235.46 /  1040.21 /   615.80 /   418.33 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Mémoire (Mo) :  1261.97 /  1066.73 /   639.83 /   424.02 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,7]<stdout>:# Mémoire (Mo) :  1254.79 /  1059.55 /   633.98 /   422.56 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0009   user+syst:        0.57s (syst:        0.82s, elaps:        1.39s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Mémoire (Mo) :  1241.73 /  1046.48 /   622.05 /   419.77 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,13]<stdout>:# Mémoire (Mo) :  1235.02 /  1039.77 /   615.54 /   418.17 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  1240.05 /  1044.81 /   620.48 /   419.48 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  1266.86 /  1071.61 /   643.70 /   424.82 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Mémoire (Mo) :  1244.70 /  1049.45 /   624.02 /   420.38 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Mémoire (Mo) :  1221.23 /  1025.98 /   602.37 /   415.08 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Fin commande #0009   user+syst:        0.53s (syst:        0.80s, elaps:        1.33s)
[1,11]<stdout>:# Mémoire (Mo) :  1232.23 /  1036.98 /   612.07 /   417.43 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,30]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,7]<stdout>:# Fin commande #0009   user+syst:        0.36s (syst:        0.97s, elaps:        1.33s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Fin commande #0009   user+syst:        0.52s (syst:        0.87s, elaps:        1.39s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0009   user+syst:        0.44s (syst:        0.94s, elaps:        1.37s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :  1252.79 /  1057.54 /   631.53 /   422.13 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Mémoire (Mo) :  1243.05 /  1047.80 /   624.07 /   420.40 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,14]<stdout>:# Mémoire (Mo) :  1256.92 /  1061.68 /   635.36 /   422.90 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0009   user+syst:        0.40s (syst:        0.97s, elaps:        1.37s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Fin commande #0009   user+syst:        0.45s (syst:        0.86s, elaps:        1.31s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Fin commande #0009   user+syst:        0.62s (syst:        0.75s, elaps:        1.36s)
[1,26]<stdout>:# Fin commande #0009   user+syst:        0.56s (syst:        0.88s, elaps:        1.43s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Fin commande #0009   user+syst:        0.53s (syst:        0.85s, elaps:        1.38s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Fin commande #0009   user+syst:        0.40s (syst:        0.91s, elaps:        1.32s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0009   user+syst:        0.58s (syst:        0.82s, elaps:        1.40s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  1237.95 /  1042.70 /   619.46 /   419.14 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  1266.70 /  1071.45 /   644.42 /   425.01 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,30]<stdout>:# Mémoire (Mo) :  1257.74 /  1062.49 /   637.30 /   423.37 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0009   user+syst:        0.44s (syst:        0.90s, elaps:        1.34s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Fin commande #0009   user+syst:        0.43s (syst:        0.94s, elaps:        1.36s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Fin commande #0009   user+syst:        0.50s (syst:        0.84s, elaps:        1.33s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,2]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,27]<stdout>:# Mémoire (Mo) :  1228.11 /  1032.86 /   608.86 /   416.57 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0009   user+syst:        0.41s (syst:        0.89s, elaps:        1.30s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :  1244.44 /  1049.19 /   625.23 /   420.61 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0009   user+syst:        0.44s (syst:        0.94s, elaps:        1.37s)
[1,18]<stdout>:# Mémoire (Mo) :  1237.00 /  1041.75 /   618.05 /   418.91 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:# Fin commande #0009   user+syst:        0.43s (syst:        0.89s, elaps:        1.32s)
[1,3]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Fin commande #0009   user+syst:        0.58s (syst:        0.83s, elaps:        1.41s)
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1252.09 /  1056.84 /   631.61 /   422.02 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :  1268.69 /  1073.45 /   647.19 /   425.65 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0009   user+syst:        0.45s (syst:        0.91s, elaps:        1.36s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Fin commande #0009   user+syst:        0.50s (syst:        0.87s, elaps:        1.38s)
[1,5]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0009   user+syst:        0.41s (syst:        0.92s, elaps:        1.34s)
[1,2]<stdout>:# Fin commande #0009   user+syst:        0.38s (syst:        0.92s, elaps:        1.30s)
[1,3]<stdout>:# Mémoire (Mo) :  1245.76 /  1050.52 /   625.13 /   420.50 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0009   user+syst:        0.53s (syst:        0.83s, elaps:        1.35s)
[1,31]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,5]<stdout>:# Mémoire (Mo) :  1236.25 /  1041.00 /   616.42 /   418.49 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0009   user+syst:        0.52s (syst:        0.87s, elaps:        1.38s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:# Mémoire (Mo) :  1237.36 /  1042.12 /   616.65 /   418.49 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:# Fin commande #0009   user+syst:        0.52s (syst:        0.86s, elaps:        1.38s)
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt197
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt197
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt197
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt197
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt197
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt197
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt197
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt197
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt197
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt197
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Commande #0010 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 197
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt197
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt197
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Commande #0010 de
[1,25]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,25]<stdout>:Cube_perf.py, ligne 197
[1,24]<stdout>:# Commande #0010 de
[1,24]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,24]<stdout>:Cube_perf.py, ligne 197
[1,23]<stdout>:# Commande #0010 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 197
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt197
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt197
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Commande #0010 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 197
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt197
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0010 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 197
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt197
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0010 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 197
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt197
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt197
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt197
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Commande #0010 de
[1,28]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,28]<stdout>:Cube_perf.py, ligne 197
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt197
[1,16]<stdout>:# Commande #0010 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 197
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt197
[1,0]<stdout>:# Résultat commande #0011 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Commande #0010 de
[1,29]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,29]<stdout>:Cube_perf.py, ligne 197
[1,13]<stdout>:# Commande #0010 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 197
[1,15]<stdout>:# Commande #0010 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 197
[1,17]<stdout>:# Commande #0010 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 197
[1,12]<stdout>:# Commande #0010 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 197
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt197
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt197
[1,26]<stdout>:# Commande #0010 de
[1,26]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,26]<stdout>:Cube_perf.py, ligne 197
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt197
[1,11]<stdout>:# Commande #0010 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 197
[1,6]<stdout>:# Commande #0010 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 197
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt197
[1,22]<stdout>:# Commande #0010 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 197
[1,19]<stdout>:# Commande #0010 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 197
[1,21]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,21]<stdout>:                         INFO=1,
[1,21]<stdout>:                         MATR_ELEM=stiff_elem,
[1,21]<stdout>:                         NUME_DDL=dofNum)
[1,21]<stdout>:
[1,8]<stdout>:# Commande #0010 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 197
[1,20]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,20]<stdout>:                         INFO=1,
[1,20]<stdout>:                         MATR_ELEM=stiff_elem,
[1,20]<stdout>:                         NUME_DDL=dofNum)
[1,20]<stdout>:
[1,24]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,24]<stdout>:                         INFO=1,
[1,24]<stdout>:                         MATR_ELEM=stiff_elem,
[1,24]<stdout>:                         NUME_DDL=dofNum)
[1,24]<stdout>:
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,23]<stdout>:                         INFO=1,
[1,23]<stdout>:                         MATR_ELEM=stiff_elem,
[1,23]<stdout>:                         NUME_DDL=dofNum)
[1,23]<stdout>:
[1,25]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,25]<stdout>:                         INFO=1,
[1,25]<stdout>:                         MATR_ELEM=stiff_elem,
[1,25]<stdout>:                         NUME_DDL=dofNum)
[1,25]<stdout>:
[1,14]<stdout>:# Commande #0010 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 197
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt197
[1,0]<stdout>:# Mémoire (Mo) :  1254.37 /  1059.12 /   625.76 /   420.76 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,9]<stdout>:                         INFO=1,
[1,9]<stdout>:                         MATR_ELEM=stiff_elem,
[1,9]<stdout>:                         NUME_DDL=dofNum)
[1,9]<stdout>:
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:                         INFO=1,
[1,7]<stdout>:                         MATR_ELEM=stiff_elem,
[1,7]<stdout>:                         NUME_DDL=dofNum)
[1,7]<stdout>:
[1,10]<stdout>:# Commande #0010 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 197
[1,28]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,28]<stdout>:                         INFO=1,
[1,28]<stdout>:                         MATR_ELEM=stiff_elem,
[1,28]<stdout>:                         NUME_DDL=dofNum)
[1,28]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt197
[1,27]<stdout>:# Commande #0010 de
[1,27]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,27]<stdout>:Cube_perf.py, ligne 197
[1,30]<stdout>:# Commande #0010 de
[1,30]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,30]<stdout>:Cube_perf.py, ligne 197
[1,16]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,16]<stdout>:                         INFO=1,
[1,16]<stdout>:                         MATR_ELEM=stiff_elem,
[1,16]<stdout>:                         NUME_DDL=dofNum)
[1,16]<stdout>:
[1,1]<stdout>:# Commande #0010 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 197
[1,15]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,15]<stdout>:                         INFO=1,
[1,15]<stdout>:                         MATR_ELEM=stiff_elem,
[1,15]<stdout>:                         NUME_DDL=dofNum)
[1,15]<stdout>:
[1,17]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,17]<stdout>:                         INFO=1,
[1,17]<stdout>:                         MATR_ELEM=stiff_elem,
[1,17]<stdout>:                         NUME_DDL=dofNum)
[1,17]<stdout>:
[1,12]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,12]<stdout>:                         INFO=1,
[1,12]<stdout>:                         MATR_ELEM=stiff_elem,
[1,12]<stdout>:                         NUME_DDL=dofNum)
[1,12]<stdout>:
[1,29]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,29]<stdout>:                         INFO=1,
[1,29]<stdout>:                         MATR_ELEM=stiff_elem,
[1,29]<stdout>:                         NUME_DDL=dofNum)
[1,29]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt197
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,13]<stdout>:                         INFO=1,
[1,13]<stdout>:                         MATR_ELEM=stiff_elem,
[1,13]<stdout>:                         NUME_DDL=dofNum)
[1,13]<stdout>:
[1,26]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,26]<stdout>:                         INFO=1,
[1,26]<stdout>:                         MATR_ELEM=stiff_elem,
[1,26]<stdout>:                         NUME_DDL=dofNum)
[1,26]<stdout>:
[1,0]<stdout>:# Fin commande #0011   user+syst:        0.45s (syst:        0.92s, elaps:        1.37s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt197
[1,11]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,11]<stdout>:                         INFO=1,
[1,11]<stdout>:                         MATR_ELEM=stiff_elem,
[1,11]<stdout>:                         NUME_DDL=dofNum)
[1,11]<stdout>:
[1,19]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,19]<stdout>:                         INFO=1,
[1,19]<stdout>:                         MATR_ELEM=stiff_elem,
[1,19]<stdout>:                         NUME_DDL=dofNum)
[1,19]<stdout>:
[1,22]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,22]<stdout>:                         INFO=1,
[1,22]<stdout>:                         MATR_ELEM=stiff_elem,
[1,22]<stdout>:                         NUME_DDL=dofNum)
[1,22]<stdout>:
[1,18]<stdout>:# Commande #0010 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 197
[1,6]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:                         INFO=1,
[1,6]<stdout>:                         MATR_ELEM=stiff_elem,
[1,6]<stdout>:                         NUME_DDL=dofNum)
[1,6]<stdout>:
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,8]<stdout>:                         INFO=1,
[1,8]<stdout>:                         MATR_ELEM=stiff_elem,
[1,8]<stdout>:                         NUME_DDL=dofNum)
[1,8]<stdout>:
[1,2]<stdout>:# Commande #0010 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 197
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt197
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,14]<stdout>:                         INFO=1,
[1,14]<stdout>:                         MATR_ELEM=stiff_elem,
[1,14]<stdout>:                         NUME_DDL=dofNum)
[1,14]<stdout>:
[1,10]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,10]<stdout>:                         INFO=1,
[1,10]<stdout>:                         MATR_ELEM=stiff_elem,
[1,10]<stdout>:                         NUME_DDL=dofNum)
[1,10]<stdout>:
[1,4]<stdout>:# Commande #0010 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 197
[1,3]<stdout>:# Commande #0010 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 197
[1,27]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,27]<stdout>:                         INFO=1,
[1,27]<stdout>:                         MATR_ELEM=stiff_elem,
[1,27]<stdout>:                         NUME_DDL=dofNum)
[1,27]<stdout>:
[1,30]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,30]<stdout>:                         INFO=1,
[1,30]<stdout>:                         MATR_ELEM=stiff_elem,
[1,30]<stdout>:                         NUME_DDL=dofNum)
[1,30]<stdout>:
[1,1]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:                         INFO=1,
[1,1]<stdout>:                         MATR_ELEM=stiff_elem,
[1,1]<stdout>:                         NUME_DDL=dofNum)
[1,1]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt197
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0010 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 197
[1,18]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,18]<stdout>:                         INFO=1,
[1,18]<stdout>:                         MATR_ELEM=stiff_elem,
[1,18]<stdout>:                         NUME_DDL=dofNum)
[1,18]<stdout>:
[1,2]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:                         INFO=1,
[1,2]<stdout>:                         MATR_ELEM=stiff_elem,
[1,2]<stdout>:                         NUME_DDL=dofNum)
[1,2]<stdout>:
[1,31]<stdout>:# Commande #0010 de
[1,31]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,31]<stdout>:Cube_perf.py, ligne 197
[1,4]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:                         INFO=1,
[1,4]<stdout>:                         MATR_ELEM=stiff_elem,
[1,4]<stdout>:                         NUME_DDL=dofNum)
[1,4]<stdout>:
[1,3]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:                         INFO=1,
[1,3]<stdout>:                         MATR_ELEM=stiff_elem,
[1,3]<stdout>:                         NUME_DDL=dofNum)
[1,3]<stdout>:
[1,5]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:                         INFO=1,
[1,5]<stdout>:                         MATR_ELEM=stiff_elem,
[1,5]<stdout>:                         NUME_DDL=dofNum)
[1,5]<stdout>:
[1,31]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,31]<stdout>:                         INFO=1,
[1,31]<stdout>:                         MATR_ELEM=stiff_elem,
[1,31]<stdout>:                         NUME_DDL=dofNum)
[1,31]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt197
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0012 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 197
[1,0]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:                         INFO=1,
[1,0]<stdout>:                         MATR_ELEM=stiff_elem,
[1,0]<stdout>:                         NUME_DDL=dofNum)
[1,0]<stdout>:
[1,20]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,20]<stdout>:<AssemblyMatrixDisplacementReal>
[1,25]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,25]<stdout>:<AssemblyMatrixDisplacementReal>
[1,20]<stdout>:# Mémoire (Mo) :  1251.75 /  1124.97 /   631.09 /   421.83 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# Mémoire (Mo) :  1244.65 /  1115.91 /   624.10 /   420.20 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,25]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,16]<stdout>:<AssemblyMatrixDisplacementReal>
[1,23]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,23]<stdout>:<AssemblyMatrixDisplacementReal>
[1,1]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,1]<stdout>:<AssemblyMatrixDisplacementReal>
[1,16]<stdout>:# Mémoire (Mo) :  1261.97 /  1137.80 /   639.83 /   424.02 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Mémoire (Mo) :  1231.04 /  1098.46 /   611.01 /   417.15 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1244.44 /  1116.03 /   625.23 /   420.61 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,10]<stdout>:<AssemblyMatrixDisplacementReal>
[1,23]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  1237.95 /  1107.81 /   619.46 /   419.14 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,24]<stdout>:<AssemblyMatrixDisplacementReal>
[1,7]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,7]<stdout>:<AssemblyMatrixDisplacementReal>
[1,26]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,26]<stdout>:<AssemblyMatrixDisplacementReal>
[1,21]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,21]<stdout>:<AssemblyMatrixDisplacementReal>
[1,11]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,11]<stdout>:<AssemblyMatrixDisplacementReal>
[1,19]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,19]<stdout>:<AssemblyMatrixDisplacementReal>
[1,13]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,13]<stdout>:<AssemblyMatrixDisplacementReal>
[1,24]<stdout>:# Mémoire (Mo) :  1260.40 /  1137.62 /   638.92 /   423.81 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,6]<stdout>:<AssemblyMatrixDisplacementReal>
[1,7]<stdout>:# Mémoire (Mo) :  1254.79 /  1130.69 /   633.98 /   422.56 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,17]<stdout>:<AssemblyMatrixDisplacementReal>
[1,26]<stdout>:# Mémoire (Mo) :  1221.23 /  1087.61 /   602.37 /   415.08 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,9]<stdout>:<AssemblyMatrixDisplacementReal>
[1,8]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,8]<stdout>:<AssemblyMatrixDisplacementReal>
[1,21]<stdout>:# Mémoire (Mo) :  1260.74 /  1137.79 /   638.43 /   423.66 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,28]<stdout>:<AssemblyMatrixDisplacementReal>
[1,11]<stdout>:# Mémoire (Mo) :  1232.23 /  1101.48 /   612.07 /   417.43 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,29]<stdout>:<AssemblyMatrixDisplacementReal>
[1,24]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.06s, elaps:        0.37s)
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,15]<stdout>:<AssemblyMatrixDisplacementReal>
[1,7]<stdout>:# Fin commande #0010   user+syst:        0.30s (syst:        0.06s, elaps:        0.37s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,22]<stdout>:<AssemblyMatrixDisplacementReal>
[1,19]<stdout>:# Mémoire (Mo) :  1243.05 /  1116.05 /   624.07 /   420.40 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  1235.02 /  1105.35 /   615.54 /   418.17 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Fin commande #0010   user+syst:        0.31s (syst:        0.06s, elaps:        0.37s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Fin commande #0010   user+syst:        0.31s (syst:        0.06s, elaps:        0.37s)
[1,12]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,12]<stdout>:<AssemblyMatrixDisplacementReal>
[1,6]<stdout>:# Mémoire (Mo) :  1252.79 /  1127.89 /   631.53 /   422.13 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Mémoire (Mo) :  1241.73 /  1114.01 /   622.05 /   419.77 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0010   user+syst:        0.31s (syst:        0.06s, elaps:        0.37s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Mémoire (Mo) :  1232.73 /  1102.62 /   613.91 /   417.83 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0010   user+syst:        0.31s (syst:        0.06s, elaps:        0.37s)
[1,13]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,27]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,27]<stdout>:<AssemblyMatrixDisplacementReal>
[1,8]<stdout>:# Mémoire (Mo) :  1266.70 /  1145.58 /   644.42 /   425.01 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Mémoire (Mo) :  1253.36 /  1128.73 /   632.59 /   422.25 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Mémoire (Mo) :  1240.05 /  1111.84 /   620.48 /   419.48 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0010   user+syst:        0.31s (syst:        0.06s, elaps:        0.37s)
[1,22]<stdout>:# Mémoire (Mo) :  1244.70 /  1117.55 /   624.02 /   420.38 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Mémoire (Mo) :  1235.46 /  1105.84 /   615.80 /   418.33 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Fin commande #0010   user+syst:        0.33s (syst:        0.04s, elaps:        0.37s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0010   user+syst:        0.31s (syst:        0.06s, elaps:        0.37s)
[1,12]<stdout>:# Mémoire (Mo) :  1266.86 /  1145.51 /   643.70 /   424.82 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.06s, elaps:        0.37s)
[1,14]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,14]<stdout>:<AssemblyMatrixDisplacementReal>
[1,8]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0010   user+syst:        0.30s (syst:        0.07s, elaps:        0.37s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Fin commande #0010   user+syst:        0.31s (syst:        0.06s, elaps:        0.37s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,18]<stdout>:<AssemblyMatrixDisplacementReal>
[1,12]<stdout>:# Fin commande #0010   user+syst:        0.30s (syst:        0.07s, elaps:        0.37s)
[1,27]<stdout>:# Mémoire (Mo) :  1228.11 /  1096.46 /   608.86 /   416.57 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,30]<stdout>:<AssemblyMatrixDisplacementReal>
[1,14]<stdout>:# Mémoire (Mo) :  1256.92 /  1133.06 /   635.36 /   422.90 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Fin commande #0010   user+syst:        0.30s (syst:        0.07s, elaps:        0.37s)
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Mémoire (Mo) :  1237.00 /  1108.09 /   618.05 /   418.91 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,4]<stdout>:<AssemblyMatrixDisplacementReal>
[1,14]<stdout>:# Fin commande #0010   user+syst:        0.30s (syst:        0.06s, elaps:        0.37s)
[1,30]<stdout>:# Mémoire (Mo) :  1257.74 /  1134.59 /   637.30 /   423.37 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,3]<stdout>:<AssemblyMatrixDisplacementReal>
[1,31]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,31]<stdout>:<AssemblyMatrixDisplacementReal>
[1,18]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,5]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,5]<stdout>:<AssemblyMatrixDisplacementReal>
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1252.09 /  1127.16 /   631.61 /   422.02 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,2]<stdout>:<AssemblyMatrixDisplacementReal>
[1,3]<stdout>:# Mémoire (Mo) :  1245.76 /  1118.96 /   625.13 /   420.50 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt204
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt204
[1,31]<stdout>:# Mémoire (Mo) :  1237.36 /  1108.07 /   616.65 /   418.49 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Mémoire (Mo) :  1236.25 /  1106.81 /   616.42 /   418.49 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,3]<stdout>:# Fin commande #0010   user+syst:        0.31s (syst:        0.06s, elaps:        0.37s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:# Fin commande #0010   user+syst:        0.31s (syst:        0.06s, elaps:        0.37s)
[1,2]<stdout>:# Mémoire (Mo) :  1268.69 /  1148.38 /   647.19 /   425.65 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0010   user+syst:        0.31s (syst:        0.06s, elaps:        0.37s)
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Commande #0011 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 204
[1,25]<stdout>:# Commande #0011 de
[1,25]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,25]<stdout>:Cube_perf.py, ligne 204
[1,2]<stdout>:# Fin commande #0010   user+syst:        0.32s (syst:        0.05s, elaps:        0.37s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt204
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt204
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt204
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,20]<stdout>:                         TOUT='OUI',
[1,20]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,20]<stdout>:                 INFO=1,
[1,20]<stdout>:                 MAILLAGE='<00000004>',
[1,20]<stdout>:                 OPERATION='AFFE',
[1,20]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,20]<stdout>:
[1,25]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,25]<stdout>:                         TOUT='OUI',
[1,25]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,25]<stdout>:                 INFO=1,
[1,25]<stdout>:                 MAILLAGE='<00000004>',
[1,25]<stdout>:                 OPERATION='AFFE',
[1,25]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,25]<stdout>:
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0011 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 204
[1,23]<stdout>:# Commande #0011 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 204
[1,1]<stdout>:# Commande #0011 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 204
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt204
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,16]<stdout>:                         TOUT='OUI',
[1,16]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,16]<stdout>:                 INFO=1,
[1,16]<stdout>:                 MAILLAGE='<00000004>',
[1,16]<stdout>:                 OPERATION='AFFE',
[1,16]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,16]<stdout>:
[1,23]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,23]<stdout>:                         TOUT='OUI',
[1,23]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,23]<stdout>:                 INFO=1,
[1,23]<stdout>:                 MAILLAGE='<00000004>',
[1,23]<stdout>:                 OPERATION='AFFE',
[1,23]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,23]<stdout>:
[1,1]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,1]<stdout>:                         TOUT='OUI',
[1,1]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,1]<stdout>:                 INFO=1,
[1,1]<stdout>:                 MAILLAGE='<00000004>',
[1,1]<stdout>:                 OPERATION='AFFE',
[1,1]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,1]<stdout>:
[1,10]<stdout>:# Commande #0011 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 204
[1,10]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,10]<stdout>:                         TOUT='OUI',
[1,10]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,10]<stdout>:                 INFO=1,
[1,10]<stdout>:                 MAILLAGE='<00000004>',
[1,10]<stdout>:                 OPERATION='AFFE',
[1,10]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,10]<stdout>:
[1,0]<stdout>:# Résultat commande #0012 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,0]<stdout>:<AssemblyMatrixDisplacementReal>
[1,0]<stdout>:# Mémoire (Mo) :  1254.37 /  1127.70 /   625.76 /   420.76 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0012   user+syst:        0.31s (syst:        0.06s, elaps:        0.37s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt204
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt204
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt204
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt204
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt204
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt204
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt204
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Commande #0011 de
[1,24]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,24]<stdout>:Cube_perf.py, ligne 204
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt204
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt204
[1,7]<stdout>:# Commande #0011 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 204
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0011 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 204
[1,21]<stdout>:# Commande #0011 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 204
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt204
[1,26]<stdout>:# Commande #0011 de
[1,26]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,26]<stdout>:Cube_perf.py, ligne 204
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt204
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt204
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt204
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt204
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Commande #0011 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 204
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0011 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 204
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt204
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt204
[1,6]<stdout>:# Commande #0011 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 204
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,24]<stdout>:                         TOUT='OUI',
[1,24]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,24]<stdout>:                 INFO=1,
[1,24]<stdout>:                 MAILLAGE='<00000004>',
[1,24]<stdout>:                 OPERATION='AFFE',
[1,24]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,24]<stdout>:
[1,17]<stdout>:# Commande #0011 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 204
[1,7]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,7]<stdout>:                         TOUT='OUI',
[1,7]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,7]<stdout>:                 INFO=1,
[1,7]<stdout>:                 MAILLAGE='<00000004>',
[1,7]<stdout>:                 OPERATION='AFFE',
[1,7]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,7]<stdout>:
[1,21]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,21]<stdout>:                         TOUT='OUI',
[1,21]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,21]<stdout>:                 INFO=1,
[1,21]<stdout>:                 MAILLAGE='<00000004>',
[1,21]<stdout>:                 OPERATION='AFFE',
[1,21]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,21]<stdout>:
[1,22]<stdout>:# Commande #0011 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 204
[1,11]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,11]<stdout>:                         TOUT='OUI',
[1,11]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,11]<stdout>:                 INFO=1,
[1,11]<stdout>:                 MAILLAGE='<00000004>',
[1,11]<stdout>:                 OPERATION='AFFE',
[1,11]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,11]<stdout>:
[1,28]<stdout>:# Commande #0011 de
[1,28]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,28]<stdout>:Cube_perf.py, ligne 204
[1,9]<stdout>:# Commande #0011 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 204
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt204
[1,15]<stdout>:# Commande #0011 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 204
[1,29]<stdout>:# Commande #0011 de
[1,29]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,29]<stdout>:Cube_perf.py, ligne 204
[1,26]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,26]<stdout>:                         TOUT='OUI',
[1,26]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,26]<stdout>:                 INFO=1,
[1,26]<stdout>:                 MAILLAGE='<00000004>',
[1,26]<stdout>:                 OPERATION='AFFE',
[1,26]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,26]<stdout>:
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,13]<stdout>:                         TOUT='OUI',
[1,13]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,13]<stdout>:                 INFO=1,
[1,13]<stdout>:                 MAILLAGE='<00000004>',
[1,13]<stdout>:                 OPERATION='AFFE',
[1,13]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,13]<stdout>:
[1,8]<stdout>:# Commande #0011 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 204
[1,19]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,19]<stdout>:                         TOUT='OUI',
[1,19]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,19]<stdout>:                 INFO=1,
[1,19]<stdout>:                 MAILLAGE='<00000004>',
[1,19]<stdout>:                 OPERATION='AFFE',
[1,19]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,19]<stdout>:
[1,12]<stdout>:# Commande #0011 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 204
[1,6]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,6]<stdout>:                         TOUT='OUI',
[1,6]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,6]<stdout>:                 INFO=1,
[1,6]<stdout>:                 MAILLAGE='<00000004>',
[1,6]<stdout>:                 OPERATION='AFFE',
[1,6]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,6]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt204
[1,17]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,17]<stdout>:                         TOUT='OUI',
[1,17]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,17]<stdout>:                 INFO=1,
[1,17]<stdout>:                 MAILLAGE='<00000004>',
[1,17]<stdout>:                 OPERATION='AFFE',
[1,17]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,17]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt204
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,22]<stdout>:                         TOUT='OUI',
[1,22]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,22]<stdout>:                 INFO=1,
[1,22]<stdout>:                 MAILLAGE='<00000004>',
[1,22]<stdout>:                 OPERATION='AFFE',
[1,22]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,22]<stdout>:
[1,9]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,9]<stdout>:                         TOUT='OUI',
[1,9]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,9]<stdout>:                 INFO=1,
[1,9]<stdout>:                 MAILLAGE='<00000004>',
[1,9]<stdout>:                 OPERATION='AFFE',
[1,9]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,9]<stdout>:
[1,28]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,28]<stdout>:                         TOUT='OUI',
[1,28]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,28]<stdout>:                 INFO=1,
[1,28]<stdout>:                 MAILLAGE='<00000004>',
[1,28]<stdout>:                 OPERATION='AFFE',
[1,28]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,28]<stdout>:
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Commande #0011 de
[1,27]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,27]<stdout>:Cube_perf.py, ligne 204
[1,29]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,29]<stdout>:                         TOUT='OUI',
[1,29]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,29]<stdout>:                 INFO=1,
[1,29]<stdout>:                 MAILLAGE='<00000004>',
[1,29]<stdout>:                 OPERATION='AFFE',
[1,29]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,29]<stdout>:
[1,15]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,15]<stdout>:                         TOUT='OUI',
[1,15]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,15]<stdout>:                 INFO=1,
[1,15]<stdout>:                 MAILLAGE='<00000004>',
[1,15]<stdout>:                 OPERATION='AFFE',
[1,15]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,15]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt204
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,8]<stdout>:                         TOUT='OUI',
[1,8]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,8]<stdout>:                 INFO=1,
[1,8]<stdout>:                 MAILLAGE='<00000004>',
[1,8]<stdout>:                 OPERATION='AFFE',
[1,8]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,8]<stdout>:
[1,12]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,12]<stdout>:                         TOUT='OUI',
[1,12]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,12]<stdout>:                 INFO=1,
[1,12]<stdout>:                 MAILLAGE='<00000004>',
[1,12]<stdout>:                 OPERATION='AFFE',
[1,12]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,12]<stdout>:
[1,14]<stdout>:# Commande #0011 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 204
[1,18]<stdout>:# Commande #0011 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 204
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt204
[1,30]<stdout>:# Commande #0011 de
[1,30]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,30]<stdout>:Cube_perf.py, ligne 204
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt204
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt204
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,27]<stdout>:                         TOUT='OUI',
[1,27]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,27]<stdout>:                 INFO=1,
[1,27]<stdout>:                 MAILLAGE='<00000004>',
[1,27]<stdout>:                 OPERATION='AFFE',
[1,27]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,27]<stdout>:
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt204
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,14]<stdout>:                         TOUT='OUI',
[1,14]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,14]<stdout>:                 INFO=1,
[1,14]<stdout>:                 MAILLAGE='<00000004>',
[1,14]<stdout>:                 OPERATION='AFFE',
[1,14]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,14]<stdout>:
[1,18]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,18]<stdout>:                         TOUT='OUI',
[1,18]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,18]<stdout>:                 INFO=1,
[1,18]<stdout>:                 MAILLAGE='<00000004>',
[1,18]<stdout>:                 OPERATION='AFFE',
[1,18]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,18]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt204
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0011 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 204
[1,31]<stdout>:# Commande #0011 de
[1,31]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,31]<stdout>:Cube_perf.py, ligne 204
[1,4]<stdout>:# Commande #0011 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 204
[1,30]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,30]<stdout>:                         TOUT='OUI',
[1,30]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,30]<stdout>:                 INFO=1,
[1,30]<stdout>:                 MAILLAGE='<00000004>',
[1,30]<stdout>:                 OPERATION='AFFE',
[1,30]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,30]<stdout>:
[1,5]<stdout>:# Commande #0011 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 204
[1,2]<stdout>:# Commande #0011 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 204
[1,3]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,3]<stdout>:                         TOUT='OUI',
[1,3]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,3]<stdout>:                 INFO=1,
[1,3]<stdout>:                 MAILLAGE='<00000004>',
[1,3]<stdout>:                 OPERATION='AFFE',
[1,3]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,3]<stdout>:
[1,31]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,31]<stdout>:                         TOUT='OUI',
[1,31]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,31]<stdout>:                 INFO=1,
[1,31]<stdout>:                 MAILLAGE='<00000004>',
[1,31]<stdout>:                 OPERATION='AFFE',
[1,31]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,31]<stdout>:
[1,4]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,4]<stdout>:                         TOUT='OUI',
[1,4]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,4]<stdout>:                 INFO=1,
[1,4]<stdout>:                 MAILLAGE='<00000004>',
[1,4]<stdout>:                 OPERATION='AFFE',
[1,4]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,4]<stdout>:
[1,5]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,5]<stdout>:                         TOUT='OUI',
[1,5]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,5]<stdout>:                 INFO=1,
[1,5]<stdout>:                 MAILLAGE='<00000004>',
[1,5]<stdout>:                 OPERATION='AFFE',
[1,5]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,5]<stdout>:
[1,2]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,2]<stdout>:                         TOUT='OUI',
[1,2]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,2]<stdout>:                 INFO=1,
[1,2]<stdout>:                 MAILLAGE='<00000004>',
[1,2]<stdout>:                 OPERATION='AFFE',
[1,2]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,2]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt204
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0013 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 204
[1,0]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,0]<stdout>:                         TOUT='OUI',
[1,0]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,0]<stdout>:                 INFO=1,
[1,0]<stdout>:                 MAILLAGE='<00000004>',
[1,0]<stdout>:                 OPERATION='AFFE',
[1,0]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,0]<stdout>:
[1,26]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,26]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,26]<stdout>:# Mémoire (Mo) :  1221.23 /  1099.97 /   602.37 /   415.08 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,26]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.01s, elaps:        0.03s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,27]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,29]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.00
[1,23]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,27]<stdout>:# Mémoire (Mo) :  1228.11 /  1109.21 /   608.86 /   416.57 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt223
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Mémoire (Mo) :  1231.04 /  1111.36 /   611.01 /   417.15 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Commande #0012 de
[1,26]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,26]<stdout>:Cube_perf.py, ligne 223
[1,11]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,23]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.00s, elaps:        0.03s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,11]<stdout>:# Mémoire (Mo) :  1232.23 /  1114.41 /   612.07 /   417.43 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,9]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,11]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.01s, elaps:        0.03s)
[1,26]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,26]<stdout>:                             INFO=1,
[1,26]<stdout>:                             INST=0.0,
[1,26]<stdout>:                             NUME_DDL=dofNum)
[1,26]<stdout>:
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,17]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,9]<stdout>:# Mémoire (Mo) :  1232.73 /  1115.71 /   613.91 /   417.83 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,9]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,19]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,13]<stdout>:# Mémoire (Mo) :  1235.02 /  1118.47 /   615.54 /   418.17 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,5]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,22]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,13]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.01s, elaps:        0.03s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,31]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,29]<stdout>:# Mémoire (Mo) :  1235.46 /  1118.98 /   615.80 /   418.33 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  1236.25 /  1119.99 /   616.42 /   418.49 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt223
[1,31]<stdout>:# Mémoire (Mo) :  1237.36 /  1121.31 /   616.65 /   418.49 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,20]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,31]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Commande #0012 de
[1,27]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,27]<stdout>:Cube_perf.py, ligne 223
[1,18]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt223
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.00
[1,15]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,28]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,18]<stdout>:# Mémoire (Mo) :  1237.00 /  1121.40 /   618.05 /   418.91 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,23]<stdout>:# Commande #0012 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 223
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt223
[1,15]<stdout>:# Mémoire (Mo) :  1240.05 /  1125.26 /   620.48 /   419.48 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,18]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.00s, elaps:        0.03s)
[1,27]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,27]<stdout>:                             INFO=1,
[1,27]<stdout>:                             INST=0.0,
[1,27]<stdout>:                             NUME_DDL=dofNum)
[1,27]<stdout>:
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,15]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.01s, elaps:        0.03s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  1237.95 /  1121.18 /   619.46 /   419.14 (VmPeak / VmSize / Optimum / Minimum)
[1,24]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,11]<stdout>:# Commande #0012 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 223
[1,17]<stdout>:# Mémoire (Mo) :  1241.73 /  1127.54 /   622.05 /   419.77 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,30]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,10]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,23]<stdout>:                             INFO=1,
[1,23]<stdout>:                             INST=0.0,
[1,23]<stdout>:                             NUME_DDL=dofNum)
[1,23]<stdout>:
[1,16]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt223
[1,19]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,17]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.03s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Mémoire (Mo) :  1244.65 /  1129.59 /   624.10 /   420.20 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,22]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,0]<stdout>:# Résultat commande #0013 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,9]<stdout>:# Commande #0012 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 223
[1,19]<stdout>:# Mémoire (Mo) :  1243.05 /  1129.79 /   624.07 /   420.40 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,11]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,11]<stdout>:                             INFO=1,
[1,11]<stdout>:                             INST=0.0,
[1,11]<stdout>:                             NUME_DDL=dofNum)
[1,11]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt223
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,1]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Fin commande #0011   user+syst:        0.00s (syst:        0.01s, elaps:        0.03s)
[1,22]<stdout>:# Mémoire (Mo) :  1244.70 /  1131.20 /   624.02 /   420.38 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Commande #0012 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 223
[1,0]<stdout>:# Mémoire (Mo) :  1254.37 /  1141.44 /   625.76 /   420.76 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  1245.76 /  1132.67 /   625.13 /   420.50 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt223
[1,1]<stdout>:# Mémoire (Mo) :  1244.44 /  1129.80 /   625.23 /   420.61 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.01s, elaps:        0.03s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt223
[1,9]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,9]<stdout>:                             INFO=1,
[1,9]<stdout>:                             INST=0.0,
[1,9]<stdout>:                             NUME_DDL=dofNum)
[1,9]<stdout>:
[1,20]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0013   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,3]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,1]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt223
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Commande #0012 de
[1,29]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,29]<stdout>:Cube_perf.py, ligne 223
[1,20]<stdout>:# Mémoire (Mo) :  1251.75 /  1139.03 /   631.09 /   421.83 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Commande #0012 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 223
[1,4]<stdout>:# Mémoire (Mo) :  1252.09 /  1141.22 /   631.61 /   422.02 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,13]<stdout>:                             INFO=1,
[1,13]<stdout>:                             INST=0.0,
[1,13]<stdout>:                             NUME_DDL=dofNum)
[1,13]<stdout>:
[1,7]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,28]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,31]<stdout>:# Commande #0012 de
[1,31]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,31]<stdout>:Cube_perf.py, ligne 223
[1,6]<stdout>:# Mémoire (Mo) :  1252.79 /  1142.04 /   631.53 /   422.13 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,14]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Mémoire (Mo) :  1254.79 /  1144.97 /   633.98 /   422.56 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,21]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt223
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,29]<stdout>:                             INFO=1,
[1,29]<stdout>:                             INST=0.0,
[1,29]<stdout>:                             NUME_DDL=dofNum)
[1,29]<stdout>:
[1,28]<stdout>:# Mémoire (Mo) :  1253.36 /  1142.85 /   632.59 /   422.25 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0011   user+syst:        0.00s (syst:        0.01s, elaps:        0.03s)
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt223
[1,5]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:                             INFO=1,
[1,5]<stdout>:                             INST=0.0,
[1,5]<stdout>:                             NUME_DDL=dofNum)
[1,5]<stdout>:
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :  1256.92 /  1147.34 /   635.36 /   422.90 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.00s, elaps:        0.03s)
[1,21]<stdout>:# Mémoire (Mo) :  1260.74 /  1152.28 /   638.43 /   423.66 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0012 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 223
[1,30]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,16]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,31]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,31]<stdout>:                             INFO=1,
[1,31]<stdout>:                             INST=0.0,
[1,31]<stdout>:                             NUME_DDL=dofNum)
[1,31]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt223
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0012 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 223
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt223
[1,14]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.00s, elaps:        0.03s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Mémoire (Mo) :  1260.40 /  1152.14 /   638.92 /   423.81 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,21]<stdout>:# Fin commande #0011   user+syst:        0.00s (syst:        0.01s, elaps:        0.03s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Mémoire (Mo) :  1257.74 /  1149.05 /   637.30 /   423.37 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,10]<stdout>:# Commande #0012 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 223
[1,16]<stdout>:# Mémoire (Mo) :  1261.97 /  1152.43 /   639.83 /   424.02 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,17]<stdout>:# Commande #0012 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 223
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt223
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,12]<stdout>:# Mémoire (Mo) :  1266.86 /  1160.29 /   643.70 /   424.82 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,18]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,18]<stdout>:                             INFO=1,
[1,18]<stdout>:                             INST=0.0,
[1,18]<stdout>:                             NUME_DDL=dofNum)
[1,18]<stdout>:
[1,8]<stdout>:# Mémoire (Mo) :  1266.70 /  1160.41 /   644.42 /   425.01 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,15]<stdout>:                             INFO=1,
[1,15]<stdout>:                             INST=0.0,
[1,15]<stdout>:                             NUME_DDL=dofNum)
[1,15]<stdout>:
[1,12]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt223
[1,25]<stdout>:# Commande #0012 de
[1,25]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,25]<stdout>:Cube_perf.py, ligne 223
[1,2]<stdout>:# Mémoire (Mo) :  1268.69 /  1163.37 /   647.19 /   425.65 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt223
[1,10]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,10]<stdout>:                             INFO=1,
[1,10]<stdout>:                             INST=0.0,
[1,10]<stdout>:                             NUME_DDL=dofNum)
[1,10]<stdout>:
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.01s, elaps:        0.03s)
[1,17]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,17]<stdout>:                             INFO=1,
[1,17]<stdout>:                             INST=0.0,
[1,17]<stdout>:                             NUME_DDL=dofNum)
[1,17]<stdout>:
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0012 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 223
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt223
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt223
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt223
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Commande #0012 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 223
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,25]<stdout>:                             INFO=1,
[1,25]<stdout>:                             INST=0.0,
[1,25]<stdout>:                             NUME_DDL=dofNum)
[1,25]<stdout>:
[1,1]<stdout>:# Commande #0012 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 223
[1,3]<stdout>:# Commande #0012 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 223
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt223
[1,0]<stdout>:# Commande #0014 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 223
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt223
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,19]<stdout>:                             INFO=1,
[1,19]<stdout>:                             INST=0.0,
[1,19]<stdout>:                             NUME_DDL=dofNum)
[1,19]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt223
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,22]<stdout>:                             INFO=1,
[1,22]<stdout>:                             INST=0.0,
[1,22]<stdout>:                             NUME_DDL=dofNum)
[1,22]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt223
[1,20]<stdout>:# Commande #0012 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 223
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0012 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 223
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt223
[1,1]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:                             INFO=1,
[1,1]<stdout>:                             INST=0.0,
[1,1]<stdout>:                             NUME_DDL=dofNum)
[1,1]<stdout>:
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0012 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 223
[1,3]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:                             INFO=1,
[1,3]<stdout>:                             INST=0.0,
[1,3]<stdout>:                             NUME_DDL=dofNum)
[1,3]<stdout>:
[1,7]<stdout>:# Commande #0012 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 223
[1,0]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:                             INFO=1,
[1,0]<stdout>:                             INST=0.0,
[1,0]<stdout>:                             NUME_DDL=dofNum)
[1,0]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt223
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt223
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt223
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Commande #0012 de
[1,28]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,28]<stdout>:Cube_perf.py, ligne 223
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,20]<stdout>:                             INFO=1,
[1,20]<stdout>:                             INST=0.0,
[1,20]<stdout>:                             NUME_DDL=dofNum)
[1,20]<stdout>:
[1,4]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:                             INFO=1,
[1,4]<stdout>:                             INST=0.0,
[1,4]<stdout>:                             NUME_DDL=dofNum)
[1,4]<stdout>:
[1,21]<stdout>:# Commande #0012 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 223
[1,14]<stdout>:# Commande #0012 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 223
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt223
[1,24]<stdout>:# Commande #0012 de
[1,24]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,24]<stdout>:Cube_perf.py, ligne 223
[1,6]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:                             INFO=1,
[1,6]<stdout>:                             INST=0.0,
[1,6]<stdout>:                             NUME_DDL=dofNum)
[1,6]<stdout>:
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt223
[1,7]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:                             INFO=1,
[1,7]<stdout>:                             INST=0.0,
[1,7]<stdout>:                             NUME_DDL=dofNum)
[1,7]<stdout>:
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt223
[1,28]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,28]<stdout>:                             INFO=1,
[1,28]<stdout>:                             INST=0.0,
[1,28]<stdout>:                             NUME_DDL=dofNum)
[1,28]<stdout>:
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Commande #0012 de
[1,30]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,30]<stdout>:Cube_perf.py, ligne 223
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt223
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0012 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 223
[1,21]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,21]<stdout>:                             INFO=1,
[1,21]<stdout>:                             INST=0.0,
[1,21]<stdout>:                             NUME_DDL=dofNum)
[1,21]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt223
[1,12]<stdout>:# Commande #0012 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 223
[1,14]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,14]<stdout>:                             INFO=1,
[1,14]<stdout>:                             INST=0.0,
[1,14]<stdout>:                             NUME_DDL=dofNum)
[1,14]<stdout>:
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,24]<stdout>:                             INFO=1,
[1,24]<stdout>:                             INST=0.0,
[1,24]<stdout>:                             NUME_DDL=dofNum)
[1,24]<stdout>:
[1,8]<stdout>:# Commande #0012 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 223
[1,2]<stdout>:# Commande #0012 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 223
[1,30]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,30]<stdout>:                             INFO=1,
[1,30]<stdout>:                             INST=0.0,
[1,30]<stdout>:                             NUME_DDL=dofNum)
[1,30]<stdout>:
[1,16]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,16]<stdout>:                             INFO=1,
[1,16]<stdout>:                             INST=0.0,
[1,16]<stdout>:                             NUME_DDL=dofNum)
[1,16]<stdout>:
[1,12]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,12]<stdout>:                             INFO=1,
[1,12]<stdout>:                             INST=0.0,
[1,12]<stdout>:                             NUME_DDL=dofNum)
[1,12]<stdout>:
[1,8]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,8]<stdout>:                             INFO=1,
[1,8]<stdout>:                             INST=0.0,
[1,8]<stdout>:                             NUME_DDL=dofNum)
[1,8]<stdout>:
[1,2]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:                             INFO=1,
[1,2]<stdout>:                             INST=0.0,
[1,2]<stdout>:                             NUME_DDL=dofNum)
[1,2]<stdout>:
[1,26]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,26]<stdout>:# Mémoire (Mo) :  1221.23 /  1101.52 /   602.37 /   415.08 (VmPeak / VmSize / Optimum / Minimum)
[1,26]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,23]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,23]<stdout>:# Mémoire (Mo) :  1231.04 /  1112.97 /   611.01 /   417.15 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Mémoire (Mo) :  1228.11 /  1110.80 /   608.86 /   416.57 (VmPeak / VmSize / Optimum / Minimum)
[1,27]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,23]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,11]<stdout>:# Mémoire (Mo) :  1232.23 /  1116.03 /   612.07 /   417.43 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0012   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,9]<stdout>:# Mémoire (Mo) :  1232.73 /  1117.34 /   613.91 /   417.83 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,13]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Mémoire (Mo) :  1235.02 /  1120.11 /   615.54 /   418.17 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,29]<stdout>:# Mémoire (Mo) :  1235.46 /  1120.63 /   615.80 /   418.33 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,5]<stdout>:# Mémoire (Mo) :  1236.25 /  1121.64 /   616.42 /   418.49 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,31]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,5]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Mémoire (Mo) :  1240.05 /  1126.94 /   620.48 /   419.48 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:# Mémoire (Mo) :  1237.36 /  1122.97 /   616.65 /   418.49 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,15]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,31]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,10]<stdout>:# Mémoire (Mo) :  1237.95 /  1122.85 /   619.46 /   419.14 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0012   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Mémoire (Mo) :  1237.00 /  1123.06 /   618.05 /   418.91 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Mémoire (Mo) :  1241.73 /  1129.23 /   622.05 /   419.77 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.02s, elaps:        0.04s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,19]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,25]<stdout>:# Mémoire (Mo) :  1244.65 /  1131.30 /   624.10 /   420.20 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Mémoire (Mo) :  1243.05 /  1131.51 /   624.07 /   420.40 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Fin commande #0012   user+syst:        0.04s (syst:        0.01s, elaps:        0.04s)
[1,22]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Mémoire (Mo) :  1244.70 /  1132.91 /   624.02 /   420.38 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,22]<stdout>:# Fin commande #0012   user+syst:        0.05s (syst:        0.00s, elaps:        0.04s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,20]<stdout>:# Mémoire (Mo) :  1251.75 /  1140.79 /   631.09 /   421.83 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,1]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,20]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :  1252.79 /  1143.80 /   631.53 /   422.13 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  1254.79 /  1146.75 /   633.98 /   422.56 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1244.44 /  1131.52 /   625.23 /   420.61 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,7]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.02s, elaps:        0.04s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,21]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,3]<stdout>:# Mémoire (Mo) :  1245.76 /  1134.39 /   625.13 /   420.50 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,3]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,28]<stdout>:# Mémoire (Mo) :  1253.36 /  1144.62 /   632.59 /   422.25 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Mémoire (Mo) :  1260.74 /  1154.09 /   638.43 /   423.66 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,28]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.02s, elaps:        0.04s)
[1,14]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,21]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.02s, elaps:        0.04s)
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Mémoire (Mo) :  1266.86 /  1162.14 /   643.70 /   424.82 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  1266.70 /  1162.27 /   644.42 /   425.01 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Mémoire (Mo) :  1261.97 /  1154.25 /   639.83 /   424.02 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,30]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,12]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Mémoire (Mo) :  1260.40 /  1153.96 /   638.92 /   423.81 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.02s, elaps:        0.04s)
[1,14]<stdout>:# Mémoire (Mo) :  1256.92 /  1149.12 /   635.36 /   422.90 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,30]<stdout>:# Mémoire (Mo) :  1257.74 /  1150.86 /   637.30 /   423.37 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.02s, elaps:        0.04s)
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1252.09 /  1142.98 /   631.61 /   422.02 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Fin commande #0012   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,2]<stdout>:# Mémoire (Mo) :  1268.69 /  1165.25 /   647.19 /   425.65 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Résultat commande #0014 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,2]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  1254.37 /  1143.16 /   625.76 /   420.76 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0014   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:  0 KSP unpreconditioned resid norm 2.792302114902e+02 true resid norm 2.792302114902e+02 ||r(i)||/||b|| 1.000000000000e+00
[1,0]<stdout>:  1 KSP unpreconditioned resid norm 4.059529112666e+01 true resid norm 4.059529112666e+01 ||r(i)||/||b|| 1.453828756925e-01
[1,0]<stdout>:  2 KSP unpreconditioned resid norm 6.418935311390e+00 true resid norm 6.418935311390e+00 ||r(i)||/||b|| 2.298796851936e-02
[1,0]<stdout>:  3 KSP unpreconditioned resid norm 2.764194754901e+00 true resid norm 2.764194754901e+00 ||r(i)||/||b|| 9.899339831995e-03
[1,0]<stdout>:  4 KSP unpreconditioned resid norm 1.558339657807e+00 true resid norm 1.558339657808e+00 ||r(i)||/||b|| 5.580841877715e-03
[1,0]<stdout>:  5 KSP unpreconditioned resid norm 8.952525585955e-01 true resid norm 8.952525585956e-01 ||r(i)||/||b|| 3.206145043611e-03
[1,0]<stdout>:  6 KSP unpreconditioned resid norm 5.496163880053e-01 true resid norm 5.496163880054e-01 ||r(i)||/||b|| 1.968327084208e-03
[1,0]<stdout>:  7 KSP unpreconditioned resid norm 3.533778711888e-01 true resid norm 3.533778711890e-01 ||r(i)||/||b|| 1.265543113344e-03
[1,0]<stdout>:  8 KSP unpreconditioned resid norm 2.397799479966e-01 true resid norm 2.397799479967e-01 ||r(i)||/||b|| 8.587177824243e-04
[1,0]<stdout>:  9 KSP unpreconditioned resid norm 1.634425391345e-01 true resid norm 1.634425391346e-01 ||r(i)||/||b|| 5.853325765231e-04
[1,0]<stdout>: 10 KSP unpreconditioned resid norm 1.120820784649e-01 true resid norm 1.120820784650e-01 ||r(i)||/||b|| 4.013966750476e-04
[1,0]<stdout>: 11 KSP unpreconditioned resid norm 7.748582618955e-02 true resid norm 7.748582618970e-02 ||r(i)||/||b|| 2.774980034437e-04
[1,0]<stdout>: 12 KSP unpreconditioned resid norm 5.287459513557e-02 true resid norm 5.287459513570e-02 ||r(i)||/||b|| 1.893584324329e-04
[1,0]<stdout>: 13 KSP unpreconditioned resid norm 3.625642598746e-02 true resid norm 3.625642598757e-02 ||r(i)||/||b|| 1.298442091709e-04
[1,0]<stdout>: 14 KSP unpreconditioned resid norm 2.508281447405e-02 true resid norm 2.508281447414e-02 ||r(i)||/||b|| 8.982844062711e-05
[1,0]<stdout>: 15 KSP unpreconditioned resid norm 1.743145220026e-02 true resid norm 1.743145220036e-02 ||r(i)||/||b|| 6.242681301330e-05
[1,0]<stdout>: 16 KSP unpreconditioned resid norm 1.234455935625e-02 true resid norm 1.234455935635e-02 ||r(i)||/||b|| 4.420925404337e-05
[1,0]<stdout>: 17 KSP unpreconditioned resid norm 8.749175494799e-03 true resid norm 8.749175494908e-03 ||r(i)||/||b|| 3.133319796671e-05
[1,0]<stdout>: 18 KSP unpreconditioned resid norm 6.185261229605e-03 true resid norm 6.185261229705e-03 ||r(i)||/||b|| 2.215111751947e-05
[1,0]<stdout>: 19 KSP unpreconditioned resid norm 4.365528321697e-03 true resid norm 4.365528321783e-03 ||r(i)||/||b|| 1.563415469438e-05
[1,0]<stdout>: 20 KSP unpreconditioned resid norm 3.054354230495e-03 true resid norm 3.054354230546e-03 ||r(i)||/||b|| 1.093848052560e-05
[1,0]<stdout>: 21 KSP unpreconditioned resid norm 2.140394130930e-03 true resid norm 2.140394130958e-03 ||r(i)||/||b|| 7.665338644895e-06
[1,0]<stdout>: 22 KSP unpreconditioned resid norm 1.506817641118e-03 true resid norm 1.506817641115e-03 ||r(i)||/||b|| 5.396327399796e-06
[1,0]<stdout>: 23 KSP unpreconditioned resid norm 1.051847477811e-03 true resid norm 1.051847477792e-03 ||r(i)||/||b|| 3.766954414348e-06
[1,0]<stdout>: 24 KSP unpreconditioned resid norm 7.332232648598e-04 true resid norm 7.332232648303e-04 ||r(i)||/||b|| 2.625873686508e-06
[1,0]<stdout>: 25 KSP unpreconditioned resid norm 5.106040083800e-04 true resid norm 5.106040083548e-04 ||r(i)||/||b|| 1.828613048816e-06
[1,0]<stdout>: 26 KSP unpreconditioned resid norm 3.529398587965e-04 true resid norm 3.529398587677e-04 ||r(i)||/||b|| 1.263974470686e-06
[1,0]<stdout>: 27 KSP unpreconditioned resid norm 2.424732067403e-04 true resid norm 2.424732067231e-04 ||r(i)||/||b|| 8.683630808753e-07
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt72
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt72
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt72
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt72
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt72
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt72
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:
[1,25]<stdout>:.. _stg1_txt72
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt72
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt72
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt72
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt72
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:
[1,24]<stdout>:.. _stg1_txt72
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt72
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:
[1,29]<stdout>:.. _stg1_txt72
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:
[1,27]<stdout>:.. _stg1_txt72
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt72
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt72
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt72
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt72
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:
[1,28]<stdout>:.. _stg1_txt72
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt72
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:
[1,30]<stdout>:.. _stg1_txt72
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt72
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt72
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt72
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:
[1,31]<stdout>:.. _stg1_txt72
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:
[1,26]<stdout>:.. _stg1_txt72
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt72
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt72
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt72
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt72
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,5]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,15]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,10]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,12]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,11]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,16]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,8]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,7]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,25]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,4]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,14]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,18]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,19]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,23]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,21]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,29]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,27]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,2]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,9]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,17]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,6]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,28]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,20]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,30]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,3]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,13]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,22]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,31]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,26]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,24]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,13]<stdout>:FIN(INFO_RESU='NON',
[1,13]<stdout>:    RETASSAGE='NON')
[1,13]<stdout>:
[1,31]<stdout>:FIN(INFO_RESU='NON',
[1,31]<stdout>:    RETASSAGE='NON')
[1,31]<stdout>:
[1,1]<stdout>:FIN(INFO_RESU='NON',
[1,1]<stdout>:    RETASSAGE='NON')
[1,1]<stdout>:
[1,15]<stdout>:FIN(INFO_RESU='NON',
[1,15]<stdout>:    RETASSAGE='NON')
[1,15]<stdout>:
[1,10]<stdout>:FIN(INFO_RESU='NON',
[1,10]<stdout>:    RETASSAGE='NON')
[1,10]<stdout>:
[1,11]<stdout>:FIN(INFO_RESU='NON',
[1,11]<stdout>:    RETASSAGE='NON')
[1,11]<stdout>:
[1,7]<stdout>:FIN(INFO_RESU='NON',
[1,7]<stdout>:    RETASSAGE='NON')
[1,7]<stdout>:
[1,25]<stdout>:FIN(INFO_RESU='NON',
[1,25]<stdout>:    RETASSAGE='NON')
[1,25]<stdout>:
[1,24]<stdout>:FIN(INFO_RESU='NON',
[1,24]<stdout>:    RETASSAGE='NON')
[1,24]<stdout>:
[1,19]<stdout>:FIN(INFO_RESU='NON',
[1,19]<stdout>:    RETASSAGE='NON')
[1,19]<stdout>:
[1,21]<stdout>:FIN(INFO_RESU='NON',
[1,21]<stdout>:    RETASSAGE='NON')
[1,21]<stdout>:
[1,29]<stdout>:FIN(INFO_RESU='NON',
[1,29]<stdout>:    RETASSAGE='NON')
[1,29]<stdout>:
[1,2]<stdout>:FIN(INFO_RESU='NON',
[1,2]<stdout>:    RETASSAGE='NON')
[1,2]<stdout>:
[1,9]<stdout>:FIN(INFO_RESU='NON',
[1,9]<stdout>:    RETASSAGE='NON')
[1,9]<stdout>:
[1,6]<stdout>:FIN(INFO_RESU='NON',
[1,6]<stdout>:    RETASSAGE='NON')
[1,6]<stdout>:
[1,20]<stdout>:FIN(INFO_RESU='NON',
[1,20]<stdout>:    RETASSAGE='NON')
[1,20]<stdout>:
[1,30]<stdout>:FIN(INFO_RESU='NON',
[1,30]<stdout>:    RETASSAGE='NON')
[1,30]<stdout>:
[1,26]<stdout>:FIN(INFO_RESU='NON',
[1,26]<stdout>:    RETASSAGE='NON')
[1,26]<stdout>:
[1,23]<stdout>:FIN(INFO_RESU='NON',
[1,23]<stdout>:    RETASSAGE='NON')
[1,23]<stdout>:
[1,27]<stdout>:FIN(INFO_RESU='NON',
[1,27]<stdout>:    RETASSAGE='NON')
[1,27]<stdout>:
[1,17]<stdout>:FIN(INFO_RESU='NON',
[1,17]<stdout>:    RETASSAGE='NON')
[1,17]<stdout>:
[1,28]<stdout>:FIN(INFO_RESU='NON',
[1,28]<stdout>:    RETASSAGE='NON')
[1,28]<stdout>:
[1,3]<stdout>:FIN(INFO_RESU='NON',
[1,3]<stdout>:    RETASSAGE='NON')
[1,3]<stdout>:
[1,22]<stdout>:FIN(INFO_RESU='NON',
[1,22]<stdout>:    RETASSAGE='NON')
[1,22]<stdout>:
[1,14]<stdout>:FIN(INFO_RESU='NON',
[1,14]<stdout>:    RETASSAGE='NON')
[1,14]<stdout>:
[1,5]<stdout>:FIN(INFO_RESU='NON',
[1,5]<stdout>:    RETASSAGE='NON')
[1,5]<stdout>:
[1,0]<stdout>:| Refinement       |           7 |
[1,0]<stdout>:| :--------------- | ----------: |
[1,0]<stdout>:| Number of cells  |   2 097 152 |
[1,0]<stdout>:| Number of nodes  |   2 146 689 |
[1,0]<stdout>:| Number of DOFs   |   6 440 067 |
[1,0]<stdout>:| Number of procs  |          32 |
[1,0]<stdout>:| Nb of DOFs/proc  |     201 252 |
[1,0]<stdout>:| Build mesh       |        7.43 |
[1,0]<stdout>:| Model            |        0.29 |
[1,0]<stdout>:| Material         |        0.06 |
[1,0]<stdout>:| Boundary conditions |        0.09 |
[1,0]<stdout>:| Create matrix    |        0.69 |
[1,0]<stdout>:| Numbering        |        1.36 |
[1,0]<stdout>:| Assembly         |        0.37 |
[1,0]<stdout>:| Build RHS        |        0.07 |
[1,0]<stdout>:| Factorize        |        4.22 |
[1,0]<stdout>:| Solve            |        3.79 |
[1,0]<stdout>:| Total            |       18.36 |
[1,12]<stdout>:FIN(INFO_RESU='NON',
[1,12]<stdout>:    RETASSAGE='NON')
[1,12]<stdout>:
[1,16]<stdout>:FIN(INFO_RESU='NON',
[1,16]<stdout>:    RETASSAGE='NON')
[1,16]<stdout>:
[1,8]<stdout>:FIN(INFO_RESU='NON',
[1,8]<stdout>:    RETASSAGE='NON')
[1,8]<stdout>:
[1,4]<stdout>:FIN(INFO_RESU='NON',
[1,4]<stdout>:    RETASSAGE='NON')
[1,4]<stdout>:
[1,18]<stdout>:FIN(INFO_RESU='NON',
[1,18]<stdout>:    RETASSAGE='NON')
[1,18]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt72
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0015 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,0]<stdout>:FIN(INFO_RESU='NON',
[1,0]<stdout>:    RETASSAGE='NON')
[1,0]<stdout>:
[1,20]<stdout>:No database in results, objects not saved on processor #20
[1,15]<stdout>:No database in results, objects not saved on processor #15
[1,25]<stdout>:No database in results, objects not saved on processor #25
[1,11]<stdout>:No database in results, objects not saved on processor #11
[1,7]<stdout>:No database in results, objects not saved on processor #7
[1,24]<stdout>:No database in results, objects not saved on processor #24
[1,17]<stdout>:No database in results, objects not saved on processor #17
[1,6]<stdout>:No database in results, objects not saved on processor #6
[1,28]<stdout>:No database in results, objects not saved on processor #28
[1,22]<stdout>:No database in results, objects not saved on processor #22
[1,21]<stdout>:No database in results, objects not saved on processor #21
[1,23]<stdout>:No database in results, objects not saved on processor #23
[1,10]<stdout>:No database in results, objects not saved on processor #10
[1,26]<stdout>:No database in results, objects not saved on processor #26
[1,13]<stdout>:No database in results, objects not saved on processor #13
[1,9]<stdout>:No database in results, objects not saved on processor #9
[1,19]<stdout>:No database in results, objects not saved on processor #19
[1,1]<stdout>:No database in results, objects not saved on processor #1
[1,29]<stdout>:No database in results, objects not saved on processor #29
[1,12]<stdout>:No database in results, objects not saved on processor #12
[1,8]<stdout>:No database in results, objects not saved on processor #8
[1,30]<stdout>:No database in results, objects not saved on processor #30
[1,16]<stdout>:No database in results, objects not saved on processor #16
[1,3]<stdout>:No database in results, objects not saved on processor #3
[1,18]<stdout>:No database in results, objects not saved on processor #18
[1,14]<stdout>:No database in results, objects not saved on processor #14
[1,2]<stdout>:No database in results, objects not saved on processor #2
[1,27]<stdout>:No database in results, objects not saved on processor #27
[1,4]<stdout>:No database in results, objects not saved on processor #4
[1,5]<stdout>:No database in results, objects not saved on processor #5
[1,31]<stdout>:No database in results, objects not saved on processor #31
[1,0]<stdout>:No database in results, objects not saved on processor #0
[1,0]<stdout>:****************************************************************************************************************************************************************
[1,0]<stdout>:***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
[1,0]<stdout>:****************************************************************************************************************************************************************
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------------ PETSc Performance Summary: ------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:petsc_aster on a  named 8b87b9d0b29a with 32 processors, by Unknown Thu Jan 23 16:34:11 2025
[1,0]<stdout>:Using 1 OpenMP threads
[1,0]<stdout>:Using Petsc Release Version 3.20.5, unknown 
[1,0]<stdout>:
[1,0]<stdout>:                         Max       Max/Min     Avg       Total
[1,0]<stdout>:Time (sec):           1.840e+01     1.000   1.840e+01
[1,0]<stdout>:Objects:              0.000e+00     0.000   0.000e+00
[1,0]<stdout>:Flops:                9.731e+09     1.193   8.971e+09  2.871e+11
[1,0]<stdout>:Flops/sec:            5.290e+08     1.193   4.876e+08  1.560e+10
[1,0]<stdout>:MPI Msg Count:        1.503e+04     3.786   8.332e+03  2.666e+05
[1,0]<stdout>:MPI Msg Len (bytes):  1.258e+08     2.257   1.036e+04  2.763e+09
[1,0]<stdout>:MPI Reductions:       1.295e+03     1.000
[1,0]<stdout>:
[1,0]<stdout>:Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
[1,0]<stdout>:                            e.g., VecAXPY() for real vectors of length N --> 2N flops
[1,0]<stdout>:                            and VecAXPY() for complex vectors of length N --> 8N flops
[1,0]<stdout>:
[1,0]<stdout>:Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
[1,0]<stdout>:                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
[1,0]<stdout>: 0:      Main Stage: 1.8396e+01 100.0%  2.8707e+11 100.0%  2.666e+05 100.0%  1.036e+04      100.0%  1.277e+03  98.6%
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:See the 'Profiling' chapter of the users' manual for details on interpreting output.
[1,0]<stdout>:Phase summary info:
[1,0]<stdout>:   Count: number of times phase was executed
[1,0]<stdout>:   Time and Flop: Max - maximum over all processors
[1,0]<stdout>:                  Ratio - ratio of maximum to minimum over all processors
[1,0]<stdout>:   Mess: number of messages sent
[1,0]<stdout>:   AvgLen: average message length (bytes)
[1,0]<stdout>:   Reduct: number of global reductions
[1,0]<stdout>:   Global: entire computation
[1,0]<stdout>:   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
[1,0]<stdout>:      %T - percent time in this phase         %F - percent flop in this phase
[1,0]<stdout>:      %M - percent messages in this phase     %L - percent message lengths in this phase
[1,0]<stdout>:      %R - percent reductions in this phase
[1,0]<stdout>:   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
[1,0]<stdout>:                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:--- Event Stage 0: Main Stage
[1,0]<stdout>:
[1,0]<stdout>:BuildTwoSided        244 1.0 4.1164e-01 8.4 0.00e+00 0.0 1.6e+04 4.0e+00 2.4e+02  1  0  6  0 19   1  0  6  0 19     0
[1,0]<stdout>:BuildTwoSidedF       184 1.0 4.0298e-01 8.5 0.00e+00 0.0 7.2e+03 7.8e+04 1.8e+02  1  0  3 20 14   1  0  3 20 14     0
[1,0]<stdout>:MatMult              528 1.0 3.1314e+00 1.1 6.38e+09 1.2 1.5e+05 8.7e+03 0.0e+00 16 66 56 47  0  16 66 56 47  0 60714
[1,0]<stdout>:MatMultAdd           108 1.0 1.6371e-01 1.2 2.75e+08 1.2 2.2e+04 1.1e+03 0.0e+00  1  3  8  1  0   1  3  8  1  0 49606
[1,0]<stdout>:MatMultTranspose     108 1.0 2.0652e-01 1.5 2.75e+08 1.2 2.2e+04 1.1e+03 0.0e+00  1  3  8  1  0   1  3  8  1  0 39338
[1,0]<stdout>:MatSolve              27 0.0 6.3793e-05 0.0 1.70e+04 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0   267
[1,0]<stdout>:MatLUFactorSym         1 1.0 9.1630e-06 2.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatLUFactorNum         1 1.0 5.2270e-06 9.0 3.74e+03 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0   715
[1,0]<stdout>:MatConvert             1 1.0 2.1498e-02 1.1 0.00e+00 0.0 5.7e+02 1.8e+03 1.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatScale               8 1.0 1.5719e-02 1.3 1.02e+07 1.2 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 19135
[1,0]<stdout>:MatResidual          108 1.0 5.1199e-01 1.0 1.03e+09 1.2 3.0e+04 7.2e+03 0.0e+00  3 11 11  8  0   3 11 11  8  0 59770
[1,0]<stdout>:MatAssemblyBegin     102 1.0 4.2395e-01 3.5 0.00e+00 0.0 7.2e+03 7.8e+04 5.3e+01  1  0  3 20  4   1  0  3 20  4     0
[1,0]<stdout>:MatAssemblyEnd       102 1.0 2.7302e-01 1.0 1.54e+06 3.7 1.8e+04 5.3e+02 2.2e+02  1  0  7  0 17   1  0  7  0 17   100
[1,0]<stdout>:MatGetRowIJ            1 0.0 1.7670e-06 0.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatCreateSubMat        4 1.0 5.7603e-03 1.0 0.00e+00 0.0 6.4e+02 4.5e+03 6.0e+01  0  0  0  0  5   0  0  0  0  5     0
[1,0]<stdout>:MatGetOrdering         1 0.0 1.8794e-05 0.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatCoarsen             4 1.0 1.3300e-01 1.0 5.06e+06 1.2 2.1e+04 9.2e+02 1.8e+02  1  0  8  1 14   1  0  8  1 14  1132
[1,0]<stdout>:MatZeroEntries         5 1.0 1.0234e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatAXPY                8 1.0 1.1413e-01 1.1 3.29e+06 1.2 2.3e+03 5.3e+02 2.8e+01  1  0  1  0  2   1  0  1  0  2   861
[1,0]<stdout>:MatTranspose          18 1.0 1.0500e-01 1.2 0.00e+00 0.0 1.1e+04 4.5e+03 7.2e+01  1  0  4  2  6   1  0  4  2  6     0
[1,0]<stdout>:MatMatMultSym         15 1.0 5.5513e-01 1.1 0.00e+00 0.0 6.3e+03 1.2e+04 5.0e+01  3  0  2  3  4   3  0  2  3  4     0
[1,0]<stdout>:MatMatMultNum         15 1.0 4.8563e-01 1.2 9.72e+08 1.3 1.2e+03 3.9e+04 5.0e+00  2 10  0  2  0   2 10  0  2  0 56588
[1,0]<stdout>:MatPtAPSymbolic        5 1.0 1.2178e+00 1.0 0.00e+00 0.0 8.0e+03 7.7e+04 3.5e+01  7  0  3 22  3   7  0  3 22  3     0
[1,0]<stdout>:MatPtAPNumeric         5 1.0 1.0924e+00 1.0 1.82e+09 1.3 6.5e+03 7.6e+04 3.0e+01  6 18  2 18  2   6 18  2 18  2 46571
[1,0]<stdout>:MatGetLocalMat        15 1.0 7.2627e-02 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatGetBrAoCol         15 1.0 4.3893e-02 1.4 0.00e+00 0.0 9.2e+03 6.7e+04 0.0e+00  0  0  3 22  0   0  0  3 22  0     0
[1,0]<stdout>:VecMDot               70 1.0 3.1376e-01 5.7 1.92e+08 1.1 0.0e+00 0.0e+00 7.0e+01  0  2  0  0  5   0  2  0  0  5 18331
[1,0]<stdout>:VecNorm              105 1.0 5.1256e-02 4.3 3.10e+07 1.1 0.0e+00 0.0e+00 1.0e+02  0  0  0  0  8   0  0  0  0  8 18171
[1,0]<stdout>:VecScale              75 1.0 4.3163e-03 1.2 9.07e+06 1.1 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 63129
[1,0]<stdout>:VecCopy              357 1.0 1.5341e-02 1.6 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecSet               380 1.0 3.9989e-03 2.3 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecAXPY               32 1.0 7.3332e-03 1.7 1.25e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 50986
[1,0]<stdout>:VecAYPX              677 1.0 5.9248e-02 1.8 5.37e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  1  0  0  0   0  1  0  0  0 27294
[1,0]<stdout>:VecAXPBYCZ           216 1.0 2.8370e-02 2.2 5.94e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  1  0  0  0   0  1  0  0  0 63021
[1,0]<stdout>:VecMAXPY             102 1.0 1.8405e-01 1.3 3.70e+08 1.1 0.0e+00 0.0e+00 0.0e+00  1  4  0  0  0   1  4  0  0  0 60313
[1,0]<stdout>:VecAssemblyBegin     133 1.0 1.2499e-02 5.8 0.00e+00 0.0 0.0e+00 0.0e+00 1.3e+02  0  0  0  0 10   0  0  0  0 10     0
[1,0]<stdout>:VecAssemblyEnd       133 1.0 5.7975e-05 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecPointwiseMult     476 1.0 2.9650e-02 1.3 2.62e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 26577
[1,0]<stdout>:VecScatterBegin      876 1.0 2.4860e-02 2.3 0.00e+00 0.0 2.0e+05 6.7e+03 0.0e+00  0  0 77 49  0   0  0 77 49  0     0
[1,0]<stdout>:VecScatterEnd        876 1.0 4.4342e-01 6.5 1.37e+05 2.6 0.0e+00 0.0e+00 0.0e+00  1  0  0  0  0   1  0  0  0  0     7
[1,0]<stdout>:VecNormalize          47 1.0 8.9370e-03 2.2 9.19e+06 1.1 0.0e+00 0.0e+00 4.7e+01  0  0  0  0  4   0  0  0  0  4 30937
[1,0]<stdout>:SFSetGraph            60 1.0 7.9654e-04 2.3 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFSetUp               60 1.0 1.0370e-02 2.5 0.00e+00 0.0 2.4e+04 5.4e+02 6.0e+01  0  0  9  0  5   0  0  9  0  5     0
[1,0]<stdout>:SFBcastBegin          30 1.0 2.6913e-04 2.0 0.00e+00 0.0 9.1e+03 8.2e+02 0.0e+00  0  0  3  0  0   0  0  3  0  0     0
[1,0]<stdout>:SFBcastEnd            30 1.0 1.0027e-03 2.7 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFReduceBegin          8 1.0 7.2592e-05 2.1 0.00e+00 0.0 1.5e+03 8.1e+02 0.0e+00  0  0  1  0  0   0  0  1  0  0     0
[1,0]<stdout>:SFReduceEnd            8 1.0 1.3177e-04 1.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFPack               914 1.0 1.4653e-02 2.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFUnpack             914 1.0 4.0343e-04 1.7 1.37e+05 2.6 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0  7310
[1,0]<stdout>:KSPSetUp              11 1.0 2.6702e-02 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:KSPSolve               1 1.0 3.7383e+00 1.0 7.20e+09 1.2 1.8e+05 7.0e+03 1.1e+02 20 75 68 46  9  20 75 68 46  9 57357
[1,0]<stdout>:KSPGMRESOrthog        67 1.0 3.9033e-01 3.4 3.73e+08 1.1 0.0e+00 0.0e+00 6.7e+01  1  4  0  0  5   1  4  0  0  5 28679
[1,0]<stdout>:PCSetUp_GAMG+          1 1.0 3.6584e+00 1.0 2.49e+09 1.3 7.7e+04 1.8e+04 7.5e+02 20 25 29 51 58  20 25 29 51 59 19473
[1,0]<stdout>: PCGAMGCreateG         4 1.0 2.8737e-01 1.0 1.97e+06 1.2 1.2e+04 3.9e+03 1.0e+02  2  0  5  2  8   2  0  5  2  8   204
[1,0]<stdout>: GAMG Coarsen          4 1.0 1.5067e-01 1.0 5.06e+06 1.2 2.1e+04 9.2e+02 1.8e+02  1  0  8  1 14   1  0  8  1 14   999
[1,0]<stdout>:  GAMG MIS/Agg         4 1.0 1.3302e-01 1.0 5.06e+06 1.2 2.1e+04 9.2e+02 1.8e+02  1  0  8  1 14   1  0  8  1 14  1132
[1,0]<stdout>: PCGAMGProl            4 1.0 1.2156e-01 1.0 0.00e+00 0.0 1.3e+04 3.1e+03 1.7e+02  1  0  5  1 13   1  0  5  1 13     0
[1,0]<stdout>:  GAMG Prol-col        4 1.0 5.4300e-02 1.0 0.00e+00 0.0 1.2e+04 1.2e+03 1.3e+02  0  0  4  1 10   0  0  4  1 10     0
[1,0]<stdout>:  GAMG Prol-lift       4 1.0 5.5582e-02 1.0 0.00e+00 0.0 1.5e+03 1.8e+04 2.4e+01  0  0  1  1  2   0  0  1  1  2     0
[1,0]<stdout>: PCGAMGOptProl         4 1.0 8.0452e-01 1.0 6.80e+08 1.2 1.8e+04 1.1e+04 1.3e+02  4  7  7  8 10   4  7  7  8 10 25235
[1,0]<stdout>:  GAMG smooth          4 1.0 5.4066e-01 1.0 2.40e+08 1.2 6.8e+03 1.9e+04 4.9e+01  3  2  3  5  4   3  2  3  5  4 13208
[1,0]<stdout>: PCGAMGCreateL         4 1.0 2.2826e+00 1.0 1.81e+09 1.3 1.3e+04 8.3e+04 1.6e+02 12 18  5 40 13  12 18  5 40 13 22224
[1,0]<stdout>:  GAMG PtAP            4 1.0 2.2701e+00 1.0 1.81e+09 1.3 1.2e+04 8.8e+04 5.3e+01 12 18  5 40  4  12 18  5 40  4 22347
[1,0]<stdout>:  GAMG Reduce          2 1.0 1.2547e-02 1.0 0.00e+00 0.0 8.3e+02 3.6e+03 1.1e+02  0  0  0  0  8   0  0  0  0  9     0
[1,0]<stdout>:PCGAMG Gal l00         1 1.0 1.5231e+00 1.0 1.25e+09 1.2 2.9e+03 1.6e+05 1.4e+01  8 13  1 17  1   8 13  1 17  1 24095
[1,0]<stdout>:PCGAMG Opt l00         1 1.0 3.9196e-01 1.0 2.07e+08 1.2 1.7e+03 5.6e+04 1.2e+01  2  2  1  3  1   2  2  1  3  1 15724
[1,0]<stdout>:PCGAMG Gal l01         1 1.0 5.3401e-01 1.0 4.04e+08 1.6 3.5e+03 1.3e+05 1.3e+01  3  4  1 17  1   3  4  1 17  1 19094
[1,0]<stdout>:PCGAMG Opt l01         1 1.0 3.0727e-02 1.0 1.58e+07 1.3 1.9e+03 8.9e+03 1.1e+01  0  0  1  1  1   0  0  1  1  1 14159
[1,0]<stdout>:PCGAMG Gal l02         1 1.0 2.1103e-01 1.0 2.15e+08 3.5 5.7e+03 3.0e+04 1.3e+01  1  1  2  6  1   1  1  2  6  1 18126
[1,0]<stdout>:PCGAMG Opt l02         1 1.0 1.5389e-02 1.0 8.56e+06 2.0 2.8e+03 4.6e+03 1.1e+01  0  0  1  0  1   0  0  1  0  1 12901
[1,0]<stdout>:PCGAMG Gal l03         1 1.0 2.0340e-03 1.0 1.59e+06 0.0 2.8e+02 2.7e+03 1.3e+01  0  0  0  0  1   0  0  0  0  1  4553
[1,0]<stdout>:PCGAMG Opt l03         1 1.0 1.0979e-03 1.0 6.17e+05 0.0 2.7e+02 1.8e+03 1.1e+01  0  0  0  0  1   0  0  0  0  1  3207
[1,0]<stdout>:PCSetUp                2 1.0 3.6584e+00 1.0 2.49e+09 1.3 7.7e+04 1.8e+04 7.5e+02 20 25 29 51 58  20 25 29 51 59 19473
[1,0]<stdout>:PCSetUpOnBlocks       27 1.0 1.0300e-04 1.4 3.74e+03 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0    36
[1,0]<stdout>:PCApply               27 1.0 2.4377e+00 1.1 4.76e+09 1.2 1.7e+05 5.6e+03 2.7e+01 13 49 62 33  2  13 49 62 33  2 58197
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Object Type          Creations   Destructions. Reports information only for process 0.
[1,0]<stdout>:
[1,0]<stdout>:--- Event Stage 0: Main Stage
[1,0]<stdout>:
[1,0]<stdout>:           Container    32             24
[1,0]<stdout>:              Matrix   188            142
[1,0]<stdout>:      Matrix Coarsen     4              4
[1,0]<stdout>:   Matrix Null Space     1              0
[1,0]<stdout>:              Vector   474            361
[1,0]<stdout>:           Index Set   121            110
[1,0]<stdout>:   Star Forest Graph    76             59
[1,0]<stdout>:       Krylov Solver    11              4
[1,0]<stdout>:      Preconditioner    11              4
[1,0]<stdout>:         PetscRandom     4              4
[1,0]<stdout>:    Distributed Mesh     8              4
[1,0]<stdout>:     Discrete System     8              4
[1,0]<stdout>:           Weak Form     8              4
[1,0]<stdout>:              Viewer     1              0
[1,0]<stdout>:========================================================================================================================
[1,0]<stdout>:Average time to get PetscTime(): 3.4e-08
[1,0]<stdout>:Average time for MPI_Barrier(): 5.3372e-06
[1,0]<stdout>:Average time for zero size MPI_Send(): 1.36606e-06
[1,0]<stdout>:#PETSc Option Table entries:
[1,0]<stdout>:-ksp_monitor_true_residual # (source: command line)
[1,0]<stdout>:-log_view # (source: command line)
[1,0]<stdout>:-pc_gamg_verbose 2 # (source: code)
[1,0]<stdout>:#End of PETSc Option Table entries
[1,0]<stdout>:Compiled without FORTRAN kernels
[1,0]<stdout>:Compiled with full precision matrices (default)
[1,0]<stdout>:sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
[1,0]<stdout>:Configure options: --with-debugging=0 --with-mpi=1 --with-ssl=0 --with-x=0 --with-64-bit-indices=0 --with-mumps-lib="-L/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/lib -lzmumps -ldmumps -lmumps_common -lpord -L/opt/aster/20240327/gcc13-openblas-ompi4/scotch-7.0.4/lib -lesmumps -lptscotch -lptscotcherr -lptscotcherrexit -lscotch -lscotcherr -lscotcherrexit -L/opt/aster/20240327/gcc13-openblas-ompi4/parmetis-4.0.3_aster3/lib -lparmetis" --with-mumps-include=/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/include --with-blaslapack-lib=-lopenblas --with-scalapack-lib="-L/opt/aster/20240327/gcc13-openblas-ompi4/scalapack-2.2.0/lib -lscalapack " --with-python=1 --with-petsc4py=1 --download-ml=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/pkg-trilinos-ml-v13.2.0.tar.gz --download-sowing=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/sowing_v1.1.26-p8.tar.gz --download-hypre=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/hypre_v2.29.0.tar.gz --download-superlu=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/SuperLU_v6.0.1.tar.gz --download-slepc=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/slepc-v3.20.1.tar.gz --download-slepc-configure-arguments="--with-slepc4py --download-arpack=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/arpack_3.9.0.tar.gz" --download-hpddm=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/hpddm_201eecd26177f88d7bb6287251877d8013fb64d2.tar.gz --with-openmp=1 --prefix=/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5 CC=mpicc CXX=mpicxx FC=mpif90 FCFLAGS=" -fallow-argument-mismatch" LIBS="-lgomp -lz"
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:Libraries compiled on 2025-01-23 15:23:23 on buildkitsandbox 
[1,0]<stdout>:Machine characteristics: Linux-5.10.230-223.885.amzn2.aarch64-aarch64-with-glibc2.40
[1,0]<stdout>:Using PETSc directory: /opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5
[1,0]<stdout>:Using PETSc arch: 
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using C compiler: mpicc  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -Wno-lto-type-mismatch -Wno-stringop-overflow -fstack-protector -fvisibility=hidden -g -O  -fopenmp 
[1,0]<stdout>:Using Fortran compiler: mpif90  -fPIC -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O   -fopenmp   -fopenmp
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using include paths: -I/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/include -I/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/include
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using C linker: mpicc
[1,0]<stdout>:Using Fortran linker: mpif90
[1,0]<stdout>:Using libraries: -Wl,-rpath,/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -lpetsc -Wl,-rpath,/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/scotch-7.0.4/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/parmetis-4.0.3_aster3/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/scalapack-2.2.0/lib -Wl,-rpath,/usr/lib/aarch64-linux-gnu/openmpi/lib/fortran/gfortran -L/usr/lib/aarch64-linux-gnu/openmpi/lib/fortran/gfortran -Wl,-rpath,/usr/lib/gcc/aarch64-linux-gnu/13 -L/usr/lib/gcc/aarch64-linux-gnu/13 -Wl,-rpath,/usr/lib/aarch64-linux-gnu -L/usr/lib/aarch64-linux-gnu -Wl,-rpath,/lib/aarch64-linux-gnu -L/lib/aarch64-linux-gnu -lHYPRE -lzmumps -ldmumps -lmumps_common -lpord -lesmumps -lptscotch -lptscotcherr -lptscotcherrexit -lscotch -lscotcherr -lscotcherrexit -lparmetis -lscalapack -lsuperlu -lml -lopenblas -lm -lgomp -lz -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lopen-rte -lopen-pal -lhwloc -levent_core -levent_pthreads -lgfortran -lm -lgfortran -lm -lgfortran -lgcc_s -lstdc++ -lgomp -lz
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:WARNING! There are options you set that were not used!
[1,0]<stdout>:WARNING! could be spelling mistake, etc!
[1,0]<stdout>:There is one unused database option. It is:
[1,0]<stdout>:Option left: name:-pc_gamg_verbose value: 2 source: code
[1,11]<stdout>:
[1,11]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,11]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,11]<stdout>: ║                                                                                                ║
[1,11]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,11]<stdout>: ║                                                                                                ║
[1,11]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,11]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,11]<stdout>: ║            aucune alarme                                                                       ║
[1,11]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,11]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,12]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,12]<stdout>: ║                                                                                                ║
[1,12]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,12]<stdout>: ║                                                                                                ║
[1,12]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,12]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,12]<stdout>: ║            aucune alarme                                                                       ║
[1,12]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,12]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,0]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,0]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,0]<stdout>: ║            aucune alarme                                                                       ║
[1,0]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,0]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,7]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,7]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,7]<stdout>: ║            aucune alarme                                                                       ║
[1,7]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,7]<stdout>:
[1,7]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,8]<stdout>:
[1,8]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,8]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,8]<stdout>: ║                                                                                                ║
[1,8]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,8]<stdout>: ║                                                                                                ║
[1,8]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,8]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,8]<stdout>: ║            aucune alarme                                                                       ║
[1,8]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,8]<stdout>:
[1,8]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,1]<stdout>:
[1,1]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,1]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,1]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,1]<stdout>: ║            aucune alarme                                                                       ║
[1,1]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,1]<stdout>:
[1,1]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,14]<stdout>:
[1,14]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,14]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,14]<stdout>: ║                                                                                                ║
[1,14]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,14]<stdout>: ║                                                                                                ║
[1,14]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,14]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,14]<stdout>: ║            aucune alarme                                                                       ║
[1,14]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,14]<stdout>:
[1,14]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,2]<stdout>:
[1,2]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,2]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,2]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,2]<stdout>: ║            aucune alarme                                                                       ║
[1,2]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,2]<stdout>:
[1,2]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,13]<stdout>:
[1,13]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,13]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,13]<stdout>: ║                                                                                                ║
[1,13]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,13]<stdout>: ║                                                                                                ║
[1,13]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,13]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,13]<stdout>: ║            aucune alarme                                                                       ║
[1,13]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,13]<stdout>:
[1,13]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,6]<stdout>:
[1,6]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,6]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,6]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,6]<stdout>: ║            aucune alarme                                                                       ║
[1,6]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,6]<stdout>:
[1,6]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,15]<stdout>:
[1,15]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,15]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,15]<stdout>: ║                                                                                                ║
[1,15]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,15]<stdout>: ║                                                                                                ║
[1,15]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,15]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,15]<stdout>: ║            aucune alarme                                                                       ║
[1,15]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,15]<stdout>:
[1,15]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,28]<stdout>:
[1,28]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,28]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,28]<stdout>: ║                                                                                                ║
[1,28]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,28]<stdout>: ║                                                                                                ║
[1,28]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,28]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,28]<stdout>: ║            aucune alarme                                                                       ║
[1,28]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,28]<stdout>:
[1,28]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,5]<stdout>:
[1,5]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,5]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,5]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,5]<stdout>: ║            aucune alarme                                                                       ║
[1,5]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,5]<stdout>:
[1,5]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,4]<stdout>:
[1,4]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,4]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,4]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,4]<stdout>: ║            aucune alarme                                                                       ║
[1,4]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,4]<stdout>:
[1,4]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,19]<stdout>:
[1,19]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,19]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,19]<stdout>: ║                                                                                                ║
[1,19]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,19]<stdout>: ║                                                                                                ║
[1,19]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,19]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,19]<stdout>: ║            aucune alarme                                                                       ║
[1,19]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,19]<stdout>:
[1,19]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,20]<stdout>:
[1,20]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,20]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,20]<stdout>: ║                                                                                                ║
[1,20]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,20]<stdout>: ║                                                                                                ║
[1,20]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,20]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,20]<stdout>: ║            aucune alarme                                                                       ║
[1,20]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,20]<stdout>:
[1,20]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,3]<stdout>:
[1,3]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,3]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,3]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,3]<stdout>: ║            aucune alarme                                                                       ║
[1,3]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,3]<stdout>:
[1,3]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,23]<stdout>:
[1,23]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,23]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,23]<stdout>: ║                                                                                                ║
[1,23]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,23]<stdout>: ║                                                                                                ║
[1,23]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,23]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,23]<stdout>: ║            aucune alarme                                                                       ║
[1,23]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,23]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,29]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,29]<stdout>: ║                                                                                                ║
[1,29]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,29]<stdout>: ║                                                                                                ║
[1,29]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,29]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,29]<stdout>: ║            aucune alarme                                                                       ║
[1,29]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,29]<stdout>:
[1,29]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,30]<stdout>:
[1,30]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,30]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,30]<stdout>: ║                                                                                                ║
[1,30]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,30]<stdout>: ║                                                                                                ║
[1,30]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,30]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,30]<stdout>: ║            aucune alarme                                                                       ║
[1,30]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,30]<stdout>:
[1,30]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,25]<stdout>:
[1,25]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,25]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,25]<stdout>: ║                                                                                                ║
[1,25]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,25]<stdout>: ║                                                                                                ║
[1,25]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,25]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,25]<stdout>: ║            aucune alarme                                                                       ║
[1,25]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,25]<stdout>:
[1,25]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,6]<stdout>:  
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     422.13 Mo
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     631.53 Mo
[1,6]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1855.97 Mo
[1,6]<stdout>:  
[1,6]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,6]<stdout>:  
[1,6]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,6]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  632  Mo.
[1,6]<stdout>:     TAILLE CUMULEE LIBEREE            :                  230  Mo.
[1,6]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1138772
[1,6]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1138260
[1,6]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,6]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,6]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,6]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,6]<stdout>:  
[1,6]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     422.13 Mo
[1,6]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,6]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,6]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     631.53 Mo
[1,6]<stdout>:     - LIMITE LES ACCES DISQUE
[1,6]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,6]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1855.97 Mo
[1,6]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,6]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,6]<stdout>:  
[1,6]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,16]<stdout>:
[1,16]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,16]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,16]<stdout>: ║                                                                                                ║
[1,16]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,16]<stdout>: ║                                                                                                ║
[1,16]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,16]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,16]<stdout>: ║            aucune alarme                                                                       ║
[1,16]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,16]<stdout>:
[1,16]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,16]<stdout>:  
[1,16]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     424.02 Mo
[1,16]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     639.83 Mo
[1,16]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1883.80 Mo
[1,16]<stdout>:  
[1,16]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,16]<stdout>:  
[1,16]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,16]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  640  Mo.
[1,16]<stdout>:     TAILLE CUMULEE LIBEREE            :                  230  Mo.
[1,16]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1130647
[1,16]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1130107
[1,16]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,16]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,16]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,16]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,16]<stdout>:  
[1,16]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     424.02 Mo
[1,16]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,16]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,16]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     639.83 Mo
[1,16]<stdout>:     - LIMITE LES ACCES DISQUE
[1,16]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,16]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1883.80 Mo
[1,16]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,16]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,16]<stdout>:  
[1,26]<stdout>:
[1,26]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,26]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,26]<stdout>: ║                                                                                                ║
[1,26]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,26]<stdout>: ║                                                                                                ║
[1,26]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,26]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,26]<stdout>: ║            aucune alarme                                                                       ║
[1,26]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,26]<stdout>:
[1,26]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,26]<stdout>:  
[1,26]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     415.08 Mo
[1,26]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     602.37 Mo
[1,26]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1753.66 Mo
[1,26]<stdout>:  
[1,26]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,26]<stdout>:  
[1,26]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,26]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  602  Mo.
[1,26]<stdout>:     TAILLE CUMULEE LIBEREE            :                  219  Mo.
[1,26]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1045865
[1,26]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1045366
[1,26]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,26]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,26]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,26]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,26]<stdout>:  
[1,26]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     415.08 Mo
[1,26]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,26]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,26]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     602.37 Mo
[1,26]<stdout>:     - LIMITE LES ACCES DISQUE
[1,26]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,26]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1753.66 Mo
[1,26]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,26]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,26]<stdout>:  
[1,15]<stdout>:  
[1,15]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     419.48 Mo
[1,15]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     620.48 Mo
[1,15]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1813.82 Mo
[1,15]<stdout>:  
[1,15]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,15]<stdout>:  
[1,15]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,15]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  620  Mo.
[1,15]<stdout>:     TAILLE CUMULEE LIBEREE            :                  230  Mo.
[1,15]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1138992
[1,15]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1138484
[1,15]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,15]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,15]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,15]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,15]<stdout>:  
[1,15]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     419.48 Mo
[1,15]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,15]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,15]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     620.48 Mo
[1,15]<stdout>:     - LIMITE LES ACCES DISQUE
[1,15]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,15]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1813.82 Mo
[1,15]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,15]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,15]<stdout>:  
[1,15]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,28]<stdout>:  
[1,28]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     422.25 Mo
[1,28]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     632.59 Mo
[1,28]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1865.58 Mo
[1,28]<stdout>:  
[1,28]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,28]<stdout>:  
[1,28]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,28]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  633  Mo.
[1,28]<stdout>:     TAILLE CUMULEE LIBEREE            :                  230  Mo.
[1,28]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1137434
[1,28]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1136906
[1,28]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,28]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,28]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,28]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,28]<stdout>:  
[1,28]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     422.25 Mo
[1,28]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,28]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,28]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     632.59 Mo
[1,28]<stdout>:     - LIMITE LES ACCES DISQUE
[1,28]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,28]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1865.58 Mo
[1,28]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,28]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,28]<stdout>:  
[1,28]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,18]<stdout>:
[1,18]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,18]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,18]<stdout>: ║                                                                                                ║
[1,18]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,18]<stdout>: ║                                                                                                ║
[1,18]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,18]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,18]<stdout>: ║            aucune alarme                                                                       ║
[1,18]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,18]<stdout>:
[1,18]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,18]<stdout>:  
[1,18]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     418.91 Mo
[1,18]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     618.05 Mo
[1,18]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1795.74 Mo
[1,18]<stdout>:  
[1,18]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,18]<stdout>:  
[1,18]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,18]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  618  Mo.
[1,18]<stdout>:     TAILLE CUMULEE LIBEREE            :                  226  Mo.
[1,18]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1106070
[1,18]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1105554
[1,18]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,18]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,18]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,18]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,18]<stdout>:  
[1,18]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     418.91 Mo
[1,18]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,18]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,18]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     618.05 Mo
[1,18]<stdout>:     - LIMITE LES ACCES DISQUE
[1,18]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,18]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1795.74 Mo
[1,18]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,18]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,18]<stdout>:  
[1,5]<stdout>:  
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     418.49 Mo
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     616.42 Mo
[1,5]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1792.15 Mo
[1,5]<stdout>:  
[1,5]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,5]<stdout>:  
[1,5]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,5]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  616  Mo.
[1,5]<stdout>:     TAILLE CUMULEE LIBEREE            :                  226  Mo.
[1,5]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1103803
[1,5]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1103300
[1,5]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,5]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,5]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,5]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,5]<stdout>:  
[1,5]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     418.49 Mo
[1,5]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,5]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,5]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     616.42 Mo
[1,5]<stdout>:     - LIMITE LES ACCES DISQUE
[1,5]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,5]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1792.15 Mo
[1,5]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,5]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,5]<stdout>:  
[1,5]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,4]<stdout>:  
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     422.02 Mo
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     631.61 Mo
[1,4]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1854.42 Mo
[1,4]<stdout>:  
[1,4]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,4]<stdout>:  
[1,4]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,4]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  632  Mo.
[1,4]<stdout>:     TAILLE CUMULEE LIBEREE            :                  229  Mo.
[1,4]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1128952
[1,4]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1128436
[1,4]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,4]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,4]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,4]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,4]<stdout>:  
[1,4]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     422.02 Mo
[1,4]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,4]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,4]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     631.61 Mo
[1,4]<stdout>:     - LIMITE LES ACCES DISQUE
[1,4]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,4]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1854.42 Mo
[1,4]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,4]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,4]<stdout>:  
[1,4]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,4]<stdout>:INFO './glob.1' deleted
[1,19]<stdout>:  
[1,19]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     420.40 Mo
[1,19]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     624.07 Mo
[1,19]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1824.46 Mo
[1,19]<stdout>:  
[1,19]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,19]<stdout>:  
[1,19]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,19]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  624  Mo.
[1,19]<stdout>:     TAILLE CUMULEE LIBEREE            :                  227  Mo.
[1,19]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1111513
[1,19]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1110992
[1,19]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,19]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,19]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,19]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,19]<stdout>:  
[1,19]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     420.40 Mo
[1,19]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,19]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,19]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     624.07 Mo
[1,19]<stdout>:     - LIMITE LES ACCES DISQUE
[1,19]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,19]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1824.46 Mo
[1,19]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,19]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,19]<stdout>:  
[1,19]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,20]<stdout>:  
[1,20]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     421.83 Mo
[1,20]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     631.09 Mo
[1,20]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1849.87 Mo
[1,20]<stdout>:  
[1,20]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,20]<stdout>:  
[1,20]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,20]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  631  Mo.
[1,20]<stdout>:     TAILLE CUMULEE LIBEREE            :                  226  Mo.
[1,20]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1098187
[1,20]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1097665
[1,20]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,20]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,20]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,20]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,20]<stdout>:  
[1,20]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     421.83 Mo
[1,20]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,20]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,20]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     631.09 Mo
[1,20]<stdout>:     - LIMITE LES ACCES DISQUE
[1,20]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,20]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1849.87 Mo
[1,20]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,20]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,20]<stdout>:  
[1,20]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,3]<stdout>:  
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     420.50 Mo
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     625.13 Mo
[1,3]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1851.43 Mo
[1,3]<stdout>:  
[1,3]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,3]<stdout>:  
[1,3]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,3]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  625  Mo.
[1,3]<stdout>:     TAILLE CUMULEE LIBEREE            :                  227  Mo.
[1,3]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1110954
[1,3]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1110452
[1,3]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,3]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,3]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,3]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,3]<stdout>:  
[1,3]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     420.50 Mo
[1,3]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,3]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,3]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     625.13 Mo
[1,3]<stdout>:     - LIMITE LES ACCES DISQUE
[1,3]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,3]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1851.43 Mo
[1,3]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,3]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,3]<stdout>:  
[1,3]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,3]<stdout>:INFO './glob.1' deleted
[1,23]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,23]<stdout>:  
[1,23]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     417.15 Mo
[1,23]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     611.01 Mo
[1,23]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1775.34 Mo
[1,23]<stdout>:  
[1,23]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,23]<stdout>:  
[1,23]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,23]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  611  Mo.
[1,23]<stdout>:     TAILLE CUMULEE LIBEREE            :                  223  Mo.
[1,23]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1072080
[1,23]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1071583
[1,23]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,23]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,23]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,23]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,23]<stdout>:  
[1,23]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     417.15 Mo
[1,23]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,23]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,23]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     611.01 Mo
[1,23]<stdout>:     - LIMITE LES ACCES DISQUE
[1,23]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,23]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1775.34 Mo
[1,23]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,23]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,23]<stdout>:  
[1,23]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,29]<stdout>:  
[1,29]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     418.33 Mo
[1,29]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     615.80 Mo
[1,29]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1798.83 Mo
[1,29]<stdout>:  
[1,29]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,29]<stdout>:  
[1,29]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,29]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  616  Mo.
[1,29]<stdout>:     TAILLE CUMULEE LIBEREE            :                  226  Mo.
[1,29]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1104295
[1,29]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1103780
[1,29]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,29]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,29]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,29]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,29]<stdout>:  
[1,29]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     418.33 Mo
[1,29]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,29]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,29]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     615.80 Mo
[1,29]<stdout>:     - LIMITE LES ACCES DISQUE
[1,29]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,29]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1798.83 Mo
[1,29]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,29]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,29]<stdout>:  
[1,29]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,30]<stdout>:  
[1,30]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     423.37 Mo
[1,30]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     637.30 Mo
[1,30]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1892.32 Mo
[1,30]<stdout>:  
[1,30]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,30]<stdout>:  
[1,30]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,30]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  637  Mo.
[1,30]<stdout>:     TAILLE CUMULEE LIBEREE            :                  230  Mo.
[1,30]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1138039
[1,30]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1137512
[1,30]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,30]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,30]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,30]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,30]<stdout>:  
[1,30]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     423.37 Mo
[1,30]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,30]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,30]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     637.30 Mo
[1,30]<stdout>:     - LIMITE LES ACCES DISQUE
[1,30]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,30]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1892.32 Mo
[1,30]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,30]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,30]<stdout>:  
[1,30]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,12]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,12]<stdout>:  
[1,12]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     424.82 Mo
[1,12]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     643.70 Mo
[1,12]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1909.62 Mo
[1,12]<stdout>:  
[1,12]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,12]<stdout>:  
[1,12]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,12]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  644  Mo.
[1,12]<stdout>:     TAILLE CUMULEE LIBEREE            :                  232  Mo.
[1,12]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1152745
[1,12]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1152208
[1,12]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,12]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,12]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,12]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,12]<stdout>:  
[1,12]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     424.82 Mo
[1,12]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,12]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,12]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     643.70 Mo
[1,12]<stdout>:     - LIMITE LES ACCES DISQUE
[1,12]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,12]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1909.62 Mo
[1,12]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,12]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,12]<stdout>:  
[1,12]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,11]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,11]<stdout>:  
[1,11]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     417.43 Mo
[1,11]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     612.07 Mo
[1,11]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1778.95 Mo
[1,11]<stdout>:  
[1,11]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,11]<stdout>:  
[1,11]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,11]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  612  Mo.
[1,11]<stdout>:     TAILLE CUMULEE LIBEREE            :                  225  Mo.
[1,11]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1092890
[1,11]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1092384
[1,11]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,11]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,11]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,11]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,11]<stdout>:  
[1,11]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     417.43 Mo
[1,11]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,11]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,11]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     612.07 Mo
[1,11]<stdout>:     - LIMITE LES ACCES DISQUE
[1,11]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,11]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1778.95 Mo
[1,11]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,11]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,11]<stdout>:  
[1,11]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,11]<stdout>:INFO './glob.1' deleted
[1,11]<stdout>:Deleting './glob.2': No such file or directory
[1,25]<stdout>:  
[1,25]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     420.20 Mo
[1,25]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     624.10 Mo
[1,25]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1826.47 Mo
[1,25]<stdout>:  
[1,25]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,25]<stdout>:  
[1,25]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,25]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  624  Mo.
[1,25]<stdout>:     TAILLE CUMULEE LIBEREE            :                  224  Mo.
[1,25]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1076810
[1,25]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1076279
[1,25]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,25]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,25]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,25]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,25]<stdout>:  
[1,25]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     420.20 Mo
[1,25]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,25]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,25]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     624.10 Mo
[1,25]<stdout>:     - LIMITE LES ACCES DISQUE
[1,25]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,25]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1826.47 Mo
[1,25]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,25]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,25]<stdout>:  
[1,25]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,25]<stdout>:INFO './glob.1' deleted
[1,25]<stdout>:Deleting './glob.2': No such file or directory
[1,25]<stdout>:INFO './vola.1' deleted
[1,25]<stdout>:Deleting './vola.2': No such file or directory
[1,27]<stdout>:
[1,27]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,27]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,27]<stdout>: ║                                                                                                ║
[1,27]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,27]<stdout>: ║                                                                                                ║
[1,27]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,27]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,27]<stdout>: ║            aucune alarme                                                                       ║
[1,27]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,27]<stdout>:
[1,27]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,27]<stdout>:  
[1,27]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     416.57 Mo
[1,27]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     608.86 Mo
[1,27]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1762.41 Mo
[1,27]<stdout>:  
[1,27]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,27]<stdout>:  
[1,27]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,27]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  609  Mo.
[1,27]<stdout>:     TAILLE CUMULEE LIBEREE            :                  220  Mo.
[1,27]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1047941
[1,27]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1047444
[1,27]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,27]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,27]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,27]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,27]<stdout>:  
[1,27]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     416.57 Mo
[1,27]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,27]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,27]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     608.86 Mo
[1,27]<stdout>:     - LIMITE LES ACCES DISQUE
[1,27]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,27]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1762.41 Mo
[1,27]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,27]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,27]<stdout>:  
[1,27]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,0]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,0]<stdout>:  
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     420.76 Mo
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     625.76 Mo
[1,0]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1834.92 Mo
[1,0]<stdout>:  
[1,0]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,0]<stdout>:  
[1,0]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,0]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  626  Mo.
[1,0]<stdout>:     TAILLE CUMULEE LIBEREE            :                  541  Mo.
[1,0]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              4014002
[1,0]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              4013496
[1,0]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,0]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,0]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,0]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,0]<stdout>:  
[1,0]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     420.76 Mo
[1,0]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,0]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,0]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     625.76 Mo
[1,0]<stdout>:     - LIMITE LES ACCES DISQUE
[1,0]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,0]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1834.92 Mo
[1,0]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,0]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,0]<stdout>:  
[1,0]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,0]<stdout>:INFO './glob.1' deleted
[1,0]<stdout>:Deleting './glob.2': No such file or directory
[1,7]<stdout>:  
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     422.56 Mo
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     633.98 Mo
[1,7]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1875.81 Mo
[1,7]<stdout>:  
[1,7]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,7]<stdout>:  
[1,7]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,7]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  634  Mo.
[1,7]<stdout>:     TAILLE CUMULEE LIBEREE            :                  228  Mo.
[1,7]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1117972
[1,7]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1117442
[1,7]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,7]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,7]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,7]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,7]<stdout>:  
[1,7]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     422.56 Mo
[1,7]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,7]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,7]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     633.98 Mo
[1,7]<stdout>:     - LIMITE LES ACCES DISQUE
[1,7]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,7]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1875.81 Mo
[1,7]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,7]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,7]<stdout>:  
[1,7]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,7]<stdout>:INFO './glob.1' deleted
[1,7]<stdout>:Deleting './glob.2': No such file or directory
[1,7]<stdout>:INFO './vola.1' deleted
[1,7]<stdout>:Deleting './vola.2': No such file or directory
[1,10]<stdout>:
[1,10]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,10]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,10]<stdout>: ║                                                                                                ║
[1,10]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,10]<stdout>: ║                                                                                                ║
[1,10]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,10]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,10]<stdout>: ║            aucune alarme                                                                       ║
[1,10]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,10]<stdout>:
[1,10]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,10]<stdout>:  
[1,10]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     419.14 Mo
[1,10]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     619.46 Mo
[1,10]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1802.06 Mo
[1,10]<stdout>:  
[1,10]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,10]<stdout>:  
[1,10]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,10]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  619  Mo.
[1,10]<stdout>:     TAILLE CUMULEE LIBEREE            :                  223  Mo.
[1,10]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1078773
[1,10]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1078265
[1,10]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,10]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,10]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,10]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,10]<stdout>:  
[1,10]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     419.14 Mo
[1,10]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,10]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,10]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     619.46 Mo
[1,10]<stdout>:     - LIMITE LES ACCES DISQUE
[1,10]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,10]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1802.06 Mo
[1,10]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,10]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,10]<stdout>:  
[1,10]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,10]<stdout>:INFO './glob.1' deleted
[1,9]<stdout>:
[1,9]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,9]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,9]<stdout>: ║                                                                                                ║
[1,9]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,9]<stdout>: ║                                                                                                ║
[1,9]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,9]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,9]<stdout>: ║            aucune alarme                                                                       ║
[1,9]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,9]<stdout>:
[1,9]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,9]<stdout>:  
[1,9]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     417.83 Mo
[1,9]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     613.91 Mo
[1,9]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1777.66 Mo
[1,9]<stdout>:  
[1,9]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,9]<stdout>:  
[1,9]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,9]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  614  Mo.
[1,9]<stdout>:     TAILLE CUMULEE LIBEREE            :                  222  Mo.
[1,9]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1062842
[1,9]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1062340
[1,9]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,9]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,9]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,9]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,9]<stdout>:  
[1,9]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     417.83 Mo
[1,9]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,9]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,9]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     613.91 Mo
[1,9]<stdout>:     - LIMITE LES ACCES DISQUE
[1,9]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,9]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1777.66 Mo
[1,9]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,9]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,9]<stdout>:  
[1,9]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,9]<stdout>:INFO './glob.1' deleted
[1,9]<stdout>:Deleting './glob.2': No such file or directory
[1,9]<stdout>:INFO './vola.1' deleted
[1,9]<stdout>:Deleting './vola.2': No such file or directory
[1,22]<stdout>:
[1,22]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,22]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,22]<stdout>: ║                                                                                                ║
[1,22]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,22]<stdout>: ║                                                                                                ║
[1,22]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,22]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,22]<stdout>: ║            aucune alarme                                                                       ║
[1,22]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,22]<stdout>:
[1,22]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,22]<stdout>:  
[1,22]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     420.38 Mo
[1,22]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     624.02 Mo
[1,22]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1827.57 Mo
[1,22]<stdout>:  
[1,22]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,22]<stdout>:  
[1,22]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,22]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  624  Mo.
[1,22]<stdout>:     TAILLE CUMULEE LIBEREE            :                  230  Mo.
[1,22]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1143511
[1,22]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1142998
[1,22]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,22]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,22]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,22]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,22]<stdout>:  
[1,22]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     420.38 Mo
[1,22]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,22]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,22]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     624.02 Mo
[1,22]<stdout>:     - LIMITE LES ACCES DISQUE
[1,22]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,22]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1827.57 Mo
[1,22]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,22]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,22]<stdout>:  
[1,22]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,22]<stdout>:INFO './glob.1' deleted
[1,22]<stdout>:Deleting './glob.2': No such file or directory
[1,22]<stdout>:INFO './vola.1' deleted
[1,22]<stdout>:Deleting './vola.2': No such file or directory
[1,21]<stdout>:
[1,21]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,21]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,21]<stdout>: ║                                                                                                ║
[1,21]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,21]<stdout>: ║                                                                                                ║
[1,21]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,21]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,21]<stdout>: ║            aucune alarme                                                                       ║
[1,21]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,21]<stdout>:
[1,21]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,21]<stdout>:  
[1,21]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     423.66 Mo
[1,21]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     638.43 Mo
[1,21]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1887.96 Mo
[1,21]<stdout>:  
[1,21]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,21]<stdout>:  
[1,21]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,21]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  638  Mo.
[1,21]<stdout>:     TAILLE CUMULEE LIBEREE            :                  233  Mo.
[1,21]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1168560
[1,21]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1168042
[1,21]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,21]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,21]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,21]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,21]<stdout>:  
[1,21]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     423.66 Mo
[1,21]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,21]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,21]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     638.43 Mo
[1,21]<stdout>:     - LIMITE LES ACCES DISQUE
[1,21]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,21]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1887.96 Mo
[1,21]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,21]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,21]<stdout>:  
[1,21]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,21]<stdout>:INFO './glob.1' deleted
[1,8]<stdout>:  
[1,8]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     425.01 Mo
[1,8]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     644.42 Mo
[1,8]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1908.18 Mo
[1,8]<stdout>:  
[1,8]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,8]<stdout>:  
[1,8]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,8]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  644  Mo.
[1,8]<stdout>:     TAILLE CUMULEE LIBEREE            :                  233  Mo.
[1,8]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1160386
[1,8]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1159852
[1,8]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,8]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,8]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,8]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,8]<stdout>:  
[1,8]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     425.01 Mo
[1,8]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,8]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,8]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     644.42 Mo
[1,8]<stdout>:     - LIMITE LES ACCES DISQUE
[1,8]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,8]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1908.18 Mo
[1,8]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,8]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,8]<stdout>:  
[1,8]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,8]<stdout>:INFO './glob.1' deleted
[1,8]<stdout>:Deleting './glob.2': No such file or directory
[1,8]<stdout>:INFO './vola.1' deleted
[1,8]<stdout>:Deleting './vola.2': No such file or directory
[1,1]<stdout>:  
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     420.61 Mo
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     625.23 Mo
[1,1]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1822.02 Mo
[1,1]<stdout>:  
[1,1]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,1]<stdout>:  
[1,1]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,1]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  625  Mo.
[1,1]<stdout>:     TAILLE CUMULEE LIBEREE            :                  226  Mo.
[1,1]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1098901
[1,1]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1098399
[1,1]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,1]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,1]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,1]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,1]<stdout>:  
[1,1]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     420.61 Mo
[1,1]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,1]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,1]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     625.23 Mo
[1,1]<stdout>:     - LIMITE LES ACCES DISQUE
[1,1]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,1]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1822.02 Mo
[1,1]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,1]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,1]<stdout>:  
[1,1]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,1]<stdout>:INFO './glob.1' deleted
[1,1]<stdout>:Deleting './glob.2': No such file or directory
[1,1]<stdout>:INFO './vola.1' deleted
[1,1]<stdout>:Deleting './vola.2': No such file or directory
[1,14]<stdout>:  
[1,14]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     422.90 Mo
[1,14]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     635.36 Mo
[1,14]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1875.16 Mo
[1,14]<stdout>:  
[1,14]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,14]<stdout>:  
[1,14]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,14]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  635  Mo.
[1,14]<stdout>:     TAILLE CUMULEE LIBEREE            :                  232  Mo.
[1,14]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1152481
[1,14]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1151960
[1,14]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,14]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,14]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,14]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,14]<stdout>:  
[1,14]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     422.90 Mo
[1,14]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,14]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,14]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     635.36 Mo
[1,14]<stdout>:     - LIMITE LES ACCES DISQUE
[1,14]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,14]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1875.16 Mo
[1,14]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,14]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,14]<stdout>:  
[1,14]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,14]<stdout>:INFO './glob.1' deleted
[1,14]<stdout>:Deleting './glob.2': No such file or directory
[1,14]<stdout>:INFO './vola.1' deleted
[1,14]<stdout>:Deleting './vola.2': No such file or directory
[1,2]<stdout>:  
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     425.65 Mo
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     647.19 Mo
[1,2]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1925.33 Mo
[1,2]<stdout>:  
[1,2]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,2]<stdout>:  
[1,2]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,2]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  647  Mo.
[1,2]<stdout>:     TAILLE CUMULEE LIBEREE            :                  233  Mo.
[1,2]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1161006
[1,2]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1160468
[1,2]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,2]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,2]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,2]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,2]<stdout>:  
[1,2]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     425.65 Mo
[1,2]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,2]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,2]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     647.19 Mo
[1,2]<stdout>:     - LIMITE LES ACCES DISQUE
[1,2]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,2]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1925.33 Mo
[1,2]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,2]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,2]<stdout>:  
[1,2]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,2]<stdout>:INFO './glob.1' deleted
[1,2]<stdout>:Deleting './glob.2': No such file or directory
[1,24]<stdout>:
[1,24]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,24]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,24]<stdout>: ║                                                                                                ║
[1,24]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,24]<stdout>: ║                                                                                                ║
[1,24]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,24]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,24]<stdout>: ║            aucune alarme                                                                       ║
[1,24]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,24]<stdout>:
[1,24]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,24]<stdout>:  
[1,24]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     423.81 Mo
[1,24]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     638.92 Mo
[1,24]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1890.20 Mo
[1,24]<stdout>:  
[1,24]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,24]<stdout>:  
[1,24]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,24]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  639  Mo.
[1,24]<stdout>:     TAILLE CUMULEE LIBEREE            :                  234  Mo.
[1,24]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1173758
[1,24]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1173240
[1,24]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,24]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,24]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,24]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,24]<stdout>:  
[1,24]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     423.81 Mo
[1,24]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,24]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,24]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     638.92 Mo
[1,24]<stdout>:     - LIMITE LES ACCES DISQUE
[1,24]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,24]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1890.20 Mo
[1,24]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,24]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,24]<stdout>:  
[1,24]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,24]<stdout>:INFO './glob.1' deleted
[1,24]<stdout>:Deleting './glob.2': No such file or directory
[1,24]<stdout>:INFO './vola.1' deleted
[1,24]<stdout>:Deleting './vola.2': No such file or directory
[1,17]<stdout>:
[1,17]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,17]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,17]<stdout>: ║                                                                                                ║
[1,17]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,17]<stdout>: ║                                                                                                ║
[1,17]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,17]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,17]<stdout>: ║            aucune alarme                                                                       ║
[1,17]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,17]<stdout>:
[1,17]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,17]<stdout>:  
[1,17]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     419.77 Mo
[1,17]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     622.05 Mo
[1,17]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1813.55 Mo
[1,17]<stdout>:  
[1,17]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,17]<stdout>:  
[1,17]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,17]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  622  Mo.
[1,17]<stdout>:     TAILLE CUMULEE LIBEREE            :                  225  Mo.
[1,17]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1094361
[1,17]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1093852
[1,17]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,17]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,17]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,17]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,17]<stdout>:  
[1,17]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     419.77 Mo
[1,17]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,17]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,17]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     622.05 Mo
[1,17]<stdout>:     - LIMITE LES ACCES DISQUE
[1,17]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,17]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1813.55 Mo
[1,17]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,17]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,17]<stdout>:  
[1,17]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,17]<stdout>:INFO './glob.1' deleted
[1,17]<stdout>:Deleting './glob.2': No such file or directory
[1,17]<stdout>:INFO './vola.1' deleted
[1,17]<stdout>:Deleting './vola.2': No such file or directory
[1,31]<stdout>:
[1,31]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,31]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,31]<stdout>: ║                                                                                                ║
[1,31]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,31]<stdout>: ║                                                                                                ║
[1,31]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,31]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,31]<stdout>: ║            aucune alarme                                                                       ║
[1,31]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,31]<stdout>:
[1,31]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,31]<stdout>:  
[1,31]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     418.49 Mo
[1,31]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     616.65 Mo
[1,31]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1809.24 Mo
[1,31]<stdout>:  
[1,31]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,31]<stdout>:  
[1,31]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,31]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  617  Mo.
[1,31]<stdout>:     TAILLE CUMULEE LIBEREE            :                  224  Mo.
[1,31]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1084343
[1,31]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1083832
[1,31]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,31]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,31]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,31]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,31]<stdout>:  
[1,31]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     418.49 Mo
[1,31]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,31]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,31]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     616.65 Mo
[1,31]<stdout>:     - LIMITE LES ACCES DISQUE
[1,31]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,31]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1809.24 Mo
[1,31]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,31]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,31]<stdout>:  
[1,31]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,31]<stdout>:INFO './glob.1' deleted
[1,31]<stdout>:Deleting './glob.2': No such file or directory
[1,31]<stdout>:INFO './vola.1' deleted
[1,31]<stdout>:Deleting './vola.2': No such file or directory
[1,13]<stdout>:  
[1,13]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     418.17 Mo
[1,13]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     615.54 Mo
[1,13]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1786.35 Mo
[1,13]<stdout>:  
[1,13]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,13]<stdout>:  
[1,13]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,13]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  616  Mo.
[1,13]<stdout>:     TAILLE CUMULEE LIBEREE            :                  223  Mo.
[1,13]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1071363
[1,13]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1070856
[1,13]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,13]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,13]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,13]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,13]<stdout>:  
[1,13]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     418.17 Mo
[1,13]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,13]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,13]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     615.54 Mo
[1,13]<stdout>:     - LIMITE LES ACCES DISQUE
[1,13]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,13]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1786.35 Mo
[1,13]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,13]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,13]<stdout>:  
[1,13]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,13]<stdout>:INFO './glob.1' deleted
[1,13]<stdout>:Deleting './glob.2': No such file or directory
[1,13]<stdout>:INFO './vola.1' deleted
[1,13]<stdout>:Deleting './vola.2': No such file or directory
[1,15]<stdout>:INFO './glob.1' deleted
[1,15]<stdout>:Deleting './glob.2': No such file or directory
[1,15]<stdout>:INFO './vola.1' deleted
[1,15]<stdout>:Deleting './vola.2': No such file or directory
[1,28]<stdout>:INFO './glob.1' deleted
[1,28]<stdout>:Deleting './glob.2': No such file or directory
[1,28]<stdout>:INFO './vola.1' deleted
[1,28]<stdout>:Deleting './vola.2': No such file or directory
[1,18]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,18]<stdout>:INFO './glob.1' deleted
[1,18]<stdout>:Deleting './glob.2': No such file or directory
[1,18]<stdout>:INFO './vola.1' deleted
[1,18]<stdout>:Deleting './vola.2': No such file or directory
[1,5]<stdout>:INFO './glob.1' deleted
[1,5]<stdout>:Deleting './glob.2': No such file or directory
[1,5]<stdout>:INFO './vola.1' deleted
[1,5]<stdout>:Deleting './vola.2': No such file or directory
[1,4]<stdout>:Deleting './glob.2': No such file or directory
[1,4]<stdout>:INFO './vola.1' deleted
[1,4]<stdout>:Deleting './vola.2': No such file or directory
[1,19]<stdout>:INFO './glob.1' deleted
[1,19]<stdout>:Deleting './glob.2': No such file or directory
[1,19]<stdout>:INFO './vola.1' deleted
[1,19]<stdout>:Deleting './vola.2': No such file or directory
[1,20]<stdout>:INFO './glob.1' deleted
[1,20]<stdout>:Deleting './glob.2': No such file or directory
[1,20]<stdout>:INFO './vola.1' deleted
[1,20]<stdout>:Deleting './vola.2': No such file or directory
[1,3]<stdout>:Deleting './glob.2': No such file or directory
[1,3]<stdout>:INFO './vola.1' deleted
[1,3]<stdout>:Deleting './vola.2': No such file or directory
[1,23]<stdout>:INFO './glob.1' deleted
[1,23]<stdout>:Deleting './glob.2': No such file or directory
[1,23]<stdout>:INFO './vola.1' deleted
[1,23]<stdout>:Deleting './vola.2': No such file or directory
[1,29]<stdout>:INFO './glob.1' deleted
[1,29]<stdout>:Deleting './glob.2': No such file or directory
[1,29]<stdout>:INFO './vola.1' deleted
[1,29]<stdout>:Deleting './vola.2': No such file or directory
[1,30]<stdout>:INFO './glob.1' deleted
[1,30]<stdout>:Deleting './glob.2': No such file or directory
[1,30]<stdout>:INFO './vola.1' deleted
[1,30]<stdout>:Deleting './vola.2': No such file or directory
[1,12]<stdout>:INFO './glob.1' deleted
[1,12]<stdout>:Deleting './glob.2': No such file or directory
[1,12]<stdout>:INFO './vola.1' deleted
[1,12]<stdout>:Deleting './vola.2': No such file or directory
[1,27]<stdout>:INFO './glob.1' deleted
[1,27]<stdout>:Deleting './glob.2': No such file or directory
[1,27]<stdout>:INFO './vola.1' deleted
[1,27]<stdout>:Deleting './vola.2': No such file or directory
[1,0]<stdout>:INFO './vola.1' deleted
[1,0]<stdout>:Deleting './vola.2': No such file or directory
[1,10]<stdout>:Deleting './glob.2': No such file or directory
[1,10]<stdout>:INFO './vola.1' deleted
[1,10]<stdout>:Deleting './vola.2': No such file or directory
[1,21]<stdout>:Deleting './glob.2': No such file or directory
[1,21]<stdout>:INFO './vola.1' deleted
[1,21]<stdout>:Deleting './vola.2': No such file or directory
[1,2]<stdout>:INFO './vola.1' deleted
[1,2]<stdout>:Deleting './vola.2': No such file or directory
[1,11]<stdout>:INFO './vola.1' deleted
[1,11]<stdout>:Deleting './vola.2': No such file or directory
[1,6]<stdout>:INFO './glob.1' deleted
[1,6]<stdout>:Deleting './glob.2': No such file or directory
[1,6]<stdout>:INFO './vola.1' deleted
[1,6]<stdout>:Deleting './vola.2': No such file or directory
[1,16]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,16]<stdout>:INFO './glob.1' deleted
[1,16]<stdout>:Deleting './glob.2': No such file or directory
[1,16]<stdout>:INFO './vola.1' deleted
[1,16]<stdout>:Deleting './vola.2': No such file or directory
[1,26]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:34:11
[1,26]<stdout>:INFO './glob.1' deleted
[1,26]<stdout>:Deleting './glob.2': No such file or directory
[1,26]<stdout>:INFO './vola.1' deleted
[1,26]<stdout>:Deleting './vola.2': No such file or directory
[1,25]<stdout>:
[1,25]<stdout>: ********************************************************************************
[1,25]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,25]<stdout>: ********************************************************************************
[1,25]<stdout>: * DEBUT                    :       0.00 :       0.29 :       0.29 :       0.29 *
[1,25]<stdout>: * CREA_MAILLAGE            :       0.95 :       1.03 :       1.98 :       1.99 *
[1,25]<stdout>: * AFFE_MODELE              :       0.28 :       0.01 :       0.29 :       0.30 *
[1,25]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,25]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,25]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,25]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,25]<stdout>: * CALC_MATR_ELEM           :       0.67 :       0.01 :       0.68 :       0.69 *
[1,25]<stdout>: * NUME_DDL                 :       0.51 :       0.86 :       1.37 :       1.36 *
[1,25]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,25]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,25]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,25]<stdout>: * FIN                      :       0.05 :       0.01 :       0.06 :       0.05 *
[1,25]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,25]<stdout>: *  . fortran               :       1.29 :       1.35 :       2.64 :       2.61 *
[1,25]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.18 *
[1,25]<stdout>: ********************************************************************************
[1,25]<stdout>: * TOTAL_JOB                :      14.93 :       3.79 :      18.72 :      18.72 *
[1,25]<stdout>: ********************************************************************************
[1,25]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * DEBUT                    :       0.01 :       0.28 :       0.29 :       0.29 *
[1,7]<stdout>: * CREA_MAILLAGE            :       0.91 :       1.07 :       1.98 :       1.98 *
[1,7]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.29 *
[1,7]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,7]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,7]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,7]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,7]<stdout>: * CALC_MATR_ELEM           :       0.67 :       0.04 :       0.71 :       0.71 *
[1,7]<stdout>: * NUME_DDL                 :       0.36 :       0.97 :       1.33 :       1.33 *
[1,7]<stdout>: * ASSE_MATRICE             :       0.30 :       0.06 :       0.36 :       0.37 *
[1,7]<stdout>: * CREA_CHAMP               :       0.00 :       0.01 :       0.01 :       0.03 *
[1,7]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.02 :       0.05 :       0.04 *
[1,7]<stdout>: * FIN                      :       0.06 :       0.01 :       0.07 :       0.05 *
[1,7]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,7]<stdout>: *  . fortran               :       1.25 :       1.36 :       2.61 :       2.60 *
[1,7]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.17 *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * TOTAL_JOB                :      14.78 :       3.95 :      18.73 :      18.73 *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>: * DEBUT                    :       0.02 :       0.26 :       0.28 :       0.29 *
[1,9]<stdout>: * CREA_MAILLAGE            :       1.07 :       0.91 :       1.98 :       1.98 *
[1,9]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,9]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,9]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,9]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,9]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,9]<stdout>: * CALC_MATR_ELEM           :       0.63 :       0.03 :       0.66 :       0.66 *
[1,9]<stdout>: * NUME_DDL                 :       0.57 :       0.82 :       1.39 :       1.39 *
[1,9]<stdout>: * ASSE_MATRICE             :       0.31 :       0.06 :       0.37 :       0.37 *
[1,9]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,9]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,9]<stdout>: * FIN                      :       0.05 :       0.01 :       0.06 :       0.05 *
[1,9]<stdout>: *  . check syntax          :       0.02 :       0.00 :       0.02 :       0.01 *
[1,9]<stdout>: *  . fortran               :       1.43 :       1.19 :       2.62 :       2.59 *
[1,9]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.16 *
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>: * TOTAL_JOB                :      15.19 :       3.54 :      18.73 :      18.72 *
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>: * DEBUT                    :       0.02 :       0.26 :       0.28 :       0.29 *
[1,8]<stdout>: * CREA_MAILLAGE            :       1.00 :       1.00 :       2.00 :       2.00 *
[1,8]<stdout>: * AFFE_MODELE              :       0.29 :       0.01 :       0.30 :       0.30 *
[1,8]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,8]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,8]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,8]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.05 *
[1,8]<stdout>: * CALC_MATR_ELEM           :       0.72 :       0.02 :       0.74 :       0.74 *
[1,8]<stdout>: * NUME_DDL                 :       0.41 :       0.89 :       1.30 :       1.30 *
[1,8]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,8]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,8]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,8]<stdout>: * FIN                      :       0.06 :       0.00 :       0.06 :       0.05 *
[1,8]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,8]<stdout>: *  . fortran               :       1.33 :       1.28 :       2.61 :       2.61 *
[1,8]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.16 *
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>: * TOTAL_JOB                :      14.90 :       3.80 :      18.70 :      18.72 *
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * DEBUT                    :       0.02 :       0.27 :       0.29 :       0.29 *
[1,1]<stdout>: * CREA_MAILLAGE            :       1.04 :       0.95 :       1.99 :       1.98 *
[1,1]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.29 *
[1,1]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,1]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,1]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,1]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,1]<stdout>: * CALC_MATR_ELEM           :       0.67 :       0.02 :       0.69 :       0.69 *
[1,1]<stdout>: * NUME_DDL                 :       0.45 :       0.91 :       1.36 :       1.36 *
[1,1]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,1]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,1]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,1]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,1]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,1]<stdout>: *  . fortran               :       1.40 :       1.23 :       2.63 :       2.60 *
[1,1]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.17 *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * TOTAL_JOB                :      15.15 :       3.57 :      18.72 :      18.72 *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>: * DEBUT                    :       0.01 :       0.27 :       0.28 :       0.29 *
[1,14]<stdout>: * CREA_MAILLAGE            :       1.07 :       0.91 :       1.98 :       1.98 *
[1,14]<stdout>: * AFFE_MODELE              :       0.28 :       0.00 :       0.28 :       0.30 *
[1,14]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,14]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,14]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,14]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.01 :       0.06 :       0.04 *
[1,14]<stdout>: * CALC_MATR_ELEM           :       0.67 :       0.03 :       0.70 :       0.71 *
[1,14]<stdout>: * NUME_DDL                 :       0.50 :       0.84 :       1.34 :       1.33 *
[1,14]<stdout>: * ASSE_MATRICE             :       0.30 :       0.06 :       0.36 :       0.37 *
[1,14]<stdout>: * CREA_CHAMP               :       0.01 :       0.00 :       0.01 :       0.03 *
[1,14]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.02 :       0.05 :       0.04 *
[1,14]<stdout>: * FIN                      :       0.06 :       0.01 :       0.07 :       0.05 *
[1,14]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,14]<stdout>: *  . fortran               :       1.41 :       1.20 :       2.61 :       2.60 *
[1,14]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.16 *
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>: * TOTAL_JOB                :      15.01 :       3.71 :      18.72 :      18.72 *
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>: ********************************************************************************
[1,24]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,24]<stdout>: ********************************************************************************
[1,24]<stdout>: * DEBUT                    :       0.05 :       0.24 :       0.29 :       0.29 *
[1,24]<stdout>: * CREA_MAILLAGE            :       0.92 :       1.07 :       1.99 :       1.99 *
[1,24]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,24]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,24]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,24]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,24]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.01 :       0.06 :       0.05 *
[1,24]<stdout>: * CALC_MATR_ELEM           :       0.67 :       0.05 :       0.72 :       0.72 *
[1,24]<stdout>: * NUME_DDL                 :       0.44 :       0.88 :       1.32 :       1.32 *
[1,24]<stdout>: * ASSE_MATRICE             :       0.32 :       0.06 :       0.38 :       0.37 *
[1,24]<stdout>: * CREA_CHAMP               :       0.02 :       0.00 :       0.02 :       0.03 *
[1,24]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,24]<stdout>: * FIN                      :       0.06 :       0.00 :       0.06 :       0.05 *
[1,24]<stdout>: *  . check syntax          :       0.01 :       0.01 :       0.02 :       0.01 *
[1,24]<stdout>: *  . fortran               :       1.30 :       1.31 :       2.61 :       2.60 *
[1,24]<stdout>: *  . cleanup               :       0.14 :       0.01 :       0.15 :       0.17 *
[1,24]<stdout>: ********************************************************************************
[1,24]<stdout>: * TOTAL_JOB                :      14.94 :       3.80 :      18.74 :      18.72 *
[1,24]<stdout>: ********************************************************************************
[1,24]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>: ********************************************************************************
[1,17]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,17]<stdout>: ********************************************************************************
[1,17]<stdout>: * DEBUT                    :       0.02 :       0.27 :       0.29 :       0.29 *
[1,17]<stdout>: * CREA_MAILLAGE            :       1.02 :       0.97 :       1.99 :       1.99 *
[1,17]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,17]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.01 :       0.04 :       0.03 *
[1,17]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,17]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,17]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,17]<stdout>: * CALC_MATR_ELEM           :       0.66 :       0.02 :       0.68 :       0.68 *
[1,17]<stdout>: * NUME_DDL                 :       0.40 :       0.97 :       1.37 :       1.37 *
[1,17]<stdout>: * ASSE_MATRICE             :       0.33 :       0.04 :       0.37 :       0.37 *
[1,17]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.03 *
[1,17]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,17]<stdout>: * FIN                      :       0.05 :       0.01 :       0.06 :       0.05 *
[1,17]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,17]<stdout>: *  . fortran               :       1.35 :       1.27 :       2.62 :       2.60 *
[1,17]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.16 *
[1,17]<stdout>: ********************************************************************************
[1,17]<stdout>: * TOTAL_JOB                :      14.95 :       3.77 :      18.72 :      18.72 *
[1,17]<stdout>: ********************************************************************************
[1,17]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * DEBUT                    :       0.02 :       0.27 :       0.29 :       0.29 *
[1,6]<stdout>: * CREA_MAILLAGE            :       1.05 :       0.93 :       1.98 :       1.98 *
[1,6]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,6]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,6]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,6]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,6]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,6]<stdout>: * CALC_MATR_ELEM           :       0.69 :       0.02 :       0.71 :       0.70 *
[1,6]<stdout>: * NUME_DDL                 :       0.44 :       0.90 :       1.34 :       1.34 *
[1,6]<stdout>: * ASSE_MATRICE             :       0.31 :       0.06 :       0.37 :       0.37 *
[1,6]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,6]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,6]<stdout>: * FIN                      :       0.05 :       0.01 :       0.06 :       0.05 *
[1,6]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.00 *
[1,6]<stdout>: *  . fortran               :       1.40 :       1.21 :       2.61 :       2.60 *
[1,6]<stdout>: *  . cleanup               :       0.17 :       0.00 :       0.17 :       0.17 *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * TOTAL_JOB                :      15.14 :       3.58 :      18.72 :      18.72 *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>: ********************************************************************************
[1,16]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,16]<stdout>: ********************************************************************************
[1,16]<stdout>: * DEBUT                    :       0.02 :       0.27 :       0.29 :       0.28 *
[1,16]<stdout>: * CREA_MAILLAGE            :       0.98 :       1.01 :       1.99 :       1.99 *
[1,16]<stdout>: * AFFE_MODELE              :       0.28 :       0.01 :       0.29 :       0.30 *
[1,16]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,16]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,16]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.01 :       0.06 :       0.04 *
[1,16]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.05 *
[1,16]<stdout>: * CALC_MATR_ELEM           :       0.70 :       0.03 :       0.73 :       0.72 *
[1,16]<stdout>: * NUME_DDL                 :       0.40 :       0.91 :       1.31 :       1.32 *
[1,16]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,16]<stdout>: * CREA_CHAMP               :       0.02 :       0.00 :       0.02 :       0.03 *
[1,16]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.02 :       0.05 :       0.04 *
[1,16]<stdout>: * FIN                      :       0.06 :       0.00 :       0.06 :       0.05 *
[1,16]<stdout>: *  . check syntax          :       0.02 :       0.00 :       0.02 :       0.01 *
[1,16]<stdout>: *  . fortran               :       1.32 :       1.29 :       2.61 :       2.61 *
[1,16]<stdout>: *  . cleanup               :       0.14 :       0.01 :       0.15 :       0.17 *
[1,16]<stdout>: ********************************************************************************
[1,16]<stdout>: * TOTAL_JOB                :      14.93 :       3.79 :      18.72 :      18.72 *
[1,16]<stdout>: ********************************************************************************
[1,16]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>: * DEBUT                    :       0.02 :       0.27 :       0.29 :       0.29 *
[1,15]<stdout>: * CREA_MAILLAGE            :       1.19 :       0.79 :       1.98 :       1.99 *
[1,15]<stdout>: * AFFE_MODELE              :       0.29 :       0.01 :       0.30 :       0.30 *
[1,15]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,15]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,15]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,15]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,15]<stdout>: * CALC_MATR_ELEM           :       0.66 :       0.01 :       0.67 :       0.68 *
[1,15]<stdout>: * NUME_DDL                 :       0.44 :       0.94 :       1.38 :       1.37 *
[1,15]<stdout>: * ASSE_MATRICE             :       0.30 :       0.07 :       0.37 :       0.37 *
[1,15]<stdout>: * CREA_CHAMP               :       0.01 :       0.01 :       0.02 :       0.03 *
[1,15]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,15]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,15]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,15]<stdout>: *  . fortran               :       1.54 :       1.07 :       2.61 :       2.60 *
[1,15]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.16 *
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>: * TOTAL_JOB                :      15.14 :       3.59 :      18.73 :      18.73 *
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>: ********************************************************************************
[1,28]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,28]<stdout>: ********************************************************************************
[1,28]<stdout>: * DEBUT                    :       0.02 :       0.27 :       0.29 :       0.29 *
[1,28]<stdout>: * CREA_MAILLAGE            :       0.98 :       1.00 :       1.98 :       1.98 *
[1,28]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,28]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,28]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,28]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,28]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.01 :       0.06 :       0.04 *
[1,28]<stdout>: * CALC_MATR_ELEM           :       0.69 :       0.02 :       0.71 :       0.71 *
[1,28]<stdout>: * NUME_DDL                 :       0.53 :       0.80 :       1.33 :       1.33 *
[1,28]<stdout>: * ASSE_MATRICE             :       0.32 :       0.06 :       0.38 :       0.37 *
[1,28]<stdout>: * CREA_CHAMP               :       0.01 :       0.00 :       0.01 :       0.03 *
[1,28]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.02 :       0.05 :       0.04 *
[1,28]<stdout>: * FIN                      :       0.05 :       0.01 :       0.06 :       0.05 *
[1,28]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,28]<stdout>: *  . fortran               :       1.33 :       1.29 :       2.62 :       2.59 *
[1,28]<stdout>: *  . cleanup               :       0.14 :       0.01 :       0.15 :       0.17 *
[1,28]<stdout>: ********************************************************************************
[1,28]<stdout>: * TOTAL_JOB                :      15.07 :       3.67 :      18.74 :      18.72 *
[1,28]<stdout>: ********************************************************************************
[1,28]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * DEBUT                    :       0.02 :       0.27 :       0.29 :       0.29 *
[1,5]<stdout>: * CREA_MAILLAGE            :       1.33 :       0.66 :       1.99 :       1.98 *
[1,5]<stdout>: * AFFE_MODELE              :       0.29 :       0.01 :       0.30 :       0.30 *
[1,5]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,5]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,5]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,5]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,5]<stdout>: * CALC_MATR_ELEM           :       0.62 :       0.04 :       0.66 :       0.67 *
[1,5]<stdout>: * NUME_DDL                 :       0.52 :       0.87 :       1.39 :       1.38 *
[1,5]<stdout>: * ASSE_MATRICE             :       0.31 :       0.06 :       0.37 :       0.37 *
[1,5]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,5]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,5]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,5]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.00 *
[1,5]<stdout>: *  . fortran               :       1.66 :       0.95 :       2.61 :       2.59 *
[1,5]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.17 *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * TOTAL_JOB                :      15.56 :       3.16 :      18.72 :      18.72 *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * DEBUT                    :       0.04 :       0.25 :       0.29 :       0.29 *
[1,4]<stdout>: * CREA_MAILLAGE            :       1.09 :       0.90 :       1.99 :       1.98 *
[1,4]<stdout>: * AFFE_MODELE              :       0.29 :       0.01 :       0.30 :       0.30 *
[1,4]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,4]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,4]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,4]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,4]<stdout>: * CALC_MATR_ELEM           :       0.68 :       0.03 :       0.71 :       0.71 *
[1,4]<stdout>: * NUME_DDL                 :       0.41 :       0.92 :       1.33 :       1.34 *
[1,4]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,4]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,4]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,4]<stdout>: * FIN                      :       0.05 :       0.01 :       0.06 :       0.05 *
[1,4]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,4]<stdout>: *  . fortran               :       1.44 :       1.16 :       2.60 :       2.60 *
[1,4]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.16 *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * TOTAL_JOB                :      15.13 :       3.58 :      18.71 :      18.72 *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>: ********************************************************************************
[1,19]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,19]<stdout>: ********************************************************************************
[1,19]<stdout>: * DEBUT                    :       0.01 :       0.28 :       0.29 :       0.28 *
[1,19]<stdout>: * CREA_MAILLAGE            :       1.01 :       0.98 :       1.99 :       1.98 *
[1,19]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,19]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,19]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.01 :       0.04 :       0.03 *
[1,19]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,19]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,19]<stdout>: * CALC_MATR_ELEM           :       0.64 :       0.04 :       0.68 :       0.69 *
[1,19]<stdout>: * NUME_DDL                 :       0.43 :       0.94 :       1.37 :       1.36 *
[1,19]<stdout>: * ASSE_MATRICE             :       0.31 :       0.06 :       0.37 :       0.37 *
[1,19]<stdout>: * CREA_CHAMP               :       0.00 :       0.01 :       0.01 :       0.03 *
[1,19]<stdout>: * CALC_CHAR_CINE           :       0.04 :       0.01 :       0.05 :       0.04 *
[1,19]<stdout>: * FIN                      :       0.05 :       0.01 :       0.06 :       0.05 *
[1,19]<stdout>: *  . check syntax          :       0.01 :       0.02 :       0.03 :       0.00 *
[1,19]<stdout>: *  . fortran               :       1.34 :       1.27 :       2.61 :       2.59 *
[1,19]<stdout>: *  . cleanup               :       0.14 :       0.01 :       0.15 :       0.16 *
[1,19]<stdout>: ********************************************************************************
[1,19]<stdout>: * TOTAL_JOB                :      15.05 :       3.68 :      18.73 :      18.73 *
[1,19]<stdout>: ********************************************************************************
[1,19]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>: ********************************************************************************
[1,23]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,23]<stdout>: ********************************************************************************
[1,23]<stdout>: * DEBUT                    :       0.03 :       0.25 :       0.28 :       0.27 *
[1,23]<stdout>: * CREA_MAILLAGE            :       1.03 :       0.94 :       1.97 :       1.98 *
[1,23]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,23]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,23]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,23]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,23]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,23]<stdout>: * CALC_MATR_ELEM           :       0.63 :       0.02 :       0.65 :       0.65 *
[1,23]<stdout>: * NUME_DDL                 :       0.63 :       0.77 :       1.40 :       1.40 *
[1,23]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,23]<stdout>: * CREA_CHAMP               :       0.01 :       0.00 :       0.01 :       0.03 *
[1,23]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,23]<stdout>: * FIN                      :       0.05 :       0.01 :       0.06 :       0.05 *
[1,23]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,23]<stdout>: *  . fortran               :       1.39 :       1.20 :       2.59 :       2.58 *
[1,23]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.18 *
[1,23]<stdout>: ********************************************************************************
[1,23]<stdout>: * TOTAL_JOB                :      15.30 :       3.43 :      18.73 :      18.73 *
[1,23]<stdout>: ********************************************************************************
[1,23]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>: ********************************************************************************
[1,29]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,29]<stdout>: ********************************************************************************
[1,29]<stdout>: * DEBUT                    :       0.04 :       0.24 :       0.28 :       0.29 *
[1,29]<stdout>: * CREA_MAILLAGE            :       1.25 :       0.74 :       1.99 :       1.99 *
[1,29]<stdout>: * AFFE_MODELE              :       0.29 :       0.01 :       0.30 :       0.30 *
[1,29]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,29]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,29]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,29]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,29]<stdout>: * CALC_MATR_ELEM           :       0.65 :       0.02 :       0.67 :       0.67 *
[1,29]<stdout>: * NUME_DDL                 :       0.53 :       0.85 :       1.38 :       1.38 *
[1,29]<stdout>: * ASSE_MATRICE             :       0.31 :       0.06 :       0.37 :       0.37 *
[1,29]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,29]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,29]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,29]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,29]<stdout>: *  . fortran               :       1.59 :       1.00 :       2.59 :       2.60 *
[1,29]<stdout>: *  . cleanup               :       0.17 :       0.00 :       0.17 :       0.17 *
[1,29]<stdout>: ********************************************************************************
[1,29]<stdout>: * TOTAL_JOB                :      15.36 :       3.34 :      18.70 :      18.72 *
[1,29]<stdout>: ********************************************************************************
[1,29]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>: ********************************************************************************
[1,26]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,26]<stdout>: ********************************************************************************
[1,26]<stdout>: * DEBUT                    :       0.02 :       0.27 :       0.29 :       0.29 *
[1,26]<stdout>: * CREA_MAILLAGE            :       1.36 :       0.62 :       1.98 :       1.98 *
[1,26]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,26]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,26]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,26]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,26]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,26]<stdout>: * CALC_MATR_ELEM           :       0.59 :       0.03 :       0.62 :       0.62 *
[1,26]<stdout>: * NUME_DDL                 :       0.56 :       0.88 :       1.44 :       1.43 *
[1,26]<stdout>: * ASSE_MATRICE             :       0.31 :       0.06 :       0.37 :       0.37 *
[1,26]<stdout>: * CREA_CHAMP               :       0.01 :       0.01 :       0.02 :       0.03 *
[1,26]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.03 *
[1,26]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,26]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,26]<stdout>: *  . fortran               :       1.71 :       0.90 :       2.61 :       2.60 *
[1,26]<stdout>: *  . cleanup               :       0.17 :       0.00 :       0.17 :       0.15 *
[1,26]<stdout>: ********************************************************************************
[1,26]<stdout>: * TOTAL_JOB                :      15.38 :       3.34 :      18.72 :      18.72 *
[1,26]<stdout>: ********************************************************************************
[1,26]<stdout>:
[1,23]<stdout>:# Mémoire (Mo) :  1775.34 /  1769.23 /   611.01 /   417.15 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:
[1,30]<stdout>: ********************************************************************************
[1,30]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,30]<stdout>: ********************************************************************************
[1,30]<stdout>: * DEBUT                    :       0.00 :       0.28 :       0.28 :       0.29 *
[1,30]<stdout>: * CREA_MAILLAGE            :       1.00 :       0.99 :       1.99 :       1.99 *
[1,30]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.29 *
[1,30]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,30]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,30]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,30]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.05 *
[1,30]<stdout>: * CALC_MATR_ELEM           :       0.68 :       0.03 :       0.71 :       0.72 *
[1,30]<stdout>: * NUME_DDL                 :       0.43 :       0.89 :       1.32 :       1.32 *
[1,30]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,30]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,30]<stdout>: * CALC_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,30]<stdout>: * FIN                      :       0.06 :       0.00 :       0.06 :       0.06 *
[1,30]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,30]<stdout>: *  . fortran               :       1.33 :       1.28 :       2.61 :       2.60 *
[1,30]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.16 *
[1,30]<stdout>: ********************************************************************************
[1,30]<stdout>: * TOTAL_JOB                :      14.99 :       3.72 :      18.71 :      18.73 *
[1,30]<stdout>: ********************************************************************************
[1,30]<stdout>:
[1,26]<stdout>:# Mémoire (Mo) :  1753.66 /  1725.30 /   602.37 /   415.08 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>: * DEBUT                    :       0.02 :       0.26 :       0.28 :       0.29 *
[1,12]<stdout>: * CREA_MAILLAGE            :       0.95 :       1.04 :       1.99 :       1.99 *
[1,12]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,12]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,12]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,12]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,12]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.01 :       0.05 :       0.05 *
[1,12]<stdout>: * CALC_MATR_ELEM           :       0.70 :       0.03 :       0.73 :       0.73 *
[1,12]<stdout>: * NUME_DDL                 :       0.45 :       0.86 :       1.31 :       1.31 *
[1,12]<stdout>: * ASSE_MATRICE             :       0.30 :       0.07 :       0.37 :       0.37 *
[1,12]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,12]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,12]<stdout>: * FIN                      :       0.05 :       0.01 :       0.06 :       0.06 *
[1,12]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,12]<stdout>: *  . fortran               :       1.30 :       1.33 :       2.63 :       2.62 *
[1,12]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.16 *
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>: * TOTAL_JOB                :      14.90 :       3.82 :      18.72 :      18.74 *
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>: ********************************************************************************
[1,27]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,27]<stdout>: ********************************************************************************
[1,27]<stdout>: * DEBUT                    :       0.01 :       0.27 :       0.28 :       0.29 *
[1,27]<stdout>: * CREA_MAILLAGE            :       1.10 :       0.87 :       1.97 :       1.97 *
[1,27]<stdout>: * AFFE_MODELE              :       0.30 :       0.00 :       0.30 :       0.30 *
[1,27]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,27]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,27]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,27]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,27]<stdout>: * CALC_MATR_ELEM           :       0.59 :       0.05 :       0.64 :       0.64 *
[1,27]<stdout>: * NUME_DDL                 :       0.58 :       0.83 :       1.41 :       1.41 *
[1,27]<stdout>: * ASSE_MATRICE             :       0.30 :       0.07 :       0.37 :       0.37 *
[1,27]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,27]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,27]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,27]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,27]<stdout>: *  . fortran               :       1.43 :       1.15 :       2.58 :       2.59 *
[1,27]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.16 *
[1,27]<stdout>: ********************************************************************************
[1,27]<stdout>: * TOTAL_JOB                :      15.11 :       3.59 :      18.70 :      18.72 *
[1,27]<stdout>: ********************************************************************************
[1,27]<stdout>:
[1,27]<stdout>:# Mémoire (Mo) :  1762.41 /  1756.38 /   608.86 /   416.57 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# Mémoire (Mo) :  1826.47 /  1820.09 /   624.10 /   420.20 (VmPeak / VmSize / Optimum / Minimum)
[1,25]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.01s, elaps:        0.05s)
[1,0]<stdout>:
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * DEBUT                    :       0.03 :       0.26 :       0.29 :       0.29 *
[1,0]<stdout>: * DEFI_FICHIER             :       0.00 :       0.00 :       0.00 :       0.00 *
[1,0]<stdout>: * DEFI_FICHIER             :       0.00 :       0.00 :       0.00 :       0.00 *
[1,0]<stdout>: * CREA_MAILLAGE            :       1.40 :       0.59 :       1.99 :       1.99 *
[1,0]<stdout>: * AFFE_MODELE              :       0.27 :       0.00 :       0.27 :       0.26 *
[1,0]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,0]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,0]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,0]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,0]<stdout>: * CALC_MATR_ELEM           :       0.67 :       0.01 :       0.68 :       0.68 *
[1,0]<stdout>: * NUME_DDL                 :       0.45 :       0.92 :       1.37 :       1.37 *
[1,0]<stdout>: * ASSE_MATRICE             :       0.31 :       0.06 :       0.37 :       0.37 *
[1,0]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,0]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,0]<stdout>: * FIN                      :       0.06 :       0.01 :       0.07 :       0.05 *
[1,0]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,0]<stdout>: *  . fortran               :       1.73 :       0.87 :       2.60 :       2.57 *
[1,0]<stdout>: *  . cleanup               :       0.17 :       0.00 :       0.17 :       0.16 *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * TOTAL_JOB                :      15.32 :       3.41 :      18.73 :      18.72 *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1834.92 /  1828.63 /   625.76 /   420.76 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  1875.81 /  1869.19 /   633.98 /   422.56 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.01s, elaps:        0.05s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>: ********************************************************************************
[1,22]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,22]<stdout>: ********************************************************************************
[1,22]<stdout>: * DEBUT                    :       0.03 :       0.24 :       0.27 :       0.27 *
[1,22]<stdout>: * CREA_MAILLAGE            :       1.21 :       0.78 :       1.99 :       1.98 *
[1,22]<stdout>: * AFFE_MODELE              :       0.29 :       0.01 :       0.30 :       0.30 *
[1,22]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,22]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,22]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,22]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,22]<stdout>: * CALC_MATR_ELEM           :       0.66 :       0.02 :       0.68 :       0.69 *
[1,22]<stdout>: * NUME_DDL                 :       0.62 :       0.75 :       1.37 :       1.36 *
[1,22]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,22]<stdout>: * CREA_CHAMP               :       0.01 :       0.01 :       0.02 :       0.03 *
[1,22]<stdout>: * CALC_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,22]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,22]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,22]<stdout>: *  . fortran               :       1.56 :       1.04 :       2.60 :       2.58 *
[1,22]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.17 *
[1,22]<stdout>: ********************************************************************************
[1,22]<stdout>: * TOTAL_JOB                :      15.45 :       3.28 :      18.73 :      18.73 *
[1,22]<stdout>: ********************************************************************************
[1,22]<stdout>:
[1,22]<stdout>:# Mémoire (Mo) :  1827.57 /  1821.00 /   624.02 /   420.38 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>: * DEBUT                    :       0.01 :       0.26 :       0.27 :       0.27 *
[1,10]<stdout>: * CREA_MAILLAGE            :       1.10 :       0.88 :       1.98 :       1.98 *
[1,10]<stdout>: * AFFE_MODELE              :       0.29 :       0.01 :       0.30 :       0.30 *
[1,10]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,10]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,10]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,10]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,10]<stdout>: * CALC_MATR_ELEM           :       0.64 :       0.03 :       0.67 :       0.68 *
[1,10]<stdout>: * NUME_DDL                 :       0.44 :       0.94 :       1.38 :       1.37 *
[1,10]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,10]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,10]<stdout>: * CALC_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,10]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.06 *
[1,10]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.00 *
[1,10]<stdout>: *  . fortran               :       1.43 :       1.16 :       2.59 :       2.60 *
[1,10]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.18 *
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>: * TOTAL_JOB                :      15.12 :       3.61 :      18.73 :      18.74 *
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>:
[1,9]<stdout>:# Mémoire (Mo) :  1777.66 /  1771.48 /   613.91 /   417.83 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.01s, elaps:        0.05s)
[1,8]<stdout>:# Mémoire (Mo) :  1908.18 /  1901.24 /   644.42 /   425.01 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :  1822.02 /  1815.53 /   625.23 /   420.61 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>: ********************************************************************************
[1,21]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,21]<stdout>: ********************************************************************************
[1,21]<stdout>: * DEBUT                    :       0.03 :       0.25 :       0.28 :       0.28 *
[1,21]<stdout>: * CREA_MAILLAGE            :       1.06 :       0.94 :       2.00 :       1.99 *
[1,21]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,21]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,21]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.01 :       0.04 :       0.03 *
[1,21]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,21]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.05 *
[1,21]<stdout>: * CALC_MATR_ELEM           :       0.67 :       0.04 :       0.71 :       0.72 *
[1,21]<stdout>: * NUME_DDL                 :       0.44 :       0.88 :       1.32 :       1.32 *
[1,21]<stdout>: * ASSE_MATRICE             :       0.31 :       0.06 :       0.37 :       0.37 *
[1,21]<stdout>: * CREA_CHAMP               :       0.00 :       0.01 :       0.01 :       0.03 *
[1,21]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.02 :       0.05 :       0.04 *
[1,21]<stdout>: * FIN                      :       0.04 :       0.01 :       0.05 :       0.06 *
[1,21]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,21]<stdout>: *  . fortran               :       1.39 :       1.21 :       2.60 :       2.62 *
[1,21]<stdout>: *  . cleanup               :       0.13 :       0.01 :       0.14 :       0.16 *
[1,21]<stdout>: ********************************************************************************
[1,21]<stdout>: * TOTAL_JOB                :      14.98 :       3.74 :      18.72 :      18.74 *
[1,21]<stdout>: ********************************************************************************
[1,21]<stdout>:
[1,14]<stdout>:# Mémoire (Mo) :  1875.16 /  1868.39 /   635.36 /   422.90 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.01s, elaps:        0.05s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,24]<stdout>:# Mémoire (Mo) :  1890.20 /  1883.32 /   638.92 /   423.81 (VmPeak / VmSize / Optimum / Minimum)
[1,24]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,24]<stdout>:# ----------------------------------------------------------------------------------------------
[1,31]<stdout>:
[1,31]<stdout>: ********************************************************************************
[1,31]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,31]<stdout>: ********************************************************************************
[1,31]<stdout>: * DEBUT                    :       0.01 :       0.28 :       0.29 :       0.29 *
[1,31]<stdout>: * CREA_MAILLAGE            :       0.94 :       1.02 :       1.96 :       1.98 *
[1,31]<stdout>: * AFFE_MODELE              :       0.30 :       0.01 :       0.31 :       0.29 *
[1,31]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,31]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,31]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,31]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,31]<stdout>: * CALC_MATR_ELEM           :       0.63 :       0.03 :       0.66 :       0.67 *
[1,31]<stdout>: * NUME_DDL                 :       0.52 :       0.86 :       1.38 :       1.38 *
[1,31]<stdout>: * ASSE_MATRICE             :       0.31 :       0.06 :       0.37 :       0.37 *
[1,31]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,31]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,31]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,31]<stdout>: *  . check syntax          :       0.01 :       0.01 :       0.02 :       0.01 *
[1,31]<stdout>: *  . fortran               :       1.28 :       1.31 :       2.59 :       2.59 *
[1,31]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.16 *
[1,31]<stdout>: ********************************************************************************
[1,31]<stdout>: * TOTAL_JOB                :      15.05 :       3.66 :      18.71 :      18.73 *
[1,31]<stdout>: ********************************************************************************
[1,31]<stdout>:
[1,31]<stdout>:# Mémoire (Mo) :  1809.24 /  1802.98 /   616.65 /   418.49 (VmPeak / VmSize / Optimum / Minimum)
[1,31]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,2]<stdout>:
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * DEBUT                    :       0.03 :       0.26 :       0.29 :       0.29 *
[1,2]<stdout>: * CREA_MAILLAGE            :       0.97 :       1.02 :       1.99 :       1.99 *
[1,2]<stdout>: * AFFE_MODELE              :       0.29 :       0.01 :       0.30 :       0.30 *
[1,2]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,2]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,2]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,2]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.05 *
[1,2]<stdout>: * CALC_MATR_ELEM           :       0.72 :       0.03 :       0.75 :       0.74 *
[1,2]<stdout>: * NUME_DDL                 :       0.38 :       0.92 :       1.30 :       1.30 *
[1,2]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,2]<stdout>: * CREA_CHAMP               :       0.01 :       0.01 :       0.02 :       0.03 *
[1,2]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,2]<stdout>: * FIN                      :       0.06 :       0.00 :       0.06 :       0.06 *
[1,2]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,2]<stdout>: *  . fortran               :       1.33 :       1.29 :       2.62 :       2.62 *
[1,2]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.16 *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * TOTAL_JOB                :      15.01 :       3.71 :      18.72 :      18.73 *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>:
[1,2]<stdout>:# Mémoire (Mo) :  1925.33 /  1918.30 /   647.19 /   425.65 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>: * DEBUT                    :       0.00 :       0.28 :       0.28 :       0.28 *
[1,11]<stdout>: * CREA_MAILLAGE            :       1.22 :       0.76 :       1.98 :       1.99 *
[1,11]<stdout>: * AFFE_MODELE              :       0.28 :       0.01 :       0.29 :       0.30 *
[1,11]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,11]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,11]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,11]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,11]<stdout>: * CALC_MATR_ELEM           :       0.61 :       0.04 :       0.65 :       0.65 *
[1,11]<stdout>: * NUME_DDL                 :       0.58 :       0.82 :       1.40 :       1.40 *
[1,11]<stdout>: * ASSE_MATRICE             :       0.31 :       0.06 :       0.37 :       0.37 *
[1,11]<stdout>: * CREA_CHAMP               :       0.01 :       0.01 :       0.02 :       0.03 *
[1,11]<stdout>: * CALC_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,11]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.06 *
[1,11]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,11]<stdout>: *  . fortran               :       1.55 :       1.06 :       2.61 :       2.59 *
[1,11]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.16 *
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>: * TOTAL_JOB                :      15.48 :       3.24 :      18.72 :      18.73 *
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>:
[1,11]<stdout>:# Mémoire (Mo) :  1778.95 /  1772.73 /   612.07 /   417.43 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Mémoire (Mo) :  1813.55 /  1807.13 /   622.05 /   419.77 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.01s, elaps:        0.05s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :  1855.97 /  1849.27 /   631.53 /   422.13 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.01s, elaps:        0.05s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>: * DEBUT                    :       0.03 :       0.26 :       0.29 :       0.29 *
[1,13]<stdout>: * CREA_MAILLAGE            :       1.17 :       0.81 :       1.98 :       1.98 *
[1,13]<stdout>: * AFFE_MODELE              :       0.28 :       0.02 :       0.30 :       0.30 *
[1,13]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,13]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,13]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,13]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,13]<stdout>: * CALC_MATR_ELEM           :       0.63 :       0.03 :       0.66 :       0.66 *
[1,13]<stdout>: * NUME_DDL                 :       0.52 :       0.87 :       1.39 :       1.39 *
[1,13]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,13]<stdout>: * CREA_CHAMP               :       0.01 :       0.01 :       0.02 :       0.03 *
[1,13]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,13]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,13]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,13]<stdout>: *  . fortran               :       1.52 :       1.09 :       2.61 :       2.61 *
[1,13]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.16 *
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>: * TOTAL_JOB                :      15.16 :       3.56 :      18.72 :      18.72 *
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>:
[1,13]<stdout>:# Mémoire (Mo) :  1786.35 /  1780.12 /   615.54 /   418.17 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,16]<stdout>:# Mémoire (Mo) :  1883.80 /  1877.00 /   639.83 /   424.02 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Mémoire (Mo) :  1813.82 /  1800.08 /   620.48 /   419.48 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>: ********************************************************************************
[1,18]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,18]<stdout>: ********************************************************************************
[1,18]<stdout>: * DEBUT                    :       0.02 :       0.26 :       0.28 :       0.29 *
[1,18]<stdout>: * CREA_MAILLAGE            :       1.16 :       0.82 :       1.98 :       1.98 *
[1,18]<stdout>: * AFFE_MODELE              :       0.28 :       0.01 :       0.29 :       0.30 *
[1,18]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,18]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,18]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,18]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.01 :       0.06 :       0.04 *
[1,18]<stdout>: * CALC_MATR_ELEM           :       0.61 :       0.04 :       0.65 :       0.67 *
[1,18]<stdout>: * NUME_DDL                 :       0.50 :       0.87 :       1.37 :       1.38 *
[1,18]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,18]<stdout>: * CREA_CHAMP               :       0.01 :       0.00 :       0.01 :       0.03 *
[1,18]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.02 :       0.05 :       0.04 *
[1,18]<stdout>: * FIN                      :       0.05 :       0.01 :       0.06 :       0.05 *
[1,18]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,18]<stdout>: *  . fortran               :       1.50 :       1.11 :       2.61 :       2.60 *
[1,18]<stdout>: *  . cleanup               :       0.14 :       0.01 :       0.15 :       0.16 *
[1,18]<stdout>: ********************************************************************************
[1,18]<stdout>: * TOTAL_JOB                :      15.13 :       3.59 :      18.72 :      18.72 *
[1,18]<stdout>: ********************************************************************************
[1,18]<stdout>:
[1,18]<stdout>:# Mémoire (Mo) :  1795.74 /  1789.23 /   618.05 /   418.91 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.01s, elaps:        0.05s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,28]<stdout>:# Mémoire (Mo) :  1865.58 /  1859.00 /   632.59 /   422.25 (VmPeak / VmSize / Optimum / Minimum)
[1,28]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.01s, elaps:        0.05s)
[1,28]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Mémoire (Mo) :  1792.15 /  1784.52 /   616.42 /   418.49 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1854.42 /  1847.75 /   631.61 /   422.02 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.01s, elaps:        0.05s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>: ********************************************************************************
[1,20]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,20]<stdout>: ********************************************************************************
[1,20]<stdout>: * DEBUT                    :       0.01 :       0.26 :       0.27 :       0.27 *
[1,20]<stdout>: * CREA_MAILLAGE            :       1.01 :       0.96 :       1.97 :       1.99 *
[1,20]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,20]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.01 :       0.04 :       0.03 *
[1,20]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,20]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.04 *
[1,20]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,20]<stdout>: * CALC_MATR_ELEM           :       0.66 :       0.04 :       0.70 :       0.71 *
[1,20]<stdout>: * NUME_DDL                 :       0.47 :       0.88 :       1.35 :       1.34 *
[1,20]<stdout>: * ASSE_MATRICE             :       0.32 :       0.05 :       0.37 :       0.37 *
[1,20]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,20]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,20]<stdout>: * FIN                      :       0.05 :       0.01 :       0.06 :       0.06 *
[1,20]<stdout>: *  . check syntax          :       0.00 :       0.01 :       0.01 :       0.02 *
[1,20]<stdout>: *  . fortran               :       1.37 :       1.24 :       2.61 :       2.60 *
[1,20]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.18 *
[1,20]<stdout>: ********************************************************************************
[1,20]<stdout>: * TOTAL_JOB                :      14.96 :       3.76 :      18.72 :      18.74 *
[1,20]<stdout>: ********************************************************************************
[1,20]<stdout>:
[1,20]<stdout>:# Mémoire (Mo) :  1849.87 /  1843.42 /   631.09 /   421.83 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * DEBUT                    :       0.02 :       0.26 :       0.28 :       0.29 *
[1,3]<stdout>: * CREA_MAILLAGE            :       1.04 :       0.95 :       1.99 :       1.98 *
[1,3]<stdout>: * AFFE_MODELE              :       0.29 :       0.00 :       0.29 :       0.30 *
[1,3]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,3]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,3]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,3]<stdout>: * AFFE_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,3]<stdout>: * CALC_MATR_ELEM           :       0.64 :       0.05 :       0.69 :       0.69 *
[1,3]<stdout>: * NUME_DDL                 :       0.53 :       0.83 :       1.36 :       1.35 *
[1,3]<stdout>: * ASSE_MATRICE             :       0.31 :       0.06 :       0.37 :       0.37 *
[1,3]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,3]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,3]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,3]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.00 *
[1,3]<stdout>: *  . fortran               :       1.38 :       1.22 :       2.60 :       2.60 *
[1,3]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.16 *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * TOTAL_JOB                :      15.20 :       3.51 :      18.71 :      18.72 *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>:
[1,3]<stdout>:# Mémoire (Mo) :  1851.43 /  1818.40 /   625.13 /   420.50 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Mémoire (Mo) :  1824.46 /  1818.00 /   624.07 /   420.40 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.01s, elaps:        0.05s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Mémoire (Mo) :  1887.96 /  1881.09 /   638.43 /   423.66 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.01s, elaps:        0.06s)
[1,31]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.01s, elaps:        0.06s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# Mémoire (Mo) :  1892.32 /  1885.57 /   637.30 /   423.37 (VmPeak / VmSize / Optimum / Minimum)
[1,30]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,23]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.01s, elaps:        0.05s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,29]<stdout>:# Mémoire (Mo) :  1798.83 /  1792.50 /   615.80 /   418.33 (VmPeak / VmSize / Optimum / Minimum)
[1,29]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,29]<stdout>:# ----------------------------------------------------------------------------------------------
[1,26]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,26]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Mémoire (Mo) :  1909.62 /  1902.70 /   643.70 /   424.82 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.01s, elaps:        0.06s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,27]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,27]<stdout>:# ----------------------------------------------------------------------------------------------
[1,25]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0015   user+syst:        0.06s (syst:        0.01s, elaps:        0.05s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  1802.06 /  1795.72 /   619.46 /   419.14 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,30]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:End of the Code_Aster execution
[1,20]<stdout>:Code_Aster MPI exits normally
[1,20]<stdout>:Exited
[1,21]<stdout>:End of the Code_Aster execution
[1,21]<stdout>:Code_Aster MPI exits normally
[1,21]<stdout>:Exited
[1,12]<stdout>:End of the Code_Aster execution
[1,12]<stdout>:Code_Aster MPI exits normally
[1,12]<stdout>:Exited
[1,7]<stdout>:End of the Code_Aster execution
[1,7]<stdout>:Code_Aster MPI exits normally
[1,7]<stdout>:Exited
[1,22]<stdout>:End of the Code_Aster execution
[1,22]<stdout>:Code_Aster MPI exits normally
[1,22]<stdout>:Exited
[1,10]<stdout>:End of the Code_Aster execution
[1,10]<stdout>:Code_Aster MPI exits normally
[1,10]<stdout>:Exited
[1,24]<stdout>:End of the Code_Aster execution
[1,24]<stdout>:Code_Aster MPI exits normally
[1,24]<stdout>:Exited
[1,16]<stdout>:End of the Code_Aster execution
[1,16]<stdout>:Code_Aster MPI exits normally
[1,16]<stdout>:Exited
[1,15]<stdout>:End of the Code_Aster execution
[1,15]<stdout>:Code_Aster MPI exits normally
[1,15]<stdout>:Exited
[1,13]<stdout>:End of the Code_Aster execution
[1,13]<stdout>:Code_Aster MPI exits normally
[1,13]<stdout>:Exited
[1,31]<stdout>:End of the Code_Aster execution
[1,31]<stdout>:Code_Aster MPI exits normally
[1,31]<stdout>:Exited
[1,23]<stdout>:End of the Code_Aster execution
[1,23]<stdout>:Code_Aster MPI exits normally
[1,23]<stdout>:Exited
[1,29]<stdout>:End of the Code_Aster execution
[1,29]<stdout>:Code_Aster MPI exits normally
[1,29]<stdout>:Exited
[1,30]<stdout>:End of the Code_Aster execution
[1,30]<stdout>:Code_Aster MPI exits normally
[1,30]<stdout>:Exited
[1,18]<stdout>:End of the Code_Aster execution
[1,18]<stdout>:Code_Aster MPI exits normally
[1,18]<stdout>:Exited
[1,25]<stdout>:End of the Code_Aster execution
[1,25]<stdout>:Code_Aster MPI exits normally
[1,25]<stdout>:Exited
[1,14]<stdout>:End of the Code_Aster execution
[1,14]<stdout>:Code_Aster MPI exits normally
[1,14]<stdout>:Exited
[1,5]<stdout>:End of the Code_Aster execution
[1,5]<stdout>:Code_Aster MPI exits normally
[1,5]<stdout>:Exited
[1,3]<stdout>:End of the Code_Aster execution
[1,3]<stdout>:Code_Aster MPI exits normally
[1,3]<stdout>:Exited
[1,26]<stdout>:End of the Code_Aster execution
[1,26]<stdout>:Code_Aster MPI exits normally
[1,26]<stdout>:Exited
[1,1]<stdout>:End of the Code_Aster execution
[1,1]<stdout>:Code_Aster MPI exits normally
[1,1]<stdout>:Exited
[1,6]<stdout>:End of the Code_Aster execution
[1,6]<stdout>:Code_Aster MPI exits normally
[1,6]<stdout>:Exited
[1,11]<stdout>:End of the Code_Aster execution
[1,11]<stdout>:Code_Aster MPI exits normally
[1,11]<stdout>:Exited
[1,9]<stdout>:End of the Code_Aster execution
[1,9]<stdout>:Code_Aster MPI exits normally
[1,9]<stdout>:Exited
[1,17]<stdout>:End of the Code_Aster execution
[1,17]<stdout>:Code_Aster MPI exits normally
[1,17]<stdout>:Exited
[1,4]<stdout>:End of the Code_Aster execution
[1,4]<stdout>:Code_Aster MPI exits normally
[1,4]<stdout>:Exited
[1,2]<stdout>:End of the Code_Aster execution
[1,2]<stdout>:Code_Aster MPI exits normally
[1,2]<stdout>:Exited
[1,19]<stdout>:End of the Code_Aster execution
[1,19]<stdout>:Code_Aster MPI exits normally
[1,19]<stdout>:Exited
[1,0]<stdout>:End of the Code_Aster execution
[1,0]<stdout>:Code_Aster MPI exits normally
[1,0]<stdout>:Exited
[1,27]<stdout>:End of the Code_Aster execution
[1,27]<stdout>:Code_Aster MPI exits normally
[1,27]<stdout>:Exited
[1,8]<stdout>:End of the Code_Aster execution
[1,8]<stdout>:Code_Aster MPI exits normally
[1,8]<stdout>:Exited
[1,28]<stdout>:End of the Code_Aster execution
[1,28]<stdout>:Code_Aster MPI exits normally
[1,28]<stdout>:Exited
[1,26]<stdout>:
[1,26]<stdout>:EXECUTION_CODE_ASTER_EXIT_1865=0
[1,26]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:execution ended (command file #1): OK
[1,26]<stdout>:
[1,26]<stdout>:# ------------------------------------------------------------------------------
[1,26]<stdout>:Content of /tmp/run_aster_jnzipism/proc.26 after execution:
[1,26]<stdout>:.:
[1,26]<stdout>:total 28
[1,26]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1865.export
[1,26]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,26]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,26]<stdout>:-rw-r--r-- 1 aster aster 22316 Jan 23 16:34 fort.6
[1,26]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,26]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,26]<stdout>:
[1,26]<stdout>:REPE_OUT:
[1,26]<stdout>:total 0
[1,26]<stdout>:
[1,26]<stdout>:
[1,26]<stdout>:# ------------------------------------------------------------------------------
[1,26]<stdout>:Execution summary
[1,26]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,26]<stdout>:--------------------------------------------------------------------------------
[1,26]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,26]<stdout>:Execution of code_aster             15.82       4.22      20.04      38.17
[1,26]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,26]<stdout>:--------------------------------------------------------------------------------
[1,26]<stdout>:Total                               15.82       4.22      20.04      38.17
[1,26]<stdout>:--------------------------------------------------------------------------------
[1,27]<stdout>:
[1,27]<stdout>:EXECUTION_CODE_ASTER_EXIT_1866=0
[1,27]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:execution ended (command file #1): OK
[1,27]<stdout>:
[1,27]<stdout>:# ------------------------------------------------------------------------------
[1,27]<stdout>:Content of /tmp/run_aster_jnzipism/proc.27 after execution:
[1,27]<stdout>:.:
[1,27]<stdout>:total 28
[1,27]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1866.export
[1,27]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,27]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,27]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:34 fort.6
[1,27]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,27]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,27]<stdout>:
[1,27]<stdout>:REPE_OUT:
[1,27]<stdout>:total 0
[1,27]<stdout>:
[1,27]<stdout>:
[1,27]<stdout>:# ------------------------------------------------------------------------------
[1,27]<stdout>:Execution summary
[1,27]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,27]<stdout>:--------------------------------------------------------------------------------
[1,27]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,27]<stdout>:Execution of code_aster             15.52       4.56      20.08      39.99
[1,27]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,27]<stdout>:--------------------------------------------------------------------------------
[1,27]<stdout>:Total                               15.52       4.56      20.08      39.99
[1,27]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:EXECUTION_CODE_ASTER_EXIT_1856=0
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:execution ended (command file #1): OK
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Content of /tmp/run_aster_jnzipism/proc.23 after execution:
[1,23]<stdout>:.:
[1,23]<stdout>:total 28
[1,23]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1856.export
[1,23]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,23]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,23]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:34 fort.6
[1,23]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,23]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,23]<stdout>:
[1,23]<stdout>:REPE_OUT:
[1,23]<stdout>:total 0
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Execution summary
[1,23]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,23]<stdout>:Execution of code_aster             15.70       4.35      20.05      40.02
[1,23]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:Total                               15.70       4.35      20.05      40.02
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:EXECUTION_CODE_ASTER_EXIT_1790=0
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:execution ended (command file #1): OK
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Content of /tmp/run_aster_jnzipism/proc.9 after execution:
[1,9]<stdout>:.:
[1,9]<stdout>:total 28
[1,9]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1790.export
[1,9]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,9]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,9]<stdout>:-rw-r--r-- 1 aster aster 22268 Jan 23 16:34 fort.6
[1,9]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,9]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,9]<stdout>:
[1,9]<stdout>:REPE_OUT:
[1,9]<stdout>:total 0
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Execution summary
[1,9]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:Preparation of environment           0.01       0.01       0.02       0.00
[1,9]<stdout>:Execution of code_aster             15.55       4.50      20.05      40.22
[1,9]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:Total                               15.56       4.51      20.07      40.22
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:EXECUTION_CODE_ASTER_EXIT_1802=0
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:execution ended (command file #1): OK
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Content of /tmp/run_aster_jnzipism/proc.11 after execution:
[1,11]<stdout>:.:
[1,11]<stdout>:total 28
[1,11]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1802.export
[1,11]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,11]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,11]<stdout>:-rw-r--r-- 1 aster aster 22316 Jan 23 16:34 fort.6
[1,11]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,11]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,11]<stdout>:
[1,11]<stdout>:REPE_OUT:
[1,11]<stdout>:total 0
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Execution summary
[1,11]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,11]<stdout>:Execution of code_aster             15.90       4.17      20.07      40.25
[1,11]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:Total                               15.90       4.17      20.07      40.25
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:EXECUTION_CODE_ASTER_EXIT_1812=0
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:execution ended (command file #1): OK
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Content of /tmp/run_aster_jnzipism/proc.13 after execution:
[1,13]<stdout>:.:
[1,13]<stdout>:total 28
[1,13]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1812.export
[1,13]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,13]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,13]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:34 fort.6
[1,13]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,13]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,13]<stdout>:
[1,13]<stdout>:REPE_OUT:
[1,13]<stdout>:total 0
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Execution summary
[1,13]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,13]<stdout>:Execution of code_aster             15.57       4.51      20.08      40.26
[1,13]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:Total                               15.57       4.51      20.08      40.26
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,29]<stdout>:
[1,29]<stdout>:EXECUTION_CODE_ASTER_EXIT_1868=0
[1,29]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:execution ended (command file #1): OK
[1,29]<stdout>:
[1,29]<stdout>:# ------------------------------------------------------------------------------
[1,29]<stdout>:Content of /tmp/run_aster_jnzipism/proc.29 after execution:
[1,29]<stdout>:.:
[1,29]<stdout>:total 28
[1,29]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1868.export
[1,29]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,29]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,29]<stdout>:-rw-r--r-- 1 aster aster 22316 Jan 23 16:34 fort.6
[1,29]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,29]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,29]<stdout>:
[1,29]<stdout>:REPE_OUT:
[1,29]<stdout>:total 0
[1,29]<stdout>:
[1,29]<stdout>:
[1,29]<stdout>:# ------------------------------------------------------------------------------
[1,29]<stdout>:Execution summary
[1,29]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,29]<stdout>:--------------------------------------------------------------------------------
[1,29]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,29]<stdout>:Execution of code_aster             15.80       4.28      20.08      40.33
[1,29]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,29]<stdout>:--------------------------------------------------------------------------------
[1,29]<stdout>:Total                               15.80       4.28      20.08      40.33
[1,29]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:EXECUTION_CODE_ASTER_EXIT_1824=0
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:execution ended (command file #1): OK
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Content of /tmp/run_aster_jnzipism/proc.15 after execution:
[1,15]<stdout>:.:
[1,15]<stdout>:total 28
[1,15]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1824.export
[1,15]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,15]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,15]<stdout>:-rw-r--r-- 1 aster aster 22316 Jan 23 16:34 fort.6
[1,15]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,15]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,15]<stdout>:
[1,15]<stdout>:REPE_OUT:
[1,15]<stdout>:total 0
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Execution summary
[1,15]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:Preparation of environment           0.00       0.01       0.01       0.01
[1,15]<stdout>:Execution of code_aster             15.58       4.48      20.06      40.36
[1,15]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:Total                               15.58       4.49      20.07      40.37
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:EXECUTION_CODE_ASTER_EXIT_1797=0
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:execution ended (command file #1): OK
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Content of /tmp/run_aster_jnzipism/proc.10 after execution:
[1,10]<stdout>:.:
[1,10]<stdout>:total 28
[1,10]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1797.export
[1,10]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,10]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,10]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:34 fort.6
[1,10]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,10]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,10]<stdout>:
[1,10]<stdout>:REPE_OUT:
[1,10]<stdout>:total 0
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Execution summary
[1,10]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,10]<stdout>:Execution of code_aster             15.49       4.56      20.05      40.38
[1,10]<stdout>:Copying results                      0.01       0.00       0.01       0.00
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:Total                               15.50       4.56      20.06      40.38
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:EXECUTION_CODE_ASTER_EXIT_1854=0
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:execution ended (command file #1): OK
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Content of /tmp/run_aster_jnzipism/proc.22 after execution:
[1,22]<stdout>:.:
[1,22]<stdout>:total 28
[1,22]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1854.export
[1,22]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,22]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,22]<stdout>:-rw-r--r-- 1 aster aster 22316 Jan 23 16:34 fort.6
[1,22]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,22]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,22]<stdout>:
[1,22]<stdout>:REPE_OUT:
[1,22]<stdout>:total 0
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Execution summary
[1,22]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:Preparation of environment           0.01       0.01       0.02       0.00
[1,22]<stdout>:Execution of code_aster             15.84       4.21      20.05      40.37
[1,22]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:Total                               15.85       4.22      20.07      40.37
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:EXECUTION_CODE_ASTER_EXIT_1706=0
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:execution ended (command file #1): OK
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Content of /tmp/run_aster_jnzipism/proc.5 after execution:
[1,5]<stdout>:.:
[1,5]<stdout>:total 28
[1,5]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1706.export
[1,5]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,5]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,5]<stdout>:-rw-r--r-- 1 aster aster 22315 Jan 23 16:34 fort.6
[1,5]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,5]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,5]<stdout>:
[1,5]<stdout>:REPE_OUT:
[1,5]<stdout>:total 0
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution summary
[1,5]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,5]<stdout>:Execution of code_aster             15.95       4.11      20.06      40.50
[1,5]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:Total                               15.95       4.11      20.06      40.50
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:EXECUTION_CODE_ASTER_EXIT_1841=0
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:execution ended (command file #1): OK
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Content of /tmp/run_aster_jnzipism/proc.18 after execution:
[1,18]<stdout>:.:
[1,18]<stdout>:total 28
[1,18]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1841.export
[1,18]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,18]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,18]<stdout>:-rw-r--r-- 1 aster aster 22316 Jan 23 16:34 fort.6
[1,18]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,18]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,18]<stdout>:
[1,18]<stdout>:REPE_OUT:
[1,18]<stdout>:total 0
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Execution summary
[1,18]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,18]<stdout>:Execution of code_aster             15.54       4.53      20.07      40.39
[1,18]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:Total                               15.54       4.53      20.07      40.39
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:EXECUTION_CODE_ASTER_EXIT_1700=0
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:execution ended (command file #1): OK
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Content of /tmp/run_aster_jnzipism/proc.1 after execution:
[1,1]<stdout>:.:
[1,1]<stdout>:total 28
[1,1]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1700.export
[1,1]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,1]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,1]<stdout>:-rw-r--r-- 1 aster aster 22268 Jan 23 16:34 fort.6
[1,1]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,1]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,1]<stdout>:
[1,1]<stdout>:REPE_OUT:
[1,1]<stdout>:total 0
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution summary
[1,1]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,1]<stdout>:Execution of code_aster             15.57       4.49      20.06      40.52
[1,1]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:Total                               15.57       4.49      20.06      40.52
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:EXECUTION_CODE_ASTER_EXIT_1704=0
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:execution ended (command file #1): OK
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Content of /tmp/run_aster_jnzipism/proc.3 after execution:
[1,3]<stdout>:.:
[1,3]<stdout>:total 28
[1,3]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1704.export
[1,3]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,3]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,3]<stdout>:-rw-r--r-- 1 aster aster 22268 Jan 23 16:34 fort.6
[1,3]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,3]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,3]<stdout>:
[1,3]<stdout>:REPE_OUT:
[1,3]<stdout>:total 0
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution summary
[1,3]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,3]<stdout>:Execution of code_aster             15.58       4.48      20.06      40.52
[1,3]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:Total                               15.58       4.48      20.06      40.52
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:EXECUTION_CODE_ASTER_EXIT_1834=0
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:execution ended (command file #1): OK
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Content of /tmp/run_aster_jnzipism/proc.17 after execution:
[1,19]<stdout>:
[1,19]<stdout>:EXECUTION_CODE_ASTER_EXIT_1843=0
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:execution ended (command file #1): OK
[1,17]<stdout>:.:
[1,17]<stdout>:total 28
[1,17]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1834.export
[1,17]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,17]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,17]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:34 fort.6
[1,17]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,17]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,17]<stdout>:
[1,17]<stdout>:REPE_OUT:
[1,17]<stdout>:total 0
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Execution summary
[1,17]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,17]<stdout>:Execution of code_aster             15.33       4.75      20.08      40.41
[1,17]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:Total                               15.33       4.75      20.08      40.41
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Content of /tmp/run_aster_jnzipism/proc.19 after execution:
[1,19]<stdout>:.:
[1,19]<stdout>:total 28
[1,19]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1843.export
[1,19]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,19]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,19]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:34 fort.6
[1,19]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,19]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,19]<stdout>:
[1,19]<stdout>:REPE_OUT:
[1,19]<stdout>:total 0
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Execution summary
[1,19]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,19]<stdout>:Execution of code_aster             15.46       4.62      20.08      40.41
[1,19]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:Total                               15.46       4.62      20.08      40.41
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,31]<stdout>:
[1,31]<stdout>:EXECUTION_CODE_ASTER_EXIT_2039=0
[1,31]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:execution ended (command file #1): OK
[1,31]<stdout>:
[1,31]<stdout>:# ------------------------------------------------------------------------------
[1,31]<stdout>:Content of /tmp/run_aster_jnzipism/proc.31 after execution:
[1,31]<stdout>:.:
[1,31]<stdout>:total 28
[1,31]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 2039.export
[1,31]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,31]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,31]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:34 fort.6
[1,31]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,31]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,31]<stdout>:
[1,31]<stdout>:REPE_OUT:
[1,31]<stdout>:total 0
[1,31]<stdout>:
[1,31]<stdout>:
[1,31]<stdout>:# ------------------------------------------------------------------------------
[1,31]<stdout>:Execution summary
[1,31]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,31]<stdout>:--------------------------------------------------------------------------------
[1,31]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,31]<stdout>:Execution of code_aster             15.47       4.57      20.04      40.32
[1,31]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,31]<stdout>:--------------------------------------------------------------------------------
[1,31]<stdout>:Total                               15.47       4.57      20.04      40.32
[1,31]<stdout>:--------------------------------------------------------------------------------
[1,25]<stdout>:
[1,25]<stdout>:EXECUTION_CODE_ASTER_EXIT_1864=0
[1,25]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:execution ended (command file #1): OK
[1,25]<stdout>:
[1,25]<stdout>:# ------------------------------------------------------------------------------
[1,25]<stdout>:Content of /tmp/run_aster_jnzipism/proc.25 after execution:
[1,25]<stdout>:.:
[1,25]<stdout>:total 28
[1,25]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1864.export
[1,25]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,25]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,25]<stdout>:-rw-r--r-- 1 aster aster 22145 Jan 23 16:34 fort.6
[1,25]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,25]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,25]<stdout>:
[1,25]<stdout>:REPE_OUT:
[1,25]<stdout>:total 0
[1,25]<stdout>:
[1,25]<stdout>:
[1,25]<stdout>:# ------------------------------------------------------------------------------
[1,25]<stdout>:Execution summary
[1,25]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,25]<stdout>:--------------------------------------------------------------------------------
[1,25]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,25]<stdout>:Execution of code_aster             15.32       4.76      20.08      40.42
[1,25]<stdout>:Copying results                      0.01       0.00       0.01       0.00
[1,25]<stdout>:--------------------------------------------------------------------------------
[1,25]<stdout>:Total                               15.33       4.76      20.09      40.42
[1,25]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:EXECUTION_CODE_ASTER_EXIT_1707=0
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:execution ended (command file #1): OK
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Content of /tmp/run_aster_jnzipism/proc.6 after execution:
[1,6]<stdout>:.:
[1,6]<stdout>:total 28
[1,6]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1707.export
[1,6]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,6]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,6]<stdout>:-rw-r--r-- 1 aster aster 22268 Jan 23 16:34 fort.6
[1,6]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,6]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,6]<stdout>:
[1,6]<stdout>:REPE_OUT:
[1,6]<stdout>:total 0
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution summary
[1,6]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,6]<stdout>:Execution of code_aster             15.50       4.55      20.05      40.54
[1,6]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:Total                               15.50       4.55      20.05      40.54
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:EXECUTION_CODE_ASTER_EXIT_1848=0
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:execution ended (command file #1): OK
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Content of /tmp/run_aster_jnzipism/proc.20 after execution:
[1,20]<stdout>:.:
[1,20]<stdout>:total 28
[1,20]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1848.export
[1,20]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,20]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,20]<stdout>:-rw-r--r-- 1 aster aster 22146 Jan 23 16:34 fort.6
[1,20]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,20]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,20]<stdout>:
[1,20]<stdout>:REPE_OUT:
[1,20]<stdout>:total 0
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Execution summary
[1,20]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,20]<stdout>:Execution of code_aster             15.40       4.68      20.08      40.43
[1,20]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:Total                               15.40       4.68      20.08      40.43
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:EXECUTION_CODE_ASTER_EXIT_1830=0
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:execution ended (command file #1): OK
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Content of /tmp/run_aster_jnzipism/proc.16 after execution:
[1,16]<stdout>:.:
[1,16]<stdout>:total 28
[1,16]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1830.export
[1,16]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,16]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,16]<stdout>:-rw-r--r-- 1 aster aster 22145 Jan 23 16:34 fort.6
[1,16]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,16]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,16]<stdout>:
[1,16]<stdout>:REPE_OUT:
[1,16]<stdout>:total 0
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Execution summary
[1,16]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:Preparation of environment           0.01       0.01       0.02       0.00
[1,16]<stdout>:Execution of code_aster             15.36       4.71      20.07      40.43
[1,16]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:Total                               15.37       4.72      20.09      40.43
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:EXECUTION_CODE_ASTER_EXIT_1853=0
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:execution ended (command file #1): OK
[1,4]<stdout>:
[1,4]<stdout>:EXECUTION_CODE_ASTER_EXIT_1705=0
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:execution ended (command file #1): OK
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Content of /tmp/run_aster_jnzipism/proc.21 after execution:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Content of /tmp/run_aster_jnzipism/proc.4 after execution:
[1,21]<stdout>:.:
[1,21]<stdout>:total 28
[1,21]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1853.export
[1,21]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,21]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,21]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:34 fort.6
[1,21]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,21]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,21]<stdout>:
[1,21]<stdout>:REPE_OUT:
[1,21]<stdout>:total 0
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Execution summary
[1,21]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,21]<stdout>:Execution of code_aster             15.41       4.68      20.09      40.44
[1,21]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:Total                               15.41       4.68      20.09      40.44
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:.:
[1,4]<stdout>:total 28
[1,4]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1705.export
[1,4]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,4]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,4]<stdout>:-rw-r--r-- 1 aster aster 22268 Jan 23 16:34 fort.6
[1,4]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,4]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,4]<stdout>:
[1,4]<stdout>:REPE_OUT:
[1,4]<stdout>:total 0
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution summary
[1,4]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,4]<stdout>:Execution of code_aster             15.54       4.52      20.06      40.56
[1,4]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:Total                               15.54       4.52      20.06      40.56
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:EXECUTION_CODE_ASTER_EXIT_1698=0
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:execution ended (command file #1): OK
[1,14]<stdout>:
[1,14]<stdout>:EXECUTION_CODE_ASTER_EXIT_1822=0
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:execution ended (command file #1): OK
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Content of /tmp/run_aster_jnzipism/proc.0 after execution:
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Content of /tmp/run_aster_jnzipism/proc.14 after execution:
[1,0]<stdout>:.:
[1,0]<stdout>:total 68
[1,0]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1698.export
[1,0]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,0]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,0]<stdout>:-rw-r--r-- 1 aster aster 15367 Jan 23 16:34 asrun.log
[1,0]<stdout>:-rw-r--r-- 1 aster aster 46538 Jan 23 16:34 fort.6
[1,0]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,0]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,0]<stdout>:
[1,0]<stdout>:REPE_OUT:
[1,0]<stdout>:total 0
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution summary
[1,0]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,0]<stdout>:Execution of code_aster             15.71       4.35      20.06      40.57
[1,0]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:Total                               15.71       4.35      20.06      40.57
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------
[1,0]<stdout>:--- DIAGNOSTIC JOB : OK
[1,0]<stdout>:------------------------------------------------------------
[1,0]<stdout>:
[1,14]<stdout>:.:
[1,14]<stdout>:total 28
[1,14]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1822.export
[1,14]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,14]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,14]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:34 fort.6
[1,14]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,14]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,14]<stdout>:
[1,14]<stdout>:REPE_OUT:
[1,14]<stdout>:total 0
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Execution summary
[1,14]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,14]<stdout>:Execution of code_aster             15.43       4.65      20.08      40.45
[1,14]<stdout>:Copying results                      0.01       0.00       0.01       0.00
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:Total                               15.44       4.65      20.09      40.46
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,24]<stdout>:
[1,24]<stdout>:EXECUTION_CODE_ASTER_EXIT_1862=0
[1,24]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:execution ended (command file #1): OK
[1,8]<stdout>:
[1,8]<stdout>:EXECUTION_CODE_ASTER_EXIT_1785=0
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:execution ended (command file #1): OK
[1,24]<stdout>:
[1,24]<stdout>:# ------------------------------------------------------------------------------
[1,24]<stdout>:Content of /tmp/run_aster_jnzipism/proc.24 after execution:
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Content of /tmp/run_aster_jnzipism/proc.8 after execution:
[1,24]<stdout>:.:
[1,24]<stdout>:total 28
[1,24]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1862.export
[1,24]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,24]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,24]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:34 fort.6
[1,24]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,24]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,24]<stdout>:
[1,24]<stdout>:REPE_OUT:
[1,24]<stdout>:total 0
[1,24]<stdout>:
[1,24]<stdout>:
[1,24]<stdout>:# ------------------------------------------------------------------------------
[1,24]<stdout>:Execution summary
[1,24]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,24]<stdout>:--------------------------------------------------------------------------------
[1,24]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,24]<stdout>:Execution of code_aster             15.33       4.76      20.09      40.45
[1,24]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,24]<stdout>:--------------------------------------------------------------------------------
[1,24]<stdout>:Total                               15.33       4.76      20.09      40.45
[1,24]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:.:
[1,8]<stdout>:total 28
[1,8]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1785.export
[1,8]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,8]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,8]<stdout>:-rw-r--r-- 1 aster aster 22145 Jan 23 16:34 fort.6
[1,8]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,8]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,8]<stdout>:
[1,8]<stdout>:REPE_OUT:
[1,8]<stdout>:total 0
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Execution summary
[1,8]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,8]<stdout>:Execution of code_aster             15.28       4.79      20.07      40.46
[1,8]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:Total                               15.28       4.79      20.07      40.46
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:EXECUTION_CODE_ASTER_EXIT_1806=0
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:execution ended (command file #1): OK
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Content of /tmp/run_aster_jnzipism/proc.12 after execution:
[1,30]<stdout>:
[1,30]<stdout>:EXECUTION_CODE_ASTER_EXIT_1869=0
[1,30]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:execution ended (command file #1): OK
[1,30]<stdout>:
[1,30]<stdout>:# ------------------------------------------------------------------------------
[1,30]<stdout>:Content of /tmp/run_aster_jnzipism/proc.30 after execution:
[1,12]<stdout>:.:
[1,12]<stdout>:total 28
[1,12]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1806.export
[1,12]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,12]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,12]<stdout>:-rw-r--r-- 1 aster aster 22146 Jan 23 16:34 fort.6
[1,12]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,12]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,12]<stdout>:
[1,12]<stdout>:REPE_OUT:
[1,12]<stdout>:total 0
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Execution summary
[1,12]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,12]<stdout>:Execution of code_aster             15.29       4.80      20.09      40.47
[1,12]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:Total                               15.29       4.80      20.09      40.47
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,30]<stdout>:.:
[1,30]<stdout>:total 28
[1,30]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1869.export
[1,30]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,30]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,30]<stdout>:-rw-r--r-- 1 aster aster 22146 Jan 23 16:34 fort.6
[1,30]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,30]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,30]<stdout>:
[1,30]<stdout>:REPE_OUT:
[1,30]<stdout>:total 0
[1,30]<stdout>:
[1,30]<stdout>:
[1,30]<stdout>:# ------------------------------------------------------------------------------
[1,30]<stdout>:Execution summary
[1,30]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,30]<stdout>:--------------------------------------------------------------------------------
[1,30]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,30]<stdout>:Execution of code_aster             15.46       4.63      20.09      40.46
[1,30]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,30]<stdout>:--------------------------------------------------------------------------------
[1,30]<stdout>:Total                               15.46       4.63      20.09      40.46
[1,30]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:EXECUTION_CODE_ASTER_EXIT_1778=0
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:execution ended (command file #1): OK
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Content of /tmp/run_aster_jnzipism/proc.7 after execution:
[1,7]<stdout>:.:
[1,7]<stdout>:total 28
[1,7]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1778.export
[1,7]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,7]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,7]<stdout>:-rw-r--r-- 1 aster aster 22144 Jan 23 16:34 fort.6
[1,7]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,7]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,7]<stdout>:
[1,7]<stdout>:REPE_OUT:
[1,7]<stdout>:total 0
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution summary
[1,7]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,7]<stdout>:Execution of code_aster             15.17       4.90      20.07      40.48
[1,7]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:Total                               15.17       4.90      20.07      40.48
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:EXECUTION_CODE_ASTER_EXIT_1703=0
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:execution ended (command file #1): OK
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Content of /tmp/run_aster_jnzipism/proc.2 after execution:
[1,2]<stdout>:.:
[1,2]<stdout>:total 28
[1,2]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1703.export
[1,2]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,2]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,2]<stdout>:-rw-r--r-- 1 aster aster 22145 Jan 23 16:34 fort.6
[1,2]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,2]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,2]<stdout>:
[1,2]<stdout>:REPE_OUT:
[1,2]<stdout>:total 0
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution summary
[1,2]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,2]<stdout>:Execution of code_aster             15.38       4.69      20.07      40.59
[1,2]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:Total                               15.38       4.69      20.07      40.59
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,28]<stdout>:
[1,28]<stdout>:EXECUTION_CODE_ASTER_EXIT_1867=0
[1,28]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:execution ended (command file #1): OK
[1,28]<stdout>:
[1,28]<stdout>:# ------------------------------------------------------------------------------
[1,28]<stdout>:Content of /tmp/run_aster_jnzipism/proc.28 after execution:
[1,28]<stdout>:.:
[1,28]<stdout>:total 28
[1,28]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:33 1867.export
[1,28]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_IN
[1,28]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:33 REPE_OUT
[1,28]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:34 fort.6
[1,28]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.8
[1,28]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:33 fort.9
[1,28]<stdout>:
[1,28]<stdout>:REPE_OUT:
[1,28]<stdout>:total 0
[1,28]<stdout>:
[1,28]<stdout>:
[1,28]<stdout>:# ------------------------------------------------------------------------------
[1,28]<stdout>:Execution summary
[1,28]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,28]<stdout>:--------------------------------------------------------------------------------
[1,28]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,28]<stdout>:Execution of code_aster             15.47       4.62      20.09      40.47
[1,28]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,28]<stdout>:--------------------------------------------------------------------------------
[1,28]<stdout>:Total                               15.47       4.62      20.09      40.47
[1,28]<stdout>:--------------------------------------------------------------------------------
