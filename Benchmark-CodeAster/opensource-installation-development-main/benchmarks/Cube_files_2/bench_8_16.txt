WARNING: If MPI_Abort is called during execution, result files could not be copied.
Running: mpiexec -n 16 --tag-output /opt/aster/install/mpi/bin/run_aster -n 16 --wrkdir /tmp/run_aster_liewisez --status-file /home/aster/.tmp_run_aster/run_aster_86aokcqf/__status__ --no-mpi /home/aster/.tmp_run_aster/run_aster_86aokcqf/Cube_perf.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution of code_aster
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command file #1 / 1
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution of code_aster
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.1
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command file #1 / 1
[1,0]<stdout>:
[1,0]<stdout>:Content of the file to execute:
[1,0]<stdout>:# coding=utf-8
[1,0]<stdout>:#!/usr/bin/python
[1,0]<stdout>:
[1,0]<stdout>:import os
[1,0]<stdout>:from statistics import mean
[1,0]<stdout>:from datetime import datetime
[1,0]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,0]<stdout>:
[1,0]<stdout>:from code_aster.Commands import *
[1,0]<stdout>:from code_aster import CA
[1,0]<stdout>:from code_aster.Utilities import petscInitialize
[1,0]<stdout>:
[1,0]<stdout>:CA.init()
[1,0]<stdout>:
[1,0]<stdout>:params = {}
[1,0]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,0]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,0]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,0]<stdout>:
[1,0]<stdout>:# General parameters
[1,0]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,0]<stdout>:rank = comm.Get_rank()
[1,0]<stdout>:size = comm.Get_size()
[1,0]<stdout>:
[1,0]<stdout>:nbHexa = 8 ** params["refinements"]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def memory_peak(mess=None):
[1,0]<stdout>:    """Return memory peak in MB"""
[1,0]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMgGen:
[1,0]<stdout>:    stats = {}
[1,0]<stdout>:
[1,0]<stdout>:    def __init__(self, what):
[1,0]<stdout>:        self._what = what
[1,0]<stdout>:
[1,0]<stdout>:    def __enter__(self):
[1,0]<stdout>:        self.start = datetime.now()
[1,0]<stdout>:
[1,0]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,0]<stdout>:        self.stop = datetime.now()
[1,0]<stdout>:        delta = self.stop - self.start
[1,0]<stdout>:        mem = memory_peak(self._what)
[1,0]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,0]<stdout>:    pass
[1,0]<stdout>:    # def __init__(self, what):
[1,0]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def write_stats(nume_ddl):
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB PROC")
[1,0]<stdout>:        print(size)
[1,0]<stdout>:        print()
[1,0]<stdout>:        print(
[1,0]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    for key, values in stats.items():
[1,0]<stdout>:        time = comm.gather(values[0], root=0)
[1,0]<stdout>:        mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(
[1,0]<stdout>:                key
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(m[1,0]<stdout>:ean(mem))
[1,0]<stdout>:            )
[1,0]<stdout>:
[1,0]<stdout>:    mesh = nume_ddl.getMesh()
[1,0]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,0]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,0]<stdout>:
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,0]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,0]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,0]<stdout>:
[1,0]<stdout>:    def show(*args, **kwargs):
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(*args, **kwargs)
[1,0]<stdout>:
[1,0]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,0]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,0]<stdout>:    separ = "| :--------------- | ----------: |"
[1,0]<stdout>:    show(fmti.format("Refinement", refine))
[1,0]<stdout>:    show(separ)
[1,0]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,0]<stdout>:    for key, values in data.items():
[1,0]<stdout>:        times = comm.gather(values[0], root=0)
[1,0]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            show(fmtt.format(key, mean(times)))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,0]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,0]<stdout>:
[1,0]<stdout>:with ChronoCtxMg("Total"):
[1,0]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,0]<stdout>:        if params["parallel"] == "HPC":
[1,0]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:        else:
[1,0]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Model"):
[1,0]<stdout>:        model = AFFE_MODELE(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                PHENOMENE="MECANIQUE",
[1,0]<stdout>:                MODELISATION="3D",
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Material"):
[1,0]<stdout>:        steel = DEFI_MATERIAU(
[1,0]<stdout>:            ELAS=_F(
[1,0]<stdout>:                E=200000.0,
[1,0]<stdout>:                NU=0.3,
[1,0]<stdout>:            ),
[1,0]<stdout>:            ECRO_LINE=_F(
[1,0]<stdout>:                D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                SY=200.0,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        mater = AFFE_MATERIAU(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                MATER=steel,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,0]<stdout>:        block = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="LEFT",
[1,0]<stdout>:                    DX=0,
[1,0]<stdout>:                    DY=0.0,
[1,0]<stdout>:                    DZ=0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="RIGHT",
[1,0]<stdout>:                    DY=0.001,
[1,0]<stdout>:                    DZ=0.001,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,0]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            OPTION="RIGI_MECA",
[1,0]<stdout>:            CHAM_MATER=mater,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Numbering"):
[1,0]<stdout>:        dofNum = NUME_DDL(
[1,0]<stdout>:            MATR_RIGI=stiff_elem,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Assembly"):
[1,0]<stdout>:        stiffness = ASSE_MATRICE(
[1,0]<stdout>:            MATR_ELEM=stiff_elem,
[1,0]<stdout>:            NUME_DDL=dofNum,
[1,0]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,0]<stdout>:        rhs = CREA_CHAMP(
[1,0]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,0]<stdout>:            OPERATION="AFFE",
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                NOM_CMP=(
[1,0]<stdout>:                    "DX",
[1,0]<stdout>:                    "DY",
[1,0]<stdout>:                    "DZ",
[1,0]<stdout>:                ),
[1,0]<stdout>:                VALE=(
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,0]<stdout>:
[1,0]<stdout>:    if params["solver"] == "PETSC":
[1,0]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,0]<stdout>:    elif params["solver"] == "MUMPS":
[1,0]<stdout>:        solver = CA.MumpsSolver(
[1,0]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,0]<stdout>:   [1,0]<stdout>:         RENUM="PARMETIS",
[1,0]<stdout>:            ACCELERATION="FR+",
[1,0]<stdout>:            POSTTRAITEMENTS="MINI",
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Factorize"):
[1,0]<stdout>:        solver.factorize(stiffness)
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Solve"):
[1,0]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,0]<stdout>:
[1,0]<stdout>:# write_stats(dofNum)
[1,0]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,0]<stdout>:if params["parallel"] == "HPC":
[1,0]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,0]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,0]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,0]<stdout>:
[1,0]<stdout>:CA.close()
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command line #1:
[1,0]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,1]<stdout>:
[1,1]<stdout>:Content of the file to execute:
[1,1]<stdout>:# coding=utf-8
[1,1]<stdout>:#!/usr/bin/python
[1,1]<stdout>:
[1,1]<stdout>:import os
[1,1]<stdout>:from statistics import mean
[1,1]<stdout>:from datetime import datetime
[1,1]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,1]<stdout>:
[1,1]<stdout>:from code_aster.Commands import *
[1,1]<stdout>:from code_aster import CA
[1,1]<stdout>:from code_aster.Utilities import petscInitialize
[1,1]<stdout>:
[1,1]<stdout>:CA.init()
[1,1]<stdout>:
[1,1]<stdout>:params = {}
[1,1]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,1]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,1]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,1]<stdout>:
[1,1]<stdout>:# General parameters
[1,1]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,1]<stdout>:rank = comm.Get_rank()
[1,1]<stdout>:size = comm.Get_size()
[1,1]<stdout>:
[1,1]<stdout>:nbHexa = 8 ** params["refinements"]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def memory_peak(mess=None):
[1,1]<stdout>:    """Return memory peak in MB"""
[1,1]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMgGen:
[1,1]<stdout>:    stats = {}
[1,1]<stdout>:
[1,1]<stdout>:    def __init__(self, what):
[1,1]<stdout>:        self._what = what
[1,1]<stdout>:
[1,1]<stdout>:    def __enter__(self):
[1,1]<stdout>:        self.start = datetime.now()
[1,1]<stdout>:
[1,1]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,1]<stdout>:        self.stop = datetime.now()
[1,1]<stdout>:        delta = self.stop - self.start
[1,1]<stdout>:        mem = memory_peak(self._what)
[1,1]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,1]<stdout>:    pass
[1,1]<stdout>:    # def __init__(self, what):
[1,1]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def write_stats(nume_ddl):
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB PROC")
[1,1]<stdout>:        print(size)
[1,1]<stdout>:        print()
[1,1]<stdout>:        print(
[1,1]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    for key, values in stats.items():
[1,1]<stdout>:        time = comm.gather(values[0], root=0)
[1,1]<stdout>:        mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(
[1,1]<stdout>:                key
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(mem))
[1,1]<stdout>:            )
[1,1]<stdout>:
[1,1]<stdout>:    mesh = nume_ddl.getMesh()
[1,1]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,1]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,1]<stdout>:
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,1]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,1]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,1]<stdout>:
[1,1]<stdout>:    def show(*args, **kwargs):
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(*args, **kwargs)
[1,1]<stdout>:
[1,1]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,1]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,1]<stdout>:    separ = "| :--------------- | ----------: |"
[1,1]<stdout>:    show(fmti.format("Refinement", refine))
[1,1]<stdout>:    show(separ)
[1,1]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,1]<stdout>:    for key, values in data.items():
[1,1]<stdout>:        times = comm.gather(values[0], root=0)
[1,1]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            show(fmtt.format(key, mean(times)))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,1]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,1]<stdout>:
[1,1]<stdout>:with ChronoCtxMg("Total"):
[1,1]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,1]<stdout>:        if params["parallel"] == "HPC":
[1,1]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:        else:
[1,1]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Model"):
[1,1]<stdout>:        model = AFFE_MODELE(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                PHENOMENE="MECANIQUE",
[1,1]<stdout>:                MODELISATION="3D",
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Material"):
[1,1]<stdout>:        steel = DEFI_MATERIAU(
[1,1]<stdout>:            ELAS=_F(
[1,1]<stdout>:                E=200000.0,
[1,1]<stdout>:                NU=0.3,
[1,1]<stdout>:            ),
[1,1]<stdout>:            ECRO_LINE=_F(
[1,1]<stdout>:   [1,1]<stdout>:             D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                SY=200.0,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        mater = AFFE_MATERIAU(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                MATER=steel,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,1]<stdout>:        block = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="LEFT",
[1,1]<stdout>:                    DX=0,
[1,1]<stdout>:                    DY=0.0,
[1,1]<stdout>:                    DZ=0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="RIGHT",
[1,1]<stdout>:                    DY=0.001,
[1,1]<stdout>:                    DZ=0.001,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,1]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            OPTION="RIGI_MECA",
[1,1]<stdout>:            CHAM_MATER=mater,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Numbering"):
[1,1]<stdout>:        dofNum = NUME_DDL(
[1,1]<stdout>:            MATR_RIGI=stiff_elem,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Assembly"):
[1,1]<stdout>:        stiffness = ASSE_MATRICE(
[1,1]<stdout>:            MATR_ELEM=stiff_elem,
[1,1]<stdout>:            NUME_DDL=dofNum,
[1,1]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,1]<stdout>:        rhs = CREA_CHAMP(
[1,1]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,1]<stdout>:            OPERATION="AFFE",
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                NOM_CMP=(
[1,1]<stdout>:                    "DX",
[1,1]<stdout>:                    "DY",
[1,1]<stdout>:                    "DZ",
[1,1]<stdout>:                ),
[1,1]<stdout>:                VALE=(
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,1]<stdout>:
[1,1]<stdout>:    if params["solver"] == "PETSC":
[1,1]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,1]<stdout>:    elif params["solver"] == "MUMPS":
[1,1]<stdout>:        solver = CA.MumpsSolver(
[1,1]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,1]<stdout>:            RENUM="PARMETIS",
[1,1]<stdout>:            ACCELERATION="FR+",
[1,1]<stdout>:            POSTTRAITEMENTS="MINI",
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Factorize"):
[1,1]<stdout>:        solver.factorize(stiffness)
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Solve"):
[1,1]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,1]<stdout>:
[1,1]<stdout>:# write_stats(dofNum)
[1,1]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,1]<stdout>:if params["parallel"] == "HPC":
[1,1]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,1]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,1]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,1]<stdout>:
[1,1]<stdout>:CA.close()
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command line #1:
[1,1]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution of code_aster
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.2
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command file #1 / 1
[1,2]<stdout>:
[1,2]<stdout>:Content of the file to execute:
[1,2]<stdout>:# coding=utf-8
[1,2]<stdout>:#!/usr/bin/python
[1,2]<stdout>:
[1,2]<stdout>:import os
[1,2]<stdout>:from statistics import mean
[1,2]<stdout>:from datetime import datetime
[1,2]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,2]<stdout>:
[1,2]<stdout>:from code_aster.Commands import *
[1,2]<stdout>:from code_aster import CA
[1,2]<stdout>:from code_aster.Utilities import petscInitialize
[1,2]<stdout>:
[1,2]<stdout>:CA.init()
[1,2]<stdout>:
[1,2]<stdout>:params = {}
[1,2]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,2]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,2]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,2]<stdout>:
[1,2]<stdout>:# General parameters
[1,2]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,2]<stdout>:rank = comm.Get_rank()
[1,2]<stdout>:size = comm.Get_size()
[1,2]<stdout>:
[1,2]<stdout>:nbHexa = 8 ** params["refinements"]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def memory_peak(mess=None):
[1,2]<stdout>:    """Return memory peak in MB"""
[1,2]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMgGen:
[1,2]<stdout>:    stats = {}
[1,2]<stdout>:
[1,2]<stdout>:    def __init__(self, what):
[1,2]<stdout>:        self._what = what
[1,2]<stdout>:
[1,2]<stdout>:    def __enter__(self):
[1,2]<stdout>:        self.start = datetime.now()
[1,2]<stdout>:
[1,2]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,2]<stdout>:        self.stop = datetime.now()
[1,2]<stdout>:        delta = self.stop - self.start
[1,2]<stdout>:        mem = memory_peak(self._what)
[1,2]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,2]<stdout>:    pass
[1,2]<stdout>:    # def __init__(self, what):
[1,2]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def write_stats(nume_ddl):
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB PROC")
[1,2]<stdout>:        print(size)
[1,2]<stdout>:        print()
[1,2]<stdout>:        print(
[1,2]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    for key, values in stats.items():
[1,2]<stdout>:        time = comm.gather(values[0], root=0)
[1,2]<stdout>:        mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(
[1,2]<stdout>:                key
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(mem))
[1,2]<stdout>:            )
[1,2]<stdout>:
[1,2]<stdout>:    mesh = nume_ddl.getMesh()
[1,2]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,2]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,2]<stdout>:
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,2]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,2]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,2]<stdout>:
[1,2]<stdout>:    def show(*args, **kwargs):
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(*args, **kwargs)
[1,2]<stdout>:
[1,2]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,2]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,2]<stdout>:    separ = "| :--------------- | ----------: |"
[1,2]<stdout>:    show(fmti.format("Refinement", refine))
[1,2]<stdout>:    show(separ)
[1,2]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,2]<stdout>:    for key, values in data.items():
[1,2]<stdout>:        times = comm.gather(values[0], root=0)
[1,2]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            show(fmtt.format(key, mean(times)))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,2]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,2]<stdout>:
[1,2]<stdout>:with ChronoCtxMg("Total"):
[1,2]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,2]<stdout>:        if params["parallel"] == "HPC":
[1,2]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:        else:
[1,2]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Model"):
[1,2]<stdout>:        model = AFFE_MODELE(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                PHENOMENE="MECANIQUE",
[1,2]<stdout>:                MODELISATION="3D",
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Material"):
[1,2]<stdout>:        steel = DEFI_MATERIAU(
[1,2]<stdout>:            ELAS=_F(
[1,2]<stdout>:                E=200000.0,
[1,2]<stdout>:                NU=0.3,
[1,2]<stdout>:            ),
[1,2]<stdout>:            ECRO_LINE=_F(
[1,2]<stdout>:   [1,2]<stdout>:             D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                SY=200.0,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        mater = AFFE_MATERIAU(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                MATER=steel,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,2]<stdout>:        block = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="LEFT",
[1,2]<stdout>:                    DX=0,
[1,2]<stdout>:                    DY=0.0,
[1,2]<stdout>:                    DZ=0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="RIGHT",
[1,2]<stdout>:                    DY=0.001,
[1,2]<stdout>:                    DZ=0.001,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,2]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            OPTION="RIGI_MECA",
[1,2]<stdout>:            CHAM_MATER=mater,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Numbering"):
[1,2]<stdout>:        dofNum = NUME_DDL(
[1,2]<stdout>:            MATR_RIGI=stiff_elem,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Assembly"):
[1,2]<stdout>:        stiffness = ASSE_MATRICE(
[1,2]<stdout>:            MATR_ELEM=stiff_elem,
[1,2]<stdout>:            NUME_DDL=dofNum,
[1,2]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,2]<stdout>:        rhs = CREA_CHAMP(
[1,2]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,2]<stdout>:            OPERATION="AFFE",
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                NOM_CMP=(
[1,2]<stdout>:                    "DX",
[1,2]<stdout>:                    "DY",
[1,2]<stdout>:                    "DZ",
[1,2]<stdout>:                ),
[1,2]<stdout>:                VALE=(
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,2]<stdout>:
[1,2]<stdout>:    if params["solver"] == "PETSC":
[1,2]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,2]<stdout>:    elif params["solver"] == "MUMPS":
[1,2]<stdout>:        solver = CA.MumpsSolver(
[1,2]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,2]<stdout>:            RENUM="PARMETIS",
[1,2]<stdout>:            ACCELERATION="FR+",
[1,2]<stdout>:            POSTTRAITEMENTS="MINI",
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Factorize"):
[1,2]<stdout>:        solver.factorize(stiffness)
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Solve"):
[1,2]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,2]<stdout>:
[1,2]<stdout>:# write_stats(dofNum)
[1,2]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,2]<stdout>:if params["parallel"] == "HPC":
[1,2]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,2]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,2]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,2]<stdout>:
[1,2]<stdout>:CA.close()
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command line #1:
[1,2]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution of code_aster
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.3
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command file #1 / 1
[1,3]<stdout>:
[1,3]<stdout>:Content of the file to execute:
[1,3]<stdout>:# coding=utf-8
[1,3]<stdout>:#!/usr/bin/python
[1,3]<stdout>:
[1,3]<stdout>:import os
[1,3]<stdout>:from statistics import mean
[1,3]<stdout>:from datetime import datetime
[1,3]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,3]<stdout>:
[1,3]<stdout>:from code_aster.Commands import *
[1,3]<stdout>:from code_aster import CA
[1,3]<stdout>:from code_aster.Utilities import petscInitialize
[1,3]<stdout>:
[1,3]<stdout>:CA.init()
[1,3]<stdout>:
[1,3]<stdout>:params = {}
[1,3]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,3]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,3]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,3]<stdout>:
[1,3]<stdout>:# General parameters
[1,3]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,3]<stdout>:rank = comm.Get_rank()
[1,3]<stdout>:size = comm.Get_size()
[1,3]<stdout>:
[1,3]<stdout>:nbHexa = 8 ** params["refinements"]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def memory_peak(mess=None):
[1,3]<stdout>:    """Return memory peak in MB"""
[1,3]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMgGen:
[1,3]<stdout>:    stats = {}
[1,3]<stdout>:
[1,3]<stdout>:    def __init__(self, what):
[1,3]<stdout>:        self._what = what
[1,3]<stdout>:
[1,3]<stdout>:    def __enter__(self):
[1,3]<stdout>:        self.start = datetime.now()
[1,3]<stdout>:
[1,3]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,3]<stdout>:        self.stop = datetime.now()
[1,3]<stdout>:        delta = self.stop - self.start
[1,3]<stdout>:        mem = memory_peak(self._what)
[1,3]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,3]<stdout>:    pass
[1,3]<stdout>:    # def __init__(self, what):
[1,3]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def write_stats(nume_ddl):
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB PROC")
[1,3]<stdout>:        print(size)
[1,3]<stdout>:        print()
[1,3]<stdout>:        print(
[1,3]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    for key, values in stats.items():
[1,3]<stdout>:        time = comm.gather(values[0], root=0)
[1,3]<stdout>:        mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(
[1,3]<stdout>:                key
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(m[1,3]<stdout>:ean(mem))
[1,3]<stdout>:            )
[1,3]<stdout>:
[1,3]<stdout>:    mesh = nume_ddl.getMesh()
[1,3]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,3]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,3]<stdout>:
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,3]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,3]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,3]<stdout>:
[1,3]<stdout>:    def show(*args, **kwargs):
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(*args, **kwargs)
[1,3]<stdout>:
[1,3]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,3]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,3]<stdout>:    separ = "| :--------------- | ----------: |"
[1,3]<stdout>:    show(fmti.format("Refinement", refine))
[1,3]<stdout>:    show(separ)
[1,3]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,3]<stdout>:    for key, values in data.items():
[1,3]<stdout>:        times = comm.gather(values[0], root=0)
[1,3]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            show(fmtt.format(key, mean(times)))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,3]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,3]<stdout>:
[1,3]<stdout>:with ChronoCtxMg("Total"):
[1,3]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,3]<stdout>:        if params["parallel"] == "HPC":
[1,3]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:        else:
[1,3]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Model"):
[1,3]<stdout>:        model = AFFE_MODELE(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                PHENOMENE="MECANIQUE",
[1,3]<stdout>:                MODELISATION="3D",
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Material"):
[1,3]<stdout>:        steel = DEFI_MATERIAU(
[1,3]<stdout>:            ELAS=_F(
[1,3]<stdout>:                E=200000.0,
[1,3]<stdout>:                NU=0.3,
[1,3]<stdout>:            ),
[1,3]<stdout>:            ECRO_LINE=_F(
[1,3]<stdout>:    [1,3]<stdout>:            D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                SY=200.0,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        mater = AFFE_MATERIAU(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                MATER=steel,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,3]<stdout>:        block = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="LEFT",
[1,3]<stdout>:                    DX=0,
[1,3]<stdout>:                    DY=0.0,
[1,3]<stdout>:                    DZ=0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="RIGHT",
[1,3]<stdout>:                    DY=0.001,
[1,3]<stdout>:                    DZ=0.001,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,3]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            OPTION="RIGI_MECA",
[1,3]<stdout>:            CHAM_MATER=mater,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Numbering"):
[1,3]<stdout>:        dofNum = NUME_DDL(
[1,3]<stdout>:            MATR_RIGI=stiff_elem,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Assembly"):
[1,3]<stdout>:        stiffness = ASSE_MATRICE(
[1,3]<stdout>:            MATR_ELEM=stiff_elem,
[1,3]<stdout>:            NUME_DDL=dofNum,
[1,3]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,3]<stdout>:        rhs = CREA_CHAMP(
[1,3]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,3]<stdout>:            OPERATION="AFFE",
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                NOM_CMP=(
[1,3]<stdout>:                    "DX",
[1,3]<stdout>:                    "DY",
[1,3]<stdout>:                    "DZ",
[1,3]<stdout>:                ),
[1,3]<stdout>:                VALE=(
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,3]<stdout>:
[1,3]<stdout>:    if params["solver"] == "PETSC":
[1,3]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,3]<stdout>:    elif params["solver"] == "MUMPS":
[1,3]<stdout>:        solver = CA.MumpsSolver(
[1,3]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,3]<stdout>:            RENUM="PARMETIS",
[1,3]<stdout>:            ACCELERATION="FR+",
[1,3]<stdout>:            POSTTRAITEMENTS="MINI",
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Factorize"):
[1,3]<stdout>:        solver.factorize(stiffness)
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Solve"):
[1,3]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,3]<stdout>:
[1,3]<stdout>:# write_stats(dofNum)
[1,3]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,3]<stdout>:if params["parallel"] == "HPC":
[1,3]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,3]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,3]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,3]<stdout>:
[1,3]<stdout>:CA.close()
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command line #1:
[1,3]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution of code_aster
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.4
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command file #1 / 1
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution of code_aster
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.5
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command file #1 / 1
[1,4]<stdout>:
[1,4]<stdout>:Content of the file to execute:
[1,4]<stdout>:# coding=utf-8
[1,4]<stdout>:#!/usr/bin/python
[1,4]<stdout>:
[1,4]<stdout>:import os
[1,4]<stdout>:from statistics import mean
[1,4]<stdout>:from datetime import datetime
[1,4]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,4]<stdout>:
[1,4]<stdout>:from code_aster.Commands import *
[1,4]<stdout>:from code_aster import CA
[1,4]<stdout>:from code_aster.Utilities import petscInitialize
[1,4]<stdout>:
[1,4]<stdout>:CA.init()
[1,4]<stdout>:
[1,4]<stdout>:params = {}
[1,4]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,4]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,4]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,4]<stdout>:
[1,4]<stdout>:# General parameters
[1,4]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,4]<stdout>:rank = comm.Get_rank()
[1,4]<stdout>:size = comm.Get_size()
[1,4]<stdout>:
[1,4]<stdout>:nbHexa = 8 ** params["refinements"]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def memory_peak(mess=None):
[1,4]<stdout>:    """Return memory peak in MB"""
[1,4]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMgGen:
[1,4]<stdout>:    stats = {}
[1,4]<stdout>:
[1,4]<stdout>:    def __init__(self, what):
[1,4]<stdout>:        self._what = what
[1,4]<stdout>:
[1,4]<stdout>:    def __enter__(self):
[1,4]<stdout>:        self.start = datetime.now()
[1,4]<stdout>:
[1,4]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,4]<stdout>:        self.stop = datetime.now()
[1,4]<stdout>:        delta = self.stop - self.start
[1,4]<stdout>:        mem = memory_peak(self._what)
[1,4]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,4]<stdout>:    pass
[1,4]<stdout>:    # def __init__(self, what):
[1,4]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def write_stats(nume_ddl):
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB PROC")
[1,4]<stdout>:        print(size)
[1,4]<stdout>:        print()
[1,4]<stdout>:        print(
[1,4]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    for key, values in stats.items():
[1,4]<stdout>:        time = comm.gather(values[0], root=0)
[1,4]<stdout>:        mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(
[1,4]<stdout>:                key
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(mem))
[1,4]<stdout>:            )
[1,4]<stdout>:
[1,4]<stdout>:    mesh = nume_ddl.getMesh()
[1,4]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,4]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,4]<stdout>:
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,4]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,4]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,4]<stdout>:
[1,4]<stdout>:    def show(*args, **kwargs):
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(*args, **kwargs)
[1,4]<stdout>:
[1,4]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,4]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,4]<stdout>:    separ = "| :--------------- | ----------: |"
[1,4]<stdout>:    show(fmti.format("Refinement", refine))
[1,4]<stdout>:    show(separ)
[1,4]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,4]<stdout>:    for key, values in data.items():
[1,4]<stdout>:        times = comm.gather(values[0], root=0)
[1,4]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            show(fmtt.format(key, mean(times)))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,4]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,4]<stdout>:
[1,4]<stdout>:with ChronoCtxMg("Total"):
[1,4]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,4]<stdout>:        if params["parallel"] == "HPC":
[1,4]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:        else:
[1,4]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Model"):
[1,4]<stdout>:        model = AFFE_MODELE(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                PHENOMENE="MECANIQUE",
[1,4]<stdout>:                MODELISATION="3D",
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Material"):
[1,4]<stdout>:        steel = DEFI_MATERIAU(
[1,4]<stdout>:            ELAS=_F(
[1,4]<stdout>:                E=200000.0,
[1,4]<stdout>:                NU=0.3,
[1,4]<stdout>:            ),
[1,4]<stdout>:            ECRO_LINE=_F(
[1,4]<stdout>:   [1,4]<stdout>:             D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                SY=200.0,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        mater = AFFE_MATERIAU(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                MATER=steel,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,4]<stdout>:        block = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="LEFT",
[1,4]<stdout>:                    DX=0,
[1,4]<stdout>:                    DY=0.0,
[1,4]<stdout>:                    DZ=0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="RIGHT",
[1,4]<stdout>:                    DY=0.001,
[1,4]<stdout>:                    DZ=0.001,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,4]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            OPTION="RIGI_MECA",
[1,4]<stdout>:            CHAM_MATER=mater,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Numbering"):
[1,4]<stdout>:        dofNum = NUME_DDL(
[1,4]<stdout>:            MATR_RIGI=stiff_elem,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Assembly"):
[1,4]<stdout>:        stiffness = ASSE_MATRICE(
[1,4]<stdout>:            MATR_ELEM=stiff_elem,
[1,4]<stdout>:            NUME_DDL=dofNum,
[1,4]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,4]<stdout>:        rhs = CREA_CHAMP(
[1,4]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,4]<stdout>:            OPERATION="AFFE",
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                NOM_CMP=(
[1,4]<stdout>:                    "DX",
[1,4]<stdout>:                    "DY",
[1,4]<stdout>:                    "DZ",
[1,4]<stdout>:                ),
[1,4]<stdout>:                VALE=(
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,4]<stdout>:
[1,4]<stdout>:    if params["solver"] == "PETSC":
[1,4]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,4]<stdout>:    elif params["solver"] == "MUMPS":
[1,4]<stdout>:        solver = CA.MumpsSolver(
[1,4]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,4]<stdout>:            RENUM="PARMETIS",
[1,4]<stdout>:            ACCELERATION="FR+",
[1,4]<stdout>:            POSTTRAITEMENTS="MINI",
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Factorize"):
[1,4]<stdout>:        solver.factorize(stiffness)
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Solve"):
[1,4]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,4]<stdout>:
[1,4]<stdout>:# write_stats(dofNum)
[1,4]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,4]<stdout>:if params["parallel"] == "HPC":
[1,4]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,4]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,4]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,4]<stdout>:
[1,4]<stdout>:CA.close()
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command line #1:
[1,4]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,5]<stdout>:
[1,5]<stdout>:Content of the file to execute:
[1,5]<stdout>:# coding=utf-8
[1,5]<stdout>:#!/usr/bin/python
[1,5]<stdout>:
[1,5]<stdout>:import os
[1,5]<stdout>:from statistics import mean
[1,5]<stdout>:from datetime import datetime
[1,5]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,5]<stdout>:
[1,5]<stdout>:from code_aster.Commands import *
[1,5]<stdout>:from code_aster import CA
[1,5]<stdout>:from code_aster.Utilities import petscInitialize
[1,5]<stdout>:
[1,5]<stdout>:CA.init()
[1,5]<stdout>:
[1,5]<stdout>:params = {}
[1,5]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,5]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,5]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,5]<stdout>:
[1,5]<stdout>:# General parameters
[1,5]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,5]<stdout>:rank = comm.Get_rank()
[1,5]<stdout>:size = comm.Get_size()
[1,5]<stdout>:
[1,5]<stdout>:nbHexa = 8 ** params["refinements"]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def memory_peak(mess=None):
[1,5]<stdout>:    """Return memory peak in MB"""
[1,5]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMgGen:
[1,5]<stdout>:    stats = {}
[1,5]<stdout>:
[1,5]<stdout>:    def __init__(self, what):
[1,5]<stdout>:        self._what = what
[1,5]<stdout>:
[1,5]<stdout>:    def __enter__(self):
[1,5]<stdout>:        self.start = datetime.now()
[1,5]<stdout>:
[1,5]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,5]<stdout>:        self.stop = datetime.now()
[1,5]<stdout>:        delta = self.stop - self.start
[1,5]<stdout>:        mem = memory_peak(self._what)
[1,5]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,5]<stdout>:    pass
[1,5]<stdout>:    # def __init__(self, what):
[1,5]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def write_stats(nume_ddl):
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB PROC")
[1,5]<stdout>:        print(size)
[1,5]<stdout>:        print()
[1,5]<stdout>:        print(
[1,5]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    for key, values in stats.items():
[1,5]<stdout>:        time = comm.gather(values[0], root=0)
[1,5]<stdout>:        mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(
[1,5]<stdout>:                key
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(mem))
[1,5]<stdout>:            )
[1,5]<stdout>:
[1,5]<stdout>:    mesh = nume_ddl.getMesh()
[1,5]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,5]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,5]<stdout>:
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,5]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,5]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,5]<stdout>:
[1,5]<stdout>:    def show(*args, **kwargs):
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(*args, **kwargs)
[1,5]<stdout>:
[1,5]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,5]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,5]<stdout>:    separ = "| :--------------- | ----------: |"
[1,5]<stdout>:    show(fmti.format("Refinement", refine))
[1,5]<stdout>:    show(separ)
[1,5]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,5]<stdout>:    for key, values in data.items():
[1,5]<stdout>:        times = comm.gather(values[0], root=0)
[1,5]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            show(fmtt.format(key, mean(times)))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,5]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,5]<stdout>:
[1,5]<stdout>:with ChronoCtxMg("Total"):
[1,5]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,5]<stdout>:        if params["parallel"] == "HPC":
[1,5]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:        else:
[1,5]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Model"):
[1,5]<stdout>:        model = AFFE_MODELE(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                PHENOMENE="MECANIQUE",
[1,5]<stdout>:                MODELISATION="3D",
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Material"):
[1,5]<stdout>:        steel = DEFI_MATERIAU(
[1,5]<stdout>:            ELAS=_F(
[1,5]<stdout>:                E=200000.0,
[1,5]<stdout>:                NU=0.3,
[1,5]<stdout>:            ),
[1,5]<stdout>:            ECRO_LINE=_F(
[1,5]<stdout>:   [1,5]<stdout>:             D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                SY=200.0,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        mater = AFFE_MATERIAU(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                MATER=steel,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,5]<stdout>:        block = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="LEFT",
[1,5]<stdout>:                    DX=0,
[1,5]<stdout>:                    DY=0.0,
[1,5]<stdout>:                    DZ=0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="RIGHT",
[1,5]<stdout>:                    DY=0.001,
[1,5]<stdout>:                    DZ=0.001,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,5]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            OPTION="RIGI_MECA",
[1,5]<stdout>:            CHAM_MATER=mater,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Numbering"):
[1,5]<stdout>:        dofNum = NUME_DDL(
[1,5]<stdout>:            MATR_RIGI=stiff_elem,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Assembly"):
[1,5]<stdout>:        stiffness = ASSE_MATRICE(
[1,5]<stdout>:            MATR_ELEM=stiff_elem,
[1,5]<stdout>:            NUME_DDL=dofNum,
[1,5]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,5]<stdout>:        rhs = CREA_CHAMP(
[1,5]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,5]<stdout>:            OPERATION="AFFE",
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                NOM_CMP=(
[1,5]<stdout>:                    "DX",
[1,5]<stdout>:                    "DY",
[1,5]<stdout>:                    "DZ",
[1,5]<stdout>:                ),
[1,5]<stdout>:                VALE=(
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,5]<stdout>:
[1,5]<stdout>:    if params["solver"] == "PETSC":
[1,5]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,5]<stdout>:    elif params["solver"] == "MUMPS":
[1,5]<stdout>:        solver = CA.MumpsSolver(
[1,5]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,5]<stdout>:            RENUM="PARMETIS",
[1,5]<stdout>:            ACCELERATION="FR+",
[1,5]<stdout>:            POSTTRAITEMENTS="MINI",
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Factorize"):
[1,5]<stdout>:        solver.factorize(stiffness)
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Solve"):
[1,5]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,5]<stdout>:
[1,5]<stdout>:# write_stats(dofNum)
[1,5]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,5]<stdout>:if params["parallel"] == "HPC":
[1,5]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,5]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,5]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,5]<stdout>:
[1,5]<stdout>:CA.close()
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command line #1:
[1,5]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution of code_aster
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.6
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command file #1 / 1
[1,6]<stdout>:
[1,6]<stdout>:Content of the file to execute:
[1,6]<stdout>:# coding=utf-8
[1,6]<stdout>:#!/usr/bin/python
[1,6]<stdout>:
[1,6]<stdout>:import os
[1,6]<stdout>:from statistics import mean
[1,6]<stdout>:from datetime import datetime
[1,6]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,6]<stdout>:
[1,6]<stdout>:from code_aster.Commands import *
[1,6]<stdout>:from code_aster import CA
[1,6]<stdout>:from code_aster.Utilities import petscInitialize
[1,6]<stdout>:
[1,6]<stdout>:CA.init()
[1,6]<stdout>:
[1,6]<stdout>:params = {}
[1,6]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,6]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,6]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,6]<stdout>:
[1,6]<stdout>:# General parameters
[1,6]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,6]<stdout>:rank = comm.Get_rank()
[1,6]<stdout>:size = comm.Get_size()
[1,6]<stdout>:
[1,6]<stdout>:nbHexa = 8 ** params["refinements"]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def memory_peak(mess=None):
[1,6]<stdout>:    """Return memory peak in MB"""
[1,6]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMgGen:
[1,6]<stdout>:    stats = {}
[1,6]<stdout>:
[1,6]<stdout>:    def __init__(self, what):
[1,6]<stdout>:        self._what = what
[1,6]<stdout>:
[1,6]<stdout>:    def __enter__(self):
[1,6]<stdout>:        self.start = datetime.now()
[1,6]<stdout>:
[1,6]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,6]<stdout>:        self.stop = datetime.now()
[1,6]<stdout>:        delta = self.stop - self.start
[1,6]<stdout>:        mem = memory_peak(self._what)
[1,6]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,6]<stdout>:    pass
[1,6]<stdout>:    # def __init__(self, what):
[1,6]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def write_stats(nume_ddl):
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB PROC")
[1,6]<stdout>:        print(size)
[1,6]<stdout>:        print()
[1,6]<stdout>:        print(
[1,6]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    for key, values in stats.items():
[1,6]<stdout>:        time = comm.gather(values[0], root=0)
[1,6]<stdout>:        mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(
[1,6]<stdout>:                key
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(mem))
[1,6]<stdout>:            )
[1,6]<stdout>:
[1,6]<stdout>:    mesh = nume_ddl.getMesh()
[1,6]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,6]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,6]<stdout>:
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,6]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,6]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,6]<stdout>:
[1,6]<stdout>:    def show(*args, **kwargs):
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(*args, **kwargs)
[1,6]<stdout>:
[1,6]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,6]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,6]<stdout>:    separ = "| :--------------- | ----------: |"
[1,6]<stdout>:    show(fmti.format("Refinement", refine))
[1,6]<stdout>:    show(separ)
[1,6]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,6]<stdout>:    for key, values in data.items():
[1,6]<stdout>:        times = comm.gather(values[0], root=0)
[1,6]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            show(fmtt.format(key, mean(times)))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,6]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,6]<stdout>:
[1,6]<stdout>:with ChronoCtxMg("Total"):
[1,6]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,6]<stdout>:        if params["parallel"] == "HPC":
[1,6]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:        else:
[1,6]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Model"):
[1,6]<stdout>:        model = AFFE_MODELE(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                PHENOMENE="MECANIQUE",
[1,6]<stdout>:                MODELISATION="3D",
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Material"):
[1,6]<stdout>:        steel = DEFI_MATERIAU(
[1,6]<stdout>:            ELAS=_F(
[1,6]<stdout>:                E=200000.0,
[1,6]<stdout>:                NU=0.3,
[1,6]<stdout>:            ),
[1,6]<stdout>:            ECRO_LINE=_F(
[1,6]<stdout>:    [1,6]<stdout>:            D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                SY=200.0,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        mater = AFFE_MATERIAU(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                MATER=steel,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,6]<stdout>:        block = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="LEFT",
[1,6]<stdout>:                    DX=0,
[1,6]<stdout>:                    DY=0.0,
[1,6]<stdout>:                    DZ=0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="RIGHT",
[1,6]<stdout>:                    DY=0.001,
[1,6]<stdout>:                    DZ=0.001,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,6]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            OPTION="RIGI_MECA",
[1,6]<stdout>:            CHAM_MATER=mater,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Numbering"):
[1,6]<stdout>:        dofNum = NUME_DDL(
[1,6]<stdout>:            MATR_RIGI=stiff_elem,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Assembly"):
[1,6]<stdout>:        stiffness = ASSE_MATRICE(
[1,6]<stdout>:            MATR_ELEM=stiff_elem,
[1,6]<stdout>:            NUME_DDL=dofNum,
[1,6]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,6]<stdout>:        rhs = CREA_CHAMP(
[1,6]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,6]<stdout>:            OPERATION="AFFE",
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                NOM_CMP=(
[1,6]<stdout>:                    "DX",
[1,6]<stdout>:                    "DY",
[1,6]<stdout>:                    "DZ",
[1,6]<stdout>:                ),
[1,6]<stdout>:                VALE=(
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,6]<stdout>:
[1,6]<stdout>:    if params["solver"] == "PETSC":
[1,6]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,6]<stdout>:    elif params["solver"] == "MUMPS":
[1,6]<stdout>:        solver = CA.MumpsSolver(
[1,6]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,6]<stdout>:            RENUM="PARMETIS",
[1,6]<stdout>:            ACCELERATION="FR+",
[1,6]<stdout>:            POSTTRAITEMENTS="MINI",
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Factorize"):
[1,6]<stdout>:        solver.factorize(stiffness)
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Solve"):
[1,6]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,6]<stdout>:
[1,6]<stdout>:# write_stats(dofNum)
[1,6]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,6]<stdout>:if params["parallel"] == "HPC":
[1,6]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,6]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,6]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,6]<stdout>:
[1,6]<stdout>:CA.close()
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command line #1:
[1,6]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution of code_aster
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.7
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command file #1 / 1
[1,7]<stdout>:
[1,7]<stdout>:Content of the file to execute:
[1,7]<stdout>:# coding=utf-8
[1,7]<stdout>:#!/usr/bin/python
[1,7]<stdout>:
[1,7]<stdout>:import os
[1,7]<stdout>:from statistics import mean
[1,7]<stdout>:from datetime import datetime
[1,7]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,7]<stdout>:
[1,7]<stdout>:from code_aster.Commands import *
[1,7]<stdout>:from code_aster import CA
[1,7]<stdout>:from code_aster.Utilities import petscInitialize
[1,7]<stdout>:
[1,7]<stdout>:CA.init()
[1,7]<stdout>:
[1,7]<stdout>:params = {}
[1,7]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,7]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,7]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,7]<stdout>:
[1,7]<stdout>:# General parameters
[1,7]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,7]<stdout>:rank = comm.Get_rank()
[1,7]<stdout>:size = comm.Get_size()
[1,7]<stdout>:
[1,7]<stdout>:nbHexa = 8 ** params["refinements"]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def memory_peak(mess=None):
[1,7]<stdout>:    """Return memory peak in MB"""
[1,7]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMgGen:
[1,7]<stdout>:    stats = {}
[1,7]<stdout>:
[1,7]<stdout>:    def __init__(self, what):
[1,7]<stdout>:        self._what = what
[1,7]<stdout>:
[1,7]<stdout>:    def __enter__(self):
[1,7]<stdout>:        self.start = datetime.now()
[1,7]<stdout>:
[1,7]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,7]<stdout>:        self.stop = datetime.now()
[1,7]<stdout>:        delta = self.stop - self.start
[1,7]<stdout>:        mem = memory_peak(self._what)
[1,7]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,7]<stdout>:    pass
[1,7]<stdout>:    # def __init__(self, what):
[1,7]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def write_stats(nume_ddl):
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB PROC")
[1,7]<stdout>:        print(size)
[1,7]<stdout>:        print()
[1,7]<stdout>:        print(
[1,7]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    for key, values in stats.items():
[1,7]<stdout>:        time = comm.gather(values[0], root=0)
[1,7]<stdout>:        mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(
[1,7]<stdout>:                key
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(mem))
[1,7]<stdout>:            )
[1,7]<stdout>:
[1,7]<stdout>:    mesh = nume_ddl.getMesh()
[1,7]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,7]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,7]<stdout>:
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,7]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,7]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,7]<stdout>:
[1,7]<stdout>:    def show(*args, **kwargs):
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(*args, **kwargs)
[1,7]<stdout>:
[1,7]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,7]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,7]<stdout>:    separ = "| :--------------- | ----------: |"
[1,7]<stdout>:    show(fmti.format("Refinement", refine))
[1,7]<stdout>:    show(separ)
[1,7]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,7]<stdout>:    for key, values in data.items():
[1,7]<stdout>:        times = comm.gather(values[0], root=0)
[1,7]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            show(fmtt.format(key, mean(times)))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,7]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,7]<stdout>:
[1,7]<stdout>:with ChronoCtxMg("Total"):
[1,7]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,7]<stdout>:        if params["parallel"] == "HPC":
[1,7]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:        else:
[1,7]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Model"):
[1,7]<stdout>:        model = AFFE_MODELE(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                PHENOMENE="MECANIQUE",
[1,7]<stdout>:                MODELISATION="3D",
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Material"):
[1,7]<stdout>:        steel = DEFI_MATERIAU(
[1,7]<stdout>:            ELAS=_F(
[1,7]<stdout>:                E=200000.0,
[1,7]<stdout>:                NU=0.3,
[1,7]<stdout>:            ),
[1,7]<stdout>:            ECRO_LINE=_F(
[1,7]<stdout>:   [1,7]<stdout>:             D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                SY=200.0,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        mater = AFFE_MATERIAU(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                MATER=steel,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,7]<stdout>:        block = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="LEFT",
[1,7]<stdout>:                    DX=0,
[1,7]<stdout>:                    DY=0.0,
[1,7]<stdout>:                    DZ=0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="RIGHT",
[1,7]<stdout>:                    DY=0.001,
[1,7]<stdout>:                    DZ=0.001,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,7]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            OPTION="RIGI_MECA",
[1,7]<stdout>:            CHAM_MATER=mater,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Numbering"):
[1,7]<stdout>:        dofNum = NUME_DDL(
[1,7]<stdout>:            MATR_RIGI=stiff_elem,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Assembly"):
[1,7]<stdout>:        stiffness = ASSE_MATRICE(
[1,7]<stdout>:            MATR_ELEM=stiff_elem,
[1,7]<stdout>:            NUME_DDL=dofNum,
[1,7]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,7]<stdout>:        rhs = CREA_CHAMP(
[1,7]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,7]<stdout>:            OPERATION="AFFE",
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                NOM_CMP=(
[1,7]<stdout>:                    "DX",
[1,7]<stdout>:                    "DY",
[1,7]<stdout>:                    "DZ",
[1,7]<stdout>:                ),
[1,7]<stdout>:                VALE=(
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,7]<stdout>:
[1,7]<stdout>:    if params["solver"] == "PETSC":
[1,7]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,7]<stdout>:    elif params["solver"] == "MUMPS":
[1,7]<stdout>:        solver = CA.MumpsSolver(
[1,7]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,7]<stdout>:            RENUM="PARMETIS",
[1,7]<stdout>:            ACCELERATION="FR+",
[1,7]<stdout>:            POSTTRAITEMENTS="MINI",
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Factorize"):
[1,7]<stdout>:        solver.factorize(stiffness)
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Solve"):
[1,7]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,7]<stdout>:
[1,7]<stdout>:# write_stats(dofNum)
[1,7]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,7]<stdout>:if params["parallel"] == "HPC":
[1,7]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,7]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,7]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,7]<stdout>:
[1,7]<stdout>:CA.close()
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command line #1:
[1,7]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Execution of code_aster
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.8
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Command file #1 / 1
[1,8]<stdout>:
[1,8]<stdout>:Content of the file to execute:
[1,8]<stdout>:# coding=utf-8
[1,8]<stdout>:#!/usr/bin/python
[1,8]<stdout>:
[1,8]<stdout>:import os
[1,8]<stdout>:from statistics import mean
[1,8]<stdout>:from datetime import datetime
[1,8]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,8]<stdout>:
[1,8]<stdout>:from code_aster.Commands import *
[1,8]<stdout>:from code_aster import CA
[1,8]<stdout>:from code_aster.Utilities import petscInitialize
[1,8]<stdout>:
[1,8]<stdout>:CA.init()
[1,8]<stdout>:
[1,8]<stdout>:params = {}
[1,8]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,8]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,8]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,8]<stdout>:
[1,8]<stdout>:# General parameters
[1,8]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,8]<stdout>:rank = comm.Get_rank()
[1,8]<stdout>:size = comm.Get_size()
[1,8]<stdout>:
[1,8]<stdout>:nbHexa = 8 ** params["refinements"]
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def memory_peak(mess=None):
[1,8]<stdout>:    """Return memory peak in MB"""
[1,8]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:class ChronoCtxMgGen:
[1,8]<stdout>:    stats = {}
[1,8]<stdout>:
[1,8]<stdout>:    def __init__(self, what):
[1,8]<stdout>:        self._what = what
[1,8]<stdout>:
[1,8]<stdout>:    def __enter__(self):
[1,8]<stdout>:        self.start = datetime.now()
[1,8]<stdout>:
[1,8]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,8]<stdout>:        self.stop = datetime.now()
[1,8]<stdout>:        delta = self.stop - self.start
[1,8]<stdout>:        mem = memory_peak(self._what)
[1,8]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,8]<stdout>:    pass
[1,8]<stdout>:    # def __init__(self, what):
[1,8]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def write_stats(nume_ddl):
[1,8]<stdout>:    if rank == 0:
[1,8]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,8]<stdout>:        print()
[1,8]<stdout>:        print("NB PROC")
[1,8]<stdout>:        print(size)
[1,8]<stdout>:        print()
[1,8]<stdout>:        print(
[1,8]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    for key, values in stats.items():
[1,8]<stdout>:        time = comm.gather(values[0], root=0)
[1,8]<stdout>:        mem = comm.gather(values[1], root=0)
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            print(
[1,8]<stdout>:                key
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(min(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(max(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(mean(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(min(mem))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(max(mem))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(mean(mem))
[1,8]<stdout>:            )
[1,8]<stdout>:
[1,8]<stdout>:    mesh = nume_ddl.getMesh()
[1,8]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,8]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,8]<stdout>:
[1,8]<stdout>:    if rank == 0:
[1,8]<stdout>:        print()
[1,8]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,8]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,8]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,8]<stdout>:
[1,8]<stdout>:    def show(*args, **kwargs):
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            print(*args, **kwargs)
[1,8]<stdout>:
[1,8]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,8]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,8]<stdout>:    separ = "| :--------------- | ----------: |"
[1,8]<stdout>:    show(fmti.format("Refinement", refine))
[1,8]<stdout>:    show(separ)
[1,8]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,8]<stdout>:    for key, values in data.items():
[1,8]<stdout>:        times = comm.gather(values[0], root=0)
[1,8]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            show(fmtt.format(key, mean(times)))
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,8]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,8]<stdout>:
[1,8]<stdout>:with ChronoCtxMg("Total"):
[1,8]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,8]<stdout>:        if params["parallel"] == "HPC":
[1,8]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,8]<stdout>:        else:
[1,8]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Model"):
[1,8]<stdout>:        model = AFFE_MODELE(
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                PHENOMENE="MECANIQUE",
[1,8]<stdout>:                MODELISATION="3D",
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Material"):
[1,8]<stdout>:        steel = DEFI_MATERIAU(
[1,8]<stdout>:            ELAS=_F(
[1,8]<stdout>:                E=200000.0,
[1,8]<stdout>:                NU=0.3,
[1,8]<stdout>:            ),
[1,8]<stdout>:            ECRO_LINE=_F(
[1,8]<stdout>:   [1,8]<stdout>:             D_SIGM_EPSI=2000.0,
[1,8]<stdout>:                SY=200.0,
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        mater = AFFE_MATERIAU(
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                MATER=steel,
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,8]<stdout>:        block = AFFE_CHAR_CINE(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            MECA_IMPO=(
[1,8]<stdout>:                _F(
[1,8]<stdout>:                    GROUP_MA="LEFT",
[1,8]<stdout>:                    DX=0,
[1,8]<stdout>:                    DY=0.0,
[1,8]<stdout>:                    DZ=0.0,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            MECA_IMPO=(
[1,8]<stdout>:                _F(
[1,8]<stdout>:                    GROUP_MA="RIGHT",
[1,8]<stdout>:                    DY=0.001,
[1,8]<stdout>:                    DZ=0.001,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,8]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            OPTION="RIGI_MECA",
[1,8]<stdout>:            CHAM_MATER=mater,
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Numbering"):
[1,8]<stdout>:        dofNum = NUME_DDL(
[1,8]<stdout>:            MATR_RIGI=stiff_elem,
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Assembly"):
[1,8]<stdout>:        stiffness = ASSE_MATRICE(
[1,8]<stdout>:            MATR_ELEM=stiff_elem,
[1,8]<stdout>:            NUME_DDL=dofNum,
[1,8]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,8]<stdout>:        rhs = CREA_CHAMP(
[1,8]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,8]<stdout>:            OPERATION="AFFE",
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                NOM_CMP=(
[1,8]<stdout>:                    "DX",
[1,8]<stdout>:                    "DY",
[1,8]<stdout>:                    "DZ",
[1,8]<stdout>:                ),
[1,8]<stdout>:                VALE=(
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,8]<stdout>:
[1,8]<stdout>:    if params["solver"] == "PETSC":
[1,8]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,8]<stdout>:    elif params["solver"] == "MUMPS":
[1,8]<stdout>:        solver = CA.MumpsSolver(
[1,8]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,8]<stdout>:            RENUM="PARMETIS",
[1,8]<stdout>:            ACCELERATION="FR+",
[1,8]<stdout>:            POSTTRAITEMENTS="MINI",
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Factorize"):
[1,8]<stdout>:        solver.factorize(stiffness)
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Solve"):
[1,8]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,8]<stdout>:
[1,8]<stdout>:# write_stats(dofNum)
[1,8]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,8]<stdout>:if params["parallel"] == "HPC":
[1,8]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,8]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,8]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,8]<stdout>:
[1,8]<stdout>:CA.close()
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Command line #1:
[1,8]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Execution of code_aster
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.9
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Command file #1 / 1
[1,9]<stdout>:
[1,9]<stdout>:Content of the file to execute:
[1,9]<stdout>:# coding=utf-8
[1,9]<stdout>:#!/usr/bin/python
[1,9]<stdout>:
[1,9]<stdout>:import os
[1,9]<stdout>:from statistics import mean
[1,9]<stdout>:from datetime import datetime
[1,9]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,9]<stdout>:
[1,9]<stdout>:from code_aster.Commands import *
[1,9]<stdout>:from code_aster import CA
[1,9]<stdout>:from code_aster.Utilities import petscInitialize
[1,9]<stdout>:
[1,9]<stdout>:CA.init()
[1,9]<stdout>:
[1,9]<stdout>:params = {}
[1,9]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,9]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,9]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,9]<stdout>:
[1,9]<stdout>:# General parameters
[1,9]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,9]<stdout>:rank = comm.Get_rank()
[1,9]<stdout>:size = comm.Get_size()
[1,9]<stdout>:
[1,9]<stdout>:nbHexa = 8 ** params["refinements"]
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def memory_peak(mess=None):
[1,9]<stdout>:    """Return memory peak in MB"""
[1,9]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:class ChronoCtxMgGen:
[1,9]<stdout>:    stats = {}
[1,9]<stdout>:
[1,9]<stdout>:    def __init__(self, what):
[1,9]<stdout>:        self._what = what
[1,9]<stdout>:
[1,9]<stdout>:    def __enter__(self):
[1,9]<stdout>:        self.start = datetime.now()
[1,9]<stdout>:
[1,9]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,9]<stdout>:        self.stop = datetime.now()
[1,9]<stdout>:        delta = self.stop - self.start
[1,9]<stdout>:        mem = memory_peak(self._what)
[1,9]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,9]<stdout>:    pass
[1,9]<stdout>:    # def __init__(self, what):
[1,9]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def write_stats(nume_ddl):
[1,9]<stdout>:    if rank == 0:
[1,9]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,9]<stdout>:        print()
[1,9]<stdout>:        print("NB PROC")
[1,9]<stdout>:        print(size)
[1,9]<stdout>:        print()
[1,9]<stdout>:        print(
[1,9]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    for key, values in stats.items():
[1,9]<stdout>:        time = comm.gather(values[0], root=0)
[1,9]<stdout>:        mem = comm.gather(values[1], root=0)
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            print(
[1,9]<stdout>:                key
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(min(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(max(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(mean(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(min(mem))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(max(mem))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(mean(mem))
[1,9]<stdout>:            )
[1,9]<stdout>:
[1,9]<stdout>:    mesh = nume_ddl.getMesh()
[1,9]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,9]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,9]<stdout>:
[1,9]<stdout>:    if rank == 0:
[1,9]<stdout>:        print()
[1,9]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,9]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,9]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,9]<stdout>:
[1,9]<stdout>:    def show(*args, **kwargs):
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            print(*args, **kwargs)
[1,9]<stdout>:
[1,9]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,9]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,9]<stdout>:    separ = "| :--------------- | ----------: |"
[1,9]<stdout>:    show(fmti.format("Refinement", refine))
[1,9]<stdout>:    show(separ)
[1,9]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,9]<stdout>:    for key, values in data.items():
[1,9]<stdout>:        times = comm.gather(values[0], root=0)
[1,9]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            show(fmtt.format(key, mean(times)))
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,9]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,9]<stdout>:
[1,9]<stdout>:with ChronoCtxMg("Total"):
[1,9]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,9]<stdout>:        if params["parallel"] == "HPC":
[1,9]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,9]<stdout>:        else:
[1,9]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Model"):
[1,9]<stdout>:        model = AFFE_MODELE(
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                PHENOMENE="MECANIQUE",
[1,9]<stdout>:                MODELISATION="3D",
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Material"):
[1,9]<stdout>:        steel = DEFI_MATERIAU(
[1,9]<stdout>:            ELAS=_F(
[1,9]<stdout>:                E=200000.0,
[1,9]<stdout>:                NU=0.3,
[1,9]<stdout>:            ),
[1,9]<stdout>:            ECRO_LINE=_F(
[1,9]<stdout>:   [1,9]<stdout>:             D_SIGM_EPSI=2000.0,
[1,9]<stdout>:                SY=200.0,
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        mater = AFFE_MATERIAU(
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                MATER=steel,
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,9]<stdout>:        block = AFFE_CHAR_CINE(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            MECA_IMPO=(
[1,9]<stdout>:                _F(
[1,9]<stdout>:                    GROUP_MA="LEFT",
[1,9]<stdout>:                    DX=0,
[1,9]<stdout>:                    DY=0.0,
[1,9]<stdout>:                    DZ=0.0,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            MECA_IMPO=(
[1,9]<stdout>:                _F(
[1,9]<stdout>:                    GROUP_MA="RIGHT",
[1,9]<stdout>:                    DY=0.001,
[1,9]<stdout>:                    DZ=0.001,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,9]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            OPTION="RIGI_MECA",
[1,9]<stdout>:            CHAM_MATER=mater,
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Numbering"):
[1,9]<stdout>:        dofNum = NUME_DDL(
[1,9]<stdout>:            MATR_RIGI=stiff_elem,
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Assembly"):
[1,9]<stdout>:        stiffness = ASSE_MATRICE(
[1,9]<stdout>:            MATR_ELEM=stiff_elem,
[1,9]<stdout>:            NUME_DDL=dofNum,
[1,9]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,9]<stdout>:        rhs = CREA_CHAMP(
[1,9]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,9]<stdout>:            OPERATION="AFFE",
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                NOM_CMP=(
[1,9]<stdout>:                    "DX",
[1,9]<stdout>:                    "DY",
[1,9]<stdout>:                    "DZ",
[1,9]<stdout>:                ),
[1,9]<stdout>:                VALE=(
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,9]<stdout>:
[1,9]<stdout>:    if params["solver"] == "PETSC":
[1,9]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,9]<stdout>:    elif params["solver"] == "MUMPS":
[1,9]<stdout>:        solver = CA.MumpsSolver(
[1,9]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,9]<stdout>:            RENUM="PARMETIS",
[1,9]<stdout>:            ACCELERATION="FR+",
[1,9]<stdout>:            POSTTRAITEMENTS="MINI",
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Factorize"):
[1,9]<stdout>:        solver.factorize(stiffness)
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Solve"):
[1,9]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,9]<stdout>:
[1,9]<stdout>:# write_stats(dofNum)
[1,9]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,9]<stdout>:if params["parallel"] == "HPC":
[1,9]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,9]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,9]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,9]<stdout>:
[1,9]<stdout>:CA.close()
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Command line #1:
[1,9]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Execution of code_aster
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.10
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Command file #1 / 1
[1,10]<stdout>:
[1,10]<stdout>:Content of the file to execute:
[1,10]<stdout>:# coding=utf-8
[1,10]<stdout>:#!/usr/bin/python
[1,10]<stdout>:
[1,10]<stdout>:import os
[1,10]<stdout>:from statistics import mean
[1,10]<stdout>:from datetime import datetime
[1,10]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,10]<stdout>:
[1,10]<stdout>:from code_aster.Commands import *
[1,10]<stdout>:from code_aster import CA
[1,10]<stdout>:from code_aster.Utilities import petscInitialize
[1,10]<stdout>:
[1,10]<stdout>:CA.init()
[1,10]<stdout>:
[1,10]<stdout>:params = {}
[1,10]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,10]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,10]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,10]<stdout>:
[1,10]<stdout>:# General parameters
[1,10]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,10]<stdout>:rank = comm.Get_rank()
[1,10]<stdout>:size = comm.Get_size()
[1,10]<stdout>:
[1,10]<stdout>:nbHexa = 8 ** params["refinements"]
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def memory_peak(mess=None):
[1,10]<stdout>:    """Return memory peak in MB"""
[1,10]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:class ChronoCtxMgGen:
[1,10]<stdout>:    stats = {}
[1,10]<stdout>:
[1,10]<stdout>:    def __init__(self, what):
[1,10]<stdout>:        self._what = what
[1,10]<stdout>:
[1,10]<stdout>:    def __enter__(self):
[1,10]<stdout>:        self.start = datetime.now()
[1,10]<stdout>:
[1,10]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,10]<stdout>:        self.stop = datetime.now()
[1,10]<stdout>:        delta = self.stop - self.start
[1,10]<stdout>:        mem = memory_peak(self._what)
[1,10]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,10]<stdout>:    pass
[1,10]<stdout>:    # def __init__(self, what):
[1,10]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def write_stats(nume_ddl):
[1,10]<stdout>:    if rank == 0:
[1,10]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,10]<stdout>:        print()
[1,10]<stdout>:        print("NB PROC")
[1,10]<stdout>:        print(size)
[1,10]<stdout>:        print()
[1,10]<stdout>:        print(
[1,10]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    for key, values in stats.items():
[1,10]<stdout>:        time = comm.gather(values[0], root=0)
[1,10]<stdout>:        mem = comm.gather(values[1], root=0)
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            print(
[1,10]<stdout>:                key
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(min(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(max(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(mean(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(min(mem))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(max(mem))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(mean(mem))
[1,10]<stdout>:            )
[1,10]<stdout>:
[1,10]<stdout>:    mesh = nume_ddl.getMesh()
[1,10]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,10]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,10]<stdout>:
[1,10]<stdout>:    if rank == 0:
[1,10]<stdout>:        print()
[1,10]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,10]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,10]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,10]<stdout>:
[1,10]<stdout>:    def show(*args, **kwargs):
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            print(*args, **kwargs)
[1,10]<stdout>:
[1,10]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,10]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,10]<stdout>:    separ = "| :--------------- | ----------: |"
[1,10]<stdout>:    show(fmti.format("Refinement", refine))
[1,10]<stdout>:    show(separ)
[1,10]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,10]<stdout>:    for key, values in data.items():
[1,10]<stdout>:        times = comm.gather(values[0], root=0)
[1,10]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            show(fmtt.format(key, mean(times)))
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,10]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,10]<stdout>:
[1,10]<stdout>:with ChronoCtxMg("Total"):
[1,10]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,10]<stdout>:        if params["parallel"] == "HPC":
[1,10]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,10]<stdout>:        else:
[1,10]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Model"):
[1,10]<stdout>:        model = AFFE_MODELE(
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                PHENOMENE="MECANIQUE",
[1,10]<stdout>:                MODELISATION="3D",
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Material"):
[1,10]<stdout>:        steel = DEFI_MATERIAU(
[1,10]<stdout>:            ELAS=_F(
[1,10]<stdout>:                E=200000.0,
[1,10]<stdout>:                NU=0.3,
[1,10]<stdout>:            ),
[1,10]<stdout>:            ECRO_LINE=_F(
[1,10]<stdout>:   [1,10]<stdout>:             D_SIGM_EPSI=2000.0,
[1,10]<stdout>:                SY=200.0,
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        mater = AFFE_MATERIAU(
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                MATER=steel,
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,10]<stdout>:        block = AFFE_CHAR_CINE(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            MECA_IMPO=(
[1,10]<stdout>:                _F(
[1,10]<stdout>:                    GROUP_MA="LEFT",
[1,10]<stdout>:                    DX=0,
[1,10]<stdout>:                    DY=0.0,
[1,10]<stdout>:                    DZ=0.0,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            MECA_IMPO=(
[1,10]<stdout>:                _F(
[1,10]<stdout>:                    GROUP_MA="RIGHT",
[1,10]<stdout>:                    DY=0.001,
[1,10]<stdout>:                    DZ=0.001,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,10]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            OPTION="RIGI_MECA",
[1,10]<stdout>:            CHAM_MATER=mater,
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Numbering"):
[1,10]<stdout>:        dofNum = NUME_DDL(
[1,10]<stdout>:            MATR_RIGI=stiff_elem,
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Assembly"):
[1,10]<stdout>:        stiffness = ASSE_MATRICE(
[1,10]<stdout>:            MATR_ELEM=stiff_elem,
[1,10]<stdout>:            NUME_DDL=dofNum,
[1,10]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,10]<stdout>:        rhs = CREA_CHAMP(
[1,10]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,10]<stdout>:            OPERATION="AFFE",
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                NOM_CMP=(
[1,10]<stdout>:                    "DX",
[1,10]<stdout>:                    "DY",
[1,10]<stdout>:                    "DZ",
[1,10]<stdout>:                ),
[1,10]<stdout>:                VALE=(
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,10]<stdout>:
[1,10]<stdout>:    if params["solver"] == "PETSC":
[1,10]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,10]<stdout>:    elif params["solver"] == "MUMPS":
[1,10]<stdout>:        solver = CA.MumpsSolver(
[1,10]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,10]<stdout>:            RENUM="PARMETIS",
[1,10]<stdout>:            ACCELERATION="FR+",
[1,10]<stdout>:            POSTTRAITEMENTS="MINI",
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Factorize"):
[1,10]<stdout>:        solver.factorize(stiffness)
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Solve"):
[1,10]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,10]<stdout>:
[1,10]<stdout>:# write_stats(dofNum)
[1,10]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,10]<stdout>:if params["parallel"] == "HPC":
[1,10]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,10]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,10]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,10]<stdout>:
[1,10]<stdout>:CA.close()
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Command line #1:
[1,10]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Execution of code_aster
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.11
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Command file #1 / 1
[1,11]<stdout>:
[1,11]<stdout>:Content of the file to execute:
[1,11]<stdout>:# coding=utf-8
[1,11]<stdout>:#!/usr/bin/python
[1,11]<stdout>:
[1,11]<stdout>:import os
[1,11]<stdout>:from statistics import mean
[1,11]<stdout>:from datetime import datetime
[1,11]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,11]<stdout>:
[1,11]<stdout>:from code_aster.Commands import *
[1,11]<stdout>:from code_aster import CA
[1,11]<stdout>:from code_aster.Utilities import petscInitialize
[1,11]<stdout>:
[1,11]<stdout>:CA.init()
[1,11]<stdout>:
[1,11]<stdout>:params = {}
[1,11]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,11]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,11]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,11]<stdout>:
[1,11]<stdout>:# General parameters
[1,11]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,11]<stdout>:rank = comm.Get_rank()
[1,11]<stdout>:size = comm.Get_size()
[1,11]<stdout>:
[1,11]<stdout>:nbHexa = 8 ** params["refinements"]
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def memory_peak(mess=None):
[1,11]<stdout>:    """Return memory peak in MB"""
[1,11]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:class ChronoCtxMgGen:
[1,11]<stdout>:    stats = {}
[1,11]<stdout>:
[1,11]<stdout>:    def __init__(self, what):
[1,11]<stdout>:        self._what = what
[1,11]<stdout>:
[1,11]<stdout>:    def __enter__(self):
[1,11]<stdout>:        self.start = datetime.now()
[1,11]<stdout>:
[1,11]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,11]<stdout>:        self.stop = datetime.now()
[1,11]<stdout>:        delta = self.stop - self.start
[1,11]<stdout>:        mem = memory_peak(self._what)
[1,11]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,11]<stdout>:    pass
[1,11]<stdout>:    # def __init__(self, what):
[1,11]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def write_stats(nume_ddl):
[1,11]<stdout>:    if rank == 0:
[1,11]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,11]<stdout>:        print()
[1,11]<stdout>:        print("NB PROC")
[1,11]<stdout>:        print(size)
[1,11]<stdout>:        print()
[1,11]<stdout>:        print(
[1,11]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    for key, values in stats.items():
[1,11]<stdout>:        time = comm.gather(values[0], root=0)
[1,11]<stdout>:        mem = comm.gather(values[1], root=0)
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            print(
[1,11]<stdout>:                key
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(min(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(max(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(mean(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(min(mem))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(max(mem))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(mean(mem))
[1,11]<stdout>:            )
[1,11]<stdout>:
[1,11]<stdout>:    mesh = nume_ddl.getMesh()
[1,11]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,11]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,11]<stdout>:
[1,11]<stdout>:    if rank == 0:
[1,11]<stdout>:        print()
[1,11]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,11]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,11]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,11]<stdout>:
[1,11]<stdout>:    def show(*args, **kwargs):
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            print(*args, **kwargs)
[1,11]<stdout>:
[1,11]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,11]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,11]<stdout>:    separ = "| :--------------- | ----------: |"
[1,11]<stdout>:    show(fmti.format("Refinement", refine))
[1,11]<stdout>:    show(separ)
[1,11]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,11]<stdout>:    for key, values in data.items():
[1,11]<stdout>:        times = comm.gather(values[0], root=0)
[1,11]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            show(fmtt.format(key, mean(times)))
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,11]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,11]<stdout>:
[1,11]<stdout>:with ChronoCtxMg("Total"):
[1,11]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,11]<stdout>:        if params["parallel"] == "HPC":
[1,11]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,11]<stdout>:        else:
[1,11]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Model"):
[1,11]<stdout>:        model = AFFE_MODELE(
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                PHENOMENE="MECANIQUE",
[1,11]<stdout>:                MODELISATION="3D",
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Material"):
[1,11]<stdout>:        steel = DEFI_MATERIAU(
[1,11]<stdout>:            ELAS=_F(
[1,11]<stdout>:                E=200000.0,
[1,11]<stdout>:                NU=0.3,
[1,11]<stdout>:            ),
[1,11]<stdout>:            ECRO_LINE=_F(
[1,11]<stdout>:   [1,11]<stdout>:             D_SIGM_EPSI=2000.0,
[1,11]<stdout>:                SY=200.0,
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        mater = AFFE_MATERIAU(
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                MATER=steel,
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,11]<stdout>:        block = AFFE_CHAR_CINE(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            MECA_IMPO=(
[1,11]<stdout>:                _F(
[1,11]<stdout>:                    GROUP_MA="LEFT",
[1,11]<stdout>:                    DX=0,
[1,11]<stdout>:                    DY=0.0,
[1,11]<stdout>:                    DZ=0.0,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            MECA_IMPO=(
[1,11]<stdout>:                _F(
[1,11]<stdout>:                    GROUP_MA="RIGHT",
[1,11]<stdout>:                    DY=0.001,
[1,11]<stdout>:                    DZ=0.001,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,11]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            OPTION="RIGI_MECA",
[1,11]<stdout>:            CHAM_MATER=mater,
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Numbering"):
[1,11]<stdout>:        dofNum = NUME_DDL(
[1,11]<stdout>:            MATR_RIGI=stiff_elem,
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Assembly"):
[1,11]<stdout>:        stiffness = ASSE_MATRICE(
[1,11]<stdout>:            MATR_ELEM=stiff_elem,
[1,11]<stdout>:            NUME_DDL=dofNum,
[1,11]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,11]<stdout>:        rhs = CREA_CHAMP(
[1,11]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,11]<stdout>:            OPERATION="AFFE",
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                NOM_CMP=(
[1,11]<stdout>:                    "DX",
[1,11]<stdout>:                    "DY",
[1,11]<stdout>:                    "DZ",
[1,11]<stdout>:                ),
[1,11]<stdout>:                VALE=(
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,11]<stdout>:
[1,11]<stdout>:    if params["solver"] == "PETSC":
[1,11]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,11]<stdout>:    elif params["solver"] == "MUMPS":
[1,11]<stdout>:        solver = CA.MumpsSolver(
[1,11]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,11]<stdout>:            RENUM="PARMETIS",
[1,11]<stdout>:            ACCELERATION="FR+",
[1,11]<stdout>:            POSTTRAITEMENTS="MINI",
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Factorize"):
[1,11]<stdout>:        solver.factorize(stiffness)
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Solve"):
[1,11]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,11]<stdout>:
[1,11]<stdout>:# write_stats(dofNum)
[1,11]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,11]<stdout>:if params["parallel"] == "HPC":
[1,11]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,11]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,11]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,11]<stdout>:
[1,11]<stdout>:CA.close()
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Command line #1:
[1,11]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Execution of code_aster
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.12
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Command file #1 / 1
[1,12]<stdout>:
[1,12]<stdout>:Content of the file to execute:
[1,12]<stdout>:# coding=utf-8
[1,12]<stdout>:#!/usr/bin/python
[1,12]<stdout>:
[1,12]<stdout>:import os
[1,12]<stdout>:from statistics import mean
[1,12]<stdout>:from datetime import datetime
[1,12]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,12]<stdout>:
[1,12]<stdout>:from code_aster.Commands import *
[1,12]<stdout>:from code_aster import CA
[1,12]<stdout>:from code_aster.Utilities import petscInitialize
[1,12]<stdout>:
[1,12]<stdout>:CA.init()
[1,12]<stdout>:
[1,12]<stdout>:params = {}
[1,12]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,12]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,12]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,12]<stdout>:
[1,12]<stdout>:# General parameters
[1,12]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,12]<stdout>:rank = comm.Get_rank()
[1,12]<stdout>:size = comm.Get_size()
[1,12]<stdout>:
[1,12]<stdout>:nbHexa = 8 ** params["refinements"]
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def memory_peak(mess=None):
[1,12]<stdout>:    """Return memory peak in MB"""
[1,12]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:class ChronoCtxMgGen:
[1,12]<stdout>:    stats = {}
[1,12]<stdout>:
[1,12]<stdout>:    def __init__(self, what):
[1,12]<stdout>:        self._what = what
[1,12]<stdout>:
[1,12]<stdout>:    def __enter__(self):
[1,12]<stdout>:        self.start = datetime.now()
[1,12]<stdout>:
[1,12]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,12]<stdout>:        self.stop = datetime.now()
[1,12]<stdout>:        delta = self.stop - self.start
[1,12]<stdout>:        mem = memory_peak(self._what)
[1,12]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,12]<stdout>:    pass
[1,12]<stdout>:    # def __init__(self, what):
[1,12]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def write_stats(nume_ddl):
[1,12]<stdout>:    if rank == 0:
[1,12]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,12]<stdout>:        print()
[1,12]<stdout>:        print("NB PROC")
[1,12]<stdout>:        print(size)
[1,12]<stdout>:        print()
[1,12]<stdout>:        print(
[1,12]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    for key, values in stats.items():
[1,12]<stdout>:        time = comm.gather(values[0], root=0)
[1,12]<stdout>:        mem = comm.gather(values[1], root=0)
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            print(
[1,12]<stdout>:                key
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(min(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(max(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(mean(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(min(mem))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(max(mem))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(m[1,12]<stdout>:ean(mem))
[1,12]<stdout>:            )
[1,12]<stdout>:
[1,12]<stdout>:    mesh = nume_ddl.getMesh()
[1,12]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,12]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,12]<stdout>:
[1,12]<stdout>:    if rank == 0:
[1,12]<stdout>:        print()
[1,12]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,12]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,12]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,12]<stdout>:
[1,12]<stdout>:    def show(*args, **kwargs):
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            print(*args, **kwargs)
[1,12]<stdout>:
[1,12]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,12]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,12]<stdout>:    separ = "| :--------------- | ----------: |"
[1,12]<stdout>:    show(fmti.format("Refinement", refine))
[1,12]<stdout>:    show(separ)
[1,12]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,12]<stdout>:    for key, values in data.items():
[1,12]<stdout>:        times = comm.gather(values[0], root=0)
[1,12]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            show(fmtt.format(key, mean(times)))
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,12]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,12]<stdout>:
[1,12]<stdout>:with ChronoCtxMg("Total"):
[1,12]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,12]<stdout>:        if params["parallel"] == "HPC":
[1,12]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,12]<stdout>:        else:
[1,12]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Model"):
[1,12]<stdout>:        model = AFFE_MODELE(
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                PHENOMENE="MECANIQUE",
[1,12]<stdout>:                MODELISATION="3D",
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Material"):
[1,12]<stdout>:        steel = DEFI_MATERIAU(
[1,12]<stdout>:            ELAS=_F(
[1,12]<stdout>:                E=200000.0,
[1,12]<stdout>:                NU=0.3,
[1,12]<stdout>:            ),
[1,12]<stdout>:            ECRO_LINE=_F(
[1,12]<stdout>:                D_SIGM_EPSI=2000.0,
[1,12]<stdout>:                SY=200.0,
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        mater = AFFE_MATERIAU(
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                MATER=steel,
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,12]<stdout>:        block = AFFE_CHAR_CINE(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            MECA_IMPO=(
[1,12]<stdout>:                _F(
[1,12]<stdout>:                    GROUP_MA="LEFT",
[1,12]<stdout>:                    DX=0,
[1,12]<stdout>:                    DY=0.0,
[1,12]<stdout>:                    DZ=0.0,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            MECA_IMPO=(
[1,12]<stdout>:                _F(
[1,12]<stdout>:                    GROUP_MA="RIGHT",
[1,12]<stdout>:                    DY=0.001,
[1,12]<stdout>:                    DZ=0.001,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,12]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            OPTION="RIGI_MECA",
[1,12]<stdout>:            CHAM_MATER=mater,
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Numbering"):
[1,12]<stdout>:        dofNum = NUME_DDL(
[1,12]<stdout>:            MATR_RIGI=stiff_elem,
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Assembly"):
[1,12]<stdout>:        stiffness = ASSE_MATRICE(
[1,12]<stdout>:            MATR_ELEM=stiff_elem,
[1,12]<stdout>:            NUME_DDL=dofNum,
[1,12]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,12]<stdout>:        rhs = CREA_CHAMP(
[1,12]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,12]<stdout>:            OPERATION="AFFE",
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                NOM_CMP=(
[1,12]<stdout>:                    "DX",
[1,12]<stdout>:                    "DY",
[1,12]<stdout>:                    "DZ",
[1,12]<stdout>:                ),
[1,12]<stdout>:                VALE=(
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,12]<stdout>:
[1,12]<stdout>:    if params["solver"] == "PETSC":
[1,12]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,12]<stdout>:    elif params["solver"] == "MUMPS":
[1,12]<stdout>:        solver = CA.MumpsSolver(
[1,12]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,12]<stdout>:   [1,12]<stdout>:         RENUM="PARMETIS",
[1,12]<stdout>:            ACCELERATION="FR+",
[1,12]<stdout>:            POSTTRAITEMENTS="MINI",
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Factorize"):
[1,12]<stdout>:        solver.factorize(stiffness)
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Solve"):
[1,12]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,12]<stdout>:
[1,12]<stdout>:# write_stats(dofNum)
[1,12]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,12]<stdout>:if params["parallel"] == "HPC":
[1,12]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,12]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,12]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,12]<stdout>:
[1,12]<stdout>:CA.close()
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Command line #1:
[1,12]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Execution of code_aster
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.13
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Command file #1 / 1
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Execution of code_aster
[1,13]<stdout>:
[1,13]<stdout>:Content of the file to execute:
[1,13]<stdout>:# coding=utf-8
[1,13]<stdout>:#!/usr/bin/python
[1,13]<stdout>:
[1,13]<stdout>:import os
[1,13]<stdout>:from statistics import mean
[1,13]<stdout>:from datetime import datetime
[1,13]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,13]<stdout>:
[1,13]<stdout>:from code_aster.Commands import *
[1,13]<stdout>:from code_aster import CA
[1,13]<stdout>:from code_aster.Utilities import petscInitialize
[1,13]<stdout>:
[1,13]<stdout>:CA.init()
[1,13]<stdout>:
[1,13]<stdout>:params = {}
[1,13]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,13]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,13]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,13]<stdout>:
[1,13]<stdout>:# General parameters
[1,13]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,13]<stdout>:rank = comm.Get_rank()
[1,13]<stdout>:size = comm.Get_size()
[1,13]<stdout>:
[1,13]<stdout>:nbHexa = 8 ** params["refinements"]
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def memory_peak(mess=None):
[1,13]<stdout>:    """Return memory peak in MB"""
[1,13]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:class ChronoCtxMgGen:
[1,13]<stdout>:    stats = {}
[1,13]<stdout>:
[1,13]<stdout>:    def __init__(self, what):
[1,13]<stdout>:        self._what = what
[1,13]<stdout>:
[1,13]<stdout>:    def __enter__(self):
[1,13]<stdout>:        self.start = datetime.now()
[1,13]<stdout>:
[1,13]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,13]<stdout>:        self.stop = datetime.now()
[1,13]<stdout>:        delta = self.stop - self.start
[1,13]<stdout>:        mem = memory_peak(self._what)
[1,13]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,13]<stdout>:    pass
[1,13]<stdout>:    # def __init__(self, what):
[1,13]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def write_stats(nume_ddl):
[1,13]<stdout>:    if rank == 0:
[1,13]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,13]<stdout>:        print()
[1,13]<stdout>:        print("NB PROC")
[1,13]<stdout>:        print(size)
[1,13]<stdout>:        print()
[1,13]<stdout>:        print(
[1,13]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    for key, values in stats.items():
[1,13]<stdout>:        time = comm.gather(values[0], root=0)
[1,13]<stdout>:        mem = comm.gather(values[1], root=0)
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            print(
[1,13]<stdout>:                key
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(min(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(max(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(mean(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(min(mem))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(max(mem))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(mean(mem))
[1,13]<stdout>:            )
[1,13]<stdout>:
[1,13]<stdout>:    mesh = nume_ddl.getMesh()
[1,13]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,13]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,13]<stdout>:
[1,13]<stdout>:    if rank == 0:
[1,13]<stdout>:        print()
[1,13]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,13]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,13]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,13]<stdout>:
[1,13]<stdout>:    def show(*args, **kwargs):
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            print(*args, **kwargs)
[1,13]<stdout>:
[1,13]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,13]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,13]<stdout>:    separ = "| :--------------- | ----------: |"
[1,13]<stdout>:    show(fmti.format("Refinement", refine))
[1,13]<stdout>:    show(separ)
[1,13]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,13]<stdout>:    for key, values in data.items():
[1,13]<stdout>:        times = comm.gather(values[0], root=0)
[1,13]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            show(fmtt.format(key, mean(times)))
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,13]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,13]<stdout>:
[1,13]<stdout>:with ChronoCtxMg("Total"):
[1,13]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,13]<stdout>:        if params["parallel"] == "HPC":
[1,13]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,13]<stdout>:        else:
[1,13]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Model"):
[1,13]<stdout>:        model = AFFE_MODELE(
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                PHENOMENE="MECANIQUE",
[1,13]<stdout>:                MODELISATION="3D",
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Material"):
[1,13]<stdout>:        steel = DEFI_MATERIAU(
[1,13]<stdout>:            ELAS=_F(
[1,13]<stdout>:                E=200000.0,
[1,13]<stdout>:                NU=0.3,
[1,13]<stdout>:            ),
[1,13]<stdout>:            ECRO_LINE=_F(
[1,13]<stdout>:   [1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.14
[1,13]<stdout>:             D_SIGM_EPSI=2000.0,
[1,13]<stdout>:                SY=200.0,
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        mater = AFFE_MATERIAU(
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                MATER=steel,
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,13]<stdout>:        block = AFFE_CHAR_CINE(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            MECA_IMPO=(
[1,13]<stdout>:                _F(
[1,13]<stdout>:                    GROUP_MA="LEFT",
[1,13]<stdout>:                    DX=0,
[1,13]<stdout>:                    DY=0.0,
[1,13]<stdout>:                    DZ=0.0,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            MECA_IMPO=(
[1,13]<stdout>:                _F(
[1,13]<stdout>:                    GROUP_MA="RIGHT",
[1,13]<stdout>:                    DY=0.001,
[1,13]<stdout>:                    DZ=0.001,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,13]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            OPTION="RIGI_MECA",
[1,13]<stdout>:            CHAM_MATER=mater,
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Numbering"):
[1,13]<stdout>:        dofNum = NUME_DDL(
[1,13]<stdout>:            MATR_RIGI=stiff_elem,
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Assembly"):
[1,13]<stdout>:        stiffness = ASSE_MATRICE(
[1,13]<stdout>:            MATR_ELEM=stiff_elem,
[1,13]<stdout>:            NUME_DDL=dofNum,
[1,13]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,13]<stdout>:        rhs = CREA_CHAMP(
[1,13]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,13]<stdout>:            OPERATION="AFFE",
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                NOM_CMP=(
[1,13]<stdout>:                    "DX",
[1,13]<stdout>:                    "DY",
[1,13]<stdout>:                    "DZ",
[1,13]<stdout>:                ),
[1,13]<stdout>:                VALE=(
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,13]<stdout>:
[1,13]<stdout>:    if params["solver"] == "PETSC":
[1,13]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,13]<stdout>:    elif params["solver"] == "MUMPS":
[1,13]<stdout>:        solver = CA.MumpsSolver(
[1,13]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,13]<stdout>:            RENUM="PARMETIS",
[1,13]<stdout>:            ACCELERATION="FR+",
[1,13]<stdout>:            POSTTRAITEMENTS="MINI",
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Factorize"):
[1,13]<stdout>:        solver.factorize(stiffness)
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Solve"):
[1,13]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,13]<stdout>:
[1,13]<stdout>:# write_stats(dofNum)
[1,13]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,13]<stdout>:if params["parallel"] == "HPC":
[1,13]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,13]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,13]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,13]<stdout>:
[1,13]<stdout>:CA.close()
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Command line #1:
[1,13]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Command file #1 / 1
[1,14]<stdout>:
[1,14]<stdout>:Content of the file to execute:
[1,14]<stdout>:# coding=utf-8
[1,14]<stdout>:#!/usr/bin/python
[1,14]<stdout>:
[1,14]<stdout>:import os
[1,14]<stdout>:from statistics import mean
[1,14]<stdout>:from datetime import datetime
[1,14]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,14]<stdout>:
[1,14]<stdout>:from code_aster.Commands import *
[1,14]<stdout>:from code_aster import CA
[1,14]<stdout>:from code_aster.Utilities import petscInitialize
[1,14]<stdout>:
[1,14]<stdout>:CA.init()
[1,14]<stdout>:
[1,14]<stdout>:params = {}
[1,14]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,14]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,14]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,14]<stdout>:
[1,14]<stdout>:# General parameters
[1,14]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,14]<stdout>:rank = comm.Get_rank()
[1,14]<stdout>:size = comm.Get_size()
[1,14]<stdout>:
[1,14]<stdout>:nbHexa = 8 ** params["refinements"]
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def memory_peak(mess=None):
[1,14]<stdout>:    """Return memory peak in MB"""
[1,14]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:class ChronoCtxMgGen:
[1,14]<stdout>:    stats = {}
[1,14]<stdout>:
[1,14]<stdout>:    def __init__(self, what):
[1,14]<stdout>:        self._what = what
[1,14]<stdout>:
[1,14]<stdout>:    def __enter__(self):
[1,14]<stdout>:        self.start = datetime.now()
[1,14]<stdout>:
[1,14]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,14]<stdout>:        self.stop = datetime.now()
[1,14]<stdout>:        delta = self.stop - self.start
[1,14]<stdout>:        mem = memory_peak(self._what)
[1,14]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,14]<stdout>:    pass
[1,14]<stdout>:    # def __init__(self, what):
[1,14]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def write_stats(nume_ddl):
[1,14]<stdout>:    if rank == 0:
[1,14]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,14]<stdout>:        print()
[1,14]<stdout>:        print("NB PROC")
[1,14]<stdout>:        print(size)
[1,14]<stdout>:        print()
[1,14]<stdout>:        print(
[1,14]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    for key, values in stats.items():
[1,14]<stdout>:        time = comm.gather(values[0], root=0)
[1,14]<stdout>:        mem = comm.gather(values[1], root=0)
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            print(
[1,14]<stdout>:                key
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(min(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(max(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(mean(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(min(mem))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(max(mem))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(mean(mem))
[1,14]<stdout>:            )
[1,14]<stdout>:
[1,14]<stdout>:    mesh = nume_ddl.getMesh()
[1,14]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,14]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,14]<stdout>:
[1,14]<stdout>:    if rank == 0:
[1,14]<stdout>:        print()
[1,14]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,14]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,14]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,14]<stdout>:
[1,14]<stdout>:    def show(*args, **kwargs):
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            print(*args, **kwargs)
[1,14]<stdout>:
[1,14]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,14]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,14]<stdout>:    separ = "| :--------------- | ----------: |"
[1,14]<stdout>:    show(fmti.format("Refinement", refine))
[1,14]<stdout>:    show(separ)
[1,14]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,14]<stdout>:    for key, values in data.items():
[1,14]<stdout>:        times = comm.gather(values[0], root=0)
[1,14]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            show(fmtt.format(key, mean(times)))
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,14]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,14]<stdout>:
[1,14]<stdout>:with ChronoCtxMg("Total"):
[1,14]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,14]<stdout>:        if params["parallel"] == "HPC":
[1,14]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,14]<stdout>:        else:
[1,14]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Model"):
[1,14]<stdout>:        model = AFFE_MODELE(
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                PHENOMENE="MECANIQUE",
[1,14]<stdout>:                MODELISATION="3D",
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Material"):
[1,14]<stdout>:        steel = DEFI_MATERIAU(
[1,14]<stdout>:            ELAS=_F(
[1,14]<stdout>:                E=200000.0,
[1,14]<stdout>:                NU=0.3,
[1,14]<stdout>:            ),
[1,14]<stdout>:            ECRO_LINE=_F(
[1,14]<stdout>:   [1,14]<stdout>:             D_SIGM_EPSI=2000.0,
[1,14]<stdout>:                SY=200.0,
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        mater = AFFE_MATERIAU(
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                MATER=steel,
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,14]<stdout>:        block = AFFE_CHAR_CINE(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            MECA_IMPO=(
[1,14]<stdout>:                _F(
[1,14]<stdout>:                    GROUP_MA="LEFT",
[1,14]<stdout>:                    DX=0,
[1,14]<stdout>:                    DY=0.0,
[1,14]<stdout>:                    DZ=0.0,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            MECA_IMPO=(
[1,14]<stdout>:                _F(
[1,14]<stdout>:                    GROUP_MA="RIGHT",
[1,14]<stdout>:                    DY=0.001,
[1,14]<stdout>:                    DZ=0.001,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,14]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            OPTION="RIGI_MECA",
[1,14]<stdout>:            CHAM_MATER=mater,
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Numbering"):
[1,14]<stdout>:        dofNum = NUME_DDL(
[1,14]<stdout>:            MATR_RIGI=stiff_elem,
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Assembly"):
[1,14]<stdout>:        stiffness = ASSE_MATRICE(
[1,14]<stdout>:            MATR_ELEM=stiff_elem,
[1,14]<stdout>:            NUME_DDL=dofNum,
[1,14]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,14]<stdout>:        rhs = CREA_CHAMP(
[1,14]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,14]<stdout>:            OPERATION="AFFE",
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                NOM_CMP=(
[1,14]<stdout>:                    "DX",
[1,14]<stdout>:                    "DY",
[1,14]<stdout>:                    "DZ",
[1,14]<stdout>:                ),
[1,14]<stdout>:                VALE=(
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,14]<stdout>:
[1,14]<stdout>:    if params["solver"] == "PETSC":
[1,14]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,14]<stdout>:    elif params["solver"] == "MUMPS":
[1,14]<stdout>:        solver = CA.MumpsSolver(
[1,14]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,14]<stdout>:            RENUM="PARMETIS",
[1,14]<stdout>:            ACCELERATION="FR+",
[1,14]<stdout>:            POSTTRAITEMENTS="MINI",
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Factorize"):
[1,14]<stdout>:        solver.factorize(stiffness)
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Solve"):
[1,14]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,14]<stdout>:
[1,14]<stdout>:# write_stats(dofNum)
[1,14]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,14]<stdout>:if params["parallel"] == "HPC":
[1,14]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,14]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,14]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,14]<stdout>:
[1,14]<stdout>:CA.close()
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Command line #1:
[1,14]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Execution of code_aster
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Prepare environment in /tmp/run_aster_liewisez/proc.15
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Command file #1 / 1
[1,15]<stdout>:
[1,15]<stdout>:Content of the file to execute:
[1,15]<stdout>:# coding=utf-8
[1,15]<stdout>:#!/usr/bin/python
[1,15]<stdout>:
[1,15]<stdout>:import os
[1,15]<stdout>:from statistics import mean
[1,15]<stdout>:from datetime import datetime
[1,15]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,15]<stdout>:
[1,15]<stdout>:from code_aster.Commands import *
[1,15]<stdout>:from code_aster import CA
[1,15]<stdout>:from code_aster.Utilities import petscInitialize
[1,15]<stdout>:
[1,15]<stdout>:CA.init()
[1,15]<stdout>:
[1,15]<stdout>:params = {}
[1,15]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,15]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,15]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,15]<stdout>:
[1,15]<stdout>:# General parameters
[1,15]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,15]<stdout>:rank = comm.Get_rank()
[1,15]<stdout>:size = comm.Get_size()
[1,15]<stdout>:
[1,15]<stdout>:nbHexa = 8 ** params["refinements"]
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def memory_peak(mess=None):
[1,15]<stdout>:    """Return memory peak in MB"""
[1,15]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:class ChronoCtxMgGen:
[1,15]<stdout>:    stats = {}
[1,15]<stdout>:
[1,15]<stdout>:    def __init__(self, what):
[1,15]<stdout>:        self._what = what
[1,15]<stdout>:
[1,15]<stdout>:    def __enter__(self):
[1,15]<stdout>:        self.start = datetime.now()
[1,15]<stdout>:
[1,15]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,15]<stdout>:        self.stop = datetime.now()
[1,15]<stdout>:        delta = self.stop - self.start
[1,15]<stdout>:        mem = memory_peak(self._what)
[1,15]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,15]<stdout>:    pass
[1,15]<stdout>:    # def __init__(self, what):
[1,15]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def write_stats(nume_ddl):
[1,15]<stdout>:    if rank == 0:
[1,15]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,15]<stdout>:        print()
[1,15]<stdout>:        print("NB PROC")
[1,15]<stdout>:        print(size)
[1,15]<stdout>:        print()
[1,15]<stdout>:        print(
[1,15]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    for key, values in stats.items():
[1,15]<stdout>:        time = comm.gather(values[0], root=0)
[1,15]<stdout>:        mem = comm.gather(values[1], root=0)
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            print(
[1,15]<stdout>:                key
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(min(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(max(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(mean(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(min(mem))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(max(mem))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(mean(mem))
[1,15]<stdout>:            )
[1,15]<stdout>:
[1,15]<stdout>:    mesh = nume_ddl.getMesh()
[1,15]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,15]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,15]<stdout>:
[1,15]<stdout>:    if rank == 0:
[1,15]<stdout>:        print()
[1,15]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,15]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,15]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,15]<stdout>:
[1,15]<stdout>:    def show(*args, **kwargs):
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            print(*args, **kwargs)
[1,15]<stdout>:
[1,15]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,15]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,15]<stdout>:    separ = "| :--------------- | ----------: |"
[1,15]<stdout>:    show(fmti.format("Refinement", refine))
[1,15]<stdout>:    show(separ)
[1,15]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,15]<stdout>:    for key, values in data.items():
[1,15]<stdout>:        times = comm.gather(values[0], root=0)
[1,15]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            show(fmtt.format(key, mean(times)))
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,15]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,15]<stdout>:
[1,15]<stdout>:with ChronoCtxMg("Total"):
[1,15]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,15]<stdout>:        if params["parallel"] == "HPC":
[1,15]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,15]<stdout>:        else:
[1,15]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Model"):
[1,15]<stdout>:        model = AFFE_MODELE(
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                PHENOMENE="MECANIQUE",
[1,15]<stdout>:                MODELISATION="3D",
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Material"):
[1,15]<stdout>:        steel = DEFI_MATERIAU(
[1,15]<stdout>:            ELAS=_F(
[1,15]<stdout>:                E=200000.0,
[1,15]<stdout>:                NU=0.3,
[1,15]<stdout>:            ),
[1,15]<stdout>:            ECRO_LINE=_F(
[1,15]<stdout>:   [1,15]<stdout>:             D_SIGM_EPSI=2000.0,
[1,15]<stdout>:                SY=200.0,
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        mater = AFFE_MATERIAU(
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                MATER=steel,
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,15]<stdout>:        block = AFFE_CHAR_CINE(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            MECA_IMPO=(
[1,15]<stdout>:                _F(
[1,15]<stdout>:                    GROUP_MA="LEFT",
[1,15]<stdout>:                    DX=0,
[1,15]<stdout>:                    DY=0.0,
[1,15]<stdout>:                    DZ=0.0,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            MECA_IMPO=(
[1,15]<stdout>:                _F(
[1,15]<stdout>:                    GROUP_MA="RIGHT",
[1,15]<stdout>:                    DY=0.001,
[1,15]<stdout>:                    DZ=0.001,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,15]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            OPTION="RIGI_MECA",
[1,15]<stdout>:            CHAM_MATER=mater,
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Numbering"):
[1,15]<stdout>:        dofNum = NUME_DDL(
[1,15]<stdout>:            MATR_RIGI=stiff_elem,
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Assembly"):
[1,15]<stdout>:        stiffness = ASSE_MATRICE(
[1,15]<stdout>:            MATR_ELEM=stiff_elem,
[1,15]<stdout>:            NUME_DDL=dofNum,
[1,15]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,15]<stdout>:        rhs = CREA_CHAMP(
[1,15]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,15]<stdout>:            OPERATION="AFFE",
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                NOM_CMP=(
[1,15]<stdout>:                    "DX",
[1,15]<stdout>:                    "DY",
[1,15]<stdout>:                    "DZ",
[1,15]<stdout>:                ),
[1,15]<stdout>:                VALE=(
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,15]<stdout>:
[1,15]<stdout>:    if params["solver"] == "PETSC":
[1,15]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,15]<stdout>:    elif params["solver"] == "MUMPS":
[1,15]<stdout>:        solver = CA.MumpsSolver(
[1,15]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,15]<stdout>:            RENUM="PARMETIS",
[1,15]<stdout>:            ACCELERATION="FR+",
[1,15]<stdout>:            POSTTRAITEMENTS="MINI",
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Factorize"):
[1,15]<stdout>:        solver.factorize(stiffness)
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Solve"):
[1,15]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,15]<stdout>:
[1,15]<stdout>:# write_stats(dofNum)
[1,15]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,15]<stdout>:if params["parallel"] == "HPC":
[1,15]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,15]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,15]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,15]<stdout>:
[1,15]<stdout>:CA.close()
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Command line #1:
[1,15]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,12]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,6]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,9]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,3]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,13]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,2]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,8]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,0]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,10]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,15]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,7]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,4]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,11]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,5]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,14]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,1]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,12]<stdout>:checking MPI initialization...
[1,12]<stdout>:using COMM_WORLD.
[1,12]<stdout>:MPI is initialized.
[1,12]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,12]<stdout>:
[1,12]<stdout>:<INFO> Démarrage de l'exécution.
[1,12]<stdout>:
[1,12]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,12]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,12]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,12]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,12]<stdout>:                                                                                                    
[1,12]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,12]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,12]<stdout>:                                        Architecture : 64bit                                        
[1,12]<stdout>:                                    Type de processeur : aarch64                                    
[1,12]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,12]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,12]<stdout>:                                     Version de Python : 3.11.2                                     
[1,12]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,6]<stdout>:checking MPI initialization...
[1,6]<stdout>:using COMM_WORLD.
[1,6]<stdout>:MPI is initialized.
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,12]<stdout>:                                      Parallélisme MPI : actif                                      
[1,12]<stdout>:                                  Rang du processeur courant : 12                                   
[1,12]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,12]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,12]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,6]<stdout>:<INFO> Démarrage de l'exécution.
[1,6]<stdout>:
[1,6]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,9]<stdout>:checking MPI initialization...
[1,9]<stdout>:using COMM_WORLD.
[1,9]<stdout>:MPI is initialized.
[1,9]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,9]<stdout>:
[1,3]<stdout>:checking MPI initialization...
[1,3]<stdout>:using COMM_WORLD.
[1,3]<stdout>:MPI is initialized.
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,6]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,6]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,12]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,6]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,6]<stdout>:                                                                                                    
[1,6]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,6]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,6]<stdout>:                                        Architecture : 64bit                                        
[1,6]<stdout>:                                    Type de processeur : aarch64                                    
[1,6]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,6]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,12]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,6]<stdout>:                                     Version de Python : 3.11.2                                     
[1,6]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,12]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,6]<stdout>:                                      Parallélisme MPI : actif                                      
[1,6]<stdout>:                                   Rang du processeur courant : 6                                   
[1,6]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,12]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,12]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,6]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,6]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,12]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,9]<stdout>:<INFO> Démarrage de l'exécution.
[1,9]<stdout>:
[1,3]<stdout>:<INFO> Démarrage de l'exécution.
[1,3]<stdout>:
[1,2]<stdout>:checking MPI initialization...
[1,2]<stdout>:using COMM_WORLD.
[1,2]<stdout>:MPI is initialized.
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,13]<stdout>:checking MPI initialization...
[1,13]<stdout>:using COMM_WORLD.
[1,13]<stdout>:MPI is initialized.
[1,13]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,13]<stdout>:
[1,9]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,3]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,12]<stdout>:
[1,9]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,9]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,3]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,3]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,12]<stdout>:starting the execution...
[1,3]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,3]<stdout>:                                                                                                    
[1,3]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,3]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,3]<stdout>:                                        Architecture : 64bit                                        
[1,3]<stdout>:                                    Type de processeur : aarch64                                    
[1,3]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,3]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,9]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,9]<stdout>:                                                                                                    
[1,9]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,9]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,9]<stdout>:                                        Architecture : 64bit                                        
[1,9]<stdout>:                                    Type de processeur : aarch64                                    
[1,9]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,9]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,2]<stdout>:<INFO> Démarrage de l'exécution.
[1,2]<stdout>:
[1,9]<stdout>:                                     Version de Python : 3.11.2                                     
[1,9]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,3]<stdout>:                                     Version de Python : 3.11.2                                     
[1,3]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,13]<stdout>:<INFO> Démarrage de l'exécution.
[1,13]<stdout>:
[1,6]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,9]<stdout>:                                      Parallélisme MPI : actif                                      
[1,9]<stdout>:                                   Rang du processeur courant : 9                                   
[1,9]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,3]<stdout>:                                      Parallélisme MPI : actif                                      
[1,3]<stdout>:                                   Rang du processeur courant : 3                                   
[1,3]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,8]<stdout>:checking MPI initialization...
[1,8]<stdout>:using COMM_WORLD.
[1,8]<stdout>:MPI is initialized.
[1,6]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,8]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,8]<stdout>:
[1,2]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,13]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,6]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,3]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,3]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,9]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,9]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,2]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,0]<stdout>:checking MPI initialization...
[1,0]<stdout>:using COMM_WORLD.
[1,0]<stdout>:MPI is initialized.
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,13]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,13]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,6]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,6]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,2]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,2]<stdout>:                                                                                                    
[1,2]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,2]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,2]<stdout>:                                        Architecture : 64bit                                        
[1,2]<stdout>:                                    Type de processeur : aarch64                                    
[1,2]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,2]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,6]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,13]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,13]<stdout>:                                                                                                    
[1,13]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,13]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,13]<stdout>:                                        Architecture : 64bit                                        
[1,13]<stdout>:                                    Type de processeur : aarch64                                    
[1,13]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,13]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,2]<stdout>:                                     Version de Python : 3.11.2                                     
[1,2]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,13]<stdout>:                                     Version de Python : 3.11.2                                     
[1,13]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,10]<stdout>:checking MPI initialization...
[1,10]<stdout>:using COMM_WORLD.
[1,10]<stdout>:MPI is initialized.
[1,10]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,10]<stdout>:
[1,2]<stdout>:                                      Parallélisme MPI : actif                                      
[1,2]<stdout>:                                   Rang du processeur courant : 2                                   
[1,2]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,8]<stdout>:<INFO> Démarrage de l'exécution.
[1,8]<stdout>:
[1,13]<stdout>:                                      Parallélisme MPI : actif                                      
[1,13]<stdout>:                                  Rang du processeur courant : 13                                   
[1,13]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,15]<stdout>:checking MPI initialization...
[1,15]<stdout>:using COMM_WORLD.
[1,15]<stdout>:MPI is initialized.
[1,15]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,15]<stdout>:
[1,6]<stdout>:
[1,2]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,2]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,13]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,13]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,0]<stdout>:<INFO> Démarrage de l'exécution.
[1,0]<stdout>:
[1,7]<stdout>:checking MPI initialization...
[1,7]<stdout>:using COMM_WORLD.
[1,7]<stdout>:MPI is initialized.
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,8]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,4]<stdout>:checking MPI initialization...
[1,4]<stdout>:using COMM_WORLD.
[1,4]<stdout>:MPI is initialized.
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,6]<stdout>:starting the execution...
[1,3]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,11]<stdout>:checking MPI initialization...
[1,11]<stdout>:using COMM_WORLD.
[1,11]<stdout>:MPI is initialized.
[1,11]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,11]<stdout>:
[1,9]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,8]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,8]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,0]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,3]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:checking MPI initialization...
[1,14]<stdout>:using COMM_WORLD.
[1,14]<stdout>:MPI is initialized.
[1,14]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,14]<stdout>:
[1,10]<stdout>:<INFO> Démarrage de l'exécution.
[1,10]<stdout>:
[1,9]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,1]<stdout>:checking MPI initialization...
[1,1]<stdout>:using COMM_WORLD.
[1,1]<stdout>:MPI is initialized.
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,5]<stdout>:checking MPI initialization...
[1,5]<stdout>:using COMM_WORLD.
[1,5]<stdout>:MPI is initialized.
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,3]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,8]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,8]<stdout>:                                                                                                    
[1,8]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,8]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,8]<stdout>:                                        Architecture : 64bit                                        
[1,8]<stdout>:                                    Type de processeur : aarch64                                    
[1,8]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,8]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,0]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,0]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,9]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,15]<stdout>:<INFO> Démarrage de l'exécution.
[1,15]<stdout>:
[1,3]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,12]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,12]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,12]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,12]<stdout>:
[1,8]<stdout>:                                     Version de Python : 3.11.2                                     
[1,8]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,9]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,10]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,3]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,0]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,0]<stdout>:                                                                                                    
[1,0]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,0]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,0]<stdout>:                                        Architecture : 64bit                                        
[1,0]<stdout>:                                    Type de processeur : aarch64                                    
[1,0]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,0]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,7]<stdout>:<INFO> Démarrage de l'exécution.
[1,7]<stdout>:
[1,9]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,3]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,8]<stdout>:                                      Parallélisme MPI : actif                                      
[1,8]<stdout>:                                   Rang du processeur courant : 8                                   
[1,8]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,4]<stdout>:<INFO> Démarrage de l'exécution.
[1,4]<stdout>:
[1,0]<stdout>:                                     Version de Python : 3.11.2                                     
[1,0]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,15]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,9]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,10]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,10]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,8]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,8]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,11]<stdout>:<INFO> Démarrage de l'exécution.
[1,11]<stdout>:
[1,2]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                                      Parallélisme MPI : actif                                      
[1,0]<stdout>:                                   Rang du processeur courant : 0                                   
[1,0]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,15]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,15]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,7]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,13]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,4]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,10]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,10]<stdout>:                                                                                                    
[1,10]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,10]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,10]<stdout>:                                        Architecture : 64bit                                        
[1,10]<stdout>:                                    Type de processeur : aarch64                                    
[1,10]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,10]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,2]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:<INFO> Démarrage de l'exécution.
[1,14]<stdout>:
[1,3]<stdout>:
[1,1]<stdout>:<INFO> Démarrage de l'exécution.
[1,1]<stdout>:
[1,5]<stdout>:<INFO> Démarrage de l'exécution.
[1,5]<stdout>:
[1,0]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,0]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,13]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,7]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,2]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,15]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,15]<stdout>:                                                                                                    
[1,15]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,15]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,15]<stdout>:                                        Architecture : 64bit                                        
[1,15]<stdout>:                                    Type de processeur : aarch64                                    
[1,15]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,15]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,10]<stdout>:                                     Version de Python : 3.11.2                                     
[1,10]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,9]<stdout>:
[1,4]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,4]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,11]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,13]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,2]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,3]<stdout>:starting the execution...
[1,15]<stdout>:                                     Version de Python : 3.11.2                                     
[1,15]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,10]<stdout>:                                      Parallélisme MPI : actif                                      
[1,10]<stdout>:                                  Rang du processeur courant : 10                                   
[1,10]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,7]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,7]<stdout>:                                                                                                    
[1,7]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,7]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,7]<stdout>:                                        Architecture : 64bit                                        
[1,7]<stdout>:                                    Type de processeur : aarch64                                    
[1,7]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,7]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,14]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,11]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,11]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,2]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,1]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,9]<stdout>:starting the execution...
[1,5]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,13]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,4]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,4]<stdout>:                                                                                                    
[1,4]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,4]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,4]<stdout>:                                        Architecture : 64bit                                        
[1,4]<stdout>:                                    Type de processeur : aarch64                                    
[1,4]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,4]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,7]<stdout>:                                     Version de Python : 3.11.2                                     
[1,7]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,13]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,15]<stdout>:                                      Parallélisme MPI : actif                                      
[1,15]<stdout>:                                  Rang du processeur courant : 15                                   
[1,15]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,14]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,14]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,2]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,10]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,10]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,5]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,5]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,11]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,11]<stdout>:                                                                                                    
[1,11]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,11]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,11]<stdout>:                                        Architecture : 64bit                                        
[1,11]<stdout>:                                    Type de processeur : aarch64                                    
[1,11]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,11]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,4]<stdout>:                                     Version de Python : 3.11.2                                     
[1,4]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,1]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,1]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,13]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,7]<stdout>:                                      Parallélisme MPI : actif                                      
[1,7]<stdout>:                                   Rang du processeur courant : 7                                   
[1,7]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,15]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,15]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,11]<stdout>:                                     Version de Python : 3.11.2                                     
[1,11]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,14]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,14]<stdout>:                                                                                                    
[1,14]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,14]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,14]<stdout>:                                        Architecture : 64bit                                        
[1,14]<stdout>:                                    Type de processeur : aarch64                                    
[1,14]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,14]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,4]<stdout>:                                      Parallélisme MPI : actif                                      
[1,4]<stdout>:                                   Rang du processeur courant : 4                                   
[1,4]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,5]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,5]<stdout>:                                                                                                    
[1,5]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,5]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,5]<stdout>:                                        Architecture : 64bit                                        
[1,5]<stdout>:                                    Type de processeur : aarch64                                    
[1,5]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,5]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,1]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,1]<stdout>:                                                                                                    
[1,1]<stdout>:                              Exécution du : Thu Jan 23 17:04:01 2025                               
[1,1]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,1]<stdout>:                                        Architecture : 64bit                                        
[1,1]<stdout>:                                    Type de processeur : aarch64                                    
[1,1]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,1]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,7]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,7]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:
[1,14]<stdout>:                                     Version de Python : 3.11.2                                     
[1,14]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,1]<stdout>:                                     Version de Python : 3.11.2                                     
[1,1]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,4]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,4]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,11]<stdout>:                                      Parallélisme MPI : actif                                      
[1,11]<stdout>:                                  Rang du processeur courant : 11                                   
[1,11]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,5]<stdout>:                                     Version de Python : 3.11.2                                     
[1,5]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,8]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,13]<stdout>:
[1,6]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,6]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,6]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,6]<stdout>:
[1,8]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:                                      Parallélisme MPI : actif                                      
[1,14]<stdout>:                                  Rang du processeur courant : 14                                   
[1,14]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,5]<stdout>:                                      Parallélisme MPI : actif                                      
[1,5]<stdout>:                                   Rang du processeur courant : 5                                   
[1,5]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,1]<stdout>:                                      Parallélisme MPI : actif                                      
[1,1]<stdout>:                                   Rang du processeur courant : 1                                   
[1,1]<stdout>:                              Nombre de processeurs MPI utilisés : 16                               
[1,11]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,11]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:starting the execution...
[1,8]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,13]<stdout>:starting the execution...
[1,0]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,14]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,14]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,5]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,5]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,1]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,1]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,8]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,0]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,8]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,0]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,8]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,0]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,10]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,10]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,15]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,10]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,8]<stdout>:
[1,15]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,10]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,15]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,4]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,7]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,10]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,8]<stdout>:starting the execution...
[1,4]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,15]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,11]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,7]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,0]<stdout>:
[1,10]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,4]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,15]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,3]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,3]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,3]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,3]<stdout>:
[1,7]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,11]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,9]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,9]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,9]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,9]<stdout>:
[1,5]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:starting the execution...
[1,4]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,1]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,15]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,7]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,11]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,14]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,5]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,4]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,1]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,11]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,7]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,10]<stdout>:
[1,4]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,14]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,5]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,1]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,11]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,15]<stdout>:
[1,14]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,5]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,1]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,11]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,10]<stdout>:starting the execution...
[1,14]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,5]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,1]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,7]<stdout>:
[1,14]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,15]<stdout>:starting the execution...
[1,4]<stdout>:
[1,5]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,1]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,13]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,13]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,13]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,13]<stdout>:
[1,7]<stdout>:starting the execution...
[1,2]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,2]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,2]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,2]<stdout>:
[1,11]<stdout>:
[1,4]<stdout>:starting the execution...
[1,14]<stdout>:
[1,5]<stdout>:
[1,1]<stdout>:
[1,11]<stdout>:starting the execution...
[1,14]<stdout>:starting the execution...
[1,5]<stdout>:starting the execution...
[1,1]<stdout>:starting the execution...
[1,8]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,8]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,8]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,8]<stdout>:
[1,0]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,0]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,0]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,0]<stdout>:
[1,10]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,10]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,10]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,10]<stdout>:
[1,15]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,15]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,15]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,15]<stdout>:
[1,7]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,7]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,7]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,7]<stdout>:
[1,4]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,4]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,4]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,4]<stdout>:
[1,11]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,11]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,11]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,11]<stdout>:
[1,14]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,14]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,14]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,14]<stdout>:
[1,5]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,5]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,5]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,5]<stdout>:
[1,1]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,1]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,1]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,1]<stdout>:
[1,12]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,12]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,6]<stdout>:
[1,9]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,9]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,3]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,2]<stdout>:
[1,13]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,13]<stdout>:
[1,8]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,8]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,0]<stdout>:
[1,10]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,10]<stdout>:
[1,15]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,15]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,7]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,4]<stdout>:
[1,11]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,11]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,5]<stdout>:
[1,14]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,14]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,1]<stdout>:
[1,12]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,12]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,9]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,9]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,13]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,13]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,8]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,8]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,15]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,15]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,10]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,10]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,11]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,11]<stdout>:
[1,14]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,14]<stdout>:
[1,12]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,12]<stdout>:
[1,12]<stdout>:Nom de la base                          :  ELEMBASE
[1,12]<stdout>:     Créée avec la version                   :  17.02.04
[1,12]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,12]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,12]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,12]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,12]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,12]<stdout>:     Taille maximum du répertoire            :  300
[1,12]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,12]<stdout>:
[1,12]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,12]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Créée avec la version                   :  17.02.04
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,9]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,9]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,9]<stdout>:Nom de la base                          :  ELEMBASE
[1,9]<stdout>:     Créée avec la version                   :  17.02.04
[1,9]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,9]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,9]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,9]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,9]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,9]<stdout>:     Taille maximum du répertoire            :  300
[1,9]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,9]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Créée avec la version                   :  17.02.04
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,9]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,9]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,13]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,13]<stdout>:
[1,13]<stdout>:Nom de la base                          :  ELEMBASE
[1,13]<stdout>:     Créée avec la version                   :  17.02.04
[1,13]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,13]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,13]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,13]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,13]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,13]<stdout>:     Taille maximum du répertoire            :  300
[1,13]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,13]<stdout>:
[1,13]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,13]<stdout>:
[1,8]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,8]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,8]<stdout>:Nom de la base                          :  ELEMBASE
[1,8]<stdout>:     Créée avec la version                   :  17.02.04
[1,8]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,8]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,8]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,8]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,8]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,8]<stdout>:     Taille maximum du répertoire            :  300
[1,8]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,8]<stdout>:
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Créée avec la version                   :  17.02.04
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,8]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,8]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Créée avec la version                   :  17.02.04
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,15]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,15]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,15]<stdout>:Nom de la base                          :  ELEMBASE
[1,15]<stdout>:     Créée avec la version                   :  17.02.04
[1,15]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,15]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,15]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,15]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,15]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,15]<stdout>:     Taille maximum du répertoire            :  300
[1,15]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,15]<stdout>:
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Créée avec la version                   :  17.02.04
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,15]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,15]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Créée avec la version                   :  17.02.04
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Créée avec la version                   :  17.02.04
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Créée avec la version                   :  17.02.04
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,11]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,11]<stdout>:
[1,10]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,10]<stdout>:
[1,11]<stdout>:Nom de la base                          :  ELEMBASE
[1,11]<stdout>:     Créée avec la version                   :  17.02.04
[1,11]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,11]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,11]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,11]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,11]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,11]<stdout>:     Taille maximum du répertoire            :  300
[1,11]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,11]<stdout>:
[1,10]<stdout>:Nom de la base                          :  ELEMBASE
[1,10]<stdout>:     Créée avec la version                   :  17.02.04
[1,10]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,10]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,10]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,10]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,10]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,10]<stdout>:     Taille maximum du répertoire            :  300
[1,10]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,10]<stdout>:
[1,11]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,11]<stdout>:
[1,10]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,10]<stdout>:
[1,14]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,14]<stdout>:
[1,14]<stdout>:Nom de la base                          :  ELEMBASE
[1,14]<stdout>:     Créée avec la version                   :  17.02.04
[1,14]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,14]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,14]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,14]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,14]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,14]<stdout>:     Taille maximum du répertoire            :  300
[1,14]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,14]<stdout>:
[1,14]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,14]<stdout>:
[1,12]<stdout>:Nom de la base                          :  ELEMBASE
[1,12]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,12]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,12]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,12]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,12]<stdout>:     Nombre total d'accès en lecture         :  63
[1,12]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,12]<stdout>:     Nombre total d'accès en écriture        :  0
[1,12]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,12]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,12]<stdout>:     Taille maximum du répertoire            :  300
[1,12]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,12]<stdout>:
[1,12]<stdout>:Relecture des catalogues des éléments faite.
[1,12]<stdout>:
[1,12]<stdout>:Fin de lecture (durée  0.019928  s.) 
[1,12]<stdout>:
[1,12]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,12]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,12]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,12]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre total d'accès en lecture         :  63
[1,6]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,6]<stdout>:     Nombre total d'accès en écriture        :  0
[1,6]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,6]<stdout>:Relecture des catalogues des éléments faite.
[1,6]<stdout>:
[1,6]<stdout>:Fin de lecture (durée  0.019773  s.) 
[1,6]<stdout>:
[1,12]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,6]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,6]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,12]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.14s, elaps:        0.15s)
[1,6]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.13s, elaps:        0.15s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:Nom de la base                          :  ELEMBASE
[1,9]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,9]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,9]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,9]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,9]<stdout>:     Nombre total d'accès en lecture         :  63
[1,9]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,9]<stdout>:     Nombre total d'accès en écriture        :  0
[1,9]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,9]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,9]<stdout>:     Taille maximum du répertoire            :  300
[1,9]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,9]<stdout>:
[1,13]<stdout>:Nom de la base                          :  ELEMBASE
[1,13]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,13]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,13]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,13]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,13]<stdout>:     Nombre total d'accès en lecture         :  63
[1,13]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,13]<stdout>:     Nombre total d'accès en écriture        :  0
[1,13]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,13]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,13]<stdout>:     Taille maximum du répertoire            :  300
[1,13]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,13]<stdout>:
[1,9]<stdout>:Relecture des catalogues des éléments faite.
[1,9]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre total d'accès en lecture         :  63
[1,3]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,3]<stdout>:     Nombre total d'accès en écriture        :  0
[1,3]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,13]<stdout>:Relecture des catalogues des éléments faite.
[1,13]<stdout>:
[1,3]<stdout>:Relecture des catalogues des éléments faite.
[1,3]<stdout>:
[1,9]<stdout>:Fin de lecture (durée  0.020274  s.) 
[1,9]<stdout>:
[1,13]<stdout>:Fin de lecture (durée  0.020021  s.) 
[1,13]<stdout>:
[1,3]<stdout>:Fin de lecture (durée  0.020292  s.) 
[1,3]<stdout>:
[1,13]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,13]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,13]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,9]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,9]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,9]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,3]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,3]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,3]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,9]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,13]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,3]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,13]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre total d'accès en lecture         :  63
[1,2]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,2]<stdout>:     Nombre total d'accès en écriture        :  0
[1,2]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,8]<stdout>:Nom de la base                          :  ELEMBASE
[1,8]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,8]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,8]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,8]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,8]<stdout>:     Nombre total d'accès en lecture         :  63
[1,8]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,8]<stdout>:     Nombre total d'accès en écriture        :  0
[1,8]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,8]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,8]<stdout>:     Taille maximum du répertoire            :  300
[1,8]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,8]<stdout>:
[1,9]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.13s, elaps:        0.16s)
[1,13]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.14s, elaps:        0.15s)
[1,2]<stdout>:Relecture des catalogues des éléments faite.
[1,2]<stdout>:
[1,3]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.14s, elaps:        0.16s)
[1,8]<stdout>:Relecture des catalogues des éléments faite.
[1,8]<stdout>:
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:Fin de lecture (durée  0.019999  s.) 
[1,2]<stdout>:
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:Fin de lecture (durée  0.020144  s.) 
[1,8]<stdout>:
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,2]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,2]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,8]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,8]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,8]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,2]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre total d'accès en lecture         :  63
[1,7]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,7]<stdout>:     Nombre total d'accès en écriture        :  0
[1,7]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,8]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,7]<stdout>:Relecture des catalogues des éléments faite.
[1,7]<stdout>:
[1,7]<stdout>:Fin de lecture (durée  0.019924  s.) 
[1,7]<stdout>:
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre total d'accès en lecture         :  63
[1,0]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,0]<stdout>:     Nombre total d'accès en écriture        :  0
[1,0]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,0]<stdout>:Relecture des catalogues des éléments faite.
[1,0]<stdout>:
[1,2]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:Fin de lecture (durée  0.019551  s.) 
[1,0]<stdout>:
[1,8]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,7]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,7]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,7]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,2]<stdout>:# Fin commande #0001   user+syst:        0.05s (syst:        0.11s, elaps:        0.16s)
[1,8]<stdout>:# Fin commande #0001   user+syst:        0.04s (syst:        0.11s, elaps:        0.16s)
[1,0]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,0]<stdout>:                         ajouté à l'initialisation du processus : 645.57 Mo                         
[1,0]<stdout>:                               Limite cible du processus : 4843.97 Mo                               
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,7]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.12s, elaps:        0.16s)
[1,0]<stdout>:# Mémoire (Mo) :   645.57 /   636.70 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.15s, elaps:        0.16s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre total d'accès en lecture         :  63
[1,1]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,1]<stdout>:     Nombre total d'accès en écriture        :  0
[1,1]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre total d'accès en lecture         :  63
[1,4]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,4]<stdout>:     Nombre total d'accès en écriture        :  0
[1,4]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,15]<stdout>:Nom de la base                          :  ELEMBASE
[1,15]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,15]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,15]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,15]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,15]<stdout>:     Nombre total d'accès en lecture         :  63
[1,15]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,15]<stdout>:     Nombre total d'accès en écriture        :  0
[1,15]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,15]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,15]<stdout>:     Taille maximum du répertoire            :  300
[1,15]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,15]<stdout>:
[1,1]<stdout>:Relecture des catalogues des éléments faite.
[1,1]<stdout>:
[1,4]<stdout>:Relecture des catalogues des éléments faite.
[1,4]<stdout>:
[1,11]<stdout>:Nom de la base                          :  ELEMBASE
[1,11]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,11]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,11]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,11]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,11]<stdout>:     Nombre total d'accès en lecture         :  63
[1,11]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,11]<stdout>:     Nombre total d'accès en écriture        :  0
[1,11]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,11]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,11]<stdout>:     Taille maximum du répertoire            :  300
[1,11]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,11]<stdout>:
[1,15]<stdout>:Relecture des catalogues des éléments faite.
[1,15]<stdout>:
[1,1]<stdout>:Fin de lecture (durée  0.020320  s.) 
[1,1]<stdout>:
[1,4]<stdout>:Fin de lecture (durée  0.020279  s.) 
[1,4]<stdout>:
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre total d'accès en lecture         :  63
[1,5]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,5]<stdout>:     Nombre total d'accès en écriture        :  0
[1,5]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,11]<stdout>:Relecture des catalogues des éléments faite.
[1,11]<stdout>:
[1,15]<stdout>:Fin de lecture (durée  0.020507  s.) 
[1,15]<stdout>:
[1,10]<stdout>:Nom de la base                          :  ELEMBASE
[1,10]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,10]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,10]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,10]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,10]<stdout>:     Nombre total d'accès en lecture         :  63
[1,10]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,10]<stdout>:     Nombre total d'accès en écriture        :  0
[1,10]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,10]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,10]<stdout>:     Taille maximum du répertoire            :  300
[1,10]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,10]<stdout>:
[1,5]<stdout>:Relecture des catalogues des éléments faite.
[1,5]<stdout>:
[1,11]<stdout>:Fin de lecture (durée  0.020206  s.) 
[1,11]<stdout>:
[1,10]<stdout>:Relecture des catalogues des éléments faite.
[1,10]<stdout>:
[1,5]<stdout>:Fin de lecture (durée  0.020461  s.) 
[1,5]<stdout>:
[1,14]<stdout>:Nom de la base                          :  ELEMBASE
[1,14]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,14]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,14]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,14]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,14]<stdout>:     Nombre total d'accès en lecture         :  63
[1,14]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,14]<stdout>:     Nombre total d'accès en écriture        :  0
[1,14]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,14]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,14]<stdout>:     Taille maximum du répertoire            :  300
[1,14]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,14]<stdout>:
[1,1]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,1]<stdout>:                         ajouté à l'initialisation du processus : 645.57 Mo                         
[1,1]<stdout>:                               Limite cible du processus : 4843.97 Mo                               
[1,10]<stdout>:Fin de lecture (durée  0.020249  s.) 
[1,10]<stdout>:
[1,4]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,4]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,4]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,15]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,15]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,15]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,14]<stdout>:Relecture des catalogues des éléments faite.
[1,14]<stdout>:
[1,4]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,1]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,11]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,11]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,11]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,15]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,14]<stdout>:Fin de lecture (durée  0.019825  s.) 
[1,14]<stdout>:
[1,5]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,5]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,5]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,11]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,10]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,10]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,10]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,5]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,10]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,14]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,14]<stdout>:                         ajouté à l'initialisation du processus : 645.60 Mo                         
[1,14]<stdout>:                               Limite cible du processus : 4844.00 Mo                               
[1,14]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,1]<stdout>:# Mémoire (Mo) :   645.57 /   636.70 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.14s, elaps:        0.16s)
[1,4]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.14s, elaps:        0.16s)
[1,5]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.14s, elaps:        0.16s)
[1,10]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.14s, elaps:        0.16s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.15s, elaps:        0.16s)
[1,14]<stdout>:# Mémoire (Mo) :   645.60 /   636.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.15s, elaps:        0.16s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.14s, elaps:        0.16s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:PETSc initialized...
[1,5]<stdout>:PETSc initialized...
[1,6]<stdout>:PETSc initialized...
[1,12]<stdout>:PETSc initialized...
[1,11]<stdout>:PETSc initialized...
[1,9]<stdout>:PETSc initialized...
[1,14]<stdout>:PETSc initialized...
[1,10]<stdout>:PETSc initialized...
[1,8]<stdout>:PETSc initialized...
[1,7]<stdout>:PETSc initialized...
[1,1]<stdout>:PETSc initialized...
[1,4]<stdout>:PETSc initialized...
[1,2]<stdout>:PETSc initialized...
[1,3]<stdout>:PETSc initialized...
[1,13]<stdout>:PETSc initialized...
[1,15]<stdout>:PETSc initialized...
[1,0]<stdout>:Nom MED du maillage : PARALLEPIPED
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000001 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                      274625
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                     287488
[1,0]<stdout>:                              SEG2                  768
[1,0]<stdout>:                              QUAD4               24576
[1,0]<stdout>:                              HEXA8              262144
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                8
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES              19
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACCES='NEW',
[1,0]<stdout>:             ACTION='ASSOCIER',
[1,0]<stdout>:             FICHIER='/tmp/buildCubev0pcqt7c/buildCube.med',
[1,0]<stdout>:             TYPE='BINARY',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:Deleting '/tmp/buildCubev0pcqt7c/buildCube.med': No such file or directory
[1,0]<stdout>:# Mémoire (Mo) :  1167.19 /   836.71 /   249.04 /   213.86 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0002   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:Création du fichier au format MED 3.3.1.
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0003 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACTION='LIBERER',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1167.19 /   836.83 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0003   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,6]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,12]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,11]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,9]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,14]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,10]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,8]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,3]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,7]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,1]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,4]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,15]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,2]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,5]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,13]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,0]<stdout>:
[1,0]<stdout>:Nom MED du maillage : 00000001
[1,0]<stdout>:
[1,10]<stdout>:Nom MED du maillage : 00000001
[1,10]<stdout>:
[1,7]<stdout>:Nom MED du maillage : 00000001
[1,7]<stdout>:
[1,13]<stdout>:Nom MED du maillage : 00000001
[1,13]<stdout>:
[1,6]<stdout>:Nom MED du maillage : 00000001
[1,6]<stdout>:
[1,1]<stdout>:Nom MED du maillage : 00000001
[1,1]<stdout>:
[1,15]<stdout>:Nom MED du maillage : 00000001
[1,15]<stdout>:
[1,12]<stdout>:Nom MED du maillage : 00000001
[1,12]<stdout>:
[1,3]<stdout>:Nom MED du maillage : 00000001
[1,3]<stdout>:
[1,4]<stdout>:Nom MED du maillage : 00000001
[1,4]<stdout>:
[1,5]<stdout>:Nom MED du maillage : 00000001
[1,5]<stdout>:
[1,11]<stdout>:Nom MED du maillage : 00000001
[1,11]<stdout>:
[1,14]<stdout>:Nom MED du maillage : 00000001
[1,14]<stdout>:
[1,2]<stdout>:Nom MED du maillage : 00000001
[1,2]<stdout>:
[1,8]<stdout>:Nom MED du maillage : 00000001
[1,8]<stdout>:
[1,9]<stdout>:Nom MED du maillage : 00000001
[1,9]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt282
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt282
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt282
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt282
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt282
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt282
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt282
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt282
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt282
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt282
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt282
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt282
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt282
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt282
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt282
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt282
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,6]<stdout>:ligne 282
[1,15]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,15]<stdout>:ligne 282
[1,14]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,14]<stdout>:ligne 282
[1,0]<stdout>:# Commande #0004 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,0]<stdout>:ligne 282
[1,7]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,7]<stdout>:ligne 282
[1,13]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,13]<stdout>:ligne 282
[1,3]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,3]<stdout>:ligne 282
[1,12]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,12]<stdout>:ligne 282
[1,2]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,2]<stdout>:ligne 282
[1,8]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,8]<stdout>:ligne 282
[1,4]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,4]<stdout>:ligne 282
[1,11]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,11]<stdout>:ligne 282
[1,5]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,5]<stdout>:ligne 282
[1,1]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,1]<stdout>:ligne 282
[1,9]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,9]<stdout>:ligne 282
[1,10]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,10]<stdout>:ligne 282
[1,8]<stdout>:CREA_MAILLAGE(INFO=1,
[1,8]<stdout>:              MAILLAGE='<00000002>',
[1,8]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,8]<stdout>:                             TOUT='OUI'))
[1,8]<stdout>:
[1,14]<stdout>:CREA_MAILLAGE(INFO=1,
[1,14]<stdout>:              MAILLAGE='<00000002>',
[1,14]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,14]<stdout>:                             TOUT='OUI'))
[1,14]<stdout>:
[1,13]<stdout>:CREA_MAILLAGE(INFO=1,
[1,13]<stdout>:              MAILLAGE='<00000002>',
[1,13]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,13]<stdout>:                             TOUT='OUI'))
[1,13]<stdout>:
[1,3]<stdout>:CREA_MAILLAGE(INFO=1,
[1,3]<stdout>:              MAILLAGE='<00000002>',
[1,3]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,3]<stdout>:                             TOUT='OUI'))
[1,3]<stdout>:
[1,12]<stdout>:CREA_MAILLAGE(INFO=1,
[1,12]<stdout>:              MAILLAGE='<00000002>',
[1,12]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,12]<stdout>:                             TOUT='OUI'))
[1,12]<stdout>:
[1,2]<stdout>:CREA_MAILLAGE(INFO=1,
[1,2]<stdout>:              MAILLAGE='<00000002>',
[1,2]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,2]<stdout>:                             TOUT='OUI'))
[1,2]<stdout>:
[1,10]<stdout>:CREA_MAILLAGE(INFO=1,
[1,10]<stdout>:              MAILLAGE='<00000002>',
[1,10]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,10]<stdout>:                             TOUT='OUI'))
[1,10]<stdout>:
[1,4]<stdout>:CREA_MAILLAGE(INFO=1,
[1,4]<stdout>:              MAILLAGE='<00000002>',
[1,4]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,4]<stdout>:                             TOUT='OUI'))
[1,4]<stdout>:
[1,6]<stdout>:CREA_MAILLAGE(INFO=1,
[1,6]<stdout>:              MAILLAGE='<00000002>',
[1,6]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,6]<stdout>:                             TOUT='OUI'))
[1,6]<stdout>:
[1,15]<stdout>:CREA_MAILLAGE(INFO=1,
[1,15]<stdout>:              MAILLAGE='<00000002>',
[1,15]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,15]<stdout>:                             TOUT='OUI'))
[1,15]<stdout>:
[1,7]<stdout>:CREA_MAILLAGE(INFO=1,
[1,7]<stdout>:              MAILLAGE='<00000002>',
[1,7]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,7]<stdout>:                             TOUT='OUI'))
[1,7]<stdout>:
[1,5]<stdout>:CREA_MAILLAGE(INFO=1,
[1,5]<stdout>:              MAILLAGE='<00000002>',
[1,5]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,5]<stdout>:                             TOUT='OUI'))
[1,5]<stdout>:
[1,1]<stdout>:CREA_MAILLAGE(INFO=1,
[1,1]<stdout>:              MAILLAGE='<00000002>',
[1,1]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,1]<stdout>:                             TOUT='OUI'))
[1,1]<stdout>:
[1,9]<stdout>:CREA_MAILLAGE(INFO=1,
[1,9]<stdout>:              MAILLAGE='<00000002>',
[1,9]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,9]<stdout>:                             TOUT='OUI'))
[1,9]<stdout>:
[1,0]<stdout>:CREA_MAILLAGE(INFO=1,
[1,0]<stdout>:              MAILLAGE='<00000002>',
[1,0]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,0]<stdout>:                             TOUT='OUI'))
[1,0]<stdout>:
[1,11]<stdout>:CREA_MAILLAGE(INFO=1,
[1,11]<stdout>:              MAILLAGE='<00000002>',
[1,11]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,11]<stdout>:                             TOUT='OUI'))
[1,11]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,7]<stdout>:
[1,7]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:33 DE TYPE        
[1,7]<stdout>:MAILLAGE_P                                                                      
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE NOEUDS                     1068822
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE MAILLES                    1051572
[1,7]<stdout>:                              SEG2                   62
[1,7]<stdout>:                              QUAD4               15934
[1,7]<stdout>:                              HEXA8             1035576
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.56      0.00      0.57
[1,13]<stdout>:
[1,13]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,13]<stdout>:
[1,13]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:33 DE TYPE        
[1,13]<stdout>:MAILLAGE_P                                                                      
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE NOEUDS                     1110198
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE MAILLES                    1093601
[1,13]<stdout>:                              SEG2                   74
[1,13]<stdout>:                              QUAD4               17878
[1,13]<stdout>:                              HEXA8             1075649
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.54      0.00      0.54
[1,3]<stdout>:
[1,3]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,3]<stdout>:
[1,3]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:33 DE TYPE        
[1,3]<stdout>:MAILLAGE_P                                                                      
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE NOEUDS                     1106959
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE MAILLES                    1089614
[1,3]<stdout>:                              SEG2                   66
[1,3]<stdout>:                              QUAD4               16704
[1,3]<stdout>:                              HEXA8             1072844
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.28      0.00      0.29
[1,12]<stdout>:
[1,12]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,12]<stdout>:
[1,12]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:33 DE TYPE        
[1,12]<stdout>:MAILLAGE_P                                                                      
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE NOEUDS                     1059590
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE MAILLES                    1058473
[1,12]<stdout>:                              SEG2                  309
[1,12]<stdout>:                              QUAD4               31348
[1,12]<stdout>:                              HEXA8             1026816
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      2.69      0.01      2.68
[1,6]<stdout>:
[1,6]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,6]<stdout>:
[1,6]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:32 DE TYPE        
[1,6]<stdout>:MAILLAGE_P                                                                      
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE NOEUDS                     1090050
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE MAILLES                    1090049
[1,6]<stdout>:                              SEG2                  321
[1,6]<stdout>:                              QUAD4               32960
[1,6]<stdout>:                              HEXA8             1056768
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      2.85      0.00      2.86
[1,11]<stdout>:
[1,11]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,11]<stdout>:
[1,11]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:33 DE TYPE        
[1,11]<stdout>:MAILLAGE_P                                                                      
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE NOEUDS                     1099482
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE MAILLES                    1084827
[1,11]<stdout>:                              SEG2                  215
[1,11]<stdout>:                              QUAD4               26381
[1,11]<stdout>:                              HEXA8             1058231
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.07
[1,9]<stdout>:
[1,9]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,9]<stdout>:
[1,9]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:33 DE TYPE        
[1,9]<stdout>:MAILLAGE_P                                                                      
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE NOEUDS                     1096956
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE MAILLES                    1081630
[1,9]<stdout>:                              SEG2                   85
[1,9]<stdout>:                              QUAD4               19029
[1,9]<stdout>:                              HEXA8             1062516
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.68      0.00      0.68
[1,4]<stdout>:
[1,4]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,4]<stdout>:
[1,4]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:32 DE TYPE        
[1,4]<stdout>:MAILLAGE_P                                                                      
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE NOEUDS                     1117610
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE MAILLES                    1117609
[1,4]<stdout>:                              SEG2                  325
[1,4]<stdout>:                              QUAD4               33684
[1,4]<stdout>:                              HEXA8             1083600
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      2.28      0.00      2.28
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:32 DE TYPE        
[1,0]<stdout>:MAILLAGE_P                                                                      
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                     1111045
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                    1111044
[1,0]<stdout>:                              SEG2                  324
[1,0]<stdout>:                              QUAD4               33472
[1,0]<stdout>:                              HEXA8             1077248
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      2.84      0.00      2.84
[1,8]<stdout>:
[1,8]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,8]<stdout>:
[1,8]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:32 DE TYPE        
[1,8]<stdout>:MAILLAGE_P                                                                      
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE NOEUDS                     1118962
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE MAILLES                    1116249
[1,8]<stdout>:                              SEG2                  305
[1,8]<stdout>:                              QUAD4               31336
[1,8]<stdout>:                              HEXA8             1084608
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      1.99      0.00      1.98
[1,15]<stdout>:
[1,15]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,15]<stdout>:
[1,15]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:33 DE TYPE        
[1,15]<stdout>:MAILLAGE_P                                                                      
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE NOEUDS                     1088100
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE MAILLES                    1068840
[1,15]<stdout>:                              SEG2                   70
[1,15]<stdout>:                              QUAD4               16916
[1,15]<stdout>:                              HEXA8             1051854
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.05
[1,14]<stdout>:
[1,14]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,14]<stdout>:
[1,14]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:32 DE TYPE        
[1,14]<stdout>:MAILLAGE_P                                                                      
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE NOEUDS                     1066180
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE MAILLES                    1066159
[1,14]<stdout>:                              SEG2                  314
[1,14]<stdout>:                              QUAD4               31961
[1,14]<stdout>:                              HEXA8             1033884
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      2.72      0.00      2.71
[1,1]<stdout>:
[1,1]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,1]<stdout>:
[1,1]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:33 DE TYPE        
[1,1]<stdout>:MAILLAGE_P                                                                      
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE NOEUDS                     1141278
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE MAILLES                    1123973
[1,1]<stdout>:                              SEG2                   65
[1,1]<stdout>:                              QUAD4               17156
[1,1]<stdout>:                              HEXA8             1106752
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,2]<stdout>:
[1,2]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:32 DE TYPE        
[1,2]<stdout>:MAILLAGE_P                                                                      
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE NOEUDS                     1138137
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE MAILLES                    1137620
[1,2]<stdout>:                              SEG2                  324
[1,2]<stdout>:                              QUAD4               33680
[1,2]<stdout>:                              HEXA8             1103616
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.82      0.00      0.82
[1,10]<stdout>:
[1,10]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,10]<stdout>:
[1,10]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:33 DE TYPE        
[1,10]<stdout>:MAILLAGE_P                                                                      
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE NOEUDS                     1138840
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE MAILLES                    1121069
[1,10]<stdout>:                              SEG2                  169
[1,10]<stdout>:                              QUAD4               23100
[1,10]<stdout>:                              HEXA8             1097800
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE GROUPES DE MAILLES               6
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,5]<stdout>:
[1,5]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:04:33 DE TYPE        
[1,5]<stdout>:MAILLAGE_P                                                                      
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE NOEUDS                     1137060
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE MAILLES                    1119250
[1,5]<stdout>:                              SEG2                   65
[1,5]<stdout>:                              QUAD4               17017
[1,5]<stdout>:                              HEXA8             1102168
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,5]<stdout>:
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      2.40      0.00      2.39
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.35      0.00      0.34
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.33      0.00      0.33
[1,12]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,12]<stdout>:# Mémoire (Mo) :  6851.54 /  1284.32 /   496.05 /   456.52 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0002   user+syst:       22.66s (syst:        6.36s, elaps:       29.02s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,9]<stdout>:# Mémoire (Mo) :  7158.95 /  1321.29 /   508.31 /   468.57 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0002   user+syst:       21.38s (syst:        7.64s, elaps:       29.03s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,7]<stdout>:# Mémoire (Mo) :  7244.66 /  1324.43 /   506.13 /   466.61 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0002   user+syst:       21.14s (syst:        7.88s, elaps:       29.03s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,11]<stdout>:# Mémoire (Mo) :  7749.36 /  1349.29 /   515.66 /   475.85 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0002   user+syst:       21.14s (syst:        7.90s, elaps:       29.04s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,14]<stdout>:# Mémoire (Mo) :  7036.36 /  1296.53 /   499.93 /   460.34 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0002   user+syst:       21.68s (syst:        7.36s, elaps:       29.04s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,15]<stdout>:# Mémoire (Mo) :  7590.86 /  1349.52 /   513.40 /   473.72 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0002   user+syst:       21.12s (syst:        7.93s, elaps:       29.06s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,3]<stdout>:# Mémoire (Mo) :  7321.04 /  1335.68 /   513.33 /   473.51 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0002   user+syst:       21.13s (syst:        7.93s, elaps:       29.06s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,13]<stdout>:# Mémoire (Mo) :  7501.96 /  1346.52 /   515.83 /   475.97 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0002   user+syst:       21.31s (syst:        7.75s, elaps:       29.06s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,6]<stdout>:# Mémoire (Mo) :  7044.69 /  1300.67 /   503.93 /   464.15 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0002   user+syst:       21.85s (syst:        7.21s, elaps:       29.07s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,5]<stdout>:# Mémoire (Mo) :  7348.79 /  1342.54 /   519.19 /   479.14 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0002   user+syst:       21.19s (syst:        7.91s, elaps:       29.10s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,8]<stdout>:# Mémoire (Mo) :  7241.15 /  1317.39 /   510.99 /   471.00 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0002   user+syst:       21.72s (syst:        7.38s, elaps:       29.11s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0004 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,0]<stdout>:# Mémoire (Mo) :  7133.41 /  1414.73 /   551.82 /   503.41 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0004   user+syst:       22.02s (syst:        7.10s, elaps:       29.12s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,2]<stdout>:# Mémoire (Mo) :  7165.74 /  1316.60 /   513.83 /   473.69 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0002   user+syst:       21.61s (syst:        7.50s, elaps:       29.12s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,4]<stdout>:# Mémoire (Mo) :  7203.02 /  1315.02 /   510.90 /   470.91 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0002   user+syst:       21.57s (syst:        7.55s, elaps:       29.13s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,10]<stdout>:# Mémoire (Mo) :  7302.82 /  1334.14 /   517.36 /   477.29 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0002   user+syst:       21.13s (syst:        8.00s, elaps:       29.13s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,1]<stdout>:# Mémoire (Mo) :  7212.36 /  1334.54 /   517.49 /   477.41 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0002   user+syst:       21.49s (syst:        7.64s, elaps:       29.13s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt131
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt131
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt131
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt131
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt131
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt131
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt131
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt131
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt131
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt131
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt131
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt131
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0003 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 131
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0003 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 131
[1,12]<stdout>:# Commande #0003 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 131
[1,9]<stdout>:# Commande #0003 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 131
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt131
[1,8]<stdout>:# Commande #0003 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 131
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt131
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0003 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 131
[1,4]<stdout>:# Commande #0003 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 131
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0003 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 131
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt131
[1,5]<stdout>:# Commande #0003 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 131
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0003 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 131
[1,13]<stdout>:# Commande #0003 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 131
[1,10]<stdout>:# Commande #0003 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 131
[1,6]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,6]<stdout>:                            PHENOMENE='MECANIQUE',
[1,6]<stdout>:                            TOUT='OUI'),
[1,6]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,6]<stdout>:                    INFO=1,
[1,6]<stdout>:                    MAILLAGE='<00000004>',
[1,6]<stdout>:                    VERI_JACOBIEN='OUI',
[1,6]<stdout>:                    VERI_NORM_IFS='OUI',
[1,6]<stdout>:                    VERI_PLAN='OUI')
[1,6]<stdout>:
[1,12]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,12]<stdout>:                            PHENOMENE='MECANIQUE',
[1,12]<stdout>:                            TOUT='OUI'),
[1,12]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,12]<stdout>:                    INFO=1,
[1,12]<stdout>:                    MAILLAGE='<00000004>',
[1,12]<stdout>:                    VERI_JACOBIEN='OUI',
[1,12]<stdout>:                    VERI_NORM_IFS='OUI',
[1,12]<stdout>:                    VERI_PLAN='OUI')
[1,12]<stdout>:
[1,9]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,9]<stdout>:                            PHENOMENE='MECANIQUE',
[1,9]<stdout>:                            TOUT='OUI'),
[1,9]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,9]<stdout>:                    INFO=1,
[1,9]<stdout>:                    MAILLAGE='<00000004>',
[1,9]<stdout>:                    VERI_JACOBIEN='OUI',
[1,9]<stdout>:                    VERI_NORM_IFS='OUI',
[1,9]<stdout>:                    VERI_PLAN='OUI')
[1,9]<stdout>:
[1,8]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,8]<stdout>:                            PHENOMENE='MECANIQUE',
[1,8]<stdout>:                            TOUT='OUI'),
[1,8]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,8]<stdout>:                    INFO=1,
[1,8]<stdout>:                    MAILLAGE='<00000004>',
[1,8]<stdout>:                    VERI_JACOBIEN='OUI',
[1,8]<stdout>:                    VERI_NORM_IFS='OUI',
[1,8]<stdout>:                    VERI_PLAN='OUI')
[1,8]<stdout>:
[1,14]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,14]<stdout>:                            PHENOMENE='MECANIQUE',
[1,14]<stdout>:                            TOUT='OUI'),
[1,14]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,14]<stdout>:                    INFO=1,
[1,14]<stdout>:                    MAILLAGE='<00000004>',
[1,14]<stdout>:                    VERI_JACOBIEN='OUI',
[1,14]<stdout>:                    VERI_NORM_IFS='OUI',
[1,14]<stdout>:                    VERI_PLAN='OUI')
[1,14]<stdout>:
[1,3]<stdout>:# Commande #0003 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 131
[1,15]<stdout>:# Commande #0003 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 131
[1,11]<stdout>:# Commande #0003 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 131
[1,4]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,4]<stdout>:                            PHENOMENE='MECANIQUE',
[1,4]<stdout>:                            TOUT='OUI'),
[1,4]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,4]<stdout>:                    INFO=1,
[1,4]<stdout>:                    MAILLAGE='<00000004>',
[1,4]<stdout>:                    VERI_JACOBIEN='OUI',
[1,4]<stdout>:                    VERI_NORM_IFS='OUI',
[1,4]<stdout>:                    VERI_PLAN='OUI')
[1,4]<stdout>:
[1,7]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,7]<stdout>:                            PHENOMENE='MECANIQUE',
[1,7]<stdout>:                            TOUT='OUI'),
[1,7]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,7]<stdout>:                    INFO=1,
[1,7]<stdout>:                    MAILLAGE='<00000004>',
[1,7]<stdout>:                    VERI_JACOBIEN='OUI',
[1,7]<stdout>:                    VERI_NORM_IFS='OUI',
[1,7]<stdout>:                    VERI_PLAN='OUI')
[1,7]<stdout>:
[1,2]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,2]<stdout>:                            PHENOMENE='MECANIQUE',
[1,2]<stdout>:                            TOUT='OUI'),
[1,2]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,2]<stdout>:                    INFO=1,
[1,2]<stdout>:                    MAILLAGE='<00000004>',
[1,2]<stdout>:                    VERI_JACOBIEN='OUI',
[1,2]<stdout>:                    VERI_NORM_IFS='OUI',
[1,2]<stdout>:                    VERI_PLAN='OUI')
[1,2]<stdout>:
[1,5]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,5]<stdout>:                            PHENOMENE='MECANIQUE',
[1,5]<stdout>:                            TOUT='OUI'),
[1,5]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,5]<stdout>:                    INFO=1,
[1,5]<stdout>:                    MAILLAGE='<00000004>',
[1,5]<stdout>:                    VERI_JACOBIEN='OUI',
[1,5]<stdout>:                    VERI_NORM_IFS='OUI',
[1,5]<stdout>:                    VERI_PLAN='OUI')
[1,5]<stdout>:
[1,13]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,13]<stdout>:                            PHENOMENE='MECANIQUE',
[1,13]<stdout>:                            TOUT='OUI'),
[1,13]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,13]<stdout>:                    INFO=1,
[1,13]<stdout>:                    MAILLAGE='<00000004>',
[1,13]<stdout>:                    VERI_JACOBIEN='OUI',
[1,13]<stdout>:                    VERI_NORM_IFS='OUI',
[1,13]<stdout>:                    VERI_PLAN='OUI')
[1,13]<stdout>:
[1,1]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,1]<stdout>:                            PHENOMENE='MECANIQUE',
[1,1]<stdout>:                            TOUT='OUI'),
[1,1]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,1]<stdout>:                    INFO=1,
[1,1]<stdout>:                    MAILLAGE='<00000004>',
[1,1]<stdout>:                    VERI_JACOBIEN='OUI',
[1,1]<stdout>:                    VERI_NORM_IFS='OUI',
[1,1]<stdout>:                    VERI_PLAN='OUI')
[1,1]<stdout>:
[1,10]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,10]<stdout>:                            PHENOMENE='MECANIQUE',
[1,10]<stdout>:                            TOUT='OUI'),
[1,10]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,10]<stdout>:                    INFO=1,
[1,10]<stdout>:                    MAILLAGE='<00000004>',
[1,10]<stdout>:                    VERI_JACOBIEN='OUI',
[1,10]<stdout>:                    VERI_NORM_IFS='OUI',
[1,10]<stdout>:                    VERI_PLAN='OUI')
[1,10]<stdout>:
[1,3]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,3]<stdout>:                            PHENOMENE='MECANIQUE',
[1,3]<stdout>:                            TOUT='OUI'),
[1,3]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,3]<stdout>:                    INFO=1,
[1,3]<stdout>:                    MAILLAGE='<00000004>',
[1,3]<stdout>:                    VERI_JACOBIEN='OUI',
[1,3]<stdout>:                    VERI_NORM_IFS='OUI',
[1,3]<stdout>:                    VERI_PLAN='OUI')
[1,3]<stdout>:
[1,15]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,15]<stdout>:                            PHENOMENE='MECANIQUE',
[1,15]<stdout>:                            TOUT='OUI'),
[1,15]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,15]<stdout>:                    INFO=1,
[1,15]<stdout>:                    MAILLAGE='<00000004>',
[1,15]<stdout>:                    VERI_JACOBIEN='OUI',
[1,15]<stdout>:                    VERI_NORM_IFS='OUI',
[1,15]<stdout>:                    VERI_PLAN='OUI')
[1,15]<stdout>:
[1,11]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,11]<stdout>:                            PHENOMENE='MECANIQUE',
[1,11]<stdout>:                            TOUT='OUI'),
[1,11]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,11]<stdout>:                    INFO=1,
[1,11]<stdout>:                    MAILLAGE='<00000004>',
[1,11]<stdout>:                    VERI_JACOBIEN='OUI',
[1,11]<stdout>:                    VERI_NORM_IFS='OUI',
[1,11]<stdout>:                    VERI_PLAN='OUI')
[1,11]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt131
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0005 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 131
[1,0]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,0]<stdout>:                            PHENOMENE='MECANIQUE',
[1,0]<stdout>:                            TOUT='OUI'),
[1,0]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,0]<stdout>:                    INFO=1,
[1,0]<stdout>:                    MAILLAGE='<00000004>',
[1,0]<stdout>:                    VERI_JACOBIEN='OUI',
[1,0]<stdout>:                    VERI_NORM_IFS='OUI',
[1,0]<stdout>:                    VERI_PLAN='OUI')
[1,0]<stdout>:
[1,7]<stdout>:Sur les 1051572 mailles du maillage 00000004, on a demandé l'affectation de 1051572, on a pu en
[1,7]<stdout>:affecter 1051572.
[1,12]<stdout>:Sur les 1058473 mailles du maillage 00000004, on a demandé l'affectation de 1058473, on a pu en
[1,12]<stdout>:affecter 1058473.
[1,9]<stdout>:Sur les 1081630 mailles du maillage 00000004, on a demandé l'affectation de 1081630, on a pu en
[1,9]<stdout>:affecter 1081630.
[1,14]<stdout>:Sur les 1066159 mailles du maillage 00000004, on a demandé l'affectation de 1066159, on a pu en
[1,14]<stdout>:affecter 1066159.
[1,3]<stdout>:Sur les 1089614 mailles du maillage 00000004, on a demandé l'affectation de 1089614, on a pu en
[1,3]<stdout>:affecter 1089614.
[1,11]<stdout>:Sur les 1084827 mailles du maillage 00000004, on a demandé l'affectation de 1084827, on a pu en
[1,11]<stdout>:affecter 1084827.
[1,15]<stdout>:Sur les 1068840 mailles du maillage 00000004, on a demandé l'affectation de 1068840, on a pu en
[1,15]<stdout>:affecter 1068840.
[1,13]<stdout>:Sur les 1093601 mailles du maillage 00000004, on a demandé l'affectation de 1093601, on a pu en
[1,13]<stdout>:affecter 1093601.
[1,8]<stdout>:Sur les 1116249 mailles du maillage 00000004, on a demandé l'affectation de 1116249, on a pu en
[1,8]<stdout>:affecter 1116249.
[1,4]<stdout>:Sur les 1117609 mailles du maillage 00000004, on a demandé l'affectation de 1117609, on a pu en
[1,4]<stdout>:affecter 1117609.
[1,0]<stdout>:Sur les 1111044 mailles du maillage 00000004, on a demandé l'affectation de 1111044, on a pu en
[1,0]<stdout>:affecter 1111044.
[1,10]<stdout>:Sur les 1121069 mailles du maillage 00000004, on a demandé l'affectation de 1121069, on a pu en
[1,10]<stdout>:affecter 1121069.
[1,6]<stdout>:Sur les 1090049 mailles du maillage 00000004, on a demandé l'affectation de 1090049, on a pu en
[1,6]<stdout>:affecter 1090049.
[1,1]<stdout>:Sur les 1123973 mailles du maillage 00000004, on a demandé l'affectation de 1123973, on a pu en
[1,1]<stdout>:affecter 1123973.
[1,5]<stdout>:Sur les 1119250 mailles du maillage 00000004, on a demandé l'affectation de 1119250, on a pu en
[1,5]<stdout>:affecter 1119250.
[1,2]<stdout>:Sur les 1137620 mailles du maillage 00000004, on a demandé l'affectation de 1137620, on a pu en
[1,2]<stdout>:affecter 1137620.
[1,7]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,7]<stdout>:_                _                SEG2         MECA_ARETE2      62
[1,7]<stdout>:_                _                QUAD4        MECA_FACE4       15934
[1,7]<stdout>:3D               _                HEXA8        MECA_HEXA8       1035576
[1,3]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,3]<stdout>:_                _                SEG2         MECA_ARETE2      66
[1,3]<stdout>:_                _                QUAD4        MECA_FACE4       16704
[1,3]<stdout>:3D               _                HEXA8        MECA_HEXA8       1072844
[1,9]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,11]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,9]<stdout>:_                _                SEG2         MECA_ARETE2      85
[1,9]<stdout>:_                _                QUAD4        MECA_FACE4       19029
[1,11]<stdout>:_                _                SEG2         MECA_ARETE2      215
[1,9]<stdout>:3D               _                HEXA8        MECA_HEXA8       1062516
[1,11]<stdout>:_                _                QUAD4        MECA_FACE4       26381
[1,11]<stdout>:3D               _                HEXA8        MECA_HEXA8       1058231
[1,13]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,13]<stdout>:_                _                SEG2         MECA_ARETE2      74
[1,13]<stdout>:_                _                QUAD4        MECA_FACE4       17878
[1,13]<stdout>:3D               _                HEXA8        MECA_HEXA8       1075649
[1,0]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,0]<stdout>:_                _                SEG2         MECA_ARETE2      324
[1,0]<stdout>:_                _                QUAD4        MECA_FACE4       33472
[1,0]<stdout>:3D               _                HEXA8        MECA_HEXA8       1077248
[1,15]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,15]<stdout>:_                _                SEG2         MECA_ARETE2      70
[1,15]<stdout>:_                _                QUAD4        MECA_FACE4       16916
[1,15]<stdout>:3D               _                HEXA8        MECA_HEXA8       1051854
[1,14]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,14]<stdout>:_                _                SEG2         MECA_ARETE2      314
[1,14]<stdout>:_                _                QUAD4        MECA_FACE4       31961
[1,14]<stdout>:3D               _                HEXA8        MECA_HEXA8       1033884
[1,12]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,12]<stdout>:_                _                SEG2         MECA_ARETE2      309
[1,12]<stdout>:_                _                QUAD4        MECA_FACE4       31348
[1,12]<stdout>:3D               _                HEXA8        MECA_HEXA8       1026816
[1,6]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,6]<stdout>:_                _                SEG2         MECA_ARETE2      321
[1,6]<stdout>:_                _                QUAD4        MECA_FACE4       32960
[1,6]<stdout>:3D               _                HEXA8        MECA_HEXA8       1056768
[1,4]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,4]<stdout>:_                _                SEG2         MECA_ARETE2      325
[1,4]<stdout>:_                _                QUAD4        MECA_FACE4       33684
[1,4]<stdout>:3D               _                HEXA8        MECA_HEXA8       1083600
[1,5]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,5]<stdout>:_                _                SEG2         MECA_ARETE2      65
[1,5]<stdout>:_                _                QUAD4        MECA_FACE4       17017
[1,5]<stdout>:3D               _                HEXA8        MECA_HEXA8       1102168
[1,8]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,8]<stdout>:_                _                SEG2         MECA_ARETE2      305
[1,8]<stdout>:_                _                QUAD4        MECA_FACE4       31336
[1,8]<stdout>:3D               _                HEXA8        MECA_HEXA8       1084608
[1,10]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,10]<stdout>:_                _                SEG2         MECA_ARETE2      169
[1,10]<stdout>:_                _                QUAD4        MECA_FACE4       23100
[1,10]<stdout>:3D               _                HEXA8        MECA_HEXA8       1097800
[1,1]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,1]<stdout>:_                _                SEG2         MECA_ARETE2      65
[1,1]<stdout>:_                _                QUAD4        MECA_FACE4       17156
[1,1]<stdout>:3D               _                HEXA8        MECA_HEXA8       1106752
[1,2]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,2]<stdout>:_                _                SEG2         MECA_ARETE2      324
[1,2]<stdout>:_                _                QUAD4        MECA_FACE4       33680
[1,2]<stdout>:3D               _                HEXA8        MECA_HEXA8       1103616
[1,7]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.56      0.00      0.57
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,14]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.56      0.01      0.57
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,15]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.57      0.01      0.57
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,12]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.58      0.03      0.56
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,11]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.60      0.01      0.60
[1,9]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.59      0.00      0.58
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,6]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.60      0.00      0.60
[1,3]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.58      0.00      0.59
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,13]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.62      0.01      0.61
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,4]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.61      0.00      0.62
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,0]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.62      0.01      0.62
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,8]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.61      0.01      0.61
[1,5]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.60      0.01      0.60
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,1]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.63      0.00      0.63
[1,10]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.60      0.00      0.60
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,2]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.62      0.02      0.62
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,6]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,6]<stdout>:# Mémoire (Mo) :  7044.69 /  1408.25 /   562.68 /   464.15 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0003   user+syst:        3.83s (syst:        0.02s, elaps:        3.86s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt141
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0004 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 141
[1,6]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                                   SY=200.0),
[1,6]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,6]<stdout>:                              COEF_AMOR=1.0,
[1,6]<stdout>:                              E=200000.0,
[1,6]<stdout>:                              K_DESSIC=0.0,
[1,6]<stdout>:                              NU=0.3),
[1,6]<stdout>:                      INFO=1)
[1,6]<stdout>:
[1,7]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,7]<stdout>:# Mémoire (Mo) :  7244.66 /  1373.21 /   554.36 /   466.61 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0003   user+syst:        3.85s (syst:        0.01s, elaps:        3.87s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,12]<stdout>:# Mémoire (Mo) :  6851.54 /  1373.65 /   553.28 /   456.52 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0003   user+syst:        3.81s (syst:        0.05s, elaps:        3.87s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,14]<stdout>:# Mémoire (Mo) :  7036.36 /  1386.20 /   555.43 /   460.34 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0003   user+syst:        3.83s (syst:        0.04s, elaps:        3.87s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,9]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,3]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,9]<stdout>:# Mémoire (Mo) :  7158.95 /  1378.79 /   563.10 /   468.57 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  7590.86 /  1398.56 /   559.92 /   473.72 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,15]<stdout>:# Fin commande #0003   user+syst:        3.84s (syst:        0.03s, elaps:        3.87s)
[1,9]<stdout>:# Fin commande #0003   user+syst:        3.85s (syst:        0.02s, elaps:        3.87s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Mémoire (Mo) :  7321.04 /  1385.04 /   565.96 /   473.51 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,11]<stdout>:# Mémoire (Mo) :  7749.36 /  1398.57 /   563.69 /   475.85 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0003   user+syst:        3.83s (syst:        0.03s, elaps:        3.87s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0003   user+syst:        3.84s (syst:        0.02s, elaps:        3.87s)
[1,13]<stdout>:# Mémoire (Mo) :  7501.96 /  1395.94 /   567.01 /   475.97 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Fin commande #0003   user+syst:        3.85s (syst:        0.02s, elaps:        3.87s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0005 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,4]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,8]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,4]<stdout>:# Mémoire (Mo) :  7203.02 /  1407.44 /   571.07 /   470.91 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,0]<stdout>:# Mémoire (Mo) :  7133.41 /  1421.89 /   569.07 /   503.41 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,8]<stdout>:# Mémoire (Mo) :  7241.15 /  1409.89 /   571.18 /   471.00 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0003   user+syst:        3.83s (syst:        0.03s, elaps:        3.87s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,1]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,0]<stdout>:# Fin commande #0005   user+syst:        3.81s (syst:        0.03s, elaps:        3.84s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Fin commande #0003   user+syst:        3.84s (syst:        0.03s, elaps:        3.87s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Mémoire (Mo) :  7348.79 /  1436.00 /   575.07 /   479.14 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :  7302.82 /  1427.70 /   575.38 /   477.29 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :  7165.74 /  1427.48 /   577.26 /   473.69 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  7212.36 /  1428.22 /   576.42 /   477.41 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0003   user+syst:        3.83s (syst:        0.04s, elaps:        3.87s)
[1,10]<stdout>:# Fin commande #0003   user+syst:        3.83s (syst:        0.03s, elaps:        3.87s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0003   user+syst:        3.82s (syst:        0.05s, elaps:        3.87s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0003   user+syst:        3.85s (syst:        0.02s, elaps:        3.87s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt141
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0004 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 141
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt141
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0004 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 141
[1,7]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                                   SY=200.0),
[1,7]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,7]<stdout>:                              COEF_AMOR=1.0,
[1,7]<stdout>:                              E=200000.0,
[1,7]<stdout>:                              K_DESSIC=0.0,
[1,7]<stdout>:                              NU=0.3),
[1,7]<stdout>:                      INFO=1)
[1,7]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt141
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,12]<stdout>:                                   SY=200.0),
[1,12]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,12]<stdout>:                              COEF_AMOR=1.0,
[1,12]<stdout>:                              E=200000.0,
[1,12]<stdout>:                              K_DESSIC=0.0,
[1,12]<stdout>:                              NU=0.3),
[1,12]<stdout>:                      INFO=1)
[1,12]<stdout>:
[1,14]<stdout>:# Commande #0004 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 141
[1,14]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,14]<stdout>:                                   SY=200.0),
[1,14]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,14]<stdout>:                              COEF_AMOR=1.0,
[1,14]<stdout>:                              E=200000.0,
[1,14]<stdout>:                              K_DESSIC=0.0,
[1,14]<stdout>:                              NU=0.3),
[1,14]<stdout>:                      INFO=1)
[1,14]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt141
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt141
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt141
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0004 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 141
[1,9]<stdout>:# Commande #0004 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 141
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt141
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0004 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 141
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt141
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0004 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 141
[1,15]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,15]<stdout>:                                   SY=200.0),
[1,15]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,15]<stdout>:                              COEF_AMOR=1.0,
[1,15]<stdout>:                              E=200000.0,
[1,15]<stdout>:                              K_DESSIC=0.0,
[1,15]<stdout>:                              NU=0.3),
[1,15]<stdout>:                      INFO=1)
[1,15]<stdout>:
[1,9]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,9]<stdout>:                                   SY=200.0),
[1,9]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,9]<stdout>:                              COEF_AMOR=1.0,
[1,9]<stdout>:                              E=200000.0,
[1,9]<stdout>:                              K_DESSIC=0.0,
[1,9]<stdout>:                              NU=0.3),
[1,9]<stdout>:                      INFO=1)
[1,9]<stdout>:
[1,13]<stdout>:# Commande #0004 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 141
[1,3]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                                   SY=200.0),
[1,3]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,3]<stdout>:                              COEF_AMOR=1.0,
[1,3]<stdout>:                              E=200000.0,
[1,3]<stdout>:                              K_DESSIC=0.0,
[1,3]<stdout>:                              NU=0.3),
[1,3]<stdout>:                      INFO=1)
[1,3]<stdout>:
[1,11]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,11]<stdout>:                                   SY=200.0),
[1,11]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,11]<stdout>:                              COEF_AMOR=1.0,
[1,11]<stdout>:                              E=200000.0,
[1,11]<stdout>:                              K_DESSIC=0.0,
[1,11]<stdout>:                              NU=0.3),
[1,11]<stdout>:                      INFO=1)
[1,11]<stdout>:
[1,13]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,13]<stdout>:                                   SY=200.0),
[1,13]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,13]<stdout>:                              COEF_AMOR=1.0,
[1,13]<stdout>:                              E=200000.0,
[1,13]<stdout>:                              K_DESSIC=0.0,
[1,13]<stdout>:                              NU=0.3),
[1,13]<stdout>:                      INFO=1)
[1,13]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt141
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt141
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt141
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt141
[1,0]<stdout>:# Commande #0006 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 141
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0004 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 141
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt141
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt141
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0004 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 141
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt141
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0004 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 141
[1,2]<stdout>:# Commande #0004 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 141
[1,10]<stdout>:# Commande #0004 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 141
[1,0]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                                   SY=200.0),
[1,0]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,0]<stdout>:                              COEF_AMOR=1.0,
[1,0]<stdout>:                              E=200000.0,
[1,0]<stdout>:                              K_DESSIC=0.0,
[1,0]<stdout>:                              NU=0.3),
[1,0]<stdout>:                      INFO=1)
[1,0]<stdout>:
[1,4]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                                   SY=200.0),
[1,4]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,4]<stdout>:                              COEF_AMOR=1.0,
[1,4]<stdout>:                              E=200000.0,
[1,4]<stdout>:                              K_DESSIC=0.0,
[1,4]<stdout>:                              NU=0.3),
[1,4]<stdout>:                      INFO=1)
[1,4]<stdout>:
[1,1]<stdout>:# Commande #0004 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 141
[1,8]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,8]<stdout>:                                   SY=200.0),
[1,8]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,8]<stdout>:                              COEF_AMOR=1.0,
[1,8]<stdout>:                              E=200000.0,
[1,8]<stdout>:                              K_DESSIC=0.0,
[1,8]<stdout>:                              NU=0.3),
[1,8]<stdout>:                      INFO=1)
[1,8]<stdout>:
[1,5]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                                   SY=200.0),
[1,5]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,5]<stdout>:                              COEF_AMOR=1.0,
[1,5]<stdout>:                              E=200000.0,
[1,5]<stdout>:                              K_DESSIC=0.0,
[1,5]<stdout>:                              NU=0.3),
[1,5]<stdout>:                      INFO=1)
[1,5]<stdout>:
[1,2]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                                   SY=200.0),
[1,2]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,2]<stdout>:                              COEF_AMOR=1.0,
[1,2]<stdout>:                              E=200000.0,
[1,2]<stdout>:                              K_DESSIC=0.0,
[1,2]<stdout>:                              NU=0.3),
[1,2]<stdout>:                      INFO=1)
[1,2]<stdout>:
[1,10]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,10]<stdout>:                                   SY=200.0),
[1,10]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,10]<stdout>:                              COEF_AMOR=1.0,
[1,10]<stdout>:                              E=200000.0,
[1,10]<stdout>:                              K_DESSIC=0.0,
[1,10]<stdout>:                              NU=0.3),
[1,10]<stdout>:                      INFO=1)
[1,10]<stdout>:
[1,1]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                                   SY=200.0),
[1,1]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,1]<stdout>:                              COEF_AMOR=1.0,
[1,1]<stdout>:                              E=200000.0,
[1,1]<stdout>:                              K_DESSIC=0.0,
[1,1]<stdout>:                              NU=0.3),
[1,1]<stdout>:                      INFO=1)
[1,1]<stdout>:
[1,6]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,6]<stdout>:# Mémoire (Mo) :  7044.69 /  1408.25 /   562.68 /   464.15 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt152
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0005 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 152
[1,6]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,6]<stdout>:                              TOUT='OUI'),
[1,6]<stdout>:                      INFO=1,
[1,6]<stdout>:                      MAILLAGE='<00000004>')
[1,6]<stdout>:
[1,7]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,12]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,7]<stdout>:# Mémoire (Mo) :  7244.66 /  1373.21 /   554.36 /   466.61 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  6851.54 /  1373.65 /   553.28 /   456.52 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,12]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,14]<stdout>:# Mémoire (Mo) :  7036.36 /  1386.20 /   555.43 /   460.34 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,14]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Mémoire (Mo) :  7158.95 /  1378.79 /   563.10 /   468.57 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,9]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,15]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,3]<stdout>:# Mémoire (Mo) :  7321.04 /  1385.04 /   565.96 /   473.51 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  7590.86 /  1398.56 /   559.92 /   473.72 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  7501.96 /  1395.94 /   567.01 /   475.97 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,11]<stdout>:# Mémoire (Mo) :  7749.36 /  1398.57 /   563.69 /   475.85 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,4]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,5]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,8]<stdout>:# Mémoire (Mo) :  7241.15 /  1409.89 /   571.18 /   471.00 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,5]<stdout>:# Mémoire (Mo) :  7348.79 /  1436.00 /   575.07 /   479.14 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :  7203.02 /  1407.44 /   571.07 /   470.91 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,8]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,4]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt152
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt152
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :  7212.36 /  1428.22 /   576.42 /   477.41 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,2]<stdout>:# Mémoire (Mo) :  7165.74 /  1427.48 /   577.26 /   473.69 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0005 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:# Commande #0005 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 152
[1,2]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,10]<stdout>:# Mémoire (Mo) :  7302.82 /  1427.70 /   575.38 /   477.29 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,12]<stdout>:                              TOUT='OUI'),
[1,12]<stdout>:                      INFO=1,
[1,12]<stdout>:                      MAILLAGE='<00000004>')
[1,12]<stdout>:
[1,7]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,7]<stdout>:                              TOUT='OUI'),
[1,7]<stdout>:                      INFO=1,
[1,7]<stdout>:                      MAILLAGE='<00000004>')
[1,7]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt152
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0005 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 152
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt152
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0005 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 152
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt152
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,14]<stdout>:                              TOUT='OUI'),
[1,14]<stdout>:                      INFO=1,
[1,14]<stdout>:                      MAILLAGE='<00000004>')
[1,14]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt152
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt152
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0005 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 152
[1,9]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,9]<stdout>:                              TOUT='OUI'),
[1,9]<stdout>:                      INFO=1,
[1,9]<stdout>:                      MAILLAGE='<00000004>')
[1,9]<stdout>:
[1,15]<stdout>:# Commande #0005 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 152
[1,13]<stdout>:# Commande #0005 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 152
[1,3]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,3]<stdout>:                              TOUT='OUI'),
[1,3]<stdout>:                      INFO=1,
[1,3]<stdout>:                      MAILLAGE='<00000004>')
[1,3]<stdout>:
[1,15]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,15]<stdout>:                              TOUT='OUI'),
[1,15]<stdout>:                      INFO=1,
[1,15]<stdout>:                      MAILLAGE='<00000004>')
[1,15]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt152
[1,13]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,13]<stdout>:                              TOUT='OUI'),
[1,13]<stdout>:                      INFO=1,
[1,13]<stdout>:                      MAILLAGE='<00000004>')
[1,13]<stdout>:
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0006 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,11]<stdout>:# Commande #0005 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 152
[1,0]<stdout>:# Mémoire (Mo) :  7133.41 /  1421.89 /   569.07 /   503.41 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0006   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,11]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,11]<stdout>:                              TOUT='OUI'),
[1,11]<stdout>:                      INFO=1,
[1,11]<stdout>:                      MAILLAGE='<00000004>')
[1,11]<stdout>:
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt152
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt152
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt152
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0005 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 152
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt152
[1,5]<stdout>:# Commande #0005 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 152
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt152
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0005 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 152
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt152
[1,1]<stdout>:# Commande #0005 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 152
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0005 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 152
[1,8]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,8]<stdout>:                              TOUT='OUI'),
[1,8]<stdout>:                      INFO=1,
[1,8]<stdout>:                      MAILLAGE='<00000004>')
[1,8]<stdout>:
[1,5]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,5]<stdout>:                              TOUT='OUI'),
[1,5]<stdout>:                      INFO=1,
[1,5]<stdout>:                      MAILLAGE='<00000004>')
[1,5]<stdout>:
[1,4]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,4]<stdout>:                              TOUT='OUI'),
[1,4]<stdout>:                      INFO=1,
[1,4]<stdout>:                      MAILLAGE='<00000004>')
[1,4]<stdout>:
[1,10]<stdout>:# Commande #0005 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 152
[1,2]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,2]<stdout>:                              TOUT='OUI'),
[1,2]<stdout>:                      INFO=1,
[1,2]<stdout>:                      MAILLAGE='<00000004>')
[1,2]<stdout>:
[1,1]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,1]<stdout>:                              TOUT='OUI'),
[1,1]<stdout>:                      INFO=1,
[1,1]<stdout>:                      MAILLAGE='<00000004>')
[1,1]<stdout>:
[1,10]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,10]<stdout>:                              TOUT='OUI'),
[1,10]<stdout>:                      INFO=1,
[1,10]<stdout>:                      MAILLAGE='<00000004>')
[1,10]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt152
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0007 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 152
[1,0]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,0]<stdout>:                              TOUT='OUI'),
[1,0]<stdout>:                      INFO=1,
[1,0]<stdout>:                      MAILLAGE='<00000004>')
[1,0]<stdout>:
[1,6]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,6]<stdout>:# Mémoire (Mo) :  7044.69 /  1408.25 /   562.68 /   464.15 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt161
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0006 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 161
[1,6]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,6]<stdout>:                                    DY=0.0,
[1,6]<stdout>:                                    DZ=0.0,
[1,6]<stdout>:                                    GROUP_MA='LEFT'),
[1,6]<stdout>:                       MODELE=model,
[1,6]<stdout>:                       SYNTAXE='NON')
[1,6]<stdout>:
[1,12]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,7]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,12]<stdout>:# Mémoire (Mo) :  6851.54 /  1373.65 /   553.28 /   456.52 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  7244.66 /  1373.21 /   554.36 /   466.61 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,14]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,9]<stdout>:# Mémoire (Mo) :  7158.95 /  1378.79 /   563.10 /   468.57 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,14]<stdout>:# Mémoire (Mo) :  7036.36 /  1386.20 /   555.43 /   460.34 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,3]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,14]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Mémoire (Mo) :  7501.96 /  1395.94 /   567.01 /   475.97 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  7590.86 /  1398.56 /   559.92 /   473.72 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  7321.04 /  1385.04 /   565.96 /   473.51 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,3]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt161
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt161
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0006 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 161
[1,7]<stdout>:# Commande #0006 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 161
[1,12]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,12]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,12]<stdout>:                                    DY=0.0,
[1,12]<stdout>:                                    DZ=0.0,
[1,12]<stdout>:                                    GROUP_MA='LEFT'),
[1,12]<stdout>:                       MODELE=model,
[1,12]<stdout>:                       SYNTAXE='NON')
[1,12]<stdout>:
[1,7]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,7]<stdout>:                                    DY=0.0,
[1,7]<stdout>:                                    DZ=0.0,
[1,7]<stdout>:                                    GROUP_MA='LEFT'),
[1,7]<stdout>:                       MODELE=model,
[1,7]<stdout>:                       SYNTAXE='NON')
[1,7]<stdout>:
[1,11]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,8]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,11]<stdout>:# Mémoire (Mo) :  7749.36 /  1398.57 /   563.69 /   475.85 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,8]<stdout>:# Mémoire (Mo) :  7241.15 /  1409.89 /   571.18 /   471.00 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt161
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,4]<stdout>:# Mémoire (Mo) :  7203.02 /  1407.44 /   571.07 /   470.91 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt161
[1,5]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0006 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :  7212.36 /  1428.22 /   576.42 /   477.41 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :  7165.74 /  1427.48 /   577.26 /   473.69 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Commande #0006 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 161
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt161
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt161
[1,5]<stdout>:# Mémoire (Mo) :  7348.79 /  1436.00 /   575.07 /   479.14 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt161
[1,10]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,9]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,9]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,9]<stdout>:                                    DY=0.0,
[1,9]<stdout>:                                    DZ=0.0,
[1,9]<stdout>:                                    GROUP_MA='LEFT'),
[1,9]<stdout>:                       MODELE=model,
[1,9]<stdout>:                       SYNTAXE='NON')
[1,9]<stdout>:
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0006 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 161
[1,13]<stdout>:# Commande #0006 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 161
[1,3]<stdout>:# Commande #0006 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 161
[1,10]<stdout>:# Mémoire (Mo) :  7302.82 /  1427.70 /   575.38 /   477.29 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,14]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,14]<stdout>:                                    DY=0.0,
[1,14]<stdout>:                                    DZ=0.0,
[1,14]<stdout>:                                    GROUP_MA='LEFT'),
[1,14]<stdout>:                       MODELE=model,
[1,14]<stdout>:                       SYNTAXE='NON')
[1,14]<stdout>:
[1,10]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,13]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,13]<stdout>:                                    DY=0.0,
[1,13]<stdout>:                                    DZ=0.0,
[1,13]<stdout>:                                    GROUP_MA='LEFT'),
[1,13]<stdout>:                       MODELE=model,
[1,13]<stdout>:                       SYNTAXE='NON')
[1,13]<stdout>:
[1,15]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,15]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,15]<stdout>:                                    DY=0.0,
[1,15]<stdout>:                                    DZ=0.0,
[1,15]<stdout>:                                    GROUP_MA='LEFT'),
[1,15]<stdout>:                       MODELE=model,
[1,15]<stdout>:                       SYNTAXE='NON')
[1,15]<stdout>:
[1,3]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,3]<stdout>:                                    DY=0.0,
[1,3]<stdout>:                                    DZ=0.0,
[1,3]<stdout>:                                    GROUP_MA='LEFT'),
[1,3]<stdout>:                       MODELE=model,
[1,3]<stdout>:                       SYNTAXE='NON')
[1,3]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt161
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt161
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0006 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 161
[1,8]<stdout>:# Commande #0006 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt161
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,11]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,11]<stdout>:                                    DY=0.0,
[1,11]<stdout>:                                    DZ=0.0,
[1,11]<stdout>:                                    GROUP_MA='LEFT'),
[1,11]<stdout>:                       MODELE=model,
[1,11]<stdout>:                       SYNTAXE='NON')
[1,11]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt161
[1,4]<stdout>:# Commande #0006 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 161
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt161
[1,8]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,8]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,8]<stdout>:                                    DY=0.0,
[1,8]<stdout>:                                    DZ=0.0,
[1,8]<stdout>:                                    GROUP_MA='LEFT'),
[1,8]<stdout>:                       MODELE=model,
[1,8]<stdout>:                       SYNTAXE='NON')
[1,8]<stdout>:
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt161
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0006 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 161
[1,1]<stdout>:# Commande #0006 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 161
[1,5]<stdout>:# Commande #0006 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,4]<stdout>:                                    DY=0.0,
[1,4]<stdout>:                                    DZ=0.0,
[1,4]<stdout>:                                    GROUP_MA='LEFT'),
[1,4]<stdout>:                       MODELE=model,
[1,4]<stdout>:                       SYNTAXE='NON')
[1,4]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt161
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,1]<stdout>:                                    DY=0.0,
[1,1]<stdout>:                                    DZ=0.0,
[1,1]<stdout>:                                    GROUP_MA='LEFT'),
[1,1]<stdout>:                       MODELE=model,
[1,1]<stdout>:                       SYNTAXE='NON')
[1,1]<stdout>:
[1,2]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,2]<stdout>:                                    DY=0.0,
[1,2]<stdout>:                                    DZ=0.0,
[1,2]<stdout>:                                    GROUP_MA='LEFT'),
[1,2]<stdout>:                       MODELE=model,
[1,2]<stdout>:                       SYNTAXE='NON')
[1,2]<stdout>:
[1,5]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,5]<stdout>:                                    DY=0.0,
[1,5]<stdout>:                                    DZ=0.0,
[1,5]<stdout>:                                    GROUP_MA='LEFT'),
[1,5]<stdout>:                       MODELE=model,
[1,5]<stdout>:                       SYNTAXE='NON')
[1,5]<stdout>:
[1,10]<stdout>:# Commande #0006 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 161
[1,10]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,10]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,10]<stdout>:                                    DY=0.0,
[1,10]<stdout>:                                    DZ=0.0,
[1,10]<stdout>:                                    GROUP_MA='LEFT'),
[1,10]<stdout>:                       MODELE=model,
[1,10]<stdout>:                       SYNTAXE='NON')
[1,10]<stdout>:
[1,0]<stdout>:# Résultat commande #0007 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,0]<stdout>:# Mémoire (Mo) :  7133.41 /  1421.89 /   569.07 /   503.41 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0007   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt161
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0008 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,0]<stdout>:                                    DY=0.0,
[1,0]<stdout>:                                    DZ=0.0,
[1,0]<stdout>:                                    GROUP_MA='LEFT'),
[1,0]<stdout>:                       MODELE=model,
[1,0]<stdout>:                       SYNTAXE='NON')
[1,0]<stdout>:
[1,14]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,12]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,14]<stdout>:# Mémoire (Mo) :  7036.36 /  1386.20 /   555.43 /   460.34 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  6851.54 /  1373.65 /   553.28 /   456.52 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0006   user+syst:        0.53s (syst:        0.00s, elaps:        0.54s)
[1,14]<stdout>:# Fin commande #0006   user+syst:        0.54s (syst:        0.00s, elaps:        0.54s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,7]<stdout>:# Mémoire (Mo) :  7244.66 /  1373.21 /   554.36 /   466.61 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0006   user+syst:        0.53s (syst:        0.00s, elaps:        0.54s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt173
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt173
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0007 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 173
[1,14]<stdout>:# Commande #0007 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 173
[1,12]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,12]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,12]<stdout>:                                            DZ=0.001,
[1,12]<stdout>:                                            GROUP_MA='RIGHT'),
[1,12]<stdout>:                               MODELE=model,
[1,12]<stdout>:                               SYNTAXE='NON')
[1,12]<stdout>:
[1,14]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,14]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,14]<stdout>:                                            DZ=0.001,
[1,14]<stdout>:                                            GROUP_MA='RIGHT'),
[1,14]<stdout>:                               MODELE=model,
[1,14]<stdout>:                               SYNTAXE='NON')
[1,14]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt173
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0007 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 173
[1,7]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,7]<stdout>:                                            DZ=0.001,
[1,7]<stdout>:                                            GROUP_MA='RIGHT'),
[1,7]<stdout>:                               MODELE=model,
[1,7]<stdout>:                               SYNTAXE='NON')
[1,7]<stdout>:
[1,15]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,15]<stdout>:# Mémoire (Mo) :  7590.86 /  1398.56 /   559.92 /   473.72 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0006   user+syst:        0.55s (syst:        0.00s, elaps:        0.55s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,6]<stdout>:# Mémoire (Mo) :  7044.69 /  1408.25 /   562.68 /   464.15 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt173
[1,6]<stdout>:# Fin commande #0006   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0007 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 173
[1,15]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,15]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,15]<stdout>:                                            DZ=0.001,
[1,15]<stdout>:                                            GROUP_MA='RIGHT'),
[1,15]<stdout>:                               MODELE=model,
[1,15]<stdout>:                               SYNTAXE='NON')
[1,15]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt173
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0007 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 173
[1,6]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,6]<stdout>:                                            DZ=0.001,
[1,6]<stdout>:                                            GROUP_MA='RIGHT'),
[1,6]<stdout>:                               MODELE=model,
[1,6]<stdout>:                               SYNTAXE='NON')
[1,6]<stdout>:
[1,11]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,9]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,11]<stdout>:# Mémoire (Mo) :  7749.36 /  1398.57 /   563.69 /   475.85 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0006   user+syst:        0.55s (syst:        0.00s, elaps:        0.55s)
[1,9]<stdout>:# Mémoire (Mo) :  7158.95 /  1378.79 /   563.10 /   468.57 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0006   user+syst:        0.56s (syst:        0.00s, elaps:        0.55s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt173
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt173
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0007 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 173
[1,9]<stdout>:# Commande #0007 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 173
[1,11]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,11]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,11]<stdout>:                                            DZ=0.001,
[1,11]<stdout>:                                            GROUP_MA='RIGHT'),
[1,11]<stdout>:                               MODELE=model,
[1,11]<stdout>:                               SYNTAXE='NON')
[1,11]<stdout>:
[1,9]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,9]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,9]<stdout>:                                            DZ=0.001,
[1,9]<stdout>:                                            GROUP_MA='RIGHT'),
[1,9]<stdout>:                               MODELE=model,
[1,9]<stdout>:                               SYNTAXE='NON')
[1,9]<stdout>:
[1,4]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,4]<stdout>:# Mémoire (Mo) :  7203.02 /  1407.44 /   571.07 /   470.91 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0006   user+syst:        0.55s (syst:        0.00s, elaps:        0.55s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt173
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0007 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 173
[1,4]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,4]<stdout>:                                            DZ=0.001,
[1,4]<stdout>:                                            GROUP_MA='RIGHT'),
[1,4]<stdout>:                               MODELE=model,
[1,4]<stdout>:                               SYNTAXE='NON')
[1,4]<stdout>:
[1,0]<stdout>:# Résultat commande #0008 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,0]<stdout>:# Mémoire (Mo) :  7133.41 /  1421.89 /   569.07 /   503.41 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0008   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,13]<stdout>:# Mémoire (Mo) :  7501.96 /  1395.94 /   567.01 /   475.97 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0006   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt173
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0009 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 173
[1,0]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,0]<stdout>:                                            DZ=0.001,
[1,0]<stdout>:                                            GROUP_MA='RIGHT'),
[1,0]<stdout>:                               MODELE=model,
[1,0]<stdout>:                               SYNTAXE='NON')
[1,0]<stdout>:
[1,3]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,3]<stdout>:# Mémoire (Mo) :  7321.04 /  1385.04 /   565.96 /   473.51 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0006   user+syst:        0.54s (syst:        0.01s, elaps:        0.56s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt173
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Commande #0007 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 173
[1,13]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,13]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,13]<stdout>:                                            DZ=0.001,
[1,13]<stdout>:                                            GROUP_MA='RIGHT'),
[1,13]<stdout>:                               MODELE=model,
[1,13]<stdout>:                               SYNTAXE='NON')
[1,13]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt173
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0007 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 173
[1,3]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,3]<stdout>:                                            DZ=0.001,
[1,3]<stdout>:                                            GROUP_MA='RIGHT'),
[1,3]<stdout>:                               MODELE=model,
[1,3]<stdout>:                               SYNTAXE='NON')
[1,3]<stdout>:
[1,8]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,8]<stdout>:# Mémoire (Mo) :  7241.15 /  1409.89 /   571.18 /   471.00 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0006   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt173
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0007 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 173
[1,8]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,8]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,8]<stdout>:                                            DZ=0.001,
[1,8]<stdout>:                                            GROUP_MA='RIGHT'),
[1,8]<stdout>:                               MODELE=model,
[1,8]<stdout>:                               SYNTAXE='NON')
[1,8]<stdout>:
[1,5]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,5]<stdout>:# Mémoire (Mo) :  7348.79 /  1436.00 /   575.07 /   479.14 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0006   user+syst:        0.57s (syst:        0.00s, elaps:        0.57s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt173
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0007 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 173
[1,5]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,5]<stdout>:                                            DZ=0.001,
[1,5]<stdout>:                                            GROUP_MA='RIGHT'),
[1,5]<stdout>:                               MODELE=model,
[1,5]<stdout>:                               SYNTAXE='NON')
[1,5]<stdout>:
[1,10]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,10]<stdout>:# Mémoire (Mo) :  7302.82 /  1427.70 /   575.38 /   477.29 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0006   user+syst:        0.57s (syst:        0.00s, elaps:        0.57s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,2]<stdout>:# Mémoire (Mo) :  7165.74 /  1427.48 /   577.26 /   473.69 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0006   user+syst:        0.57s (syst:        0.00s, elaps:        0.57s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt173
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0007 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 173
[1,10]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,10]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,10]<stdout>:                                            DZ=0.001,
[1,10]<stdout>:                                            GROUP_MA='RIGHT'),
[1,10]<stdout>:                               MODELE=model,
[1,10]<stdout>:                               SYNTAXE='NON')
[1,10]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt173
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0007 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 173
[1,2]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,2]<stdout>:                                            DZ=0.001,
[1,2]<stdout>:                                            GROUP_MA='RIGHT'),
[1,2]<stdout>:                               MODELE=model,
[1,2]<stdout>:                               SYNTAXE='NON')
[1,2]<stdout>:
[1,1]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,1]<stdout>:# Mémoire (Mo) :  7212.36 /  1428.22 /   576.42 /   477.41 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0006   user+syst:        0.58s (syst:        0.00s, elaps:        0.57s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt173
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0007 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 173
[1,1]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,1]<stdout>:                                            DZ=0.001,
[1,1]<stdout>:                                            GROUP_MA='RIGHT'),
[1,1]<stdout>:                               MODELE=model,
[1,1]<stdout>:                               SYNTAXE='NON')
[1,1]<stdout>:
[1,12]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,12]<stdout>:<MechanicalDirichletBC>
[1,12]<stdout>:# Mémoire (Mo) :  6851.54 /  1373.65 /   553.28 /   456.52 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0007   user+syst:        0.55s (syst:        0.01s, elaps:        0.56s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt185
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0008 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 185
[1,12]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,12]<stdout>:                            CHAM_MATER=mater,
[1,12]<stdout>:                            INST=0.0,
[1,12]<stdout>:                            MODELE=model,
[1,12]<stdout>:                            MODE_FOURIER=0,
[1,12]<stdout>:                            OPTION='RIGI_MECA')
[1,12]<stdout>:
[1,14]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,14]<stdout>:<MechanicalDirichletBC>
[1,14]<stdout>:# Mémoire (Mo) :  7036.36 /  1386.20 /   555.43 /   460.34 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0007   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,7]<stdout>:<MechanicalDirichletBC>
[1,7]<stdout>:# Mémoire (Mo) :  7244.66 /  1373.21 /   554.36 /   466.61 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt185
[1,7]<stdout>:# Fin commande #0007   user+syst:        0.57s (syst:        0.00s, elaps:        0.56s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0008 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 185
[1,14]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,14]<stdout>:                            CHAM_MATER=mater,
[1,14]<stdout>:                            INST=0.0,
[1,14]<stdout>:                            MODELE=model,
[1,14]<stdout>:                            MODE_FOURIER=0,
[1,14]<stdout>:                            OPTION='RIGI_MECA')
[1,14]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt185
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0008 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 185
[1,7]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,7]<stdout>:                            CHAM_MATER=mater,
[1,7]<stdout>:                            INST=0.0,
[1,7]<stdout>:                            MODELE=model,
[1,7]<stdout>:                            MODE_FOURIER=0,
[1,7]<stdout>:                            OPTION='RIGI_MECA')
[1,7]<stdout>:
[1,15]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,15]<stdout>:<MechanicalDirichletBC>
[1,15]<stdout>:# Mémoire (Mo) :  7590.86 /  1398.56 /   559.92 /   473.72 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0007   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt185
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0008 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 185
[1,15]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,15]<stdout>:                            CHAM_MATER=mater,
[1,15]<stdout>:                            INST=0.0,
[1,15]<stdout>:                            MODELE=model,
[1,15]<stdout>:                            MODE_FOURIER=0,
[1,15]<stdout>:                            OPTION='RIGI_MECA')
[1,15]<stdout>:
[1,6]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,6]<stdout>:<MechanicalDirichletBC>
[1,6]<stdout>:# Mémoire (Mo) :  7044.69 /  1408.25 /   562.68 /   464.15 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0007   user+syst:        0.57s (syst:        0.00s, elaps:        0.56s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt185
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0008 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 185
[1,6]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,6]<stdout>:                            CHAM_MATER=mater,
[1,6]<stdout>:                            INST=0.0,
[1,6]<stdout>:                            MODELE=model,
[1,6]<stdout>:                            MODE_FOURIER=0,
[1,6]<stdout>:                            OPTION='RIGI_MECA')
[1,6]<stdout>:
[1,11]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,11]<stdout>:<MechanicalDirichletBC>
[1,11]<stdout>:# Mémoire (Mo) :  7749.36 /  1398.57 /   563.69 /   475.85 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0007   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,3]<stdout>:<MechanicalDirichletBC>
[1,3]<stdout>:# Mémoire (Mo) :  7321.04 /  1385.04 /   565.96 /   473.51 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0007   user+syst:        0.55s (syst:        0.00s, elaps:        0.56s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt185
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0008 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 185
[1,9]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,9]<stdout>:<MechanicalDirichletBC>
[1,9]<stdout>:# Mémoire (Mo) :  7158.95 /  1378.79 /   563.10 /   468.57 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0007   user+syst:        0.56s (syst:        0.00s, elaps:        0.57s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,11]<stdout>:                            CHAM_MATER=mater,
[1,11]<stdout>:                            INST=0.0,
[1,11]<stdout>:                            MODELE=model,
[1,11]<stdout>:                            MODE_FOURIER=0,
[1,11]<stdout>:                            OPTION='RIGI_MECA')
[1,11]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt185
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0008 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 185
[1,3]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,3]<stdout>:                            CHAM_MATER=mater,
[1,3]<stdout>:                            INST=0.0,
[1,3]<stdout>:                            MODELE=model,
[1,3]<stdout>:                            MODE_FOURIER=0,
[1,3]<stdout>:                            OPTION='RIGI_MECA')
[1,3]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt185
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0008 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 185
[1,9]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,9]<stdout>:                            CHAM_MATER=mater,
[1,9]<stdout>:                            INST=0.0,
[1,9]<stdout>:                            MODELE=model,
[1,9]<stdout>:                            MODE_FOURIER=0,
[1,9]<stdout>:                            OPTION='RIGI_MECA')
[1,9]<stdout>:
[1,0]<stdout>:# Résultat commande #0009 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,0]<stdout>:<MechanicalDirichletBC>
[1,0]<stdout>:# Mémoire (Mo) :  7133.41 /  1421.89 /   569.07 /   503.41 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0009   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,13]<stdout>:<MechanicalDirichletBC>
[1,13]<stdout>:# Mémoire (Mo) :  7501.96 /  1395.94 /   567.01 /   475.97 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0007   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt185
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt185
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0010 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 185
[1,13]<stdout>:# Commande #0008 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 185
[1,0]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,0]<stdout>:                            CHAM_MATER=mater,
[1,0]<stdout>:                            INST=0.0,
[1,0]<stdout>:                            MODELE=model,
[1,0]<stdout>:                            MODE_FOURIER=0,
[1,0]<stdout>:                            OPTION='RIGI_MECA')
[1,0]<stdout>:
[1,13]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,13]<stdout>:                            CHAM_MATER=mater,
[1,13]<stdout>:                            INST=0.0,
[1,13]<stdout>:                            MODELE=model,
[1,13]<stdout>:                            MODE_FOURIER=0,
[1,13]<stdout>:                            OPTION='RIGI_MECA')
[1,13]<stdout>:
[1,4]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,4]<stdout>:<MechanicalDirichletBC>
[1,4]<stdout>:# Mémoire (Mo) :  7203.02 /  1407.44 /   571.07 /   470.91 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0007   user+syst:        0.57s (syst:        0.00s, elaps:        0.57s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt185
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0008 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 185
[1,8]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,8]<stdout>:<MechanicalDirichletBC>
[1,4]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,4]<stdout>:                            CHAM_MATER=mater,
[1,4]<stdout>:                            INST=0.0,
[1,4]<stdout>:                            MODELE=model,
[1,4]<stdout>:                            MODE_FOURIER=0,
[1,4]<stdout>:                            OPTION='RIGI_MECA')
[1,4]<stdout>:
[1,8]<stdout>:# Mémoire (Mo) :  7241.15 /  1409.89 /   571.18 /   471.00 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0007   user+syst:        0.57s (syst:        0.00s, elaps:        0.57s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt185
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0008 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 185
[1,8]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,8]<stdout>:                            CHAM_MATER=mater,
[1,8]<stdout>:                            INST=0.0,
[1,8]<stdout>:                            MODELE=model,
[1,8]<stdout>:                            MODE_FOURIER=0,
[1,8]<stdout>:                            OPTION='RIGI_MECA')
[1,8]<stdout>:
[1,2]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,2]<stdout>:<MechanicalDirichletBC>
[1,2]<stdout>:# Mémoire (Mo) :  7165.74 /  1427.48 /   577.26 /   473.69 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0007   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,10]<stdout>:<MechanicalDirichletBC>
[1,10]<stdout>:# Mémoire (Mo) :  7302.82 /  1427.70 /   575.38 /   477.29 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0007   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,5]<stdout>:<MechanicalDirichletBC>
[1,5]<stdout>:# Mémoire (Mo) :  7348.79 /  1436.00 /   575.07 /   479.14 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0007   user+syst:        0.56s (syst:        0.00s, elaps:        0.56s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt185
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0008 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 185
[1,2]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,2]<stdout>:                            CHAM_MATER=mater,
[1,2]<stdout>:                            INST=0.0,
[1,2]<stdout>:                            MODELE=model,
[1,2]<stdout>:                            MODE_FOURIER=0,
[1,2]<stdout>:                            OPTION='RIGI_MECA')
[1,2]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt185
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0008 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 185
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt185
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,10]<stdout>:                            CHAM_MATER=mater,
[1,10]<stdout>:                            INST=0.0,
[1,10]<stdout>:                            MODELE=model,
[1,10]<stdout>:                            MODE_FOURIER=0,
[1,10]<stdout>:                            OPTION='RIGI_MECA')
[1,10]<stdout>:
[1,5]<stdout>:# Commande #0008 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 185
[1,1]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,1]<stdout>:<MechanicalDirichletBC>
[1,1]<stdout>:# Mémoire (Mo) :  7212.36 /  1428.22 /   576.42 /   477.41 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0007   user+syst:        0.55s (syst:        0.01s, elaps:        0.57s)
[1,5]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,5]<stdout>:                            CHAM_MATER=mater,
[1,5]<stdout>:                            INST=0.0,
[1,5]<stdout>:                            MODELE=model,
[1,5]<stdout>:                            MODE_FOURIER=0,
[1,5]<stdout>:                            OPTION='RIGI_MECA')
[1,5]<stdout>:
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt185
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0008 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 185
[1,1]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,1]<stdout>:                            CHAM_MATER=mater,
[1,1]<stdout>:                            INST=0.0,
[1,1]<stdout>:                            MODELE=model,
[1,1]<stdout>:                            MODE_FOURIER=0,
[1,1]<stdout>:                            OPTION='RIGI_MECA')
[1,1]<stdout>:
[1,12]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,12]<stdout>:<ElementaryMatrixDisplacementReal>
[1,12]<stdout>:# Mémoire (Mo) :  6851.54 /  3683.31 /  2853.64 /   456.52 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0008   user+syst:        9.13s (syst:        0.38s, elaps:        9.50s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt192
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0009 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 192
[1,12]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,12]<stdout>:                  MATR_RIGI=stiff_elem)
[1,12]<stdout>:
[1,14]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,14]<stdout>:<ElementaryMatrixDisplacementReal>
[1,14]<stdout>:# Mémoire (Mo) :  7036.36 /  3705.03 /  2871.63 /   460.34 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0008   user+syst:        9.08s (syst:        0.49s, elaps:        9.57s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt192
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0009 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 192
[1,14]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,14]<stdout>:                  MATR_RIGI=stiff_elem)
[1,14]<stdout>:
[1,7]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,7]<stdout>:<ElementaryMatrixDisplacementReal>
[1,7]<stdout>:# Mémoire (Mo) :  7244.66 /  3703.47 /  2874.19 /   466.61 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0008   user+syst:        9.20s (syst:        0.39s, elaps:        9.59s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt192
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0009 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 192
[1,7]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,7]<stdout>:                  MATR_RIGI=stiff_elem)
[1,7]<stdout>:
[1,15]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,15]<stdout>:<ElementaryMatrixDisplacementReal>
[1,15]<stdout>:# Mémoire (Mo) :  7590.86 /  3751.71 /  2915.66 /   473.72 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0008   user+syst:        9.38s (syst:        0.35s, elaps:        9.73s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt192
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0009 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 192
[1,15]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,15]<stdout>:                  MATR_RIGI=stiff_elem)
[1,15]<stdout>:
[1,11]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,11]<stdout>:<ElementaryMatrixDisplacementReal>
[1,11]<stdout>:# Mémoire (Mo) :  7749.36 /  3774.62 /  2933.66 /   475.85 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0008   user+syst:        9.45s (syst:        0.36s, elaps:        9.81s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt192
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0009 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 192
[1,11]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,11]<stdout>:                  MATR_RIGI=stiff_elem)
[1,11]<stdout>:
[1,6]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,6]<stdout>:<ElementaryMatrixDisplacementReal>
[1,6]<stdout>:# Mémoire (Mo) :  7044.69 /  3768.28 /  2929.71 /   464.15 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0008   user+syst:        9.43s (syst:        0.40s, elaps:        9.83s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt192
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0009 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 192
[1,6]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,6]<stdout>:                  MATR_RIGI=stiff_elem)
[1,6]<stdout>:
[1,9]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,9]<stdout>:<ElementaryMatrixDisplacementReal>
[1,9]<stdout>:# Mémoire (Mo) :  7158.95 /  3780.02 /  2943.35 /   468.57 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0008   user+syst:        9.44s (syst:        0.43s, elaps:        9.87s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt192
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0009 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 192
[1,9]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,9]<stdout>:                  MATR_RIGI=stiff_elem)
[1,9]<stdout>:
[1,3]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,3]<stdout>:<ElementaryMatrixDisplacementReal>
[1,3]<stdout>:# Mémoire (Mo) :  7321.04 /  3809.16 /  2969.46 /   473.51 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0008   user+syst:        9.58s (syst:        0.40s, elaps:        9.98s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt192
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0009 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 192
[1,3]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,3]<stdout>:                  MATR_RIGI=stiff_elem)
[1,3]<stdout>:
[1,13]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,13]<stdout>:<ElementaryMatrixDisplacementReal>
[1,13]<stdout>:# Mémoire (Mo) :  7501.96 /  3817.77 /  2976.85 /   475.97 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0008   user+syst:        9.58s (syst:        0.40s, elaps:        9.99s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt192
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Commande #0009 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 192
[1,13]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,13]<stdout>:                  MATR_RIGI=stiff_elem)
[1,13]<stdout>:
[1,0]<stdout>:# Résultat commande #0010 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,0]<stdout>:<ElementaryMatrixDisplacementReal>
[1,0]<stdout>:# Mémoire (Mo) :  7133.41 /  3836.85 /  2982.20 /   503.41 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0010   user+syst:        9.59s (syst:        0.43s, elaps:       10.02s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt192
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0011 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 192
[1,0]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,0]<stdout>:                  MATR_RIGI=stiff_elem)
[1,0]<stdout>:
[1,8]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,8]<stdout>:<ElementaryMatrixDisplacementReal>
[1,8]<stdout>:# Mémoire (Mo) :  7241.15 /  3850.03 /  3000.52 /   471.00 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0008   user+syst:        9.72s (syst:        0.30s, elaps:       10.03s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt192
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0009 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 192
[1,8]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,8]<stdout>:                  MATR_RIGI=stiff_elem)
[1,8]<stdout>:
[1,4]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,4]<stdout>:<ElementaryMatrixDisplacementReal>
[1,4]<stdout>:# Mémoire (Mo) :  7203.02 /  3845.29 /  2998.14 /   470.91 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0008   user+syst:        9.59s (syst:        0.48s, elaps:       10.07s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt192
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0009 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 192
[1,4]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,4]<stdout>:                  MATR_RIGI=stiff_elem)
[1,4]<stdout>:
[1,10]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,10]<stdout>:<ElementaryMatrixDisplacementReal>
[1,10]<stdout>:# Mémoire (Mo) :  7302.82 /  3886.15 /  3035.06 /   477.29 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0008   user+syst:        9.75s (syst:        0.40s, elaps:       10.14s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt192
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0009 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 192
[1,10]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,10]<stdout>:                  MATR_RIGI=stiff_elem)
[1,10]<stdout>:
[1,5]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,5]<stdout>:<ElementaryMatrixDisplacementReal>
[1,5]<stdout>:# Mémoire (Mo) :  7348.79 /  3896.74 /  3043.92 /   479.14 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0008   user+syst:        9.65s (syst:        0.54s, elaps:       10.18s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt192
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0009 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 192
[1,5]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,5]<stdout>:                  MATR_RIGI=stiff_elem)
[1,5]<stdout>:
[1,2]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,2]<stdout>:<ElementaryMatrixDisplacementReal>
[1,2]<stdout>:# Mémoire (Mo) :  7165.74 /  3904.24 /  3049.40 /   473.69 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0008   user+syst:        9.74s (syst:        0.47s, elaps:       10.21s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt192
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0009 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 192
[1,2]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,2]<stdout>:                  MATR_RIGI=stiff_elem)
[1,2]<stdout>:
[1,1]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,1]<stdout>:<ElementaryMatrixDisplacementReal>
[1,1]<stdout>:# Mémoire (Mo) :  7212.36 /  3904.99 /  3055.79 /   477.41 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0008   user+syst:        9.84s (syst:        0.42s, elaps:       10.25s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt192
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0009 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 192
[1,1]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,1]<stdout>:                  MATR_RIGI=stiff_elem)
[1,1]<stdout>:
[1,5]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,5]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,5]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,5]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,5]<stdout>:     aux 0 relations linéaires dualisées.
[1,3]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,3]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,3]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,3]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,3]<stdout>:     aux 0 relations linéaires dualisées.
[1,6]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,6]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,6]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,6]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,6]<stdout>:     aux 0 relations linéaires dualisées.
[1,0]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,0]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,0]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,0]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,0]<stdout>:     aux 0 relations linéaires dualisées.
[1,9]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,9]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,9]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,9]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,9]<stdout>:     aux 0 relations linéaires dualisées.
[1,10]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,10]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,10]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,10]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,10]<stdout>:     aux 0 relations linéaires dualisées.
[1,12]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,12]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,12]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,12]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,12]<stdout>:     aux 0 relations linéaires dualisées.
[1,13]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,13]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,13]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,13]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,13]<stdout>:     aux 0 relations linéaires dualisées.
[1,4]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,4]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,4]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,4]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,4]<stdout>:     aux 0 relations linéaires dualisées.
[1,7]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,7]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,7]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,7]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,7]<stdout>:     aux 0 relations linéaires dualisées.
[1,14]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,14]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,14]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,14]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,14]<stdout>:     aux 0 relations linéaires dualisées.
[1,15]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,15]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,15]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,15]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,15]<stdout>:     aux 0 relations linéaires dualisées.
[1,1]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,1]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,1]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,1]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,1]<stdout>:     aux 0 relations linéaires dualisées.
[1,8]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,8]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,8]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,8]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,8]<stdout>:     aux 0 relations linéaires dualisées.
[1,2]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,2]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,2]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,2]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,2]<stdout>:     aux 0 relations linéaires dualisées.
[1,11]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,11]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,11]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,11]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,11]<stdout>:     aux 0 relations linéaires dualisées.
[1,9]<stdout>:
[1,9]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,9]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,9]<stdout>: ║                                                                                                ║
[1,9]<stdout>: ║ Erreur écriture de l'enregistrement 894 sur la base : GLOBALE 0                                ║
[1,9]<stdout>: ║      code retour : -4                                                                          ║
[1,9]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,9]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,9]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,3]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║ Erreur écriture de l'enregistrement 568 sur la base : GLOBALE 0                                ║
[1,3]<stdout>: ║      code retour : -4                                                                          ║
[1,3]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,3]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,3]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,6]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║ Erreur écriture de l'enregistrement 627 sur la base : GLOBALE 0                                ║
[1,6]<stdout>: ║      code retour : -4                                                                          ║
[1,6]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,6]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,6]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,2]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║ Erreur écriture de l'enregistrement 2584 sur la base : GLOBALE 0                               ║
[1,2]<stdout>: ║      code retour : -4                                                                          ║
[1,2]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,2]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,2]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,14]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,14]<stdout>: ║                                                                                                ║
[1,14]<stdout>: ║ Erreur écriture de l'enregistrement 134 sur la base : GLOBALE 0                                ║
[1,14]<stdout>: ║      code retour : -4                                                                          ║
[1,14]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,14]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,14]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,11]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,11]<stdout>: ║                                                                                                ║
[1,11]<stdout>: ║ Erreur écriture de l'enregistrement 542 sur la base : GLOBALE 0                                ║
[1,11]<stdout>: ║      code retour : -4                                                                          ║
[1,11]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,11]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,11]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,1]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║ Erreur écriture de l'enregistrement 2584 sur la base : GLOBALE 0                               ║
[1,1]<stdout>: ║      code retour : -4                                                                          ║
[1,1]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,1]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,1]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,0]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║ Erreur écriture de l'enregistrement 2585 sur la base : GLOBALE 0                               ║
[1,0]<stdout>: ║      code retour : -4                                                                          ║
[1,0]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,0]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,0]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,8]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,8]<stdout>: ║                                                                                                ║
[1,8]<stdout>: ║ Erreur écriture de l'enregistrement 636 sur la base : GLOBALE 0                                ║
[1,8]<stdout>: ║      code retour : -4                                                                          ║
[1,8]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,8]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,8]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,7]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║ Erreur écriture de l'enregistrement 1 sur la base : GLOBALE 0                                  ║
[1,7]<stdout>: ║      code retour : -4                                                                          ║
[1,7]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,7]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,7]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,4]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║ Erreur écriture de l'enregistrement 559 sur la base : GLOBALE 0                                ║
[1,4]<stdout>: ║      code retour : -4                                                                          ║
[1,4]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,4]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,4]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,13]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,13]<stdout>: ║                                                                                                ║
[1,13]<stdout>: ║ Erreur écriture de l'enregistrement 596 sur la base : GLOBALE 0                                ║
[1,13]<stdout>: ║      code retour : -4                                                                          ║
[1,13]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,13]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,13]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,10]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,10]<stdout>: ║                                                                                                ║
[1,10]<stdout>: ║ Erreur écriture de l'enregistrement 2585 sur la base : GLOBALE 0                               ║
[1,10]<stdout>: ║      code retour : -4                                                                          ║
[1,10]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,10]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,10]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,15]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,15]<stdout>: ║                                                                                                ║
[1,15]<stdout>: ║ Erreur écriture de l'enregistrement 576 sur la base : GLOBALE 0                                ║
[1,15]<stdout>: ║      code retour : -4                                                                          ║
[1,15]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,15]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,15]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,12]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,12]<stdout>: ║                                                                                                ║
[1,12]<stdout>: ║ Erreur écriture de l'enregistrement 1 sur la base : GLOBALE 0                                  ║
[1,12]<stdout>: ║      code retour : -4                                                                          ║
[1,12]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,12]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,12]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,5]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║ Erreur écriture de l'enregistrement 2584 sur la base : GLOBALE 0                               ║
[1,5]<stdout>: ║      code retour : -4                                                                          ║
[1,5]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,5]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,5]<stdout>:
[1,1]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,2]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,9]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #1 a émis un message d'erreur.
[1,0]<stdout>:Le processeur #2 a émis un message d'erreur.
[1,0]<stdout>:Le processeur #9 a émis un message d'erreur.
[1,11]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #11 a émis un message d'erreur.
[1,3]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #3 a émis un message d'erreur.
[1,6]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #6 a émis un message d'erreur.
[1,14]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #14 a émis un message d'erreur.
[1,10]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #10 a émis un message d'erreur.
[1,4]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #4 a émis un message d'erreur.
[1,7]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #7 a émis un message d'erreur.
[1,8]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #8 a émis un message d'erreur.
[1,13]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #13 a émis un message d'erreur.
[1,15]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #15 a émis un message d'erreur.
[1,5]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #5 a émis un message d'erreur.
[1,12]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #12 a émis un message d'erreur.
[1,0]<stdout>:Le processeur #0 a émis un message d'erreur.
[1,0]<stdout>:On demande au processeur #1 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #2 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #3 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #4 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #5 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #6 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #7 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #8 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #9 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #10 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #11 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #12 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #13 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #14 de s'arrêter ou de lever une exception.
[1,0]<stdout>:On demande au processeur #15 de s'arrêter ou de lever une exception.
[1,5]<stdout>:# Mémoire (Mo) :  7348.79 /  2362.39 /  4224.27 /  1436.85 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  7321.04 /  3758.64 /  4274.71 /  1559.50 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  7212.36 /  2336.93 /  4237.06 /  1438.18 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0009   user+syst:        2.91s (syst:        2.29s, elaps:      108.58s)
[1,2]<stdout>:# Mémoire (Mo) :  7165.74 /  2329.45 /  4229.16 /  1438.25 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0009   user+syst:        2.34s (syst:        2.76s, elaps:      108.35s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Mémoire (Mo) :  6851.54 /  3925.45 /  4279.09 /  1677.86 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0009   user+syst:        2.36s (syst:        2.77s, elaps:      108.29s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0009   user+syst:        2.43s (syst:        2.73s, elaps:      108.34s)
[1,7]<stdout>:# Mémoire (Mo) :  7244.66 /  3948.07 /  4302.53 /  1679.68 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  7044.69 /  3694.50 /  4230.27 /  1555.42 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Mémoire (Mo) :  7749.36 /  3850.95 /  4237.41 /  1557.17 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Mémoire (Mo) :  7241.15 /  3801.70 /  4307.82 /  1564.05 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0009   user+syst:        3.55s (syst:        2.10s, elaps:      109.08s)
[1,4]<stdout>:# Mémoire (Mo) :  7203.02 /  3803.20 /  4304.98 /  1563.82 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0009   user+syst:        3.45s (syst:        2.16s, elaps:      108.99s)
[1,6]<stdout>:# Fin commande #0009   user+syst:        3.02s (syst:        2.33s, elaps:      108.74s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0009   user+syst:        3.12s (syst:        2.24s, elaps:      108.75s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Fin commande #0009   user+syst:        2.78s (syst:        2.33s, elaps:      108.52s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0009   user+syst:        2.78s (syst:        2.31s, elaps:      108.48s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Mémoire (Mo) :  7501.96 /  3814.51 /  4282.82 /  1560.52 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :  7158.95 /  3534.41 /  4246.25 /  1556.56 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0009   user+syst:        2.91s (syst:        2.24s, elaps:      108.57s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0009   user+syst:        3.06s (syst:        2.37s, elaps:      108.69s)
[1,15]<stdout>:# Mémoire (Mo) :  7590.86 /  3698.14 /  4216.83 /  1553.57 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0009   user+syst:        3.16s (syst:        2.24s, elaps:      108.84s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  7302.82 /  2344.34 /  4216.09 /  1437.21 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0009   user+syst:        2.38s (syst:        2.82s, elaps:      108.40s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :  7036.36 /  3938.46 /  4298.51 /  1679.95 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0009   user+syst:        3.44s (syst:        2.26s, elaps:      109.01s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  7133.41 /  2324.49 /  4155.75 /  1430.03 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:Traceback (most recent call last):
[1,3]<stdout>:Traceback (most recent call last):
[1,13]<stdout>:Traceback (most recent call last):
[1,10]<stdout>:Traceback (most recent call last):
[1,0]<stdout>:# Fin commande #0011   user+syst:        2.65s (syst:        2.71s, elaps:      108.54s)
[1,6]<stdout>:Traceback (most recent call last):
[1,14]<stdout>:Traceback (most recent call last):
[1,11]<stdout>:Traceback (most recent call last):
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:Traceback (most recent call last):
[1,8]<stdout>:Traceback (most recent call last):
[1,9]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,9]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,9]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,9]<stdout>:    main()
[1,9]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,9]<stdout>:    run_command_line(args)
[1,9]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,9]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,9]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,9]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,9]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,9]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,9]<stdout>:    dofNum = NUME_DDL(
[1,9]<stdout>:             ^^^^^^^^^
[1,9]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,9]<stdout>:    return cmd.run_(**kwargs)
[1,9]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,3]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,3]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,3]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,3]<stdout>:    main()
[1,3]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,3]<stdout>:    run_command_line(args)
[1,3]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,3]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,3]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,3]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,3]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,3]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,3]<stdout>:    dofNum = NUME_DDL(
[1,3]<stdout>:             ^^^^^^^^^
[1,3]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,3]<stdout>:    return cmd.run_(**kwargs)
[1,3]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,3]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,3]<stdout>:    self.exec_(keywords)
[1,3]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,3]<stdout>:    output = self._op(self, **keywords)
[1,3]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,3]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,3]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,13]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,13]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,13]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,13]<stdout>:    main()
[1,13]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,13]<stdout>:    run_command_line(args)
[1,13]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,13]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,13]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,13]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,13]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,13]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,13]<stdout>:    dofNum = NUME_DDL(
[1,13]<stdout>:             ^^^^^^^^^
[1,13]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,13]<stdout>:    return cmd.run_(**kwargs)
[1,13]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,13]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,13]<stdout>:    self.exec_(keywords)
[1,13]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,13]<stdout>:    output = self._op(self, **keywords)
[1,13]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,13]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,13]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,5]<stdout>:Traceback (most recent call last):
[1,1]<stdout>:Traceback (most recent call last):
[1,4]<stdout>:Traceback (most recent call last):
[1,10]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,10]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,10]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,10]<stdout>:    main()
[1,10]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,10]<stdout>:    run_command_line(args)
[1,10]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,10]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,10]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,10]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,10]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,10]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,10]<stdout>:    dofNum = NUME_DDL(
[1,10]<stdout>:             ^^^^^^^^^
[1,10]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,10]<stdout>:    return cmd.run_(**kwargs)
[1,10]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,10]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,10]<stdout>:    self.exec_(keywords)
[1,10]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,10]<stdout>:    output = self._op(self, **keywords)
[1,10]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,10]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,10]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,12]<stdout>:Traceback (most recent call last):
[1,3]<stdout>:libaster.AsterError: 
[1,3]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,3]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║ Erreur écriture de l'enregistrement 568 sur la base : GLOBALE 0                                ║
[1,3]<stdout>: ║      code retour : -4                                                                          ║
[1,3]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,3]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,3]<stdout>:
[1,13]<stdout>:libaster.AsterError: 
[1,13]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,13]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,13]<stdout>: ║                                                                                                ║
[1,13]<stdout>: ║ Erreur écriture de l'enregistrement 596 sur la base : GLOBALE 0                                ║
[1,13]<stdout>: ║      code retour : -4                                                                          ║
[1,13]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,13]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,13]<stdout>:
[1,2]<stdout>:Traceback (most recent call last):
[1,10]<stdout>:libaster.AsterError: 
[1,10]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,10]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,10]<stdout>: ║                                                                                                ║
[1,10]<stdout>: ║ Erreur écriture de l'enregistrement 2585 sur la base : GLOBALE 0                               ║
[1,10]<stdout>: ║      code retour : -4                                                                          ║
[1,10]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,10]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,10]<stdout>:
[1,9]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,9]<stdout>:    self.exec_(keywords)
[1,9]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,9]<stdout>:    output = self._op(self, **keywords)
[1,9]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,9]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,9]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,9]<stdout>:libaster.AsterError: 
[1,9]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,9]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,9]<stdout>: ║                                                                                                ║
[1,9]<stdout>: ║ Erreur écriture de l'enregistrement 894 sur la base : GLOBALE 0                                ║
[1,9]<stdout>: ║      code retour : -4                                                                          ║
[1,9]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,9]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,9]<stdout>:
[1,15]<stdout>:Traceback (most recent call last):
[1,10]<stdout>:
[1,10]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:Publishing the result of the current command NUME_DDL...
[1,10]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:Publishing the result of the current command NUME_DDL...
[1,3]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:Publishing the result of the current command NUME_DDL...
[1,13]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:Publishing the result of the current command NUME_DDL...
[1,9]<stdout>:
[1,6]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,6]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,6]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,6]<stdout>:    main()
[1,6]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,6]<stdout>:    run_command_line(args)
[1,6]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,6]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,6]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,6]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,14]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,14]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,14]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,14]<stdout>:    main()
[1,14]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,14]<stdout>:    run_command_line(args)
[1,11]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,11]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,11]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,11]<stdout>:    main()
[1,11]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,11]<stdout>:    run_command_line(args)
[1,11]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,11]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,11]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,6]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,6]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,6]<stdout>:    dofNum = NUME_DDL(
[1,6]<stdout>:             ^^^^^^^^^
[1,6]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,6]<stdout>:    return cmd.run_(**kwargs)
[1,6]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,6]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,6]<stdout>:    self.exec_(keywords)
[1,6]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,6]<stdout>:    output = self._op(self, **keywords)
[1,6]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,6]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,6]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,14]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,14]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,14]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,14]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,14]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,14]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,14]<stdout>:    dofNum = NUME_DDL(
[1,14]<stdout>:             ^^^^^^^^^
[1,11]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,11]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,11]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,11]<stdout>:    dofNum = NUME_DDL(
[1,11]<stdout>:             ^^^^^^^^^
[1,11]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,11]<stdout>:    return cmd.run_(**kwargs)
[1,11]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,11]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,11]<stdout>:    self.exec_(keywords)
[1,11]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,11]<stdout>:    output = self._op(self, **keywords)
[1,11]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,11]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,11]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,14]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,14]<stdout>:    return cmd.run_(**kwargs)
[1,14]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,14]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,14]<stdout>:    self.exec_(keywords)
[1,14]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,14]<stdout>:    output = self._op(self, **keywords)
[1,14]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,14]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,14]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,6]<stdout>:libaster.AsterError: 
[1,6]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,6]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║ Erreur écriture de l'enregistrement 627 sur la base : GLOBALE 0                                ║
[1,6]<stdout>: ║      code retour : -4                                                                          ║
[1,6]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,6]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,6]<stdout>:
[1,11]<stdout>:libaster.AsterError: 
[1,11]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,11]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,11]<stdout>: ║                                                                                                ║
[1,11]<stdout>: ║ Erreur écriture de l'enregistrement 542 sur la base : GLOBALE 0                                ║
[1,11]<stdout>: ║      code retour : -4                                                                          ║
[1,11]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,11]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,11]<stdout>:
[1,7]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,7]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,7]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,7]<stdout>:    main()
[1,7]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,7]<stdout>:    run_command_line(args)
[1,7]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,7]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,7]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,7]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,7]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,7]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,7]<stdout>:    dofNum = NUME_DDL(
[1,7]<stdout>:             ^^^^^^^^^
[1,7]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,7]<stdout>:    return cmd.run_(**kwargs)
[1,7]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,8]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,8]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,8]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,8]<stdout>:    main()
[1,8]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,8]<stdout>:    run_command_line(args)
[1,8]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,8]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,8]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,14]<stdout>:libaster.AsterError: 
[1,14]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,14]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,14]<stdout>: ║                                                                                                ║
[1,14]<stdout>: ║ Erreur écriture de l'enregistrement 134 sur la base : GLOBALE 0                                ║
[1,14]<stdout>: ║      code retour : -4                                                                          ║
[1,14]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,14]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,14]<stdout>:
[1,12]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,12]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,12]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,12]<stdout>:    main()
[1,12]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,12]<stdout>:    run_command_line(args)
[1,12]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,12]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,12]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,12]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,12]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,12]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,12]<stdout>:    dofNum = NUME_DDL(
[1,12]<stdout>:             ^^^^^^^^^
[1,12]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,12]<stdout>:    return cmd.run_(**kwargs)
[1,12]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,12]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,12]<stdout>:    self.exec_(keywords)
[1,12]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,12]<stdout>:    output = self._op(self, **keywords)
[1,12]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,12]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,12]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,8]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,8]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,8]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,8]<stdout>:    dofNum = NUME_DDL(
[1,8]<stdout>:             ^^^^^^^^^
[1,8]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,8]<stdout>:    return cmd.run_(**kwargs)
[1,8]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,8]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,8]<stdout>:    self.exec_(keywords)
[1,8]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,8]<stdout>:    output = self._op(self, **keywords)
[1,8]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,8]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,8]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,8]<stdout>:libaster.AsterError: 
[1,8]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,8]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,8]<stdout>: ║                                                                                                ║
[1,8]<stdout>: ║ Erreur écriture de l'enregistrement 636 sur la base : GLOBALE 0                                ║
[1,8]<stdout>: ║      code retour : -4                                                                          ║
[1,8]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,8]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,8]<stdout>:
[1,5]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,5]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,5]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,5]<stdout>:    main()
[1,5]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,5]<stdout>:    run_command_line(args)
[1,5]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,5]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,5]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,5]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,5]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,5]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,5]<stdout>:    dofNum = NUME_DDL(
[1,5]<stdout>:             ^^^^^^^^^
[1,5]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,5]<stdout>:    return cmd.run_(**kwargs)
[1,5]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,5]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,5]<stdout>:    self.exec_(keywords)
[1,5]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,5]<stdout>:    output = self._op(self, **keywords)
[1,5]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,5]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,5]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,1]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,1]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,1]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,1]<stdout>:    main()
[1,1]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,1]<stdout>:    run_command_line(args)
[1,1]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,1]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,1]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,1]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,1]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,1]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,1]<stdout>:    dofNum = NUME_DDL(
[1,1]<stdout>:             ^^^^^^^^^
[1,1]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,1]<stdout>:    return cmd.run_(**kwargs)
[1,1]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,1]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,1]<stdout>:    self.exec_(keywords)
[1,1]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,1]<stdout>:    output = self._op(self, **keywords)
[1,1]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,1]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,1]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,1]<stdout>:libaster.AsterError: 
[1,1]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,1]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║ Erreur écriture de l'enregistrement 2584 sur la base : GLOBALE 0                               ║
[1,1]<stdout>: ║      code retour : -4                                                                          ║
[1,1]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,1]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,1]<stdout>:
[1,4]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,4]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,4]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,4]<stdout>:    main()
[1,4]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,4]<stdout>:    run_command_line(args)
[1,4]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,4]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,4]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,4]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,4]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,4]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,4]<stdout>:    dofNum = NUME_DDL(
[1,4]<stdout>:             ^^^^^^^^^
[1,4]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,4]<stdout>:    return cmd.run_(**kwargs)
[1,4]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,4]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,4]<stdout>:    self.exec_(keywords)
[1,4]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,4]<stdout>:    output = self._op(self, **keywords)
[1,4]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,4]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,4]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,14]<stdout>:
[1,14]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:Publishing the result of the current command NUME_DDL...
[1,14]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:Publishing the result of the current command NUME_DDL...
[1,6]<stdout>:
[1,7]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,7]<stdout>:    self.exec_(keywords)
[1,7]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,7]<stdout>:    output = self._op(self, **keywords)
[1,7]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,7]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,7]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,7]<stdout>:libaster.AsterError: 
[1,7]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,7]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║ Erreur écriture de l'enregistrement 1 sur la base : GLOBALE 0                                  ║
[1,7]<stdout>: ║      code retour : -4                                                                          ║
[1,7]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,7]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:Publishing the result of the current command NUME_DDL...
[1,7]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:Publishing the result of the current command NUME_DDL...
[1,8]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:Publishing the result of the current command NUME_DDL...
[1,1]<stdout>:
[1,2]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,2]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,2]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,2]<stdout>:    main()
[1,2]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,2]<stdout>:    run_command_line(args)
[1,2]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,2]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,2]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,2]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,2]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,2]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,2]<stdout>:    dofNum = NUME_DDL(
[1,2]<stdout>:             ^^^^^^^^^
[1,2]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,2]<stdout>:    return cmd.run_(**kwargs)
[1,2]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,2]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,2]<stdout>:    self.exec_(keywords)
[1,2]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,2]<stdout>:    output = self._op(self, **keywords)
[1,2]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,2]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,2]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,2]<stdout>:libaster.AsterError: 
[1,2]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,2]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║ Erreur écriture de l'enregistrement 2584 sur la base : GLOBALE 0                               ║
[1,2]<stdout>: ║      code retour : -4                                                                          ║
[1,2]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,2]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,2]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:Publishing the result of the current command NUME_DDL...
[1,11]<stdout>:
[1,15]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,15]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,15]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,15]<stdout>:    main()
[1,15]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,15]<stdout>:    run_command_line(args)
[1,15]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,15]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,15]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,15]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,15]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,15]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,15]<stdout>:    dofNum = NUME_DDL(
[1,15]<stdout>:             ^^^^^^^^^
[1,15]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,15]<stdout>:    return cmd.run_(**kwargs)
[1,15]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,15]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,15]<stdout>:    self.exec_(keywords)
[1,15]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,15]<stdout>:    output = self._op(self, **keywords)
[1,15]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,15]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,15]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,12]<stdout>:libaster.AsterError: 
[1,12]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,12]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,12]<stdout>: ║                                                                                                ║
[1,12]<stdout>: ║ Erreur écriture de l'enregistrement 1 sur la base : GLOBALE 0                                  ║
[1,12]<stdout>: ║      code retour : -4                                                                          ║
[1,12]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,12]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:Publishing the result of the current command NUME_DDL...
[1,12]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:Publishing the result of the current command NUME_DDL...
[1,2]<stdout>:
[1,0]<stdout>:Traceback (most recent call last):
[1,0]<stdout>:  File "<frozen runpy>", line 198, in _run_module_as_main
[1,0]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,0]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/__main__.py", line 7, in <module>
[1,0]<stdout>:    main()
[1,0]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 230, in main
[1,0]<stdout>:    run_command_line(args)
[1,0]<stdout>:  File "/opt/venv/lib/python3.11/site-packages/mpi4py/run.py", line 47, in run_command_line
[1,0]<stdout>:    run_path(sys.argv[0], run_name='__main__')
[1,0]<stdout>:  File "<frozen runpy>", line 291, in run_path
[1,0]<stdout>:  File "<frozen runpy>", line 98, in _run_module_code
[1,0]<stdout>:  File "<frozen runpy>", line 88, in _run_code
[1,0]<stdout>:  File "/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py", line 192, in <module>
[1,0]<stdout>:    dofNum = NUME_DDL(
[1,0]<stdout>:             ^^^^^^^^^
[1,0]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 180, in run
[1,0]<stdout>:    return cmd.run_(**kwargs)
[1,0]<stdout>:           ^^^^^^^^^^^^^^^^^^
[1,0]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 223, in run_
[1,0]<stdout>:    self.exec_(keywords)
[1,0]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/Supervis/ExecuteCommand.py", line 711, in exec_
[1,0]<stdout>:    output = self._op(self, **keywords)
[1,0]<stdout>:             ^^^^^^^^^^^^^^^^^^^^^^^^^^
[1,0]<stdout>:  File "/opt/aster/install/mpi/lib/aster/code_aster/MacroCommands/nume_ddl_ops.py", line 67, in nume_ddl_ops
[1,0]<stdout>:    nume_ddl.computeNumbering(matrRigi)
[1,0]<stdout>:libaster.AsterError: 
[1,0]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,0]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║ Erreur écriture de l'enregistrement 2585 sur la base : GLOBALE 0                               ║
[1,0]<stdout>: ║      code retour : -4                                                                          ║
[1,0]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,0]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:Publishing the result of the current command NUME_DDL...
[1,0]<stdout>:
[1,15]<stdout>:libaster.AsterError: 
[1,15]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,15]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,15]<stdout>: ║                                                                                                ║
[1,15]<stdout>: ║ Erreur écriture de l'enregistrement 576 sur la base : GLOBALE 0                                ║
[1,15]<stdout>: ║      code retour : -4                                                                          ║
[1,15]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,15]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:Publishing the result of the current command NUME_DDL...
[1,15]<stdout>:
[1,4]<stdout>:libaster.AsterError: 
[1,4]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,4]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║ Erreur écriture de l'enregistrement 559 sur la base : GLOBALE 0                                ║
[1,4]<stdout>: ║      code retour : -4                                                                          ║
[1,4]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,4]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:Publishing the result of the current command NUME_DDL...
[1,4]<stdout>:
[1,13]<stdout>:No database in results, objects not saved on processor #13
[1,9]<stdout>:No database in results, objects not saved on processor #9
[1,6]<stdout>:No database in results, objects not saved on processor #6
[1,12]<stdout>:No database in results, objects not saved on processor #12
[1,11]<stdout>:No database in results, objects not saved on processor #11
[1,10]<stdout>:No database in results, objects not saved on processor #10
[1,3]<stdout>:No database in results, objects not saved on processor #3
[1,2]<stdout>:No database in results, objects not saved on processor #2
[1,14]<stdout>:No database in results, objects not saved on processor #14
[1,4]<stdout>:No database in results, objects not saved on processor #4
[1,13]<stdout>:
[1,13]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,13]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,13]<stdout>: ║                                                                                                ║
[1,13]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,13]<stdout>: ║                                                                                                ║
[1,13]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,13]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,13]<stdout>: ║            aucune alarme                                                                       ║
[1,13]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,13]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,9]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,9]<stdout>: ║                                                                                                ║
[1,9]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,9]<stdout>: ║                                                                                                ║
[1,9]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,9]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,9]<stdout>: ║            aucune alarme                                                                       ║
[1,9]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,9]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,6]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,6]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,6]<stdout>: ║            aucune alarme                                                                       ║
[1,6]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,6]<stdout>:
[1,8]<stdout>:No database in results, objects not saved on processor #8
[1,1]<stdout>:No database in results, objects not saved on processor #1
[1,15]<stdout>:No database in results, objects not saved on processor #15
[1,9]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,13]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,6]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,7]<stdout>:No database in results, objects not saved on processor #7
[1,9]<stdout>:  
[1,6]<stdout>:  
[1,13]<stdout>:  
[1,9]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1556.56 Mo
[1,9]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4246.25 Mo
[1,9]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7158.95 Mo
[1,9]<stdout>:  
[1,9]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,9]<stdout>:  
[1,9]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,9]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4246  Mo.
[1,9]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1856  Mo.
[1,9]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             11719826
[1,9]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             11718693
[1,9]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,9]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,9]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,9]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,9]<stdout>:  
[1,9]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1556.56 Mo
[1,9]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,9]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,9]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4246.25 Mo
[1,9]<stdout>:     - LIMITE LES ACCES DISQUE
[1,9]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,9]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7158.95 Mo
[1,9]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,9]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,9]<stdout>:  
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1555.42 Mo
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4230.27 Mo
[1,6]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7044.69 Mo
[1,6]<stdout>:  
[1,6]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,6]<stdout>:  
[1,6]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,6]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4230  Mo.
[1,6]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1838  Mo.
[1,6]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             11799766
[1,6]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             11798582
[1,6]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,6]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,6]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,6]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,6]<stdout>:  
[1,6]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1555.42 Mo
[1,6]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,6]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,6]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4230.27 Mo
[1,6]<stdout>:     - LIMITE LES ACCES DISQUE
[1,6]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,6]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7044.69 Mo
[1,6]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,13]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1560.52 Mo
[1,13]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4282.82 Mo
[1,13]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7501.96 Mo
[1,13]<stdout>:  
[1,13]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,13]<stdout>:  
[1,13]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,13]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4283  Mo.
[1,13]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1844  Mo.
[1,13]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             11861479
[1,13]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             11860257
[1,13]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,13]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,13]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,13]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,13]<stdout>:  
[1,13]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1560.52 Mo
[1,13]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,13]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,13]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4282.82 Mo
[1,13]<stdout>:     - LIMITE LES ACCES DISQUE
[1,13]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,13]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7501.96 Mo
[1,13]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,13]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,13]<stdout>:  
[1,12]<stdout>:
[1,12]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,12]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,12]<stdout>: ║                                                                                                ║
[1,12]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,12]<stdout>: ║                                                                                                ║
[1,12]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,12]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,12]<stdout>: ║            aucune alarme                                                                       ║
[1,12]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,12]<stdout>:
[1,6]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,6]<stdout>:  
[1,13]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,9]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,6]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,12]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,13]<stdout>:INFO './glob.1' deleted
[1,9]<stdout>:INFO './glob.1' deleted
[1,13]<stdout>:Deleting './glob.2': No such file or directory
[1,6]<stdout>:INFO './glob.1' deleted
[1,12]<stdout>:  
[1,9]<stdout>:Deleting './glob.2': No such file or directory
[1,11]<stdout>:
[1,11]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,11]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,11]<stdout>: ║                                                                                                ║
[1,11]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,11]<stdout>: ║                                                                                                ║
[1,11]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,11]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,11]<stdout>: ║            aucune alarme                                                                       ║
[1,11]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,11]<stdout>:
[1,13]<stdout>:INFO './vola.1' deleted
[1,13]<stdout>:Deleting './vola.2': No such file or directory
[1,10]<stdout>:
[1,10]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,10]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,10]<stdout>: ║                                                                                                ║
[1,10]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,10]<stdout>: ║                                                                                                ║
[1,10]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,10]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,10]<stdout>: ║            aucune alarme                                                                       ║
[1,10]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,10]<stdout>:
[1,6]<stdout>:Deleting './glob.2': No such file or directory
[1,6]<stdout>:INFO './vola.1' deleted
[1,6]<stdout>:Deleting './vola.2': No such file or directory
[1,9]<stdout>:INFO './vola.1' deleted
[1,9]<stdout>:Deleting './vola.2': No such file or directory
[1,12]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1677.86 Mo
[1,12]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4279.09 Mo
[1,12]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    6851.54 Mo
[1,12]<stdout>:  
[1,12]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,12]<stdout>:  
[1,12]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,12]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4279  Mo.
[1,12]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1801  Mo.
[1,12]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             11471413
[1,12]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             11470010
[1,12]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,12]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,12]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,12]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,12]<stdout>:  
[1,12]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1677.86 Mo
[1,12]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,12]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,12]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4279.09 Mo
[1,12]<stdout>:     - LIMITE LES ACCES DISQUE
[1,12]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,12]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    6851.54 Mo
[1,12]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,12]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,12]<stdout>:  
[1,3]<stdout>:
[1,3]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,3]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,3]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,3]<stdout>: ║            aucune alarme                                                                       ║
[1,3]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,3]<stdout>:
[1,12]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,2]<stdout>:
[1,2]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,2]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,2]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,2]<stdout>: ║            aucune alarme                                                                       ║
[1,2]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,2]<stdout>:
[1,11]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,10]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,12]<stdout>:INFO './glob.1' deleted
[1,12]<stdout>:Deleting './glob.2': [1,12]<stdout>:No such file or directory
[1,3]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,12]<stdout>:INFO './vola.1' deleted
[1,12]<stdout>:Deleting './vola.2': No such file or directory
[1,2]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,11]<stdout>:  
[1,11]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1557.17 Mo
[1,11]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4237.41 Mo
[1,11]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7749.36 Mo
[1,11]<stdout>:  
[1,11]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,11]<stdout>:  
[1,11]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,11]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4237  Mo.
[1,11]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1829  Mo.
[1,11]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             11775230
[1,11]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             11773973
[1,11]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,11]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,11]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,11]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,11]<stdout>:  
[1,11]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1557.17 Mo
[1,11]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,11]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,11]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4237.41 Mo
[1,11]<stdout>:     - LIMITE LES ACCES DISQUE
[1,11]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,11]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7749.36 Mo
[1,11]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,11]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,11]<stdout>:  
[1,10]<stdout>:  
[1,10]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1437.21 Mo
[1,10]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4216.09 Mo
[1,10]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7302.82 Mo
[1,10]<stdout>:  
[1,10]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,10]<stdout>:  
[1,10]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,10]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4216  Mo.
[1,10]<stdout>:     TAILLE CUMULEE LIBEREE            :                 2014  Mo.
[1,10]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             12133534
[1,10]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             12132935
[1,10]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,10]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,10]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,10]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,10]<stdout>:  
[1,10]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1437.21 Mo
[1,10]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,10]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,10]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4216.09 Mo
[1,10]<stdout>:     - LIMITE LES ACCES DISQUE
[1,3]<stdout>:  
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1559.50 Mo
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4274.71 Mo
[1,3]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7321.04 Mo
[1,3]<stdout>:  
[1,3]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,3]<stdout>:  
[1,3]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,3]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4275  Mo.
[1,3]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1835  Mo.
[1,3]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             11812580
[1,3]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             11811355
[1,3]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,3]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,3]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,3]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,3]<stdout>:  
[1,3]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1559.50 Mo
[1,3]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,3]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,3]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4274.71 Mo
[1,3]<stdout>:     - LIMITE LES ACCES DISQUE
[1,3]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,3]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7321.04 Mo
[1,3]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,3]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,3]<stdout>:  
[1,10]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,10]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7302.82 Mo
[1,10]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,10]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,10]<stdout>:  
[1,10]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,4]<stdout>:
[1,4]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,4]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,4]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,4]<stdout>: ║            aucune alarme                                                                       ║
[1,4]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,4]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,14]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,14]<stdout>: ║                                                                                                ║
[1,14]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,14]<stdout>: ║                                                                                                ║
[1,14]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,14]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,14]<stdout>: ║            aucune alarme                                                                       ║
[1,14]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,14]<stdout>:
[1,2]<stdout>:  
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1438.25 Mo
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4229.16 Mo
[1,2]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7165.74 Mo
[1,2]<stdout>:  
[1,2]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,2]<stdout>:  
[1,2]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,2]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4229  Mo.
[1,2]<stdout>:     TAILLE CUMULEE LIBEREE            :                 2030  Mo.
[1,2]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             12290530
[1,2]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             12289886
[1,2]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,2]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,2]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,2]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,2]<stdout>:  
[1,2]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1438.25 Mo
[1,2]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,2]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,2]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4229.16 Mo
[1,2]<stdout>:     - LIMITE LES ACCES DISQUE
[1,2]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,2]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7165.74 Mo
[1,2]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,2]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,2]<stdout>:  
[1,11]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,15]<stdout>:
[1,15]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,15]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,15]<stdout>: ║                                                                                                ║
[1,15]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,15]<stdout>: ║                                                                                                ║
[1,15]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,15]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,15]<stdout>: ║            aucune alarme                                                                       ║
[1,15]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,15]<stdout>:
[1,4]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,1]<stdout>:
[1,1]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,1]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,1]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,1]<stdout>: ║            aucune alarme                                                                       ║
[1,1]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,1]<stdout>:
[1,14]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,3]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,8]<stdout>:
[1,8]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,8]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,8]<stdout>: ║                                                                                                ║
[1,8]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,8]<stdout>: ║                                                                                                ║
[1,8]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,8]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,8]<stdout>: ║            aucune alarme                                                                       ║
[1,8]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,8]<stdout>:
[1,10]<stdout>:INFO './glob.1' deleted
[1,10]<stdout>:Deleting './glob.2': No such file or directory
[1,11]<stdout>:INFO './glob.1' deleted
[1,11]<stdout>:Deleting './glob.2': No such file or directory
[1,4]<stdout>:  
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1563.82 Mo
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4304.98 Mo
[1,4]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7203.02 Mo
[1,4]<stdout>:  
[1,4]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,4]<stdout>:  
[1,4]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,4]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4305  Mo.
[1,4]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1864  Mo.
[1,4]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             12095171
[1,4]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             12093905
[1,4]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,4]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,4]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,4]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,4]<stdout>:  
[1,4]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1563.82 Mo
[1,4]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,4]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,4]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4304.98 Mo
[1,4]<stdout>:     - LIMITE LES ACCES DISQUE
[1,4]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,4]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7203.02 Mo
[1,4]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,4]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,4]<stdout>:  
[1,1]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,14]<stdout>:  
[1,14]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1679.95 Mo
[1,14]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4298.51 Mo
[1,14]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7036.36 Mo
[1,14]<stdout>:  
[1,14]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,14]<stdout>:  
[1,14]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,14]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4299  Mo.
[1,14]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1813  Mo.
[1,14]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             11566854
[1,14]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             11565469
[1,14]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,14]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,14]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,14]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,14]<stdout>:  
[1,14]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1679.95 Mo
[1,14]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,14]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,14]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4298.51 Mo
[1,14]<stdout>:     - LIMITE LES ACCES DISQUE
[1,14]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,14]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7036.36 Mo
[1,14]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,14]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,14]<stdout>:  
[1,3]<stdout>:INFO './glob.1' deleted
[1,3]<stdout>:Deleting './glob.2': No such file or directory
[1,3]<stdout>:INFO './vola.1' deleted
[1,3]<stdout>:Deleting './vola.2': No such file or directory
[1,11]<stdout>:INFO './vola.1' deleted
[1,11]<stdout>:Deleting './vola.2': No such file or directory
[1,10]<stdout>:INFO './vola.1' deleted
[1,10]<stdout>:Deleting './vola.2': No such file or directory
[1,15]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,7]<stdout>:
[1,7]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,7]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,7]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,7]<stdout>: ║            aucune alarme                                                                       ║
[1,7]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,7]<stdout>:
[1,4]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,14]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,8]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,8]<stdout>:  
[1,8]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1564.05 Mo
[1,8]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4307.82 Mo
[1,8]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7241.15 Mo
[1,8]<stdout>:  
[1,8]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,8]<stdout>:  
[1,8]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,1]<stdout>:  
[1,8]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4308  Mo.
[1,8]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1870  Mo.
[1,8]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             12080028
[1,8]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             12078803
[1,8]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,8]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,8]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,8]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,8]<stdout>:  
[1,8]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1564.05 Mo
[1,8]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,8]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,8]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4307.82 Mo
[1,8]<stdout>:     - LIMITE LES ACCES DISQUE
[1,8]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,8]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7241.15 Mo
[1,8]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,8]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,8]<stdout>:  
[1,15]<stdout>:  
[1,15]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1553.57 Mo
[1,7]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1438.18 Mo
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4237.06 Mo
[1,1]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7212.36 Mo
[1,1]<stdout>:  
[1,1]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,1]<stdout>:  
[1,1]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,1]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4237  Mo.
[1,1]<stdout>:     TAILLE CUMULEE LIBEREE            :                 2016  Mo.
[1,1]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             12146995
[1,1]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             12146338
[1,1]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,1]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,1]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,1]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,1]<stdout>:  
[1,1]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1438.18 Mo
[1,1]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,1]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,1]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4237.06 Mo
[1,1]<stdout>:     - LIMITE LES ACCES DISQUE
[1,1]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,1]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7212.36 Mo
[1,1]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,1]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,1]<stdout>:  
[1,4]<stdout>:INFO './glob.1' deleted
[1,4]<stdout>:Deleting './glob.2': No such file or directory
[1,4]<stdout>:INFO './vola.1' deleted
[1,15]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4216.83 Mo
[1,15]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7590.86 Mo
[1,15]<stdout>:  
[1,15]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,15]<stdout>:  
[1,15]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,15]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4217  Mo.
[1,15]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1814  Mo.
[1,15]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             11595998
[1,15]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             11594698
[1,15]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,15]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,15]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,15]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,15]<stdout>:  
[1,15]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1553.57 Mo
[1,15]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,15]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,15]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4216.83 Mo
[1,15]<stdout>:     - LIMITE LES ACCES DISQUE
[1,15]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,15]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7590.86 Mo
[1,15]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,15]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,15]<stdout>:  
[1,14]<stdout>:INFO './glob.1' deleted
[1,14]<stdout>:Deleting './glob.2': No such file or directory
[1,14]<stdout>:INFO './vola.1' deleted
[1,14]<stdout>:Deleting './vola.2': No such file or directory
[1,8]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,4]<stdout>:Deleting './vola.2': No such file or directory
[1,7]<stdout>:  
[1,1]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,15]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,15]<stdout>:INFO './glob.1' deleted
[1,8]<stdout>:INFO './glob.1' deleted
[1,8]<stdout>:Deleting './glob.2': No such file or directory
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1679.68 Mo
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4302.53 Mo
[1,7]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7244.66 Mo
[1,7]<stdout>:  
[1,7]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,7]<stdout>:  
[1,7]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,7]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4303  Mo.
[1,7]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1798  Mo.
[1,7]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             11419802
[1,7]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             11418394
[1,7]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,7]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,7]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,7]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,7]<stdout>:  
[1,7]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1679.68 Mo
[1,7]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,7]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,7]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4302.53 Mo
[1,7]<stdout>:     - LIMITE LES ACCES DISQUE
[1,7]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,7]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7244.66 Mo
[1,7]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,7]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,7]<stdout>:  
[1,8]<stdout>:INFO './vola.1' deleted
[1,8]<stdout>:Deleting './vola.2': No such file or directory
[1,7]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,1]<stdout>:INFO './glob.1' deleted
[1,1]<stdout>:Deleting './glob.2': No such file or directory
[1,15]<stdout>:Deleting './glob.2': No such file or directory
[1,15]<stdout>:INFO './vola.1' deleted
[1,1]<stdout>:INFO './vola.1' deleted
[1,15]<stdout>:Deleting './vola.2': No such file or directory
[1,1]<stdout>:Deleting './vola.2': No such file or directory
[1,7]<stdout>:INFO './glob.1' deleted
[1,7]<stdout>:Deleting './glob.2': No such file or directory
[1,7]<stdout>:INFO './vola.1' deleted
[1,7]<stdout>:Deleting './vola.2': No such file or directory
[1,2]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,2]<stdout>:INFO './glob.1' deleted
[1,2]<stdout>:Deleting './glob.2': No such file or directory
[1,2]<stdout>:INFO './vola.1' deleted
[1,2]<stdout>:Deleting './vola.2': No such file or directory
[1,0]<stdout>:No database in results, objects not saved on processor #0
[1,0]<stdout>:
[1,0]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,0]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,0]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,0]<stdout>: ║            aucune alarme                                                                       ║
[1,0]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,0]<stdout>:
[1,0]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,0]<stdout>:  
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1430.03 Mo
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4155.75 Mo
[1,0]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7133.41 Mo
[1,0]<stdout>:  
[1,0]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,0]<stdout>:  
[1,0]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,0]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4156  Mo.
[1,0]<stdout>:     TAILLE CUMULEE LIBEREE            :                 2309  Mo.
[1,0]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             14885160
[1,0]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             14884602
[1,0]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,0]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,0]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,0]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,0]<stdout>:  
[1,0]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1430.03 Mo
[1,0]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,0]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,0]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4155.75 Mo
[1,0]<stdout>:     - LIMITE LES ACCES DISQUE
[1,0]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,0]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7133.41 Mo
[1,0]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,0]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,0]<stdout>:  
[1,0]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 17:06:39
[1,0]<stdout>:INFO './glob.1' deleted
[1,0]<stdout>:Deleting './glob.2': No such file or directory
[1,0]<stdout>:INFO './vola.1' deleted
[1,0]<stdout>:Deleting './vola.2': No such file or directory
[1,5]<stdout>:libaster.AsterError: 
[1,5]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,5]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║ Erreur écriture de l'enregistrement 2584 sur la base : GLOBALE 0                               ║
[1,5]<stdout>: ║      code retour : -4                                                                          ║
[1,5]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,5]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:Exception: Trying to close the database after an uncaught exception...
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:Publishing the result of the current command NUME_DDL...
[1,5]<stdout>:
[1,5]<stdout>:No database in results, objects not saved on processor #5
[1,5]<stdout>:
[1,5]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,5]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,5]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,5]<stdout>: ║            aucune alarme                                                                       ║
[1,5]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,5]<stdout>:
[1,5]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,5]<stdout>:  
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1436.85 Mo
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    4224.27 Mo
[1,5]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    7348.79 Mo
[1,5]<stdout>:  
[1,5]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,5]<stdout>:  
[1,5]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,5]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 4224  Mo.
[1,5]<stdout>:     TAILLE CUMULEE LIBEREE            :                 2012  Mo.
[1,5]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :             12109323
[1,5]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :             12108717
[1,5]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    2
[1,5]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,5]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,5]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,5]<stdout>:  
[1,5]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1436.85 Mo
[1,5]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,5]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,5]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    4224.27 Mo
[1,5]<stdout>:     - LIMITE LES ACCES DISQUE
[1,5]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,5]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    7348.79 Mo
[1,5]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,5]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,5]<stdout>:  
[1,5]<stdout>: <I>       FIN D'EXECU[1,5]<stdout>:TION LE : JE-23-JANV-2025 17:06:39
[1,5]<stdout>:INFO './glob.1' deleted
[1,5]<stdout>:Deleting './glob.2': No such file or directory
[1,5]<stdout>:INFO './vola.1' deleted
[1,5]<stdout>:Deleting './vola.2': No such file or directory
[1,9]<stdout>:
[1,9]<stdout>:EXECUTION_CODE_ASTER_EXIT_2618=1
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:execution ended (command file #1): <S>_ERROR
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Content of /tmp/run_aster_liewisez/proc.9 after execution:
[1,9]<stdout>:.:
[1,9]<stdout>:total 28
[1,9]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 17:04 2618.export
[1,9]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 17:04 REPE_IN
[1,9]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 17:04 REPE_OUT
[1,9]<stdout>:-rw-r--r-- 1 aster aster 20763 Jan 23 17:06 fort.6
[1,9]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 17:04 fort.8
[1,9]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 17:04 fort.9
[1,9]<stdout>:
[1,9]<stdout>:REPE_OUT:
[1,9]<stdout>:total 0
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Execution summary
[1,9]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,9]<stdout>:Execution of code_aster             44.20      11.31      55.51     158.80
[1,9]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:Total                               44.20      11.31      55.51     158.80
[1,9]<stdout>:--------------------------------------------------------------------------------
