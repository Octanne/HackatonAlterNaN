WARNING: If MPI_Abort is called during execution, result files could not be copied.
Running: mpiexec -n 24 --tag-output /opt/aster/install/mpi/bin/run_aster -n 24 --wrkdir /tmp/run_aster_f89dw791 --status-file /home/aster/.tmp_run_aster/run_aster_5otkeas7/__status__ --no-mpi /home/aster/.tmp_run_aster/run_aster_5otkeas7/Cube_perf.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution of code_aster
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command file #1 / 1
[1,0]<stdout>:
[1,0]<stdout>:Content of the file to execute:
[1,0]<stdout>:# coding=utf-8
[1,0]<stdout>:#!/usr/bin/python
[1,0]<stdout>:
[1,0]<stdout>:import os
[1,0]<stdout>:from statistics import mean
[1,0]<stdout>:from datetime import datetime
[1,0]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,0]<stdout>:
[1,0]<stdout>:from code_aster.Commands import *
[1,0]<stdout>:from code_aster import CA
[1,0]<stdout>:from code_aster.Utilities import petscInitialize
[1,0]<stdout>:
[1,0]<stdout>:CA.init()
[1,0]<stdout>:
[1,0]<stdout>:params = {}
[1,0]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,0]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,0]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,0]<stdout>:
[1,0]<stdout>:# General parameters
[1,0]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,0]<stdout>:rank = comm.Get_rank()
[1,0]<stdout>:size = comm.Get_size()
[1,0]<stdout>:
[1,0]<stdout>:nbHexa = 8 ** params["refinements"]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def memory_peak(mess=None):
[1,0]<stdout>:    """Return memory peak in MB"""
[1,0]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMgGen:
[1,0]<stdout>:    stats = {}
[1,0]<stdout>:
[1,0]<stdout>:    def __init__(self, what):
[1,0]<stdout>:        self._what = what
[1,0]<stdout>:
[1,0]<stdout>:    def __enter__(self):
[1,0]<stdout>:        self.start = datetime.now()
[1,0]<stdout>:
[1,0]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,0]<stdout>:        self.stop = datetime.now()
[1,0]<stdout>:        delta = self.stop - self.start
[1,0]<stdout>:        mem = memory_peak(self._what)
[1,0]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,0]<stdout>:    pass
[1,0]<stdout>:    # def __init__(self, what):
[1,0]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def write_stats(nume_ddl):
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB PROC")
[1,0]<stdout>:        print(size)
[1,0]<stdout>:        print()
[1,0]<stdout>:        print(
[1,0]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    for key, values in stats.items():
[1,0]<stdout>:        time = comm.gather(values[0], root=0)
[1,0]<stdout>:        mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(
[1,0]<stdout>:                key
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(mem))
[1,0]<stdout>:            )
[1,0]<stdout>:
[1,0]<stdout>:    mesh = nume_ddl.getMesh()
[1,0]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,0]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,0]<stdout>:
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,0]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,0]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,0]<stdout>:
[1,0]<stdout>:    def show(*args, **kwargs):
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(*args, **kwargs)
[1,0]<stdout>:
[1,0]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,0]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,0]<stdout>:    separ = "| :--------------- | ----------: |"
[1,0]<stdout>:    show(fmti.format("Refinement", refine))
[1,0]<stdout>:    show(separ)
[1,0]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,0]<stdout>:    for key, values in data.items():
[1,0]<stdout>:        times = comm.gather(values[0], root=0)
[1,0]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            show(fmtt.format(key, mean(times)))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,0]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,0]<stdout>:
[1,0]<stdout>:with ChronoCtxMg("Total"):
[1,0]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,0]<stdout>:        if params["parallel"] == "HPC":
[1,0]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:        else:
[1,0]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Model"):
[1,0]<stdout>:        model = AFFE_MODELE(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                PHENOMENE="MECANIQUE",
[1,0]<stdout>:                MODELISATION="3D",
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Material"):
[1,0]<stdout>:        steel = DEFI_MATERIAU(
[1,0]<stdout>:            ELAS=_F(
[1,0]<stdout>:                E=200000.0,
[1,0]<stdout>:                NU=0.3,
[1,0]<stdout>:            ),
[1,0]<stdout>:            ECRO_LINE=_F(
[1,0]<stdout>:    [1,0]<stdout>:            D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                SY=200.0,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        mater = AFFE_MATERIAU(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                MATER=steel,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,0]<stdout>:        block = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="LEFT",
[1,0]<stdout>:                    DX=0,
[1,0]<stdout>:                    DY=0.0,
[1,0]<stdout>:                    DZ=0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="RIGHT",
[1,0]<stdout>:                    DY=0.001,
[1,0]<stdout>:                    DZ=0.001,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,0]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            OPTION="RIGI_MECA",
[1,0]<stdout>:            CHAM_MATER=mater,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Numbering"):
[1,0]<stdout>:        dofNum = NUME_DDL(
[1,0]<stdout>:            MATR_RIGI=stiff_elem,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Assembly"):
[1,0]<stdout>:        stiffness = ASSE_MATRICE(
[1,0]<stdout>:            MATR_ELEM=stiff_elem,
[1,0]<stdout>:            NUME_DDL=dofNum,
[1,0]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,0]<stdout>:        rhs = CREA_CHAMP(
[1,0]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,0]<stdout>:            OPERATION="AFFE",
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                NOM_CMP=(
[1,0]<stdout>:                    "DX",
[1,0]<stdout>:                    "DY",
[1,0]<stdout>:                    "DZ",
[1,0]<stdout>:                ),
[1,0]<stdout>:                VALE=(
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,0]<stdout>:
[1,0]<stdout>:    if params["solver"] == "PETSC":
[1,0]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,0]<stdout>:    elif params["solver"] == "MUMPS":
[1,0]<stdout>:        solver = CA.MumpsSolver(
[1,0]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,0]<stdout>:            RENUM="PARMETIS",
[1,0]<stdout>:            ACCELERATION="FR+",
[1,0]<stdout>:            POSTTRAITEMENTS="MINI",
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Factorize"):
[1,0]<stdout>:        solver.factorize(stiffness)
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Solve"):
[1,0]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,0]<stdout>:
[1,0]<stdout>:# write_stats(dofNum)
[1,0]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,0]<stdout>:if params["parallel"] == "HPC":
[1,0]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,0]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,0]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,0]<stdout>:
[1,0]<stdout>:CA.close()
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command line #1:
[1,0]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution of code_aster
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.1
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command file #1 / 1
[1,1]<stdout>:
[1,1]<stdout>:Content of the file to execute:
[1,1]<stdout>:# coding=utf-8
[1,1]<stdout>:#!/usr/bin/python
[1,1]<stdout>:
[1,1]<stdout>:import os
[1,1]<stdout>:from statistics import mean
[1,1]<stdout>:from datetime import datetime
[1,1]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,1]<stdout>:
[1,1]<stdout>:from code_aster.Commands import *
[1,1]<stdout>:from code_aster import CA
[1,1]<stdout>:from code_aster.Utilities import petscInitialize
[1,1]<stdout>:
[1,1]<stdout>:CA.init()
[1,1]<stdout>:
[1,1]<stdout>:params = {}
[1,1]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,1]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,1]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,1]<stdout>:
[1,1]<stdout>:# General parameters
[1,1]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,1]<stdout>:rank = comm.Get_rank()
[1,1]<stdout>:size = comm.Get_size()
[1,1]<stdout>:
[1,1]<stdout>:nbHexa = 8 ** params["refinements"]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def memory_peak(mess=None):
[1,1]<stdout>:    """Return memory peak in MB"""
[1,1]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMgGen:
[1,1]<stdout>:    stats = {}
[1,1]<stdout>:
[1,1]<stdout>:    def __init__(self, what):
[1,1]<stdout>:        self._what = what
[1,1]<stdout>:
[1,1]<stdout>:    def __enter__(self):
[1,1]<stdout>:        self.start = datetime.now()
[1,1]<stdout>:
[1,1]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,1]<stdout>:        self.stop = datetime.now()
[1,1]<stdout>:        delta = self.stop - self.start
[1,1]<stdout>:        mem = memory_peak(self._what)
[1,1]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,1]<stdout>:    pass
[1,1]<stdout>:    # def __init__(self, what):
[1,1]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def write_stats(nume_ddl):
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB PROC")
[1,1]<stdout>:        print(size)
[1,1]<stdout>:        print()
[1,1]<stdout>:        print(
[1,1]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    for key, values in stats.items():
[1,1]<stdout>:        time = comm.gather(values[0], root=0)
[1,1]<stdout>:        mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(
[1,1]<stdout>:                key
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(mem))
[1,1]<stdout>:            )
[1,1]<stdout>:
[1,1]<stdout>:    mesh = nume_ddl.getMesh()
[1,1]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,1]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,1]<stdout>:
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,1]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,1]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,1]<stdout>:
[1,1]<stdout>:    def show(*args, **kwargs):
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(*args, **kwargs)
[1,1]<stdout>:
[1,1]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,1]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,1]<stdout>:    separ = "| :--------------- | ----------: |"
[1,1]<stdout>:    show(fmti.format("Refinement", refine))
[1,1]<stdout>:    show(separ)
[1,1]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,1]<stdout>:    for key, values in data.items():
[1,1]<stdout>:        times = comm.gather(values[0], root=0)
[1,1]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            show(fmtt.format(key, mean(times)))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,1]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,1]<stdout>:
[1,1]<stdout>:with ChronoCtxMg("Total"):
[1,1]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,1]<stdout>:        if params["parallel"] == "HPC":
[1,1]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:        else:
[1,1]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Model"):
[1,1]<stdout>:        model = AFFE_MODELE(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                PHENOMENE="MECANIQUE",
[1,1]<stdout>:                MODELISATION="3D",
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Material"):
[1,1]<stdout>:        steel = DEFI_MATERIAU(
[1,1]<stdout>:            ELAS=_F(
[1,1]<stdout>:                E=200000.0,
[1,1]<stdout>:                NU=0.3,
[1,1]<stdout>:            ),
[1,1]<stdout>:            ECRO_LINE=_F(
[1,1]<stdout>:   [1,1]<stdout>:             D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                SY=200.0,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        mater = AFFE_MATERIAU(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                MATER=steel,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,1]<stdout>:        block = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="LEFT",
[1,1]<stdout>:                    DX=0,
[1,1]<stdout>:                    DY=0.0,
[1,1]<stdout>:                    DZ=0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="RIGHT",
[1,1]<stdout>:                    DY=0.001,
[1,1]<stdout>:                    DZ=0.001,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,1]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            OPTION="RIGI_MECA",
[1,1]<stdout>:            CHAM_MATER=mater,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Numbering"):
[1,1]<stdout>:        dofNum = NUME_DDL(
[1,1]<stdout>:            MATR_RIGI=stiff_elem,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Assembly"):
[1,1]<stdout>:        stiffness = ASSE_MATRICE(
[1,1]<stdout>:            MATR_ELEM=stiff_elem,
[1,1]<stdout>:            NUME_DDL=dofNum,
[1,1]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,1]<stdout>:        rhs = CREA_CHAMP(
[1,1]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,1]<stdout>:            OPERATION="AFFE",
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                NOM_CMP=(
[1,1]<stdout>:                    "DX",
[1,1]<stdout>:                    "DY",
[1,1]<stdout>:                    "DZ",
[1,1]<stdout>:                ),
[1,1]<stdout>:                VALE=(
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,1]<stdout>:
[1,1]<stdout>:    if params["solver"] == "PETSC":
[1,1]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,1]<stdout>:    elif params["solver"] == "MUMPS":
[1,1]<stdout>:        solver = CA.MumpsSolver(
[1,1]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,1]<stdout>:            RENUM="PARMETIS",
[1,1]<stdout>:            ACCELERATION="FR+",
[1,1]<stdout>:            POSTTRAITEMENTS="MINI",
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Factorize"):
[1,1]<stdout>:        solver.factorize(stiffness)
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Solve"):
[1,1]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,1]<stdout>:
[1,1]<stdout>:# write_stats(dofNum)
[1,1]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,1]<stdout>:if params["parallel"] == "HPC":
[1,1]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,1]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,1]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,1]<stdout>:
[1,1]<stdout>:CA.close()
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command line #1:
[1,1]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution of code_aster
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.2
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command file #1 / 1
[1,2]<stdout>:
[1,2]<stdout>:Content of the file to execute:
[1,2]<stdout>:# coding=utf-8
[1,2]<stdout>:#!/usr/bin/python
[1,2]<stdout>:
[1,2]<stdout>:import os
[1,2]<stdout>:from statistics import mean
[1,2]<stdout>:from datetime import datetime
[1,2]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,2]<stdout>:
[1,2]<stdout>:from code_aster.Commands import *
[1,2]<stdout>:from code_aster import CA
[1,2]<stdout>:from code_aster.Utilities import petscInitialize
[1,2]<stdout>:
[1,2]<stdout>:CA.init()
[1,2]<stdout>:
[1,2]<stdout>:params = {}
[1,2]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,2]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,2]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,2]<stdout>:
[1,2]<stdout>:# General parameters
[1,2]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,2]<stdout>:rank = comm.Get_rank()
[1,2]<stdout>:size = comm.Get_size()
[1,2]<stdout>:
[1,2]<stdout>:nbHexa = 8 ** params["refinements"]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def memory_peak(mess=None):
[1,2]<stdout>:    """Return memory peak in MB"""
[1,2]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMgGen:
[1,2]<stdout>:    stats = {}
[1,2]<stdout>:
[1,2]<stdout>:    def __init__(self, what):
[1,2]<stdout>:        self._what = what
[1,2]<stdout>:
[1,2]<stdout>:    def __enter__(self):
[1,2]<stdout>:        self.start = datetime.now()
[1,2]<stdout>:
[1,2]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,2]<stdout>:        self.stop = datetime.now()
[1,2]<stdout>:        delta = self.stop - self.start
[1,2]<stdout>:        mem = memory_peak(self._what)
[1,2]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,2]<stdout>:    pass
[1,2]<stdout>:    # def __init__(self, what):
[1,2]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def write_stats(nume_ddl):
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB PROC")
[1,2]<stdout>:        print(size)
[1,2]<stdout>:        print()
[1,2]<stdout>:        print(
[1,2]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    for key, values in stats.items():
[1,2]<stdout>:        time = comm.gather(values[0], root=0)
[1,2]<stdout>:        mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(
[1,2]<stdout>:                key
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(mem))
[1,2]<stdout>:            )
[1,2]<stdout>:
[1,2]<stdout>:    mesh = nume_ddl.getMesh()
[1,2]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,2]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,2]<stdout>:
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,2]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,2]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,2]<stdout>:
[1,2]<stdout>:    def show(*args, **kwargs):
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(*args, **kwargs)
[1,2]<stdout>:
[1,2]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,2]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,2]<stdout>:    separ = "| :--------------- | ----------: |"
[1,2]<stdout>:    show(fmti.format("Refinement", refine))
[1,2]<stdout>:    show(separ)
[1,2]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,2]<stdout>:    for key, values in data.items():
[1,2]<stdout>:        times = comm.gather(values[0], root=0)
[1,2]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            show(fmtt.format(key, mean(times)))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,2]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,2]<stdout>:
[1,2]<stdout>:with ChronoCtxMg("Total"):
[1,2]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,2]<stdout>:        if params["parallel"] == "HPC":
[1,2]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:        else:
[1,2]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Model"):
[1,2]<stdout>:        model = AFFE_MODELE(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                PHENOMENE="MECANIQUE",
[1,2]<stdout>:                MODELISATION="3D",
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Material"):
[1,2]<stdout>:        steel = DEFI_MATERIAU(
[1,2]<stdout>:            ELAS=_F(
[1,2]<stdout>:                E=200000.0,
[1,2]<stdout>:                NU=0.3,
[1,2]<stdout>:            ),
[1,2]<stdout>:            ECRO_LINE=_F(
[1,2]<stdout>:   [1,2]<stdout>:             D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                SY=200.0,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        mater = AFFE_MATERIAU(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                MATER=steel,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,2]<stdout>:        block = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="LEFT",
[1,2]<stdout>:                    DX=0,
[1,2]<stdout>:                    DY=0.0,
[1,2]<stdout>:                    DZ=0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="RIGHT",
[1,2]<stdout>:                    DY=0.001,
[1,2]<stdout>:                    DZ=0.001,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,2]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            OPTION="RIGI_MECA",
[1,2]<stdout>:            CHAM_MATER=mater,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Numbering"):
[1,2]<stdout>:        dofNum = NUME_DDL(
[1,2]<stdout>:            MATR_RIGI=stiff_elem,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Assembly"):
[1,2]<stdout>:        stiffness = ASSE_MATRICE(
[1,2]<stdout>:            MATR_ELEM=stiff_elem,
[1,2]<stdout>:            NUME_DDL=dofNum,
[1,2]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,2]<stdout>:        rhs = CREA_CHAMP(
[1,2]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,2]<stdout>:            OPERATION="AFFE",
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                NOM_CMP=(
[1,2]<stdout>:                    "DX",
[1,2]<stdout>:                    "DY",
[1,2]<stdout>:                    "DZ",
[1,2]<stdout>:                ),
[1,2]<stdout>:                VALE=(
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,2]<stdout>:
[1,2]<stdout>:    if params["solver"] == "PETSC":
[1,2]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,2]<stdout>:    elif params["solver"] == "MUMPS":
[1,2]<stdout>:        solver = CA.MumpsSolver(
[1,2]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,2]<stdout>:            RENUM="PARMETIS",
[1,2]<stdout>:            ACCELERATION="FR+",
[1,2]<stdout>:            POSTTRAITEMENTS="MINI",
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Factorize"):
[1,2]<stdout>:        solver.factorize(stiffness)
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Solve"):
[1,2]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,2]<stdout>:
[1,2]<stdout>:# write_stats(dofNum)
[1,2]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,2]<stdout>:if params["parallel"] == "HPC":
[1,2]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,2]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,2]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,2]<stdout>:
[1,2]<stdout>:CA.close()
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command line #1:
[1,2]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution of code_aster
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.3
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command file #1 / 1
[1,3]<stdout>:
[1,3]<stdout>:Content of the file to execute:
[1,3]<stdout>:# coding=utf-8
[1,3]<stdout>:#!/usr/bin/python
[1,3]<stdout>:
[1,3]<stdout>:import os
[1,3]<stdout>:from statistics import mean
[1,3]<stdout>:from datetime import datetime
[1,3]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,3]<stdout>:
[1,3]<stdout>:from code_aster.Commands import *
[1,3]<stdout>:from code_aster import CA
[1,3]<stdout>:from code_aster.Utilities import petscInitialize
[1,3]<stdout>:
[1,3]<stdout>:CA.init()
[1,3]<stdout>:
[1,3]<stdout>:params = {}
[1,3]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,3]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,3]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,3]<stdout>:
[1,3]<stdout>:# General parameters
[1,3]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,3]<stdout>:rank = comm.Get_rank()
[1,3]<stdout>:size = comm.Get_size()
[1,3]<stdout>:
[1,3]<stdout>:nbHexa = 8 ** params["refinements"]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def memory_peak(mess=None):
[1,3]<stdout>:    """Return memory peak in MB"""
[1,3]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMgGen:
[1,3]<stdout>:    stats = {}
[1,3]<stdout>:
[1,3]<stdout>:    def __init__(self, what):
[1,3]<stdout>:        self._what = what
[1,3]<stdout>:
[1,3]<stdout>:    def __enter__(self):
[1,3]<stdout>:        self.start = datetime.now()
[1,3]<stdout>:
[1,3]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,3]<stdout>:        self.stop = datetime.now()
[1,3]<stdout>:        delta = self.stop - self.start
[1,3]<stdout>:        mem = memory_peak(self._what)
[1,3]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,3]<stdout>:    pass
[1,3]<stdout>:    # def __init__(self, what):
[1,3]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def write_stats(nume_ddl):
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB PROC")
[1,3]<stdout>:        print(size)
[1,3]<stdout>:        print()
[1,3]<stdout>:        print(
[1,3]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    for key, values in stats.items():
[1,3]<stdout>:        time = comm.gather(values[0], root=0)
[1,3]<stdout>:        mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(
[1,3]<stdout>:                key
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(mem))
[1,3]<stdout>:            )
[1,3]<stdout>:
[1,3]<stdout>:    mesh = nume_ddl.getMesh()
[1,3]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,3]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,3]<stdout>:
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,3]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,3]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,3]<stdout>:
[1,3]<stdout>:    def show(*args, **kwargs):
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(*args, **kwargs)
[1,3]<stdout>:
[1,3]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,3]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,3]<stdout>:    separ = "| :--------------- | ----------: |"
[1,3]<stdout>:    show(fmti.format("Refinement", refine))
[1,3]<stdout>:    show(separ)
[1,3]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,3]<stdout>:    for key, values in data.items():
[1,3]<stdout>:        times = comm.gather(values[0], root=0)
[1,3]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            show(fmtt.format(key, mean(times)))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,3]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,3]<stdout>:
[1,3]<stdout>:with ChronoCtxMg("Total"):
[1,3]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,3]<stdout>:        if params["parallel"] == "HPC":
[1,3]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:        else:
[1,3]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Model"):
[1,3]<stdout>:        model = AFFE_MODELE(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                PHENOMENE="MECANIQUE",
[1,3]<stdout>:                MODELISATION="3D",
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Material"):
[1,3]<stdout>:        steel = DEFI_MATERIAU(
[1,3]<stdout>:            ELAS=_F(
[1,3]<stdout>:                E=200000.0,
[1,3]<stdout>:                NU=0.3,
[1,3]<stdout>:            ),
[1,3]<stdout>:            ECRO_LINE=_F(
[1,3]<stdout>:    [1,3]<stdout>:            D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                SY=200.0,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        mater = AFFE_MATERIAU(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                MATER=steel,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,3]<stdout>:        block = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="LEFT",
[1,3]<stdout>:                    DX=0,
[1,3]<stdout>:                    DY=0.0,
[1,3]<stdout>:                    DZ=0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="RIGHT",
[1,3]<stdout>:                    DY=0.001,
[1,3]<stdout>:                    DZ=0.001,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,3]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            OPTION="RIGI_MECA",
[1,3]<stdout>:            CHAM_MATER=mater,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Numbering"):
[1,3]<stdout>:        dofNum = NUME_DDL(
[1,3]<stdout>:            MATR_RIGI=stiff_elem,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Assembly"):
[1,3]<stdout>:        stiffness = ASSE_MATRICE(
[1,3]<stdout>:            MATR_ELEM=stiff_elem,
[1,3]<stdout>:            NUME_DDL=dofNum,
[1,3]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,3]<stdout>:        rhs = CREA_CHAMP(
[1,3]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,3]<stdout>:            OPERATION="AFFE",
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                NOM_CMP=(
[1,3]<stdout>:                    "DX",
[1,3]<stdout>:                    "DY",
[1,3]<stdout>:                    "DZ",
[1,3]<stdout>:                ),
[1,3]<stdout>:                VALE=(
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,3]<stdout>:
[1,3]<stdout>:    if params["solver"] == "PETSC":
[1,3]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,3]<stdout>:    elif params["solver"] == "MUMPS":
[1,3]<stdout>:        solver = CA.MumpsSolver(
[1,3]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,3]<stdout>:            RENUM="PARMETIS",
[1,3]<stdout>:            ACCELERATION="FR+",
[1,3]<stdout>:            POSTTRAITEMENTS="MINI",
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Factorize"):
[1,3]<stdout>:        solver.factorize(stiffness)
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Solve"):
[1,3]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,3]<stdout>:
[1,3]<stdout>:# write_stats(dofNum)
[1,3]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,3]<stdout>:if params["parallel"] == "HPC":
[1,3]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,3]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,3]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,3]<stdout>:
[1,3]<stdout>:CA.close()
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command line #1:
[1,3]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution of code_aster
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.4
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command file #1 / 1
[1,4]<stdout>:
[1,4]<stdout>:Content of the file to execute:
[1,4]<stdout>:# coding=utf-8
[1,4]<stdout>:#!/usr/bin/python
[1,4]<stdout>:
[1,4]<stdout>:import os
[1,4]<stdout>:from statistics import mean
[1,4]<stdout>:from datetime import datetime
[1,4]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,4]<stdout>:
[1,4]<stdout>:from code_aster.Commands import *
[1,4]<stdout>:from code_aster import CA
[1,4]<stdout>:from code_aster.Utilities import petscInitialize
[1,4]<stdout>:
[1,4]<stdout>:CA.init()
[1,4]<stdout>:
[1,4]<stdout>:params = {}
[1,4]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,4]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,4]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,4]<stdout>:
[1,4]<stdout>:# General parameters
[1,4]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,4]<stdout>:rank = comm.Get_rank()
[1,4]<stdout>:size = comm.Get_size()
[1,4]<stdout>:
[1,4]<stdout>:nbHexa = 8 ** params["refinements"]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def memory_peak(mess=None):
[1,4]<stdout>:    """Return memory peak in MB"""
[1,4]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMgGen:
[1,4]<stdout>:    stats = {}
[1,4]<stdout>:
[1,4]<stdout>:    def __init__(self, what):
[1,4]<stdout>:        self._what = what
[1,4]<stdout>:
[1,4]<stdout>:    def __enter__(self):
[1,4]<stdout>:        self.start = datetime.now()
[1,4]<stdout>:
[1,4]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,4]<stdout>:        self.stop = datetime.now()
[1,4]<stdout>:        delta = self.stop - self.start
[1,4]<stdout>:        mem = memory_peak(self._what)
[1,4]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,4]<stdout>:    pass
[1,4]<stdout>:    # def __init__(self, what):
[1,4]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def write_stats(nume_ddl):
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB PROC")
[1,4]<stdout>:        print(size)
[1,4]<stdout>:        print()
[1,4]<stdout>:        print(
[1,4]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    for key, values in stats.items():
[1,4]<stdout>:        time = comm.gather(values[0], root=0)
[1,4]<stdout>:        mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(
[1,4]<stdout>:                key
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(mem))
[1,4]<stdout>:            )
[1,4]<stdout>:
[1,4]<stdout>:    mesh = nume_ddl.getMesh()
[1,4]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,4]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,4]<stdout>:
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,4]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,4]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,4]<stdout>:
[1,4]<stdout>:    def show(*args, **kwargs):
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(*args, **kwargs)
[1,4]<stdout>:
[1,4]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,4]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,4]<stdout>:    separ = "| :--------------- | ----------: |"
[1,4]<stdout>:    show(fmti.format("Refinement", refine))
[1,4]<stdout>:    show(separ)
[1,4]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,4]<stdout>:    for key, values in data.items():
[1,4]<stdout>:        times = comm.gather(values[0], root=0)
[1,4]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            show(fmtt.format(key, mean(times)))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,4]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,4]<stdout>:
[1,4]<stdout>:with ChronoCtxMg("Total"):
[1,4]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,4]<stdout>:        if params["parallel"] == "HPC":
[1,4]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:        else:
[1,4]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Model"):
[1,4]<stdout>:        model = AFFE_MODELE(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                PHENOMENE="MECANIQUE",
[1,4]<stdout>:                MODELISATION="3D",
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Material"):
[1,4]<stdout>:        steel = DEFI_MATERIAU(
[1,4]<stdout>:            ELAS=_F(
[1,4]<stdout>:                E=200000.0,
[1,4]<stdout>:                NU=0.3,
[1,4]<stdout>:            ),
[1,4]<stdout>:            ECRO_LINE=_F(
[1,4]<stdout>:   [1,4]<stdout>:             D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                SY=200.0,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        mater = AFFE_MATERIAU(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                MATER=steel,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,4]<stdout>:        block = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="LEFT",
[1,4]<stdout>:                    DX=0,
[1,4]<stdout>:                    DY=0.0,
[1,4]<stdout>:                    DZ=0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="RIGHT",
[1,4]<stdout>:                    DY=0.001,
[1,4]<stdout>:                    DZ=0.001,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,4]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            OPTION="RIGI_MECA",
[1,4]<stdout>:            CHAM_MATER=mater,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Numbering"):
[1,4]<stdout>:        dofNum = NUME_DDL(
[1,4]<stdout>:            MATR_RIGI=stiff_elem,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Assembly"):
[1,4]<stdout>:        stiffness = ASSE_MATRICE(
[1,4]<stdout>:            MATR_ELEM=stiff_elem,
[1,4]<stdout>:            NUME_DDL=dofNum,
[1,4]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,4]<stdout>:        rhs = CREA_CHAMP(
[1,4]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,4]<stdout>:            OPERATION="AFFE",
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                NOM_CMP=(
[1,4]<stdout>:                    "DX",
[1,4]<stdout>:                    "DY",
[1,4]<stdout>:                    "DZ",
[1,4]<stdout>:                ),
[1,4]<stdout>:                VALE=(
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,4]<stdout>:
[1,4]<stdout>:    if params["solver"] == "PETSC":
[1,4]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,4]<stdout>:    elif params["solver"] == "MUMPS":
[1,4]<stdout>:        solver = CA.MumpsSolver(
[1,4]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,4]<stdout>:            RENUM="PARMETIS",
[1,4]<stdout>:            ACCELERATION="FR+",
[1,4]<stdout>:            POSTTRAITEMENTS="MINI",
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Factorize"):
[1,4]<stdout>:        solver.factorize(stiffness)
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Solve"):
[1,4]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,4]<stdout>:
[1,4]<stdout>:# write_stats(dofNum)
[1,4]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,4]<stdout>:if params["parallel"] == "HPC":
[1,4]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,4]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,4]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,4]<stdout>:
[1,4]<stdout>:CA.close()
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command line #1:
[1,4]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution of code_aster
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.5
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command file #1 / 1
[1,5]<stdout>:
[1,5]<stdout>:Content of the file to execute:
[1,5]<stdout>:# coding=utf-8
[1,5]<stdout>:#!/usr/bin/python
[1,5]<stdout>:
[1,5]<stdout>:import os
[1,5]<stdout>:from statistics import mean
[1,5]<stdout>:from datetime import datetime
[1,5]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,5]<stdout>:
[1,5]<stdout>:from code_aster.Commands import *
[1,5]<stdout>:from code_aster import CA
[1,5]<stdout>:from code_aster.Utilities import petscInitialize
[1,5]<stdout>:
[1,5]<stdout>:CA.init()
[1,5]<stdout>:
[1,5]<stdout>:params = {}
[1,5]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,5]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,5]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,5]<stdout>:
[1,5]<stdout>:# General parameters
[1,5]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,5]<stdout>:rank = comm.Get_rank()
[1,5]<stdout>:size = comm.Get_size()
[1,5]<stdout>:
[1,5]<stdout>:nbHexa = 8 ** params["refinements"]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def memory_peak(mess=None):
[1,5]<stdout>:    """Return memory peak in MB"""
[1,5]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMgGen:
[1,5]<stdout>:    stats = {}
[1,5]<stdout>:
[1,5]<stdout>:    def __init__(self, what):
[1,5]<stdout>:        self._what = what
[1,5]<stdout>:
[1,5]<stdout>:    def __enter__(self):
[1,5]<stdout>:        self.start = datetime.now()
[1,5]<stdout>:
[1,5]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,5]<stdout>:        self.stop = datetime.now()
[1,5]<stdout>:        delta = self.stop - self.start
[1,5]<stdout>:        mem = memory_peak(self._what)
[1,5]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,5]<stdout>:    pass
[1,5]<stdout>:    # def __init__(self, what):
[1,5]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def write_stats(nume_ddl):
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB PROC")
[1,5]<stdout>:        print(size)
[1,5]<stdout>:        print()
[1,5]<stdout>:        print(
[1,5]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    for key, values in stats.items():
[1,5]<stdout>:        time = comm.gather(values[0], root=0)
[1,5]<stdout>:        mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(
[1,5]<stdout>:                key
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(mem))
[1,5]<stdout>:            )
[1,5]<stdout>:
[1,5]<stdout>:    mesh = nume_ddl.getMesh()
[1,5]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,5]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,5]<stdout>:
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,5]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,5]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,5]<stdout>:
[1,5]<stdout>:    def show(*args, **kwargs):
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(*args, **kwargs)
[1,5]<stdout>:
[1,5]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,5]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,5]<stdout>:    separ = "| :--------------- | ----------: |"
[1,5]<stdout>:    show(fmti.format("Refinement", refine))
[1,5]<stdout>:    show(separ)
[1,5]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,5]<stdout>:    for key, values in data.items():
[1,5]<stdout>:        times = comm.gather(values[0], root=0)
[1,5]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            show(fmtt.format(key, mean(times)))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,5]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,5]<stdout>:
[1,5]<stdout>:with ChronoCtxMg("Total"):
[1,5]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,5]<stdout>:        if params["parallel"] == "HPC":
[1,5]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:        else:
[1,5]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Model"):
[1,5]<stdout>:        model = AFFE_MODELE(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                PHENOMENE="MECANIQUE",
[1,5]<stdout>:                MODELISATION="3D",
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Material"):
[1,5]<stdout>:        steel = DEFI_MATERIAU(
[1,5]<stdout>:            ELAS=_F(
[1,5]<stdout>:                E=200000.0,
[1,5]<stdout>:                NU=0.3,
[1,5]<stdout>:            ),
[1,5]<stdout>:            ECRO_LINE=_F(
[1,5]<stdout>:   [1,5]<stdout>:             D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                SY=200.0,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        mater = AFFE_MATERIAU(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                MATER=steel,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,5]<stdout>:        block = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="LEFT",
[1,5]<stdout>:                    DX=0,
[1,5]<stdout>:                    DY=0.0,
[1,5]<stdout>:                    DZ=0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="RIGHT",
[1,5]<stdout>:                    DY=0.001,
[1,5]<stdout>:                    DZ=0.001,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,5]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            OPTION="RIGI_MECA",
[1,5]<stdout>:            CHAM_MATER=mater,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Numbering"):
[1,5]<stdout>:        dofNum = NUME_DDL(
[1,5]<stdout>:            MATR_RIGI=stiff_elem,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Assembly"):
[1,5]<stdout>:        stiffness = ASSE_MATRICE(
[1,5]<stdout>:            MATR_ELEM=stiff_elem,
[1,5]<stdout>:            NUME_DDL=dofNum,
[1,5]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,5]<stdout>:        rhs = CREA_CHAMP(
[1,5]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,5]<stdout>:            OPERATION="AFFE",
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                NOM_CMP=(
[1,5]<stdout>:                    "DX",
[1,5]<stdout>:                    "DY",
[1,5]<stdout>:                    "DZ",
[1,5]<stdout>:                ),
[1,5]<stdout>:                VALE=(
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,5]<stdout>:
[1,5]<stdout>:    if params["solver"] == "PETSC":
[1,5]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,5]<stdout>:    elif params["solver"] == "MUMPS":
[1,5]<stdout>:        solver = CA.MumpsSolver(
[1,5]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,5]<stdout>:            RENUM="PARMETIS",
[1,5]<stdout>:            ACCELERATION="FR+",
[1,5]<stdout>:            POSTTRAITEMENTS="MINI",
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Factorize"):
[1,5]<stdout>:        solver.factorize(stiffness)
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Solve"):
[1,5]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,5]<stdout>:
[1,5]<stdout>:# write_stats(dofNum)
[1,5]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,5]<stdout>:if params["parallel"] == "HPC":
[1,5]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,5]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,5]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,5]<stdout>:
[1,5]<stdout>:CA.close()
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command line #1:
[1,5]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution of code_aster
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.6
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command file #1 / 1
[1,6]<stdout>:
[1,6]<stdout>:Content of the file to execute:
[1,6]<stdout>:# coding=utf-8
[1,6]<stdout>:#!/usr/bin/python
[1,6]<stdout>:
[1,6]<stdout>:import os
[1,6]<stdout>:from statistics import mean
[1,6]<stdout>:from datetime import datetime
[1,6]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,6]<stdout>:
[1,6]<stdout>:from code_aster.Commands import *
[1,6]<stdout>:from code_aster import CA
[1,6]<stdout>:from code_aster.Utilities import petscInitialize
[1,6]<stdout>:
[1,6]<stdout>:CA.init()
[1,6]<stdout>:
[1,6]<stdout>:params = {}
[1,6]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,6]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,6]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,6]<stdout>:
[1,6]<stdout>:# General parameters
[1,6]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,6]<stdout>:rank = comm.Get_rank()
[1,6]<stdout>:size = comm.Get_size()
[1,6]<stdout>:
[1,6]<stdout>:nbHexa = 8 ** params["refinements"]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def memory_peak(mess=None):
[1,6]<stdout>:    """Return memory peak in MB"""
[1,6]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMgGen:
[1,6]<stdout>:    stats = {}
[1,6]<stdout>:
[1,6]<stdout>:    def __init__(self, what):
[1,6]<stdout>:        self._what = what
[1,6]<stdout>:
[1,6]<stdout>:    def __enter__(self):
[1,6]<stdout>:        self.start = datetime.now()
[1,6]<stdout>:
[1,6]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,6]<stdout>:        self.stop = datetime.now()
[1,6]<stdout>:        delta = self.stop - self.start
[1,6]<stdout>:        mem = memory_peak(self._what)
[1,6]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,6]<stdout>:    pass
[1,6]<stdout>:    # def __init__(self, what):
[1,6]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def write_stats(nume_ddl):
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB PROC")
[1,6]<stdout>:        print(size)
[1,6]<stdout>:        print()
[1,6]<stdout>:        print(
[1,6]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    for key, values in stats.items():
[1,6]<stdout>:        time = comm.gather(values[0], root=0)
[1,6]<stdout>:        mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(
[1,6]<stdout>:                key
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(mem))
[1,6]<stdout>:            )
[1,6]<stdout>:
[1,6]<stdout>:    mesh = nume_ddl.getMesh()
[1,6]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,6]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,6]<stdout>:
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,6]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,6]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,6]<stdout>:
[1,6]<stdout>:    def show(*args, **kwargs):
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(*args, **kwargs)
[1,6]<stdout>:
[1,6]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,6]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,6]<stdout>:    separ = "| :--------------- | ----------: |"
[1,6]<stdout>:    show(fmti.format("Refinement", refine))
[1,6]<stdout>:    show(separ)
[1,6]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,6]<stdout>:    for key, values in data.items():
[1,6]<stdout>:        times = comm.gather(values[0], root=0)
[1,6]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            show(fmtt.format(key, mean(times)))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,6]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,6]<stdout>:
[1,6]<stdout>:with ChronoCtxMg("Total"):
[1,6]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,6]<stdout>:        if params["parallel"] == "HPC":
[1,6]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:        else:
[1,6]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Model"):
[1,6]<stdout>:        model = AFFE_MODELE(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                PHENOMENE="MECANIQUE",
[1,6]<stdout>:                MODELISATION="3D",
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Material"):
[1,6]<stdout>:        steel = DEFI_MATERIAU(
[1,6]<stdout>:            ELAS=_F(
[1,6]<stdout>:                E=200000.0,
[1,6]<stdout>:                NU=0.3,
[1,6]<stdout>:            ),
[1,6]<stdout>:            ECRO_LINE=_F(
[1,6]<stdout>:   [1,6]<stdout>:             D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                SY=200.0,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        mater = AFFE_MATERIAU(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                MATER=steel,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,6]<stdout>:        block = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="LEFT",
[1,6]<stdout>:                    DX=0,
[1,6]<stdout>:                    DY=0.0,
[1,6]<stdout>:                    DZ=0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="RIGHT",
[1,6]<stdout>:                    DY=0.001,
[1,6]<stdout>:                    DZ=0.001,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,6]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            OPTION="RIGI_MECA",
[1,6]<stdout>:            CHAM_MATER=mater,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Numbering"):
[1,6]<stdout>:        dofNum = NUME_DDL(
[1,6]<stdout>:            MATR_RIGI=stiff_elem,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Assembly"):
[1,6]<stdout>:        stiffness = ASSE_MATRICE(
[1,6]<stdout>:            MATR_ELEM=stiff_elem,
[1,6]<stdout>:            NUME_DDL=dofNum,
[1,6]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,6]<stdout>:        rhs = CREA_CHAMP(
[1,6]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,6]<stdout>:            OPERATION="AFFE",
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                NOM_CMP=(
[1,6]<stdout>:                    "DX",
[1,6]<stdout>:                    "DY",
[1,6]<stdout>:                    "DZ",
[1,6]<stdout>:                ),
[1,6]<stdout>:                VALE=(
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,6]<stdout>:
[1,6]<stdout>:    if params["solver"] == "PETSC":
[1,6]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,6]<stdout>:    elif params["solver"] == "MUMPS":
[1,6]<stdout>:        solver = CA.MumpsSolver(
[1,6]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,6]<stdout>:            RENUM="PARMETIS",
[1,6]<stdout>:            ACCELERATION="FR+",
[1,6]<stdout>:            POSTTRAITEMENTS="MINI",
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Factorize"):
[1,6]<stdout>:        solver.factorize(stiffness)
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Solve"):
[1,6]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,6]<stdout>:
[1,6]<stdout>:# write_stats(dofNum)
[1,6]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,6]<stdout>:if params["parallel"] == "HPC":
[1,6]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,6]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,6]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,6]<stdout>:
[1,6]<stdout>:CA.close()
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command line #1:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution of code_aster
[1,6]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.7
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command file #1 / 1
[1,7]<stdout>:
[1,7]<stdout>:Content of the file to execute:
[1,7]<stdout>:# coding=utf-8
[1,7]<stdout>:#!/usr/bin/python
[1,7]<stdout>:
[1,7]<stdout>:import os
[1,7]<stdout>:from statistics import mean
[1,7]<stdout>:from datetime import datetime
[1,7]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,7]<stdout>:
[1,7]<stdout>:from code_aster.Commands import *
[1,7]<stdout>:from code_aster import CA
[1,7]<stdout>:from code_aster.Utilities import petscInitialize
[1,7]<stdout>:
[1,7]<stdout>:CA.init()
[1,7]<stdout>:
[1,7]<stdout>:params = {}
[1,7]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,7]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,7]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,7]<stdout>:
[1,7]<stdout>:# General parameters
[1,7]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,7]<stdout>:rank = comm.Get_rank()
[1,7]<stdout>:size = comm.Get_size()
[1,7]<stdout>:
[1,7]<stdout>:nbHexa = 8 ** params["refinements"]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def memory_peak(mess=None):
[1,7]<stdout>:    """Return memory peak in MB"""
[1,7]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMgGen:
[1,7]<stdout>:    stats = {}
[1,7]<stdout>:
[1,7]<stdout>:    def __init__(self, what):
[1,7]<stdout>:        self._what = what
[1,7]<stdout>:
[1,7]<stdout>:    def __enter__(self):
[1,7]<stdout>:        self.start = datetime.now()
[1,7]<stdout>:
[1,7]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,7]<stdout>:        self.stop = datetime.now()
[1,7]<stdout>:        delta = self.stop - self.start
[1,7]<stdout>:        mem = memory_peak(self._what)
[1,7]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,7]<stdout>:    pass
[1,7]<stdout>:    # def __init__(self, what):
[1,7]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def write_stats(nume_ddl):
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB PROC")
[1,7]<stdout>:        print(size)
[1,7]<stdout>:        print()
[1,7]<stdout>:        print(
[1,7]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    for key, values in stats.items():
[1,7]<stdout>:        time = comm.gather(values[0], root=0)
[1,7]<stdout>:        mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(
[1,7]<stdout>:                key
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(mem))
[1,7]<stdout>:            )
[1,7]<stdout>:
[1,7]<stdout>:    mesh = nume_ddl.getMesh()
[1,7]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,7]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,7]<stdout>:
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,7]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,7]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,7]<stdout>:
[1,7]<stdout>:    def show(*args, **kwargs):
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(*args, **kwargs)
[1,7]<stdout>:
[1,7]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,7]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,7]<stdout>:    separ = "| :--------------- | ----------: |"
[1,7]<stdout>:    show(fmti.format("Refinement", refine))
[1,7]<stdout>:    show(separ)
[1,7]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,7]<stdout>:    for key, values in data.items():
[1,7]<stdout>:        times = comm.gather(values[0], root=0)
[1,7]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            show(fmtt.format(key, mean(times)))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,7]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,7]<stdout>:
[1,7]<stdout>:with ChronoCtxMg("Total"):
[1,7]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,7]<stdout>:        if params["parallel"] == "HPC":
[1,7]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:        else:
[1,7]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Model"):
[1,7]<stdout>:        model = AFFE_MODELE(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                PHENOMENE="MECANIQUE",
[1,7]<stdout>:                MODELISATION="3D",
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Material"):
[1,7]<stdout>:        steel = DEFI_MATERIAU(
[1,7]<stdout>:            ELAS=_F(
[1,7]<stdout>:                E=200000.0,
[1,7]<stdout>:                NU=0.3,
[1,7]<stdout>:            ),
[1,7]<stdout>:            ECRO_LINE=_F(
[1,7]<stdout>:   [1,7]<stdout>:             D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                SY=200.0,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        mater = AFFE_MATERIAU(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                MATER=steel,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,7]<stdout>:        block = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="LEFT",
[1,7]<stdout>:                    DX=0,
[1,7]<stdout>:                    DY=0.0,
[1,7]<stdout>:                    DZ=0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="RIGHT",
[1,7]<stdout>:                    DY=0.001,
[1,7]<stdout>:                    DZ=0.001,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,7]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            OPTION="RIGI_MECA",
[1,7]<stdout>:            CHAM_MATER=mater,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Numbering"):
[1,7]<stdout>:        dofNum = NUME_DDL(
[1,7]<stdout>:            MATR_RIGI=stiff_elem,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Assembly"):
[1,7]<stdout>:        stiffness = ASSE_MATRICE(
[1,7]<stdout>:            MATR_ELEM=stiff_elem,
[1,7]<stdout>:            NUME_DDL=dofNum,
[1,7]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,7]<stdout>:        rhs = CREA_CHAMP(
[1,7]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,7]<stdout>:            OPERATION="AFFE",
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                NOM_CMP=(
[1,7]<stdout>:                    "DX",
[1,7]<stdout>:                    "DY",
[1,7]<stdout>:                    "DZ",
[1,7]<stdout>:                ),
[1,7]<stdout>:                VALE=(
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,7]<stdout>:
[1,7]<stdout>:    if params["solver"] == "PETSC":
[1,7]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,7]<stdout>:    elif params["solver"] == "MUMPS":
[1,7]<stdout>:        solver = CA.MumpsSolver(
[1,7]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,7]<stdout>:            RENUM="PARMETIS",
[1,7]<stdout>:            ACCELERATION="FR+",
[1,7]<stdout>:            POSTTRAITEMENTS="MINI",
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Factorize"):
[1,7]<stdout>:        solver.factorize(stiffness)
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Solve"):
[1,7]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,7]<stdout>:
[1,7]<stdout>:# write_stats(dofNum)
[1,7]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,7]<stdout>:if params["parallel"] == "HPC":
[1,7]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,7]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,7]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,7]<stdout>:
[1,7]<stdout>:CA.close()
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command line #1:
[1,7]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Execution of code_aster
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.8
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Command file #1 / 1
[1,8]<stdout>:
[1,8]<stdout>:Content of the file to execute:
[1,8]<stdout>:# coding=utf-8
[1,8]<stdout>:#!/usr/bin/python
[1,8]<stdout>:
[1,8]<stdout>:import os
[1,8]<stdout>:from statistics import mean
[1,8]<stdout>:from datetime import datetime
[1,8]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,8]<stdout>:
[1,8]<stdout>:from code_aster.Commands import *
[1,8]<stdout>:from code_aster import CA
[1,8]<stdout>:from code_aster.Utilities import petscInitialize
[1,8]<stdout>:
[1,8]<stdout>:CA.init()
[1,8]<stdout>:
[1,8]<stdout>:params = {}
[1,8]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,8]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,8]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,8]<stdout>:
[1,8]<stdout>:# General parameters
[1,8]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,8]<stdout>:rank = comm.Get_rank()
[1,8]<stdout>:size = comm.Get_size()
[1,8]<stdout>:
[1,8]<stdout>:nbHexa = 8 ** params["refinements"]
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def memory_peak(mess=None):
[1,8]<stdout>:    """Return memory peak in MB"""
[1,8]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:class ChronoCtxMgGen:
[1,8]<stdout>:    stats = {}
[1,8]<stdout>:
[1,8]<stdout>:    def __init__(self, what):
[1,8]<stdout>:        self._what = what
[1,8]<stdout>:
[1,8]<stdout>:    def __enter__(self):
[1,8]<stdout>:        self.start = datetime.now()
[1,8]<stdout>:
[1,8]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,8]<stdout>:        self.stop = datetime.now()
[1,8]<stdout>:        delta = self.stop - self.start
[1,8]<stdout>:        mem = memory_peak(self._what)
[1,8]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,8]<stdout>:    pass
[1,8]<stdout>:    # def __init__(self, what):
[1,8]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def write_stats(nume_ddl):
[1,8]<stdout>:    if rank == 0:
[1,8]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,8]<stdout>:        print()
[1,8]<stdout>:        print("NB PROC")
[1,8]<stdout>:        print(size)
[1,8]<stdout>:        print()
[1,8]<stdout>:        print(
[1,8]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    for key, values in stats.items():
[1,8]<stdout>:        time = comm.gather(values[0], root=0)
[1,8]<stdout>:        mem = comm.gather(values[1], root=0)
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            print(
[1,8]<stdout>:                key
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(min(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(max(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(mean(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(min(mem))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(max(mem))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(mean(mem))
[1,8]<stdout>:            )
[1,8]<stdout>:
[1,8]<stdout>:    mesh = nume_ddl.getMesh()
[1,8]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,8]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,8]<stdout>:
[1,8]<stdout>:    if rank == 0:
[1,8]<stdout>:        print()
[1,8]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,8]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,8]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,8]<stdout>:
[1,8]<stdout>:    def show(*args, **kwargs):
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            print(*args, **kwargs)
[1,8]<stdout>:
[1,8]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,8]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,8]<stdout>:    separ = "| :--------------- | ----------: |"
[1,8]<stdout>:    show(fmti.format("Refinement", refine))
[1,8]<stdout>:    show(separ)
[1,8]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,8]<stdout>:    for key, values in data.items():
[1,8]<stdout>:        times = comm.gather(values[0], root=0)
[1,8]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            show(fmtt.format(key, mean(times)))
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,8]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,8]<stdout>:
[1,8]<stdout>:with ChronoCtxMg("Total"):
[1,8]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,8]<stdout>:        if params["parallel"] == "HPC":
[1,8]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,8]<stdout>:        else:
[1,8]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Model"):
[1,8]<stdout>:        model = AFFE_MODELE(
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                PHENOMENE="MECANIQUE",
[1,8]<stdout>:                MODELISATION="3D",
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Material"):
[1,8]<stdout>:        steel = DEFI_MATERIAU(
[1,8]<stdout>:            ELAS=_F(
[1,8]<stdout>:                E=200000.0,
[1,8]<stdout>:                NU=0.3,
[1,8]<stdout>:            ),
[1,8]<stdout>:            ECRO_LINE=_F(
[1,8]<stdout>:   [1,8]<stdout>:             D_SIGM_EPSI=2000.0,
[1,8]<stdout>:                SY=200.0,
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        mater = AFFE_MATERIAU(
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                MATER=steel,
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,8]<stdout>:        block = AFFE_CHAR_CINE(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            MECA_IMPO=(
[1,8]<stdout>:                _F(
[1,8]<stdout>:                    GROUP_MA="LEFT",
[1,8]<stdout>:                    DX=0,
[1,8]<stdout>:                    DY=0.0,
[1,8]<stdout>:                    DZ=0.0,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            MECA_IMPO=(
[1,8]<stdout>:                _F(
[1,8]<stdout>:                    GROUP_MA="RIGHT",
[1,8]<stdout>:                    DY=0.001,
[1,8]<stdout>:                    DZ=0.001,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,8]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            OPTION="RIGI_MECA",
[1,8]<stdout>:            CHAM_MATER=mater,
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Numbering"):
[1,8]<stdout>:        dofNum = NUME_DDL(
[1,8]<stdout>:            MATR_RIGI=stiff_elem,
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Assembly"):
[1,8]<stdout>:        stiffness = ASSE_MATRICE(
[1,8]<stdout>:            MATR_ELEM=stiff_elem,
[1,8]<stdout>:            NUME_DDL=dofNum,
[1,8]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,8]<stdout>:        rhs = CREA_CHAMP(
[1,8]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,8]<stdout>:            OPERATION="AFFE",
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                NOM_CMP=(
[1,8]<stdout>:                    "DX",
[1,8]<stdout>:                    "DY",
[1,8]<stdout>:                    "DZ",
[1,8]<stdout>:                ),
[1,8]<stdout>:                VALE=(
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,8]<stdout>:
[1,8]<stdout>:    if params["solver"] == "PETSC":
[1,8]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,8]<stdout>:    elif params["solver"] == "MUMPS":
[1,8]<stdout>:        solver = CA.MumpsSolver(
[1,8]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,8]<stdout>:            RENUM="PARMETIS",
[1,8]<stdout>:            ACCELERATION="FR+",
[1,8]<stdout>:            POSTTRAITEMENTS="MINI",
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Factorize"):
[1,8]<stdout>:        solver.factorize(stiffness)
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Solve"):
[1,8]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,8]<stdout>:
[1,8]<stdout>:# write_stats(dofNum)
[1,8]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,8]<stdout>:if params["parallel"] == "HPC":
[1,8]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,8]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,8]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,8]<stdout>:
[1,8]<stdout>:CA.close()
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Command line #1:
[1,8]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Execution of code_aster
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.9
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Command file #1 / 1
[1,9]<stdout>:
[1,9]<stdout>:Content of the file to execute:
[1,9]<stdout>:# coding=utf-8
[1,9]<stdout>:#!/usr/bin/python
[1,9]<stdout>:
[1,9]<stdout>:import os
[1,9]<stdout>:from statistics import mean
[1,9]<stdout>:from datetime import datetime
[1,9]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,9]<stdout>:
[1,9]<stdout>:from code_aster.Commands import *
[1,9]<stdout>:from code_aster import CA
[1,9]<stdout>:from code_aster.Utilities import petscInitialize
[1,9]<stdout>:
[1,9]<stdout>:CA.init()
[1,9]<stdout>:
[1,9]<stdout>:params = {}
[1,9]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,9]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,9]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,9]<stdout>:
[1,9]<stdout>:# General parameters
[1,9]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,9]<stdout>:rank = comm.Get_rank()
[1,9]<stdout>:size = comm.Get_size()
[1,9]<stdout>:
[1,9]<stdout>:nbHexa = 8 ** params["refinements"]
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def memory_peak(mess=None):
[1,9]<stdout>:    """Return memory peak in MB"""
[1,9]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:class ChronoCtxMgGen:
[1,9]<stdout>:    stats = {}
[1,9]<stdout>:
[1,9]<stdout>:    def __init__(self, what):
[1,9]<stdout>:        self._what = what
[1,9]<stdout>:
[1,9]<stdout>:    def __enter__(self):
[1,9]<stdout>:        self.start = datetime.now()
[1,9]<stdout>:
[1,9]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,9]<stdout>:        self.stop = datetime.now()
[1,9]<stdout>:        delta = self.stop - self.start
[1,9]<stdout>:        mem = memory_peak(self._what)
[1,9]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,9]<stdout>:    pass
[1,9]<stdout>:    # def __init__(self, what):
[1,9]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def write_stats(nume_ddl):
[1,9]<stdout>:    if rank == 0:
[1,9]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,9]<stdout>:        print()
[1,9]<stdout>:        print("NB PROC")
[1,9]<stdout>:        print(size)
[1,9]<stdout>:        print()
[1,9]<stdout>:        print(
[1,9]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    for key, values in stats.items():
[1,9]<stdout>:        time = comm.gather(values[0], root=0)
[1,9]<stdout>:        mem = comm.gather(values[1], root=0)
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            print(
[1,9]<stdout>:                key
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(min(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(max(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(mean(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(min(mem))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(max(mem))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(mean(mem))
[1,9]<stdout>:            )
[1,9]<stdout>:
[1,9]<stdout>:    mesh = nume_ddl.getMesh()
[1,9]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,9]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,9]<stdout>:
[1,9]<stdout>:    if rank == 0:
[1,9]<stdout>:        print()
[1,9]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,9]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,9]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,9]<stdout>:
[1,9]<stdout>:    def show(*args, **kwargs):
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            print(*args, **kwargs)
[1,9]<stdout>:
[1,9]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,9]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,9]<stdout>:    separ = "| :--------------- | ----------: |"
[1,9]<stdout>:    show(fmti.format("Refinement", refine))
[1,9]<stdout>:    show(separ)
[1,9]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,9]<stdout>:    for key, values in data.items():
[1,9]<stdout>:        times = comm.gather(values[0], root=0)
[1,9]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            show(fmtt.format(key, mean(times)))
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,9]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,9]<stdout>:
[1,9]<stdout>:with ChronoCtxMg("Total"):
[1,9]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,9]<stdout>:        if params["parallel"] == "HPC":
[1,9]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,9]<stdout>:        else:
[1,9]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Model"):
[1,9]<stdout>:        model = AFFE_MODELE(
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                PHENOMENE="MECANIQUE",
[1,9]<stdout>:                MODELISATION="3D",
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Material"):
[1,9]<stdout>:        steel = DEFI_MATERIAU(
[1,9]<stdout>:            ELAS=_F(
[1,9]<stdout>:                E=200000.0,
[1,9]<stdout>:                NU=0.3,
[1,9]<stdout>:            ),
[1,9]<stdout>:            ECRO_LINE=_F(
[1,9]<stdout>:    [1,9]<stdout>:            D_SIGM_EPSI=2000.0,
[1,9]<stdout>:                SY=200.0,
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        mater = AFFE_MATERIAU(
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                MATER=steel,
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,9]<stdout>:        block = AFFE_CHAR_CINE(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            MECA_IMPO=(
[1,9]<stdout>:                _F(
[1,9]<stdout>:                    GROUP_MA="LEFT",
[1,9]<stdout>:                    DX=0,
[1,9]<stdout>:                    DY=0.0,
[1,9]<stdout>:                    DZ=0.0,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            MECA_IMPO=(
[1,9]<stdout>:                _F(
[1,9]<stdout>:                    GROUP_MA="RIGHT",
[1,9]<stdout>:                    DY=0.001,
[1,9]<stdout>:                    DZ=0.001,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,9]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            OPTION="RIGI_MECA",
[1,9]<stdout>:            CHAM_MATER=mater,
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Numbering"):
[1,9]<stdout>:        dofNum = NUME_DDL(
[1,9]<stdout>:            MATR_RIGI=stiff_elem,
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Assembly"):
[1,9]<stdout>:        stiffness = ASSE_MATRICE(
[1,9]<stdout>:            MATR_ELEM=stiff_elem,
[1,9]<stdout>:            NUME_DDL=dofNum,
[1,9]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,9]<stdout>:        rhs = CREA_CHAMP(
[1,9]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,9]<stdout>:            OPERATION="AFFE",
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                NOM_CMP=(
[1,9]<stdout>:                    "DX",
[1,9]<stdout>:                    "DY",
[1,9]<stdout>:                    "DZ",
[1,9]<stdout>:                ),
[1,9]<stdout>:                VALE=(
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,9]<stdout>:
[1,9]<stdout>:    if params["solver"] == "PETSC":
[1,9]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,9]<stdout>:    elif params["solver"] == "MUMPS":
[1,9]<stdout>:        solver = CA.MumpsSolver(
[1,9]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,9]<stdout>:            RENUM="PARMETIS",
[1,9]<stdout>:            ACCELERATION="FR+",
[1,9]<stdout>:            POSTTRAITEMENTS="MINI",
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Factorize"):
[1,9]<stdout>:        solver.factorize(stiffness)
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Solve"):
[1,9]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,9]<stdout>:
[1,9]<stdout>:# write_stats(dofNum)
[1,9]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,9]<stdout>:if params["parallel"] == "HPC":
[1,9]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,9]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,9]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,9]<stdout>:
[1,9]<stdout>:CA.close()
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Command line #1:
[1,9]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Execution of code_aster
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.10
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Command file #1 / 1
[1,10]<stdout>:
[1,10]<stdout>:Content of the file to execute:
[1,10]<stdout>:# coding=utf-8
[1,10]<stdout>:#!/usr/bin/python
[1,10]<stdout>:
[1,10]<stdout>:import os
[1,10]<stdout>:from statistics import mean
[1,10]<stdout>:from datetime import datetime
[1,10]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,10]<stdout>:
[1,10]<stdout>:from code_aster.Commands import *
[1,10]<stdout>:from code_aster import CA
[1,10]<stdout>:from code_aster.Utilities import petscInitialize
[1,10]<stdout>:
[1,10]<stdout>:CA.init()
[1,10]<stdout>:
[1,10]<stdout>:params = {}
[1,10]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,10]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,10]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,10]<stdout>:
[1,10]<stdout>:# General parameters
[1,10]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,10]<stdout>:rank = comm.Get_rank()
[1,10]<stdout>:size = comm.Get_size()
[1,10]<stdout>:
[1,10]<stdout>:nbHexa = 8 ** params["refinements"]
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def memory_peak(mess=None):
[1,10]<stdout>:    """Return memory peak in MB"""
[1,10]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:class ChronoCtxMgGen:
[1,10]<stdout>:    stats = {}
[1,10]<stdout>:
[1,10]<stdout>:    def __init__(self, what):
[1,10]<stdout>:        self._what = what
[1,10]<stdout>:
[1,10]<stdout>:    def __enter__(self):
[1,10]<stdout>:        self.start = datetime.now()
[1,10]<stdout>:
[1,10]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,10]<stdout>:        self.stop = datetime.now()
[1,10]<stdout>:        delta = self.stop - self.start
[1,10]<stdout>:        mem = memory_peak(self._what)
[1,10]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,10]<stdout>:    pass
[1,10]<stdout>:    # def __init__(self, what):
[1,10]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def write_stats(nume_ddl):
[1,10]<stdout>:    if rank == 0:
[1,10]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,10]<stdout>:        print()
[1,10]<stdout>:        print("NB PROC")
[1,10]<stdout>:        print(size)
[1,10]<stdout>:        print()
[1,10]<stdout>:        print(
[1,10]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    for key, values in stats.items():
[1,10]<stdout>:        time = comm.gather(values[0], root=0)
[1,10]<stdout>:        mem = comm.gather(values[1], root=0)
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            print(
[1,10]<stdout>:                key
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(min(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(max(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(mean(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(min(mem))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(max(mem))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(mean(mem))
[1,10]<stdout>:            )
[1,10]<stdout>:
[1,10]<stdout>:    mesh = nume_ddl.getMesh()
[1,10]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,10]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,10]<stdout>:
[1,10]<stdout>:    if rank == 0:
[1,10]<stdout>:        print()
[1,10]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,10]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,10]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,10]<stdout>:
[1,10]<stdout>:    def show(*args, **kwargs):
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            print(*args, **kwargs)
[1,10]<stdout>:
[1,10]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,10]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,10]<stdout>:    separ = "| :--------------- | ----------: |"
[1,10]<stdout>:    show(fmti.format("Refinement", refine))
[1,10]<stdout>:    show(separ)
[1,10]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,10]<stdout>:    for key, values in data.items():
[1,10]<stdout>:        times = comm.gather(values[0], root=0)
[1,10]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            show(fmtt.format(key, mean(times)))
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,10]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,10]<stdout>:
[1,10]<stdout>:with ChronoCtxMg("Total"):
[1,10]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,10]<stdout>:        if params["parallel"] == "HPC":
[1,10]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,10]<stdout>:        else:
[1,10]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Model"):
[1,10]<stdout>:        model = AFFE_MODELE(
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                PHENOMENE="MECANIQUE",
[1,10]<stdout>:                MODELISATION="3D",
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Material"):
[1,10]<stdout>:        steel = DEFI_MATERIAU(
[1,10]<stdout>:            ELAS=_F(
[1,10]<stdout>:                E=200000.0,
[1,10]<stdout>:                NU=0.3,
[1,10]<stdout>:            ),
[1,10]<stdout>:            ECRO_LINE=_F(
[1,10]<stdout>:    [1,10]<stdout>:            D_SIGM_EPSI=2000.0,
[1,10]<stdout>:                SY=200.0,
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        mater = AFFE_MATERIAU(
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                MATER=steel,
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,10]<stdout>:        block = AFFE_CHAR_CINE(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            MECA_IMPO=(
[1,10]<stdout>:                _F(
[1,10]<stdout>:                    GROUP_MA="LEFT",
[1,10]<stdout>:                    DX=0,
[1,10]<stdout>:                    DY=0.0,
[1,10]<stdout>:                    DZ=0.0,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            MECA_IMPO=(
[1,10]<stdout>:                _F(
[1,10]<stdout>:                    GROUP_MA="RIGHT",
[1,10]<stdout>:                    DY=0.001,
[1,10]<stdout>:                    DZ=0.001,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,10]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            OPTION="RIGI_MECA",
[1,10]<stdout>:            CHAM_MATER=mater,
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Numbering"):
[1,10]<stdout>:        dofNum = NUME_DDL(
[1,10]<stdout>:            MATR_RIGI=stiff_elem,
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Assembly"):
[1,10]<stdout>:        stiffness = ASSE_MATRICE(
[1,10]<stdout>:            MATR_ELEM=stiff_elem,
[1,10]<stdout>:            NUME_DDL=dofNum,
[1,10]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,10]<stdout>:        rhs = CREA_CHAMP(
[1,10]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,10]<stdout>:            OPERATION="AFFE",
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                NOM_CMP=(
[1,10]<stdout>:                    "DX",
[1,10]<stdout>:                    "DY",
[1,10]<stdout>:                    "DZ",
[1,10]<stdout>:                ),
[1,10]<stdout>:                VALE=(
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,10]<stdout>:
[1,10]<stdout>:    if params["solver"] == "PETSC":
[1,10]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,10]<stdout>:    elif params["solver"] == "MUMPS":
[1,10]<stdout>:        solver = CA.MumpsSolver(
[1,10]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,10]<stdout>:            RENUM="PARMETIS",
[1,10]<stdout>:            ACCELERATION="FR+",
[1,10]<stdout>:            POSTTRAITEMENTS="MINI",
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Factorize"):
[1,10]<stdout>:        solver.factorize(stiffness)
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Solve"):
[1,10]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,10]<stdout>:
[1,10]<stdout>:# write_stats(dofNum)
[1,10]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,10]<stdout>:if params["parallel"] == "HPC":
[1,10]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,10]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,10]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,10]<stdout>:
[1,10]<stdout>:CA.close()
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Command line #1:
[1,10]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Execution of code_aster
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.11
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Command file #1 / 1
[1,11]<stdout>:
[1,11]<stdout>:Content of the file to execute:
[1,11]<stdout>:# coding=utf-8
[1,11]<stdout>:#!/usr/bin/python
[1,11]<stdout>:
[1,11]<stdout>:import os
[1,11]<stdout>:from statistics import mean
[1,11]<stdout>:from datetime import datetime
[1,11]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,11]<stdout>:
[1,11]<stdout>:from code_aster.Commands import *
[1,11]<stdout>:from code_aster import CA
[1,11]<stdout>:from code_aster.Utilities import petscInitialize
[1,11]<stdout>:
[1,11]<stdout>:CA.init()
[1,11]<stdout>:
[1,11]<stdout>:params = {}
[1,11]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,11]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,11]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,11]<stdout>:
[1,11]<stdout>:# General parameters
[1,11]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,11]<stdout>:rank = comm.Get_rank()
[1,11]<stdout>:size = comm.Get_size()
[1,11]<stdout>:
[1,11]<stdout>:nbHexa = 8 ** params["refinements"]
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def memory_peak(mess=None):
[1,11]<stdout>:    """Return memory peak in MB"""
[1,11]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:class ChronoCtxMgGen:
[1,11]<stdout>:    stats = {}
[1,11]<stdout>:
[1,11]<stdout>:    def __init__(self, what):
[1,11]<stdout>:        self._what = what
[1,11]<stdout>:
[1,11]<stdout>:    def __enter__(self):
[1,11]<stdout>:        self.start = datetime.now()
[1,11]<stdout>:
[1,11]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,11]<stdout>:        self.stop = datetime.now()
[1,11]<stdout>:        delta = self.stop - self.start
[1,11]<stdout>:        mem = memory_peak(self._what)
[1,11]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,11]<stdout>:    pass
[1,11]<stdout>:    # def __init__(self, what):
[1,11]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def write_stats(nume_ddl):
[1,11]<stdout>:    if rank == 0:
[1,11]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,11]<stdout>:        print()
[1,11]<stdout>:        print("NB PROC")
[1,11]<stdout>:        print(size)
[1,11]<stdout>:        print()
[1,11]<stdout>:        print(
[1,11]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    for key, values in stats.items():
[1,11]<stdout>:        time = comm.gather(values[0], root=0)
[1,11]<stdout>:        mem = comm.gather(values[1], root=0)
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            print(
[1,11]<stdout>:                key
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(min(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(max(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(mean(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(min(mem))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(max(mem))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(mean(mem))
[1,11]<stdout>:            )
[1,11]<stdout>:
[1,11]<stdout>:    mesh = nume_ddl.getMesh()
[1,11]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,11]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,11]<stdout>:
[1,11]<stdout>:    if rank == 0:
[1,11]<stdout>:        print()
[1,11]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,11]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,11]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,11]<stdout>:
[1,11]<stdout>:    def show(*args, **kwargs):
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            print(*args, **kwargs)
[1,11]<stdout>:
[1,11]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,11]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,11]<stdout>:    separ = "| :--------------- | ----------: |"
[1,11]<stdout>:    show(fmti.format("Refinement", refine))
[1,11]<stdout>:    show(separ)
[1,11]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,11]<stdout>:    for key, values in data.items():
[1,11]<stdout>:        times = comm.gather(values[0], root=0)
[1,11]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            show(fmtt.format(key, mean(times)))
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,11]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,11]<stdout>:
[1,11]<stdout>:with ChronoCtxMg("Total"):
[1,11]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,11]<stdout>:        if params["parallel"] == "HPC":
[1,11]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,11]<stdout>:        else:
[1,11]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Model"):
[1,11]<stdout>:        model = AFFE_MODELE(
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                PHENOMENE="MECANIQUE",
[1,11]<stdout>:                MODELISATION="3D",
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Material"):
[1,11]<stdout>:        steel = DEFI_MATERIAU(
[1,11]<stdout>:            ELAS=_F(
[1,11]<stdout>:                E=200000.0,
[1,11]<stdout>:                NU=0.3,
[1,11]<stdout>:            ),
[1,11]<stdout>:            ECRO_LINE=_F(
[1,11]<stdout>:   [1,11]<stdout>:             D_SIGM_EPSI=2000.0,
[1,11]<stdout>:                SY=200.0,
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        mater = AFFE_MATERIAU(
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                MATER=steel,
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,11]<stdout>:        block = AFFE_CHAR_CINE(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            MECA_IMPO=(
[1,11]<stdout>:                _F(
[1,11]<stdout>:                    GROUP_MA="LEFT",
[1,11]<stdout>:                    DX=0,
[1,11]<stdout>:                    DY=0.0,
[1,11]<stdout>:                    DZ=0.0,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            MECA_IMPO=(
[1,11]<stdout>:                _F(
[1,11]<stdout>:                    GROUP_MA="RIGHT",
[1,11]<stdout>:                    DY=0.001,
[1,11]<stdout>:                    DZ=0.001,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,11]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            OPTION="RIGI_MECA",
[1,11]<stdout>:            CHAM_MATER=mater,
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Numbering"):
[1,11]<stdout>:        dofNum = NUME_DDL(
[1,11]<stdout>:            MATR_RIGI=stiff_elem,
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Assembly"):
[1,11]<stdout>:        stiffness = ASSE_MATRICE(
[1,11]<stdout>:            MATR_ELEM=stiff_elem,
[1,11]<stdout>:            NUME_DDL=dofNum,
[1,11]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,11]<stdout>:        rhs = CREA_CHAMP(
[1,11]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,11]<stdout>:            OPERATION="AFFE",
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                NOM_CMP=(
[1,11]<stdout>:                    "DX",
[1,11]<stdout>:                    "DY",
[1,11]<stdout>:                    "DZ",
[1,11]<stdout>:                ),
[1,11]<stdout>:                VALE=(
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,11]<stdout>:
[1,11]<stdout>:    if params["solver"] == "PETSC":
[1,11]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,11]<stdout>:    elif params["solver"] == "MUMPS":
[1,11]<stdout>:        solver = CA.MumpsSolver(
[1,11]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,11]<stdout>:            RENUM="PARMETIS",
[1,11]<stdout>:            ACCELERATION="FR+",
[1,11]<stdout>:            POSTTRAITEMENTS="MINI",
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Factorize"):
[1,11]<stdout>:        solver.factorize(stiffness)
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Solve"):
[1,11]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,11]<stdout>:
[1,11]<stdout>:# write_stats(dofNum)
[1,11]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,11]<stdout>:if params["parallel"] == "HPC":
[1,11]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,11]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,11]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,11]<stdout>:
[1,11]<stdout>:CA.close()
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Command line #1:
[1,11]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Execution of code_aster
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.12
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Command file #1 / 1
[1,12]<stdout>:
[1,12]<stdout>:Content of the file to execute:
[1,12]<stdout>:# coding=utf-8
[1,12]<stdout>:#!/usr/bin/python
[1,12]<stdout>:
[1,12]<stdout>:import os
[1,12]<stdout>:from statistics import mean
[1,12]<stdout>:from datetime import datetime
[1,12]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,12]<stdout>:
[1,12]<stdout>:from code_aster.Commands import *
[1,12]<stdout>:from code_aster import CA
[1,12]<stdout>:from code_aster.Utilities import petscInitialize
[1,12]<stdout>:
[1,12]<stdout>:CA.init()
[1,12]<stdout>:
[1,12]<stdout>:params = {}
[1,12]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,12]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,12]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,12]<stdout>:
[1,12]<stdout>:# General parameters
[1,12]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,12]<stdout>:rank = comm.Get_rank()
[1,12]<stdout>:size = comm.Get_size()
[1,12]<stdout>:
[1,12]<stdout>:nbHexa = 8 ** params["refinements"]
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def memory_peak(mess=None):
[1,12]<stdout>:    """Return memory peak in MB"""
[1,12]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:class ChronoCtxMgGen:
[1,12]<stdout>:    stats = {}
[1,12]<stdout>:
[1,12]<stdout>:    def __init__(self, what):
[1,12]<stdout>:        self._what = what
[1,12]<stdout>:
[1,12]<stdout>:    def __enter__(self):
[1,12]<stdout>:        self.start = datetime.now()
[1,12]<stdout>:
[1,12]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,12]<stdout>:        self.stop = datetime.now()
[1,12]<stdout>:        delta = self.stop - self.start
[1,12]<stdout>:        mem = memory_peak(self._what)
[1,12]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,12]<stdout>:    pass
[1,12]<stdout>:    # def __init__(self, what):
[1,12]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def write_stats(nume_ddl):
[1,12]<stdout>:    if rank == 0:
[1,12]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,12]<stdout>:        print()
[1,12]<stdout>:        print("NB PROC")
[1,12]<stdout>:        print(size)
[1,12]<stdout>:        print()
[1,12]<stdout>:        print(
[1,12]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    for key, values in stats.items():
[1,12]<stdout>:        time = comm.gather(values[0], root=0)
[1,12]<stdout>:        mem = comm.gather(values[1], root=0)
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            print(
[1,12]<stdout>:                key
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(min(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(max(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(mean(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(min(mem))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(max(mem))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(mean(mem))
[1,12]<stdout>:            )
[1,12]<stdout>:
[1,12]<stdout>:    mesh = nume_ddl.getMesh()
[1,12]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,12]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,12]<stdout>:
[1,12]<stdout>:    if rank == 0:
[1,12]<stdout>:        print()
[1,12]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,12]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,12]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,12]<stdout>:
[1,12]<stdout>:    def show(*args, **kwargs):
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            print(*args, **kwargs)
[1,12]<stdout>:
[1,12]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,12]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,12]<stdout>:    separ = "| :--------------- | ----------: |"
[1,12]<stdout>:    show(fmti.format("Refinement", refine))
[1,12]<stdout>:    show(separ)
[1,12]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,12]<stdout>:    for key, values in data.items():
[1,12]<stdout>:        times = comm.gather(values[0], root=0)
[1,12]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            show(fmtt.format(key, mean(times)))
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,12]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,12]<stdout>:
[1,12]<stdout>:with ChronoCtxMg("Total"):
[1,12]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,12]<stdout>:        if params["parallel"] == "HPC":
[1,12]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,12]<stdout>:        else:
[1,12]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Model"):
[1,12]<stdout>:        model = AFFE_MODELE(
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                PHENOMENE="MECANIQUE",
[1,12]<stdout>:                MODELISATION="3D",
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Material"):
[1,12]<stdout>:        steel = DEFI_MATERIAU(
[1,12]<stdout>:            ELAS=_F(
[1,12]<stdout>:                E=200000.0,
[1,12]<stdout>:                NU=0.3,
[1,12]<stdout>:            ),
[1,12]<stdout>:            ECRO_LINE=_F(
[1,12]<stdout>:   [1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Execution of code_aster
[1,12]<stdout>:             D_SIGM_EPSI=2000.0,
[1,12]<stdout>:                SY=200.0,
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        mater = AFFE_MATERIAU(
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                MATER=steel,
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,12]<stdout>:        block = AFFE_CHAR_CINE(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            MECA_IMPO=(
[1,12]<stdout>:                _F(
[1,12]<stdout>:                    GROUP_MA="LEFT",
[1,12]<stdout>:                    DX=0,
[1,12]<stdout>:                    DY=0.0,
[1,12]<stdout>:                    DZ=0.0,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            MECA_IMPO=(
[1,12]<stdout>:                _F(
[1,12]<stdout>:                    GROUP_MA="RIGHT",
[1,12]<stdout>:                    DY=0.001,
[1,12]<stdout>:                    DZ=0.001,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,12]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            OPTION="RIGI_MECA",
[1,12]<stdout>:            CHAM_MATER=mater,
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Numbering"):
[1,12]<stdout>:        dofNum = NUME_DDL(
[1,12]<stdout>:            MATR_RIGI=stiff_elem,
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Assembly"):
[1,12]<stdout>:        stiffness = ASSE_MATRICE(
[1,12]<stdout>:            MATR_ELEM=stiff_elem,
[1,12]<stdout>:            NUME_DDL=dofNum,
[1,12]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,12]<stdout>:        rhs = CREA_CHAMP(
[1,12]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,12]<stdout>:            OPERATION="AFFE",
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                NOM_CMP=(
[1,12]<stdout>:                    "DX",
[1,12]<stdout>:                    "DY",
[1,12]<stdout>:                    "DZ",
[1,12]<stdout>:                ),
[1,12]<stdout>:                VALE=(
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,12]<stdout>:
[1,12]<stdout>:    if params["solver"] == "PETSC":
[1,12]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,12]<stdout>:    elif params["solver"] == "MUMPS":
[1,12]<stdout>:        solver = CA.MumpsSolver(
[1,12]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,12]<stdout>:            RENUM="PARMETIS",
[1,12]<stdout>:            ACCELERATION="FR+",
[1,12]<stdout>:            POSTTRAITEMENTS="MINI",
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Factorize"):
[1,12]<stdout>:        solver.factorize(stiffness)
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Solve"):
[1,12]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,12]<stdout>:
[1,12]<stdout>:# write_stats(dofNum)
[1,12]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,12]<stdout>:if params["parallel"] == "HPC":
[1,12]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,12]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,12]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,12]<stdout>:
[1,12]<stdout>:CA.close()
[1,12]<stdout>:
[1,12]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.13
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Command line #1:
[1,12]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Command file #1 / 1
[1,13]<stdout>:
[1,13]<stdout>:Content of the file to execute:
[1,13]<stdout>:# coding=utf-8
[1,13]<stdout>:#!/usr/bin/python
[1,13]<stdout>:
[1,13]<stdout>:import os
[1,13]<stdout>:from statistics import mean
[1,13]<stdout>:from datetime import datetime
[1,13]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,13]<stdout>:
[1,13]<stdout>:from code_aster.Commands import *
[1,13]<stdout>:from code_aster import CA
[1,13]<stdout>:from code_aster.Utilities import petscInitialize
[1,13]<stdout>:
[1,13]<stdout>:CA.init()
[1,13]<stdout>:
[1,13]<stdout>:params = {}
[1,13]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,13]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,13]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,13]<stdout>:
[1,13]<stdout>:# General parameters
[1,13]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,13]<stdout>:rank = comm.Get_rank()
[1,13]<stdout>:size = comm.Get_size()
[1,13]<stdout>:
[1,13]<stdout>:nbHexa = 8 ** params["refinements"]
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def memory_peak(mess=None):
[1,13]<stdout>:    """Return memory peak in MB"""
[1,13]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:class ChronoCtxMgGen:
[1,13]<stdout>:    stats = {}
[1,13]<stdout>:
[1,13]<stdout>:    def __init__(self, what):
[1,13]<stdout>:        self._what = what
[1,13]<stdout>:
[1,13]<stdout>:    def __enter__(self):
[1,13]<stdout>:        self.start = datetime.now()
[1,13]<stdout>:
[1,13]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,13]<stdout>:        self.stop = datetime.now()
[1,13]<stdout>:        delta = self.stop - self.start
[1,13]<stdout>:        mem = memory_peak(self._what)
[1,13]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,13]<stdout>:    pass
[1,13]<stdout>:    # def __init__(self, what):
[1,13]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def write_stats(nume_ddl):
[1,13]<stdout>:    if rank == 0:
[1,13]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,13]<stdout>:        print()
[1,13]<stdout>:        print("NB PROC")
[1,13]<stdout>:        print(size)
[1,13]<stdout>:        print()
[1,13]<stdout>:        print(
[1,13]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    for key, values in stats.items():
[1,13]<stdout>:        time = comm.gather(values[0], root=0)
[1,13]<stdout>:        mem = comm.gather(values[1], root=0)
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            print(
[1,13]<stdout>:                key
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(min(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(max(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(mean(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(min(mem))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(max(mem))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(mean(mem))
[1,13]<stdout>:            )
[1,13]<stdout>:
[1,13]<stdout>:    mesh = nume_ddl.getMesh()
[1,13]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,13]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,13]<stdout>:
[1,13]<stdout>:    if rank == 0:
[1,13]<stdout>:        print()
[1,13]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,13]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,13]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,13]<stdout>:
[1,13]<stdout>:    def show(*args, **kwargs):
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            print(*args, **kwargs)
[1,13]<stdout>:
[1,13]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,13]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,13]<stdout>:    separ = "| :--------------- | ----------: |"
[1,13]<stdout>:    show(fmti.format("Refinement", refine))
[1,13]<stdout>:    show(separ)
[1,13]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,13]<stdout>:    for key, values in data.items():
[1,13]<stdout>:        times = comm.gather(values[0], root=0)
[1,13]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            show(fmtt.format(key, mean(times)))
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,13]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,13]<stdout>:
[1,13]<stdout>:with ChronoCtxMg("Total"):
[1,13]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,13]<stdout>:        if params["parallel"] == "HPC":
[1,13]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,13]<stdout>:        else:
[1,13]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Model"):
[1,13]<stdout>:        model = AFFE_MODELE(
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                PHENOMENE="MECANIQUE",
[1,13]<stdout>:                MODELISATION="3D",
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Material"):
[1,13]<stdout>:        steel = DEFI_MATERIAU(
[1,13]<stdout>:            ELAS=_F(
[1,13]<stdout>:                E=200000.0,
[1,13]<stdout>:                NU=0.3,
[1,13]<stdout>:            ),
[1,13]<stdout>:            ECRO_LINE=_F(
[1,13]<stdout>:    [1,13]<stdout>:            D_SIGM_EPSI=2000.0,
[1,13]<stdout>:                SY=200.0,
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        mater = AFFE_MATERIAU(
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                MATER=steel,
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,13]<stdout>:        block = AFFE_CHAR_CINE(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            MECA_IMPO=(
[1,13]<stdout>:                _F(
[1,13]<stdout>:                    GROUP_MA="LEFT",
[1,13]<stdout>:                    DX=0,
[1,13]<stdout>:                    DY=0.0,
[1,13]<stdout>:                    DZ=0.0,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            MECA_IMPO=(
[1,13]<stdout>:                _F(
[1,13]<stdout>:                    GROUP_MA="RIGHT",
[1,13]<stdout>:                    DY=0.001,
[1,13]<stdout>:                    DZ=0.001,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,13]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            OPTION="RIGI_MECA",
[1,13]<stdout>:            CHAM_MATER=mater,
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Numbering"):
[1,13]<stdout>:        dofNum = NUME_DDL(
[1,13]<stdout>:            MATR_RIGI=stiff_elem,
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Assembly"):
[1,13]<stdout>:        stiffness = ASSE_MATRICE(
[1,13]<stdout>:            MATR_ELEM=stiff_elem,
[1,13]<stdout>:            NUME_DDL=dofNum,
[1,13]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,13]<stdout>:        rhs = CREA_CHAMP(
[1,13]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,13]<stdout>:            OPERATION="AFFE",
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                NOM_CMP=(
[1,13]<stdout>:                    "DX",
[1,13]<stdout>:                    "DY",
[1,13]<stdout>:                    "DZ",
[1,13]<stdout>:                ),
[1,13]<stdout>:                VALE=(
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,13]<stdout>:
[1,13]<stdout>:    if params["solver"] == "PETSC":
[1,13]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,13]<stdout>:    elif params["solver"] == "MUMPS":
[1,13]<stdout>:        solver = CA.MumpsSolver(
[1,13]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,13]<stdout>:            RENUM="PARMETIS",
[1,13]<stdout>:            ACCELERATION="FR+",
[1,13]<stdout>:            POSTTRAITEMENTS="MINI",
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Factorize"):
[1,13]<stdout>:        solver.factorize(stiffness)
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Solve"):
[1,13]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,13]<stdout>:
[1,13]<stdout>:# write_stats(dofNum)
[1,13]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,13]<stdout>:if params["parallel"] == "HPC":
[1,13]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,13]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,13]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,13]<stdout>:
[1,13]<stdout>:CA.close()
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Command line #1:
[1,13]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Execution of code_aster
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.14
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Command file #1 / 1
[1,14]<stdout>:
[1,14]<stdout>:Content of the file to execute:
[1,14]<stdout>:# coding=utf-8
[1,14]<stdout>:#!/usr/bin/python
[1,14]<stdout>:
[1,14]<stdout>:import os
[1,14]<stdout>:from statistics import mean
[1,14]<stdout>:from datetime import datetime
[1,14]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,14]<stdout>:
[1,14]<stdout>:from code_aster.Commands import *
[1,14]<stdout>:from code_aster import CA
[1,14]<stdout>:from code_aster.Utilities import petscInitialize
[1,14]<stdout>:
[1,14]<stdout>:CA.init()
[1,14]<stdout>:
[1,14]<stdout>:params = {}
[1,14]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,14]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,14]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,14]<stdout>:
[1,14]<stdout>:# General parameters
[1,14]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,14]<stdout>:rank = comm.Get_rank()
[1,14]<stdout>:size = comm.Get_size()
[1,14]<stdout>:
[1,14]<stdout>:nbHexa = 8 ** params["refinements"]
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def memory_peak(mess=None):
[1,14]<stdout>:    """Return memory peak in MB"""
[1,14]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:class ChronoCtxMgGen:
[1,14]<stdout>:    stats = {}
[1,14]<stdout>:
[1,14]<stdout>:    def __init__(self, what):
[1,14]<stdout>:        self._what = what
[1,14]<stdout>:
[1,14]<stdout>:    def __enter__(self):
[1,14]<stdout>:        self.start = datetime.now()
[1,14]<stdout>:
[1,14]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,14]<stdout>:        self.stop = datetime.now()
[1,14]<stdout>:        delta = self.stop - self.start
[1,14]<stdout>:        mem = memory_peak(self._what)
[1,14]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,14]<stdout>:    pass
[1,14]<stdout>:    # def __init__(self, what):
[1,14]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def write_stats(nume_ddl):
[1,14]<stdout>:    if rank == 0:
[1,14]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,14]<stdout>:        print()
[1,14]<stdout>:        print("NB PROC")
[1,14]<stdout>:        print(size)
[1,14]<stdout>:        print()
[1,14]<stdout>:        print(
[1,14]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    for key, values in stats.items():
[1,14]<stdout>:        time = comm.gather(values[0], root=0)
[1,14]<stdout>:        mem = comm.gather(values[1], root=0)
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            print(
[1,14]<stdout>:                key
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(min(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(max(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(mean(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(min(mem))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(max(mem))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(mean(mem))
[1,14]<stdout>:            )
[1,14]<stdout>:
[1,14]<stdout>:    mesh = nume_ddl.getMesh()
[1,14]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,14]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,14]<stdout>:
[1,14]<stdout>:    if rank == 0:
[1,14]<stdout>:        print()
[1,14]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,14]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,14]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,14]<stdout>:
[1,14]<stdout>:    def show(*args, **kwargs):
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            print(*args, **kwargs)
[1,14]<stdout>:
[1,14]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,14]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,14]<stdout>:    separ = "| :--------------- | ----------: |"
[1,14]<stdout>:    show(fmti.format("Refinement", refine))
[1,14]<stdout>:    show(separ)
[1,14]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,14]<stdout>:    for key, values in data.items():
[1,14]<stdout>:        times = comm.gather(values[0], root=0)
[1,14]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            show(fmtt.format(key, mean(times)))
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,14]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,14]<stdout>:
[1,14]<stdout>:with ChronoCtxMg("Total"):
[1,14]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,14]<stdout>:        if params["parallel"] == "HPC":
[1,14]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,14]<stdout>:        else:
[1,14]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Model"):
[1,14]<stdout>:        model = AFFE_MODELE(
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                PHENOMENE="MECANIQUE",
[1,14]<stdout>:                MODELISATION="3D",
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Material"):
[1,14]<stdout>:        steel = DEFI_MATERIAU(
[1,14]<stdout>:            ELAS=_F(
[1,14]<stdout>:                E=200000.0,
[1,14]<stdout>:                NU=0.3,
[1,14]<stdout>:            ),
[1,14]<stdout>:            ECRO_LINE=_F(
[1,14]<stdout>:   [1,14]<stdout>:             D_SIGM_EPSI=2000.0,
[1,14]<stdout>:                SY=200.0,
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        mater = AFFE_MATERIAU(
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                MATER=steel,
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,14]<stdout>:        block = AFFE_CHAR_CINE(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            MECA_IMPO=(
[1,14]<stdout>:                _F(
[1,14]<stdout>:                    GROUP_MA="LEFT",
[1,14]<stdout>:                    DX=0,
[1,14]<stdout>:                    DY=0.0,
[1,14]<stdout>:                    DZ=0.0,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            MECA_IMPO=(
[1,14]<stdout>:                _F(
[1,14]<stdout>:                    GROUP_MA="RIGHT",
[1,14]<stdout>:                    DY=0.001,
[1,14]<stdout>:                    DZ=0.001,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,14]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            OPTION="RIGI_MECA",
[1,14]<stdout>:            CHAM_MATER=mater,
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Numbering"):
[1,14]<stdout>:        dofNum = NUME_DDL(
[1,14]<stdout>:            MATR_RIGI=stiff_elem,
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Assembly"):
[1,14]<stdout>:        stiffness = ASSE_MATRICE(
[1,14]<stdout>:            MATR_ELEM=stiff_elem,
[1,14]<stdout>:            NUME_DDL=dofNum,
[1,14]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,14]<stdout>:        rhs = CREA_CHAMP(
[1,14]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,14]<stdout>:            OPERATION="AFFE",
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                NOM_CMP=(
[1,14]<stdout>:                    "DX",
[1,14]<stdout>:                    "DY",
[1,14]<stdout>:                    "DZ",
[1,14]<stdout>:                ),
[1,14]<stdout>:                VALE=(
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,14]<stdout>:
[1,14]<stdout>:    if params["solver"] == "PETSC":
[1,14]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,14]<stdout>:    elif params["solver"] == "MUMPS":
[1,14]<stdout>:        solver = CA.MumpsSolver(
[1,14]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,14]<stdout>:            RENUM="PARMETIS",
[1,14]<stdout>:            ACCELERATION="FR+",
[1,14]<stdout>:            POSTTRAITEMENTS="MINI",
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Factorize"):
[1,14]<stdout>:        solver.factorize(stiffness)
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Solve"):
[1,14]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,14]<stdout>:
[1,14]<stdout>:# write_stats(dofNum)
[1,14]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,14]<stdout>:if params["parallel"] == "HPC":
[1,14]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,14]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,14]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,14]<stdout>:
[1,14]<stdout>:CA.close()
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Command line #1:
[1,14]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Execution of code_aster
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.15
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Command file #1 / 1
[1,15]<stdout>:
[1,15]<stdout>:Content of the file to execute:
[1,15]<stdout>:# coding=utf-8
[1,15]<stdout>:#!/usr/bin/python
[1,15]<stdout>:
[1,15]<stdout>:import os
[1,15]<stdout>:from statistics import mean
[1,15]<stdout>:from datetime import datetime
[1,15]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,15]<stdout>:
[1,15]<stdout>:from code_aster.Commands import *
[1,15]<stdout>:from code_aster import CA
[1,15]<stdout>:from code_aster.Utilities import petscInitialize
[1,15]<stdout>:
[1,15]<stdout>:CA.init()
[1,15]<stdout>:
[1,15]<stdout>:params = {}
[1,15]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,15]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,15]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,15]<stdout>:
[1,15]<stdout>:# General parameters
[1,15]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,15]<stdout>:rank = comm.Get_rank()
[1,15]<stdout>:size = comm.Get_size()
[1,15]<stdout>:
[1,15]<stdout>:nbHexa = 8 ** params["refinements"]
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def memory_peak(mess=None):
[1,15]<stdout>:    """Return memory peak in MB"""
[1,15]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:class ChronoCtxMgGen:
[1,15]<stdout>:    stats = {}
[1,15]<stdout>:
[1,15]<stdout>:    def __init__(self, what):
[1,15]<stdout>:        self._what = what
[1,15]<stdout>:
[1,15]<stdout>:    def __enter__(self):
[1,15]<stdout>:        self.start = datetime.now()
[1,15]<stdout>:
[1,15]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,15]<stdout>:        self.stop = datetime.now()
[1,15]<stdout>:        delta = self.stop - self.start
[1,15]<stdout>:        mem = memory_peak(self._what)
[1,15]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,15]<stdout>:    pass
[1,15]<stdout>:    # def __init__(self, what):
[1,15]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def write_stats(nume_ddl):
[1,15]<stdout>:    if rank == 0:
[1,15]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,15]<stdout>:        print()
[1,15]<stdout>:        print("NB PROC")
[1,15]<stdout>:        print(size)
[1,15]<stdout>:        print()
[1,15]<stdout>:        print(
[1,15]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    for key, values in stats.items():
[1,15]<stdout>:        time = comm.gather(values[0], root=0)
[1,15]<stdout>:        mem = comm.gather(values[1], root=0)
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            print(
[1,15]<stdout>:                key
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(min(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(max(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(mean(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(min(mem))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(max(mem))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(mean(mem))
[1,15]<stdout>:            )
[1,15]<stdout>:
[1,15]<stdout>:    mesh = nume_ddl.getMesh()
[1,15]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,15]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,15]<stdout>:
[1,15]<stdout>:    if rank == 0:
[1,15]<stdout>:        print()
[1,15]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,15]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,15]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,15]<stdout>:
[1,15]<stdout>:    def show(*args, **kwargs):
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            print(*args, **kwargs)
[1,15]<stdout>:
[1,15]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,15]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,15]<stdout>:    separ = "| :--------------- | ----------: |"
[1,15]<stdout>:    show(fmti.format("Refinement", refine))
[1,15]<stdout>:    show(separ)
[1,15]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,15]<stdout>:    for key, values in data.items():
[1,15]<stdout>:        times = comm.gather(values[0], root=0)
[1,15]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            show(fmtt.format(key, mean(times)))
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,15]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,15]<stdout>:
[1,15]<stdout>:with ChronoCtxMg("Total"):
[1,15]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,15]<stdout>:        if params["parallel"] == "HPC":
[1,15]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,15]<stdout>:        else:
[1,15]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Model"):
[1,15]<stdout>:        model = AFFE_MODELE(
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                PHENOMENE="MECANIQUE",
[1,15]<stdout>:                MODELISATION="3D",
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Material"):
[1,15]<stdout>:        steel = DEFI_MATERIAU(
[1,15]<stdout>:            ELAS=_F(
[1,15]<stdout>:                E=200000.0,
[1,15]<stdout>:                NU=0.3,
[1,15]<stdout>:            ),
[1,15]<stdout>:            ECRO_LINE=_F(
[1,15]<stdout>:    [1,15]<stdout>:            D_SIGM_EPSI=2000.0,
[1,15]<stdout>:                SY=200.0,
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        mater = AFFE_MATERIAU(
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                MATER=steel,
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,15]<stdout>:        block = AFFE_CHAR_CINE(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            MECA_IMPO=(
[1,15]<stdout>:                _F(
[1,15]<stdout>:                    GROUP_MA="LEFT",
[1,15]<stdout>:                    DX=0,
[1,15]<stdout>:                    DY=0.0,
[1,15]<stdout>:                    DZ=0.0,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            MECA_IMPO=(
[1,15]<stdout>:                _F(
[1,15]<stdout>:                    GROUP_MA="RIGHT",
[1,15]<stdout>:                    DY=0.001,
[1,15]<stdout>:                    DZ=0.001,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,15]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            OPTION="RIGI_MECA",
[1,15]<stdout>:            CHAM_MATER=mater,
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Numbering"):
[1,15]<stdout>:        dofNum = NUME_DDL(
[1,15]<stdout>:            MATR_RIGI=stiff_elem,
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Assembly"):
[1,15]<stdout>:        stiffness = ASSE_MATRICE(
[1,15]<stdout>:            MATR_ELEM=stiff_elem,
[1,15]<stdout>:            NUME_DDL=dofNum,
[1,15]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,15]<stdout>:        rhs = CREA_CHAMP(
[1,15]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,15]<stdout>:            OPERATION="AFFE",
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                NOM_CMP=(
[1,15]<stdout>:                    "DX",
[1,15]<stdout>:                    "DY",
[1,15]<stdout>:                    "DZ",
[1,15]<stdout>:                ),
[1,15]<stdout>:                VALE=(
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,15]<stdout>:
[1,15]<stdout>:    if params["solver"] == "PETSC":
[1,15]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,15]<stdout>:    elif params["solver"] == "MUMPS":
[1,15]<stdout>:        solver = CA.MumpsSolver(
[1,15]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,15]<stdout>:            RENUM="PARMETIS",
[1,15]<stdout>:            ACCELERATION="FR+",
[1,15]<stdout>:            POSTTRAITEMENTS="MINI",
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Factorize"):
[1,15]<stdout>:        solver.factorize(stiffness)
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Solve"):
[1,15]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,15]<stdout>:
[1,15]<stdout>:# write_stats(dofNum)
[1,15]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,15]<stdout>:if params["parallel"] == "HPC":
[1,15]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,15]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,15]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,15]<stdout>:
[1,15]<stdout>:CA.close()
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Command line #1:
[1,15]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Execution of code_aster
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.16
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Command file #1 / 1
[1,16]<stdout>:
[1,16]<stdout>:Content of the file to execute:
[1,16]<stdout>:# coding=utf-8
[1,16]<stdout>:#!/usr/bin/python
[1,16]<stdout>:
[1,16]<stdout>:import os
[1,16]<stdout>:from statistics import mean
[1,16]<stdout>:from datetime import datetime
[1,16]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,16]<stdout>:
[1,16]<stdout>:from code_aster.Commands import *
[1,16]<stdout>:from code_aster import CA
[1,16]<stdout>:from code_aster.Utilities import petscInitialize
[1,16]<stdout>:
[1,16]<stdout>:CA.init()
[1,16]<stdout>:
[1,16]<stdout>:params = {}
[1,16]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,16]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,16]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,16]<stdout>:
[1,16]<stdout>:# General parameters
[1,16]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,16]<stdout>:rank = comm.Get_rank()
[1,16]<stdout>:size = comm.Get_size()
[1,16]<stdout>:
[1,16]<stdout>:nbHexa = 8 ** params["refinements"]
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:def memory_peak(mess=None):
[1,16]<stdout>:    """Return memory peak in MB"""
[1,16]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:class ChronoCtxMgGen:
[1,16]<stdout>:    stats = {}
[1,16]<stdout>:
[1,16]<stdout>:    def __init__(self, what):
[1,16]<stdout>:        self._what = what
[1,16]<stdout>:
[1,16]<stdout>:    def __enter__(self):
[1,16]<stdout>:        self.start = datetime.now()
[1,16]<stdout>:
[1,16]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,16]<stdout>:        self.stop = datetime.now()
[1,16]<stdout>:        delta = self.stop - self.start
[1,16]<stdout>:        mem = memory_peak(self._what)
[1,16]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,16]<stdout>:    pass
[1,16]<stdout>:    # def __init__(self, what):
[1,16]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:def write_stats(nume_ddl):
[1,16]<stdout>:    if rank == 0:
[1,16]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,16]<stdout>:        print()
[1,16]<stdout>:        print("NB PROC")
[1,16]<stdout>:        print(size)
[1,16]<stdout>:        print()
[1,16]<stdout>:        print(
[1,16]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    for key, values in stats.items():
[1,16]<stdout>:        time = comm.gather(values[0], root=0)
[1,16]<stdout>:        mem = comm.gather(values[1], root=0)
[1,16]<stdout>:        if rank == 0:
[1,16]<stdout>:            print(
[1,16]<stdout>:                key
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(min(time))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(max(time))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(mean(time))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(min(mem))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(max(mem))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(mean(mem))
[1,16]<stdout>:            )
[1,16]<stdout>:
[1,16]<stdout>:    mesh = nume_ddl.getMesh()
[1,16]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,16]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,16]<stdout>:
[1,16]<stdout>:    if rank == 0:
[1,16]<stdout>:        print()
[1,16]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,16]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,16]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,16]<stdout>:
[1,16]<stdout>:    def show(*args, **kwargs):
[1,16]<stdout>:        if rank == 0:
[1,16]<stdout>:            print(*args, **kwargs)
[1,16]<stdout>:
[1,16]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,16]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,16]<stdout>:    separ = "| :--------------- | ----------: |"
[1,16]<stdout>:    show(fmti.format("Refinement", refine))
[1,16]<stdout>:    show(separ)
[1,16]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,16]<stdout>:    for key, values in data.items():
[1,16]<stdout>:        times = comm.gather(values[0], root=0)
[1,16]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,16]<stdout>:        if rank == 0:
[1,16]<stdout>:            show(fmtt.format(key, mean(times)))
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,16]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,16]<stdout>:
[1,16]<stdout>:with ChronoCtxMg("Total"):
[1,16]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,16]<stdout>:        if params["parallel"] == "HPC":
[1,16]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,16]<stdout>:        else:
[1,16]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Model"):
[1,16]<stdout>:        model = AFFE_MODELE(
[1,16]<stdout>:            MAILLAGE=mesh,
[1,16]<stdout>:            AFFE=_F(
[1,16]<stdout>:                TOUT="OUI",
[1,16]<stdout>:                PHENOMENE="MECANIQUE",
[1,16]<stdout>:                MODELISATION="3D",
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Material"):
[1,16]<stdout>:        steel = DEFI_MATERIAU(
[1,16]<stdout>:            ELAS=_F(
[1,16]<stdout>:                E=200000.0,
[1,16]<stdout>:                NU=0.3,
[1,16]<stdout>:            ),
[1,16]<stdout>:            ECRO_LINE=_F(
[1,16]<stdout>:   [1,16]<stdout>:             D_SIGM_EPSI=2000.0,
[1,16]<stdout>:                SY=200.0,
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:        mater = AFFE_MATERIAU(
[1,16]<stdout>:            MAILLAGE=mesh,
[1,16]<stdout>:            AFFE=_F(
[1,16]<stdout>:                TOUT="OUI",
[1,16]<stdout>:                MATER=steel,
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,16]<stdout>:        block = AFFE_CHAR_CINE(
[1,16]<stdout>:            MODELE=model,
[1,16]<stdout>:            MECA_IMPO=(
[1,16]<stdout>:                _F(
[1,16]<stdout>:                    GROUP_MA="LEFT",
[1,16]<stdout>:                    DX=0,
[1,16]<stdout>:                    DY=0.0,
[1,16]<stdout>:                    DZ=0.0,
[1,16]<stdout>:                ),
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,16]<stdout>:            MODELE=model,
[1,16]<stdout>:            MECA_IMPO=(
[1,16]<stdout>:                _F(
[1,16]<stdout>:                    GROUP_MA="RIGHT",
[1,16]<stdout>:                    DY=0.001,
[1,16]<stdout>:                    DZ=0.001,
[1,16]<stdout>:                ),
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,16]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,16]<stdout>:            MODELE=model,
[1,16]<stdout>:            OPTION="RIGI_MECA",
[1,16]<stdout>:            CHAM_MATER=mater,
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Numbering"):
[1,16]<stdout>:        dofNum = NUME_DDL(
[1,16]<stdout>:            MATR_RIGI=stiff_elem,
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Assembly"):
[1,16]<stdout>:        stiffness = ASSE_MATRICE(
[1,16]<stdout>:            MATR_ELEM=stiff_elem,
[1,16]<stdout>:            NUME_DDL=dofNum,
[1,16]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,16]<stdout>:        rhs = CREA_CHAMP(
[1,16]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,16]<stdout>:            OPERATION="AFFE",
[1,16]<stdout>:            MAILLAGE=mesh,
[1,16]<stdout>:            AFFE=_F(
[1,16]<stdout>:                TOUT="OUI",
[1,16]<stdout>:                NOM_CMP=(
[1,16]<stdout>:                    "DX",
[1,16]<stdout>:                    "DY",
[1,16]<stdout>:                    "DZ",
[1,16]<stdout>:                ),
[1,16]<stdout>:                VALE=(
[1,16]<stdout>:                    0.0,
[1,16]<stdout>:                    0.0,
[1,16]<stdout>:                    0.0,
[1,16]<stdout>:                ),
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,16]<stdout>:
[1,16]<stdout>:    if params["solver"] == "PETSC":
[1,16]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,16]<stdout>:    elif params["solver"] == "MUMPS":
[1,16]<stdout>:        solver = CA.MumpsSolver(
[1,16]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,16]<stdout>:            RENUM="PARMETIS",
[1,16]<stdout>:            ACCELERATION="FR+",
[1,16]<stdout>:            POSTTRAITEMENTS="MINI",
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Factorize"):
[1,16]<stdout>:        solver.factorize(stiffness)
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Solve"):
[1,16]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,16]<stdout>:
[1,16]<stdout>:# write_stats(dofNum)
[1,16]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,16]<stdout>:if params["parallel"] == "HPC":
[1,16]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,16]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,16]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,16]<stdout>:
[1,16]<stdout>:CA.close()
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Command line #1:
[1,16]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Execution of code_aster
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.17
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Command file #1 / 1
[1,17]<stdout>:
[1,17]<stdout>:Content of the file to execute:
[1,17]<stdout>:# coding=utf-8
[1,17]<stdout>:#!/usr/bin/python
[1,17]<stdout>:
[1,17]<stdout>:import os
[1,17]<stdout>:from statistics import mean
[1,17]<stdout>:from datetime import datetime
[1,17]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,17]<stdout>:
[1,17]<stdout>:from code_aster.Commands import *
[1,17]<stdout>:from code_aster import CA
[1,17]<stdout>:from code_aster.Utilities import petscInitialize
[1,17]<stdout>:
[1,17]<stdout>:CA.init()
[1,17]<stdout>:
[1,17]<stdout>:params = {}
[1,17]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,17]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,17]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,17]<stdout>:
[1,17]<stdout>:# General parameters
[1,17]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,17]<stdout>:rank = comm.Get_rank()
[1,17]<stdout>:size = comm.Get_size()
[1,17]<stdout>:
[1,17]<stdout>:nbHexa = 8 ** params["refinements"]
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:def memory_peak(mess=None):
[1,17]<stdout>:    """Return memory peak in MB"""
[1,17]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:class ChronoCtxMgGen:
[1,17]<stdout>:    stats = {}
[1,17]<stdout>:
[1,17]<stdout>:    def __init__(self, what):
[1,17]<stdout>:        self._what = what
[1,17]<stdout>:
[1,17]<stdout>:    def __enter__(self):
[1,17]<stdout>:        self.start = datetime.now()
[1,17]<stdout>:
[1,17]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,17]<stdout>:        self.stop = datetime.now()
[1,17]<stdout>:        delta = self.stop - self.start
[1,17]<stdout>:        mem = memory_peak(self._what)
[1,17]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,17]<stdout>:    pass
[1,17]<stdout>:    # def __init__(self, what):
[1,17]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:def write_stats(nume_ddl):
[1,17]<stdout>:    if rank == 0:
[1,17]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,17]<stdout>:        print()
[1,17]<stdout>:        print("NB PROC")
[1,17]<stdout>:        print(size)
[1,17]<stdout>:        print()
[1,17]<stdout>:        print(
[1,17]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    for key, values in stats.items():
[1,17]<stdout>:        time = comm.gather(values[0], root=0)
[1,17]<stdout>:        mem = comm.gather(values[1], root=0)
[1,17]<stdout>:        if rank == 0:
[1,17]<stdout>:            print(
[1,17]<stdout>:                key
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(min(time))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(max(time))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(mean(time))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(min(mem))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(max(mem))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(mean(mem))
[1,17]<stdout>:            )
[1,17]<stdout>:
[1,17]<stdout>:    mesh = nume_ddl.getMesh()
[1,17]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,17]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,17]<stdout>:
[1,17]<stdout>:    if rank == 0:
[1,17]<stdout>:        print()
[1,17]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,17]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,17]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,17]<stdout>:
[1,17]<stdout>:    def show(*args, **kwargs):
[1,17]<stdout>:        if rank == 0:
[1,17]<stdout>:            print(*args, **kwargs)
[1,17]<stdout>:
[1,17]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,17]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,17]<stdout>:    separ = "| :--------------- | ----------: |"
[1,17]<stdout>:    show(fmti.format("Refinement", refine))
[1,17]<stdout>:    show(separ)
[1,17]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,17]<stdout>:    for key, values in data.items():
[1,17]<stdout>:        times = comm.gather(values[0], root=0)
[1,17]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,17]<stdout>:        if rank == 0:
[1,17]<stdout>:            show(fmtt.format(key, mean(times)))
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,17]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,17]<stdout>:
[1,17]<stdout>:with ChronoCtxMg("Total"):
[1,17]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,17]<stdout>:        if params["parallel"] == "HPC":
[1,17]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,17]<stdout>:        else:
[1,17]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Model"):
[1,17]<stdout>:        model = AFFE_MODELE(
[1,17]<stdout>:            MAILLAGE=mesh,
[1,17]<stdout>:            AFFE=_F(
[1,17]<stdout>:                TOUT="OUI",
[1,17]<stdout>:                PHENOMENE="MECANIQUE",
[1,17]<stdout>:                MODELISATION="3D",
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Material"):
[1,17]<stdout>:        steel = DEFI_MATERIAU(
[1,17]<stdout>:            ELAS=_F(
[1,17]<stdout>:                E=200000.0,
[1,17]<stdout>:                NU=0.3,
[1,17]<stdout>:            ),
[1,17]<stdout>:            ECRO_LINE=_F(
[1,17]<stdout>:    [1,17]<stdout>:            D_SIGM_EPSI=2000.0,
[1,17]<stdout>:                SY=200.0,
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:        mater = AFFE_MATERIAU(
[1,17]<stdout>:            MAILLAGE=mesh,
[1,17]<stdout>:            AFFE=_F(
[1,17]<stdout>:                TOUT="OUI",
[1,17]<stdout>:                MATER=steel,
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,17]<stdout>:        block = AFFE_CHAR_CINE(
[1,17]<stdout>:            MODELE=model,
[1,17]<stdout>:            MECA_IMPO=(
[1,17]<stdout>:                _F(
[1,17]<stdout>:                    GROUP_MA="LEFT",
[1,17]<stdout>:                    DX=0,
[1,17]<stdout>:                    DY=0.0,
[1,17]<stdout>:                    DZ=0.0,
[1,17]<stdout>:                ),
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,17]<stdout>:            MODELE=model,
[1,17]<stdout>:            MECA_IMPO=(
[1,17]<stdout>:                _F(
[1,17]<stdout>:                    GROUP_MA="RIGHT",
[1,17]<stdout>:                    DY=0.001,
[1,17]<stdout>:                    DZ=0.001,
[1,17]<stdout>:                ),
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,17]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,17]<stdout>:            MODELE=model,
[1,17]<stdout>:            OPTION="RIGI_MECA",
[1,17]<stdout>:            CHAM_MATER=mater,
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Numbering"):
[1,17]<stdout>:        dofNum = NUME_DDL(
[1,17]<stdout>:            MATR_RIGI=stiff_elem,
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Assembly"):
[1,17]<stdout>:        stiffness = ASSE_MATRICE(
[1,17]<stdout>:            MATR_ELEM=stiff_elem,
[1,17]<stdout>:            NUME_DDL=dofNum,
[1,17]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,17]<stdout>:        rhs = CREA_CHAMP(
[1,17]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,17]<stdout>:            OPERATION="AFFE",
[1,17]<stdout>:            MAILLAGE=mesh,
[1,17]<stdout>:            AFFE=_F(
[1,17]<stdout>:                TOUT="OUI",
[1,17]<stdout>:                NOM_CMP=(
[1,17]<stdout>:                    "DX",
[1,17]<stdout>:                    "DY",
[1,17]<stdout>:                    "DZ",
[1,17]<stdout>:                ),
[1,17]<stdout>:                VALE=(
[1,17]<stdout>:                    0.0,
[1,17]<stdout>:                    0.0,
[1,17]<stdout>:                    0.0,
[1,17]<stdout>:                ),
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,17]<stdout>:
[1,17]<stdout>:    if params["solver"] == "PETSC":
[1,17]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,17]<stdout>:    elif params["solver"] == "MUMPS":
[1,17]<stdout>:        solver = CA.MumpsSolver(
[1,17]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,17]<stdout>:            RENUM="PARMETIS",
[1,17]<stdout>:            ACCELERATION="FR+",
[1,17]<stdout>:            POSTTRAITEMENTS="MINI",
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Factorize"):
[1,17]<stdout>:        solver.factorize(stiffness)
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Solve"):
[1,17]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,17]<stdout>:
[1,17]<stdout>:# write_stats(dofNum)
[1,17]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,17]<stdout>:if params["parallel"] == "HPC":
[1,17]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,17]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,17]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,17]<stdout>:
[1,17]<stdout>:CA.close()
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Command line #1:
[1,17]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Execution of code_aster
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.18
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Command file #1 / 1
[1,18]<stdout>:
[1,18]<stdout>:Content of the file to execute:
[1,18]<stdout>:# coding=utf-8
[1,18]<stdout>:#!/usr/bin/python
[1,18]<stdout>:
[1,18]<stdout>:import os
[1,18]<stdout>:from statistics import mean
[1,18]<stdout>:from datetime import datetime
[1,18]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,18]<stdout>:
[1,18]<stdout>:from code_aster.Commands import *
[1,18]<stdout>:from code_aster import CA
[1,18]<stdout>:from code_aster.Utilities import petscInitialize
[1,18]<stdout>:
[1,18]<stdout>:CA.init()
[1,18]<stdout>:
[1,18]<stdout>:params = {}
[1,18]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,18]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,18]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,18]<stdout>:
[1,18]<stdout>:# General parameters
[1,18]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,18]<stdout>:rank = comm.Get_rank()
[1,18]<stdout>:size = comm.Get_size()
[1,18]<stdout>:
[1,18]<stdout>:nbHexa = 8 ** params["refinements"]
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:def memory_peak(mess=None):
[1,18]<stdout>:    """Return memory peak in MB"""
[1,18]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:class ChronoCtxMgGen:
[1,18]<stdout>:    stats = {}
[1,18]<stdout>:
[1,18]<stdout>:    def __init__(self, what):
[1,18]<stdout>:        self._what = what
[1,18]<stdout>:
[1,18]<stdout>:    def __enter__(self):
[1,18]<stdout>:        self.start = datetime.now()
[1,18]<stdout>:
[1,18]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,18]<stdout>:        self.stop = datetime.now()
[1,18]<stdout>:        delta = self.stop - self.start
[1,18]<stdout>:        mem = memory_peak(self._what)
[1,18]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,18]<stdout>:    pass
[1,18]<stdout>:    # def __init__(self, what):
[1,18]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:def write_stats(nume_ddl):
[1,18]<stdout>:    if rank == 0:
[1,18]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,18]<stdout>:        print()
[1,18]<stdout>:        print("NB PROC")
[1,18]<stdout>:        print(size)
[1,18]<stdout>:        print()
[1,18]<stdout>:        print(
[1,18]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    for key, values in stats.items():
[1,18]<stdout>:        time = comm.gather(values[0], root=0)
[1,18]<stdout>:        mem = comm.gather(values[1], root=0)
[1,18]<stdout>:        if rank == 0:
[1,18]<stdout>:            print(
[1,18]<stdout>:                key
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(min(time))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(max(time))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(mean(time))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(min(mem))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(max(mem))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(mean(mem))
[1,18]<stdout>:            )
[1,18]<stdout>:
[1,18]<stdout>:    mesh = nume_ddl.getMesh()
[1,18]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,18]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,18]<stdout>:
[1,18]<stdout>:    if rank == 0:
[1,18]<stdout>:        print()
[1,18]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,18]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,18]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,18]<stdout>:
[1,18]<stdout>:    def show(*args, **kwargs):
[1,18]<stdout>:        if rank == 0:
[1,18]<stdout>:            print(*args, **kwargs)
[1,18]<stdout>:
[1,18]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,18]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,18]<stdout>:    separ = "| :--------------- | ----------: |"
[1,18]<stdout>:    show(fmti.format("Refinement", refine))
[1,18]<stdout>:    show(separ)
[1,18]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,18]<stdout>:    for key, values in data.items():
[1,18]<stdout>:        times = comm.gather(values[0], root=0)
[1,18]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,18]<stdout>:        if rank == 0:
[1,18]<stdout>:            show(fmtt.format(key, mean(times)))
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,18]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,18]<stdout>:
[1,18]<stdout>:with ChronoCtxMg("Total"):
[1,18]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,18]<stdout>:        if params["parallel"] == "HPC":
[1,18]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,18]<stdout>:        else:
[1,18]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Model"):
[1,18]<stdout>:        model = AFFE_MODELE(
[1,18]<stdout>:            MAILLAGE=mesh,
[1,18]<stdout>:            AFFE=_F(
[1,18]<stdout>:                TOUT="OUI",
[1,18]<stdout>:                PHENOMENE="MECANIQUE",
[1,18]<stdout>:                MODELISATION="3D",
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Material"):
[1,18]<stdout>:        steel = DEFI_MATERIAU(
[1,18]<stdout>:            ELAS=_F(
[1,18]<stdout>:                E=200000.0,
[1,18]<stdout>:                NU=0.3,
[1,18]<stdout>:            ),
[1,18]<stdout>:            ECRO_LINE=_F(
[1,18]<stdout>:    [1,18]<stdout>:            D_SIGM_EPSI=2000.0,
[1,18]<stdout>:                SY=200.0,
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:        mater = AFFE_MATERIAU(
[1,18]<stdout>:            MAILLAGE=mesh,
[1,18]<stdout>:            AFFE=_F(
[1,18]<stdout>:                TOUT="OUI",
[1,18]<stdout>:                MATER=steel,
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,18]<stdout>:        block = AFFE_CHAR_CINE(
[1,18]<stdout>:            MODELE=model,
[1,18]<stdout>:            MECA_IMPO=(
[1,18]<stdout>:                _F(
[1,18]<stdout>:                    GROUP_MA="LEFT",
[1,18]<stdout>:                    DX=0,
[1,18]<stdout>:                    DY=0.0,
[1,18]<stdout>:                    DZ=0.0,
[1,18]<stdout>:                ),
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,18]<stdout>:            MODELE=model,
[1,18]<stdout>:            MECA_IMPO=(
[1,18]<stdout>:                _F(
[1,18]<stdout>:                    GROUP_MA="RIGHT",
[1,18]<stdout>:                    DY=0.001,
[1,18]<stdout>:                    DZ=0.001,
[1,18]<stdout>:                ),
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,18]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,18]<stdout>:            MODELE=model,
[1,18]<stdout>:            OPTION="RIGI_MECA",
[1,18]<stdout>:            CHAM_MATER=mater,
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Numbering"):
[1,18]<stdout>:        dofNum = NUME_DDL(
[1,18]<stdout>:            MATR_RIGI=stiff_elem,
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Assembly"):
[1,18]<stdout>:        stiffness = ASSE_MATRICE(
[1,18]<stdout>:            MATR_ELEM=stiff_elem,
[1,18]<stdout>:            NUME_DDL=dofNum,
[1,18]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,18]<stdout>:        rhs = CREA_CHAMP(
[1,18]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,18]<stdout>:            OPERATION="AFFE",
[1,18]<stdout>:            MAILLAGE=mesh,
[1,18]<stdout>:            AFFE=_F(
[1,18]<stdout>:                TOUT="OUI",
[1,18]<stdout>:                NOM_CMP=(
[1,18]<stdout>:                    "DX",
[1,18]<stdout>:                    "DY",
[1,18]<stdout>:                    "DZ",
[1,18]<stdout>:                ),
[1,18]<stdout>:                VALE=(
[1,18]<stdout>:                    0.0,
[1,18]<stdout>:                    0.0,
[1,18]<stdout>:                    0.0,
[1,18]<stdout>:                ),
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,18]<stdout>:
[1,18]<stdout>:    if params["solver"] == "PETSC":
[1,18]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,18]<stdout>:    elif params["solver"] == "MUMPS":
[1,18]<stdout>:        solver = CA.MumpsSolver(
[1,18]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,18]<stdout>:            RENUM="PARMETIS",
[1,18]<stdout>:            ACCELERATION="FR+",
[1,18]<stdout>:            POSTTRAITEMENTS="MINI",
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Factorize"):
[1,18]<stdout>:        solver.factorize(stiffness)
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Solve"):
[1,18]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,18]<stdout>:
[1,18]<stdout>:# write_stats(dofNum)
[1,18]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,18]<stdout>:if params["parallel"] == "HPC":
[1,18]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,18]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,18]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,18]<stdout>:
[1,18]<stdout>:CA.close()
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Command line #1:
[1,18]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Execution of code_aster
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.19
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Command file #1 / 1
[1,19]<stdout>:
[1,19]<stdout>:Content of the file to execute:
[1,19]<stdout>:# coding=utf-8
[1,19]<stdout>:#!/usr/bin/python
[1,19]<stdout>:
[1,19]<stdout>:import os
[1,19]<stdout>:from statistics import mean
[1,19]<stdout>:from datetime import datetime
[1,19]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,19]<stdout>:
[1,19]<stdout>:from code_aster.Commands import *
[1,19]<stdout>:from code_aster import CA
[1,19]<stdout>:from code_aster.Utilities import petscInitialize
[1,19]<stdout>:
[1,19]<stdout>:CA.init()
[1,19]<stdout>:
[1,19]<stdout>:params = {}
[1,19]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,19]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,19]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,19]<stdout>:
[1,19]<stdout>:# General parameters
[1,19]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,19]<stdout>:rank = comm.Get_rank()
[1,19]<stdout>:size = comm.Get_size()
[1,19]<stdout>:
[1,19]<stdout>:nbHexa = 8 ** params["refinements"]
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:def memory_peak(mess=None):
[1,19]<stdout>:    """Return memory peak in MB"""
[1,19]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:class ChronoCtxMgGen:
[1,19]<stdout>:    stats = {}
[1,19]<stdout>:
[1,19]<stdout>:    def __init__(self, what):
[1,19]<stdout>:        self._what = what
[1,19]<stdout>:
[1,19]<stdout>:    def __enter__(self):
[1,19]<stdout>:        self.start = datetime.now()
[1,19]<stdout>:
[1,19]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,19]<stdout>:        self.stop = datetime.now()
[1,19]<stdout>:        delta = self.stop - self.start
[1,19]<stdout>:        mem = memory_peak(self._what)
[1,19]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,19]<stdout>:    pass
[1,19]<stdout>:    # def __init__(self, what):
[1,19]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:def write_stats(nume_ddl):
[1,19]<stdout>:    if rank == 0:
[1,19]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,19]<stdout>:        print()
[1,19]<stdout>:        print("NB PROC")
[1,19]<stdout>:        print(size)
[1,19]<stdout>:        print()
[1,19]<stdout>:        print(
[1,19]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    for key, values in stats.items():
[1,19]<stdout>:        time = comm.gather(values[0], root=0)
[1,19]<stdout>:        mem = comm.gather(values[1], root=0)
[1,19]<stdout>:        if rank == 0:
[1,19]<stdout>:            print(
[1,19]<stdout>:                key
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(min(time))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(max(time))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(mean(time))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(min(mem))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(max(mem))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(mean(mem))
[1,19]<stdout>:            )
[1,19]<stdout>:
[1,19]<stdout>:    mesh = nume_ddl.getMesh()
[1,19]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,19]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,19]<stdout>:
[1,19]<stdout>:    if rank == 0:
[1,19]<stdout>:        print()
[1,19]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,19]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,19]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,19]<stdout>:
[1,19]<stdout>:    def show(*args, **kwargs):
[1,19]<stdout>:        if rank == 0:
[1,19]<stdout>:            print(*args, **kwargs)
[1,19]<stdout>:
[1,19]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,19]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,19]<stdout>:    separ = "| :--------------- | ----------: |"
[1,19]<stdout>:    show(fmti.format("Refinement", refine))
[1,19]<stdout>:    show(separ)
[1,19]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,19]<stdout>:    for key, values in data.items():
[1,19]<stdout>:        times = comm.gather(values[0], root=0)
[1,19]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,19]<stdout>:        if rank == 0:
[1,19]<stdout>:            show(fmtt.format(key, mean(times)))
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,19]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,19]<stdout>:
[1,19]<stdout>:with ChronoCtxMg("Total"):
[1,19]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,19]<stdout>:        if params["parallel"] == "HPC":
[1,19]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,19]<stdout>:        else:
[1,19]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Model"):
[1,19]<stdout>:        model = AFFE_MODELE(
[1,19]<stdout>:            MAILLAGE=mesh,
[1,19]<stdout>:            AFFE=_F(
[1,19]<stdout>:                TOUT="OUI",
[1,19]<stdout>:                PHENOMENE="MECANIQUE",
[1,19]<stdout>:                MODELISATION="3D",
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Material"):
[1,19]<stdout>:        steel = DEFI_MATERIAU(
[1,19]<stdout>:            ELAS=_F(
[1,19]<stdout>:                E=200000.0,
[1,19]<stdout>:                NU=0.3,
[1,19]<stdout>:            ),
[1,19]<stdout>:            ECRO_LINE=_F(
[1,19]<stdout>:   [1,19]<stdout>:             D_SIGM_EPSI=2000.0,
[1,19]<stdout>:                SY=200.0,
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:        mater = AFFE_MATERIAU(
[1,19]<stdout>:            MAILLAGE=mesh,
[1,19]<stdout>:            AFFE=_F(
[1,19]<stdout>:                TOUT="OUI",
[1,19]<stdout>:                MATER=steel,
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,19]<stdout>:        block = AFFE_CHAR_CINE(
[1,19]<stdout>:            MODELE=model,
[1,19]<stdout>:            MECA_IMPO=(
[1,19]<stdout>:                _F(
[1,19]<stdout>:                    GROUP_MA="LEFT",
[1,19]<stdout>:                    DX=0,
[1,19]<stdout>:                    DY=0.0,
[1,19]<stdout>:                    DZ=0.0,
[1,19]<stdout>:                ),
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,19]<stdout>:            MODELE=model,
[1,19]<stdout>:            MECA_IMPO=(
[1,19]<stdout>:                _F(
[1,19]<stdout>:                    GROUP_MA="RIGHT",
[1,19]<stdout>:                    DY=0.001,
[1,19]<stdout>:                    DZ=0.001,
[1,19]<stdout>:                ),
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,19]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,19]<stdout>:            MODELE=model,
[1,19]<stdout>:            OPTION="RIGI_MECA",
[1,19]<stdout>:            CHAM_MATER=mater,
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Numbering"):
[1,19]<stdout>:        dofNum = NUME_DDL(
[1,19]<stdout>:            MATR_RIGI=stiff_elem,
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Assembly"):
[1,19]<stdout>:        stiffness = ASSE_MATRICE(
[1,19]<stdout>:            MATR_ELEM=stiff_elem,
[1,19]<stdout>:            NUME_DDL=dofNum,
[1,19]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,19]<stdout>:        rhs = CREA_CHAMP(
[1,19]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,19]<stdout>:            OPERATION="AFFE",
[1,19]<stdout>:            MAILLAGE=mesh,
[1,19]<stdout>:            AFFE=_F(
[1,19]<stdout>:                TOUT="OUI",
[1,19]<stdout>:                NOM_CMP=(
[1,19]<stdout>:                    "DX",
[1,19]<stdout>:                    "DY",
[1,19]<stdout>:                    "DZ",
[1,19]<stdout>:                ),
[1,19]<stdout>:                VALE=(
[1,19]<stdout>:                    0.0,
[1,19]<stdout>:                    0.0,
[1,19]<stdout>:                    0.0,
[1,19]<stdout>:                ),
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,19]<stdout>:
[1,19]<stdout>:    if params["solver"] == "PETSC":
[1,19]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,19]<stdout>:    elif params["solver"] == "MUMPS":
[1,19]<stdout>:        solver = CA.MumpsSolver(
[1,19]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,19]<stdout>:            RENUM="PARMETIS",
[1,19]<stdout>:            ACCELERATION="FR+",
[1,19]<stdout>:            POSTTRAITEMENTS="MINI",
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Factorize"):
[1,19]<stdout>:        solver.factorize(stiffness)
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Solve"):
[1,19]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,19]<stdout>:
[1,19]<stdout>:# write_stats(dofNum)
[1,19]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,19]<stdout>:if params["parallel"] == "HPC":
[1,19]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,19]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,19]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,19]<stdout>:
[1,19]<stdout>:CA.close()
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Command line #1:
[1,19]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Execution of code_aster
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.20
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Command file #1 / 1
[1,20]<stdout>:
[1,20]<stdout>:Content of the file to execute:
[1,20]<stdout>:# coding=utf-8
[1,20]<stdout>:#!/usr/bin/python
[1,20]<stdout>:
[1,20]<stdout>:import os
[1,20]<stdout>:from statistics import mean
[1,20]<stdout>:from datetime import datetime
[1,20]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,20]<stdout>:
[1,20]<stdout>:from code_aster.Commands import *
[1,20]<stdout>:from code_aster import CA
[1,20]<stdout>:from code_aster.Utilities import petscInitialize
[1,20]<stdout>:
[1,20]<stdout>:CA.init()
[1,20]<stdout>:
[1,20]<stdout>:params = {}
[1,20]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,20]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,20]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,20]<stdout>:
[1,20]<stdout>:# General parameters
[1,20]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,20]<stdout>:rank = comm.Get_rank()
[1,20]<stdout>:size = comm.Get_size()
[1,20]<stdout>:
[1,20]<stdout>:nbHexa = 8 ** params["refinements"]
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:def memory_peak(mess=None):
[1,20]<stdout>:    """Return memory peak in MB"""
[1,20]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:class ChronoCtxMgGen:
[1,20]<stdout>:    stats = {}
[1,20]<stdout>:
[1,20]<stdout>:    def __init__(self, what):
[1,20]<stdout>:        self._what = what
[1,20]<stdout>:
[1,20]<stdout>:    def __enter__(self):
[1,20]<stdout>:        self.start = datetime.now()
[1,20]<stdout>:
[1,20]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,20]<stdout>:        self.stop = datetime.now()
[1,20]<stdout>:        delta = self.stop - self.start
[1,20]<stdout>:        mem = memory_peak(self._what)
[1,20]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,20]<stdout>:    pass
[1,20]<stdout>:    # def __init__(self, what):
[1,20]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:def write_stats(nume_ddl):
[1,20]<stdout>:    if rank == 0:
[1,20]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,20]<stdout>:        print()
[1,20]<stdout>:        print("NB PROC")
[1,20]<stdout>:        print(size)
[1,20]<stdout>:        print()
[1,20]<stdout>:        print(
[1,20]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    for key, values in stats.items():
[1,20]<stdout>:        time = comm.gather(values[0], root=0)
[1,20]<stdout>:        mem = comm.gather(values[1], root=0)
[1,20]<stdout>:        if rank == 0:
[1,20]<stdout>:            print(
[1,20]<stdout>:                key
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(min(time))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(max(time))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(mean(time))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(min(mem))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(max(mem))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(mean(mem))
[1,20]<stdout>:            )
[1,20]<stdout>:
[1,20]<stdout>:    mesh = nume_ddl.getMesh()
[1,20]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,20]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,20]<stdout>:
[1,20]<stdout>:    if rank == 0:
[1,20]<stdout>:        print()
[1,20]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,20]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,20]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,20]<stdout>:
[1,20]<stdout>:    def show(*args, **kwargs):
[1,20]<stdout>:        if rank == 0:
[1,20]<stdout>:            print(*args, **kwargs)
[1,20]<stdout>:
[1,20]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,20]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,20]<stdout>:    separ = "| :--------------- | ----------: |"
[1,20]<stdout>:    show(fmti.format("Refinement", refine))
[1,20]<stdout>:    show(separ)
[1,20]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,20]<stdout>:    for key, values in data.items():
[1,20]<stdout>:        times = comm.gather(values[0], root=0)
[1,20]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,20]<stdout>:        if rank == 0:
[1,20]<stdout>:            show(fmtt.format(key, mean(times)))
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,20]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,20]<stdout>:
[1,20]<stdout>:with ChronoCtxMg("Total"):
[1,20]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,20]<stdout>:        if params["parallel"] == "HPC":
[1,20]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,20]<stdout>:        else:
[1,20]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Model"):
[1,20]<stdout>:        model = AFFE_MODELE(
[1,20]<stdout>:            MAILLAGE=mesh,
[1,20]<stdout>:            AFFE=_F(
[1,20]<stdout>:                TOUT="OUI",
[1,20]<stdout>:                PHENOMENE="MECANIQUE",
[1,20]<stdout>:                MODELISATION="3D",
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Material"):
[1,20]<stdout>:        steel = DEFI_MATERIAU(
[1,20]<stdout>:            ELAS=_F(
[1,20]<stdout>:                E=200000.0,
[1,20]<stdout>:                NU=0.3,
[1,20]<stdout>:            ),
[1,20]<stdout>:            ECRO_LINE=_F(
[1,20]<stdout>:   [1,20]<stdout>:             D_SIGM_EPSI=2000.0,
[1,20]<stdout>:                SY=200.0,
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:        mater = AFFE_MATERIAU(
[1,20]<stdout>:            MAILLAGE=mesh,
[1,20]<stdout>:            AFFE=_F(
[1,20]<stdout>:                TOUT="OUI",
[1,20]<stdout>:                MATER=steel,
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,20]<stdout>:        block = AFFE_CHAR_CINE(
[1,20]<stdout>:            MODELE=model,
[1,20]<stdout>:            MECA_IMPO=(
[1,20]<stdout>:                _F(
[1,20]<stdout>:                    GROUP_MA="LEFT",
[1,20]<stdout>:                    DX=0,
[1,20]<stdout>:                    DY=0.0,
[1,20]<stdout>:                    DZ=0.0,
[1,20]<stdout>:                ),
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,20]<stdout>:            MODELE=model,
[1,20]<stdout>:            MECA_IMPO=(
[1,20]<stdout>:                _F(
[1,20]<stdout>:                    GROUP_MA="RIGHT",
[1,20]<stdout>:                    DY=0.001,
[1,20]<stdout>:                    DZ=0.001,
[1,20]<stdout>:                ),
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,20]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,20]<stdout>:            MODELE=model,
[1,20]<stdout>:            OPTION="RIGI_MECA",
[1,20]<stdout>:            CHAM_MATER=mater,
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Numbering"):
[1,20]<stdout>:        dofNum = NUME_DDL(
[1,20]<stdout>:            MATR_RIGI=stiff_elem,
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Assembly"):
[1,20]<stdout>:        stiffness = ASSE_MATRICE(
[1,20]<stdout>:            MATR_ELEM=stiff_elem,
[1,20]<stdout>:            NUME_DDL=dofNum,
[1,20]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,20]<stdout>:        rhs = CREA_CHAMP(
[1,20]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,20]<stdout>:            OPERATION="AFFE",
[1,20]<stdout>:            MAILLAGE=mesh,
[1,20]<stdout>:            AFFE=_F(
[1,20]<stdout>:                TOUT="OUI",
[1,20]<stdout>:                NOM_CMP=(
[1,20]<stdout>:                    "DX",
[1,20]<stdout>:                    "DY",
[1,20]<stdout>:                    "DZ",
[1,20]<stdout>:                ),
[1,20]<stdout>:                VALE=(
[1,20]<stdout>:                    0.0,
[1,20]<stdout>:                    0.0,
[1,20]<stdout>:                    0.0,
[1,20]<stdout>:                ),
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,20]<stdout>:
[1,20]<stdout>:    if params["solver"] == "PETSC":
[1,20]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,20]<stdout>:    elif params["solver"] == "MUMPS":
[1,20]<stdout>:        solver = CA.MumpsSolver(
[1,20]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,20]<stdout>:            RENUM="PARMETIS",
[1,20]<stdout>:            ACCELERATION="FR+",
[1,20]<stdout>:            POSTTRAITEMENTS="MINI",
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Factorize"):
[1,20]<stdout>:        solver.factorize(stiffness)
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Solve"):
[1,20]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,20]<stdout>:
[1,20]<stdout>:# write_stats(dofNum)
[1,20]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,20]<stdout>:if params["parallel"] == "HPC":
[1,20]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,20]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,20]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,20]<stdout>:
[1,20]<stdout>:CA.close()
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Command line #1:
[1,20]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Execution of code_aster
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.21
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Command file #1 / 1
[1,21]<stdout>:
[1,21]<stdout>:Content of the file to execute:
[1,21]<stdout>:# coding=utf-8
[1,21]<stdout>:#!/usr/bin/python
[1,21]<stdout>:
[1,21]<stdout>:import os
[1,21]<stdout>:from statistics import mean
[1,21]<stdout>:from datetime import datetime
[1,21]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,21]<stdout>:
[1,21]<stdout>:from code_aster.Commands import *
[1,21]<stdout>:from code_aster import CA
[1,21]<stdout>:from code_aster.Utilities import petscInitialize
[1,21]<stdout>:
[1,21]<stdout>:CA.init()
[1,21]<stdout>:
[1,21]<stdout>:params = {}
[1,21]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,21]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,21]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,21]<stdout>:
[1,21]<stdout>:# General parameters
[1,21]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,21]<stdout>:rank = comm.Get_rank()
[1,21]<stdout>:size = comm.Get_size()
[1,21]<stdout>:
[1,21]<stdout>:nbHexa = 8 ** params["refinements"]
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:def memory_peak(mess=None):
[1,21]<stdout>:    """Return memory peak in MB"""
[1,21]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:class ChronoCtxMgGen:
[1,21]<stdout>:    stats = {}
[1,21]<stdout>:
[1,21]<stdout>:    def __init__(self, what):
[1,21]<stdout>:        self._what = what
[1,21]<stdout>:
[1,21]<stdout>:    def __enter__(self):
[1,21]<stdout>:        self.start = datetime.now()
[1,21]<stdout>:
[1,21]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,21]<stdout>:        self.stop = datetime.now()
[1,21]<stdout>:        delta = self.stop - self.start
[1,21]<stdout>:        mem = memory_peak(self._what)
[1,21]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,21]<stdout>:    pass
[1,21]<stdout>:    # def __init__(self, what):
[1,21]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:def write_stats(nume_ddl):
[1,21]<stdout>:    if rank == 0:
[1,21]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,21]<stdout>:        print()
[1,21]<stdout>:        print("NB PROC")
[1,21]<stdout>:        print(size)
[1,21]<stdout>:        print()
[1,21]<stdout>:        print(
[1,21]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    for key, values in stats.items():
[1,21]<stdout>:        time = comm.gather(values[0], root=0)
[1,21]<stdout>:        mem = comm.gather(values[1], root=0)
[1,21]<stdout>:        if rank == 0:
[1,21]<stdout>:            print(
[1,21]<stdout>:                key
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(min(time))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(max(time))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(mean(time))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(min(mem))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(max(mem))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(mean(mem))
[1,21]<stdout>:            )
[1,21]<stdout>:
[1,21]<stdout>:    mesh = nume_ddl.getMesh()
[1,21]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,21]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,21]<stdout>:
[1,21]<stdout>:    if rank == 0:
[1,21]<stdout>:        print()
[1,21]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,21]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,21]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,21]<stdout>:
[1,21]<stdout>:    def show(*args, **kwargs):
[1,21]<stdout>:        if rank == 0:
[1,21]<stdout>:            print(*args, **kwargs)
[1,21]<stdout>:
[1,21]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,21]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,21]<stdout>:    separ = "| :--------------- | ----------: |"
[1,21]<stdout>:    show(fmti.format("Refinement", refine))
[1,21]<stdout>:    show(separ)
[1,21]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,21]<stdout>:    for key, values in data.items():
[1,21]<stdout>:        times = comm.gather(values[0], root=0)
[1,21]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,21]<stdout>:        if rank == 0:
[1,21]<stdout>:            show(fmtt.format(key, mean(times)))
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,21]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,21]<stdout>:
[1,21]<stdout>:with ChronoCtxMg("Total"):
[1,21]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,21]<stdout>:        if params["parallel"] == "HPC":
[1,21]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,21]<stdout>:        else:
[1,21]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Model"):
[1,21]<stdout>:        model = AFFE_MODELE(
[1,21]<stdout>:            MAILLAGE=mesh,
[1,21]<stdout>:            AFFE=_F(
[1,21]<stdout>:                TOUT="OUI",
[1,21]<stdout>:                PHENOMENE="MECANIQUE",
[1,21]<stdout>:                MODELISATION="3D",
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Material"):
[1,21]<stdout>:        steel = DEFI_MATERIAU(
[1,21]<stdout>:            ELAS=_F(
[1,21]<stdout>:                E=200000.0,
[1,21]<stdout>:                NU=0.3,
[1,21]<stdout>:            ),
[1,21]<stdout>:            ECRO_LINE=_F(
[1,21]<stdout>:   [1,21]<stdout>:             D_SIGM_EPSI=2000.0,
[1,21]<stdout>:                SY=200.0,
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:        mater = AFFE_MATERIAU(
[1,21]<stdout>:            MAILLAGE=mesh,
[1,21]<stdout>:            AFFE=_F(
[1,21]<stdout>:                TOUT="OUI",
[1,21]<stdout>:                MATER=steel,
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,21]<stdout>:        block = AFFE_CHAR_CINE(
[1,21]<stdout>:            MODELE=model,
[1,21]<stdout>:            MECA_IMPO=(
[1,21]<stdout>:                _F(
[1,21]<stdout>:                    GROUP_MA="LEFT",
[1,21]<stdout>:                    DX=0,
[1,21]<stdout>:                    DY=0.0,
[1,21]<stdout>:                    DZ=0.0,
[1,21]<stdout>:                ),
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,21]<stdout>:            MODELE=model,
[1,21]<stdout>:            MECA_IMPO=(
[1,21]<stdout>:                _F(
[1,21]<stdout>:                    GROUP_MA="RIGHT",
[1,21]<stdout>:                    DY=0.001,
[1,21]<stdout>:                    DZ=0.001,
[1,21]<stdout>:                ),
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,21]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,21]<stdout>:            MODELE=model,
[1,21]<stdout>:            OPTION="RIGI_MECA",
[1,21]<stdout>:            CHAM_MATER=mater,
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Numbering"):
[1,21]<stdout>:        dofNum = NUME_DDL(
[1,21]<stdout>:            MATR_RIGI=stiff_elem,
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Assembly"):
[1,21]<stdout>:        stiffness = ASSE_MATRICE(
[1,21]<stdout>:            MATR_ELEM=stiff_elem,
[1,21]<stdout>:            NUME_DDL=dofNum,
[1,21]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,21]<stdout>:        rhs = CREA_CHAMP(
[1,21]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,21]<stdout>:            OPERATION="AFFE",
[1,21]<stdout>:            MAILLAGE=mesh,
[1,21]<stdout>:            AFFE=_F(
[1,21]<stdout>:                TOUT="OUI",
[1,21]<stdout>:                NOM_CMP=(
[1,21]<stdout>:                    "DX",
[1,21]<stdout>:                    "DY",
[1,21]<stdout>:                    "DZ",
[1,21]<stdout>:                ),
[1,21]<stdout>:                VALE=(
[1,21]<stdout>:                    0.0,
[1,21]<stdout>:                    0.0,
[1,21]<stdout>:                    0.0,
[1,21]<stdout>:                ),
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,21]<stdout>:
[1,21]<stdout>:    if params["solver"] == "PETSC":
[1,21]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,21]<stdout>:    elif params["solver"] == "MUMPS":
[1,21]<stdout>:        solver = CA.MumpsSolver(
[1,21]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,21]<stdout>:            RENUM="PARMETIS",
[1,21]<stdout>:            ACCELERATION="FR+",
[1,21]<stdout>:            POSTTRAITEMENTS="MINI",
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Factorize"):
[1,21]<stdout>:        solver.factorize(stiffness)
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Solve"):
[1,21]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,21]<stdout>:
[1,21]<stdout>:# write_stats(dofNum)
[1,21]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,21]<stdout>:if params["parallel"] == "HPC":
[1,21]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,21]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,21]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,21]<stdout>:
[1,21]<stdout>:CA.close()
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Command line #1:
[1,21]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Execution of code_aster
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.22
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Command file #1 / 1
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Execution of code_aster
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Prepare environment in /tmp/run_aster_f89dw791/proc.23
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Command file #1 / 1
[1,22]<stdout>:
[1,22]<stdout>:Content of the file to execute:
[1,22]<stdout>:# coding=utf-8
[1,22]<stdout>:#!/usr/bin/python
[1,22]<stdout>:
[1,22]<stdout>:import os
[1,22]<stdout>:from statistics import mean
[1,22]<stdout>:from datetime import datetime
[1,22]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,22]<stdout>:
[1,22]<stdout>:from code_aster.Commands import *
[1,22]<stdout>:from code_aster import CA
[1,22]<stdout>:from code_aster.Utilities import petscInitialize
[1,22]<stdout>:
[1,22]<stdout>:CA.init()
[1,22]<stdout>:
[1,22]<stdout>:params = {}
[1,22]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,22]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,22]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,22]<stdout>:
[1,22]<stdout>:# General parameters
[1,22]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,22]<stdout>:rank = comm.Get_rank()
[1,22]<stdout>:size = comm.Get_size()
[1,22]<stdout>:
[1,22]<stdout>:nbHexa = 8 ** params["refinements"]
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:def memory_peak(mess=None):
[1,22]<stdout>:    """Return memory peak in MB"""
[1,22]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:class ChronoCtxMgGen:
[1,22]<stdout>:    stats = {}
[1,22]<stdout>:
[1,22]<stdout>:    def __init__(self, what):
[1,22]<stdout>:        self._what = what
[1,22]<stdout>:
[1,22]<stdout>:    def __enter__(self):
[1,22]<stdout>:        self.start = datetime.now()
[1,22]<stdout>:
[1,22]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,22]<stdout>:        self.stop = datetime.now()
[1,22]<stdout>:        delta = self.stop - self.start
[1,22]<stdout>:        mem = memory_peak(self._what)
[1,22]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,22]<stdout>:    pass
[1,22]<stdout>:    # def __init__(self, what):
[1,22]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:def write_stats(nume_ddl):
[1,22]<stdout>:    if rank == 0:
[1,22]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,22]<stdout>:        print()
[1,22]<stdout>:        print("NB PROC")
[1,22]<stdout>:        print(size)
[1,22]<stdout>:        print()
[1,22]<stdout>:        print(
[1,22]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    for key, values in stats.items():
[1,22]<stdout>:        time = comm.gather(values[0], root=0)
[1,22]<stdout>:        mem = comm.gather(values[1], root=0)
[1,22]<stdout>:        if rank == 0:
[1,22]<stdout>:            print(
[1,22]<stdout>:                key
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(min(time))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(max(time))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(mean(time))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(min(mem))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(max(mem))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(m[1,22]<stdout>:ean(mem))
[1,22]<stdout>:            )
[1,22]<stdout>:
[1,22]<stdout>:    mesh = nume_ddl.getMesh()
[1,22]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,22]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,22]<stdout>:
[1,22]<stdout>:    if rank == 0:
[1,22]<stdout>:        print()
[1,22]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,22]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,22]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,22]<stdout>:
[1,22]<stdout>:    def show(*args, **kwargs):
[1,22]<stdout>:        if rank == 0:
[1,22]<stdout>:            print(*args, **kwargs)
[1,22]<stdout>:
[1,22]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,22]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,22]<stdout>:    separ = "| :--------------- | ----------: |"
[1,22]<stdout>:    show(fmti.format("Refinement", refine))
[1,22]<stdout>:    show(separ)
[1,22]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,22]<stdout>:    for key, values in data.items():
[1,22]<stdout>:        times = comm.gather(values[0], root=0)
[1,22]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,22]<stdout>:        if rank == 0:
[1,22]<stdout>:            show(fmtt.format(key, mean(times)))
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,22]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,22]<stdout>:
[1,22]<stdout>:with ChronoCtxMg("Total"):
[1,22]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,22]<stdout>:        if params["parallel"] == "HPC":
[1,22]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,22]<stdout>:        else:
[1,22]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Model"):
[1,22]<stdout>:        model = AFFE_MODELE(
[1,22]<stdout>:            MAILLAGE=mesh,
[1,22]<stdout>:            AFFE=_F(
[1,22]<stdout>:                TOUT="OUI",
[1,22]<stdout>:                PHENOMENE="MECANIQUE",
[1,22]<stdout>:                MODELISATION="3D",
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Material"):
[1,22]<stdout>:        steel = DEFI_MATERIAU(
[1,22]<stdout>:            ELAS=_F(
[1,22]<stdout>:                E=200000.0,
[1,22]<stdout>:                NU=0.3,
[1,22]<stdout>:            ),
[1,22]<stdout>:            ECRO_LINE=_F(
[1,22]<stdout>:                D_SIGM_EPSI=2000.0,
[1,22]<stdout>:                SY=200.0,
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:        mater = AFFE_MATERIAU(
[1,22]<stdout>:            MAILLAGE=mesh,
[1,22]<stdout>:            AFFE=_F(
[1,22]<stdout>:                TOUT="OUI",
[1,22]<stdout>:                MATER=steel,
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,22]<stdout>:        block = AFFE_CHAR_CINE(
[1,22]<stdout>:            MODELE=model,
[1,22]<stdout>:            MECA_IMPO=(
[1,22]<stdout>:                _F(
[1,22]<stdout>:                    GROUP_MA="LEFT",
[1,22]<stdout>:                    DX=0,
[1,22]<stdout>:                    DY=0.0,
[1,22]<stdout>:                    DZ=0.0,
[1,22]<stdout>:                ),
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,22]<stdout>:            MODELE=model,
[1,22]<stdout>:            MECA_IMPO=(
[1,22]<stdout>:                _F(
[1,22]<stdout>:                    GROUP_MA="RIGHT",
[1,22]<stdout>:                    DY=0.001,
[1,22]<stdout>:                    DZ=0.001,
[1,22]<stdout>:                ),
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,22]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,22]<stdout>:            MODELE=model,
[1,22]<stdout>:            OPTION="RIGI_MECA",
[1,22]<stdout>:            CHAM_MATER=mater,
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Numbering"):
[1,22]<stdout>:        dofNum = NUME_DDL(
[1,22]<stdout>:            MATR_RIGI=stiff_elem,
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Assembly"):
[1,22]<stdout>:        stiffness = ASSE_MATRICE(
[1,22]<stdout>:            MATR_ELEM=stiff_elem,
[1,22]<stdout>:            NUME_DDL=dofNum,
[1,22]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,22]<stdout>:        rhs = CREA_CHAMP(
[1,22]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,22]<stdout>:            OPERATION="AFFE",
[1,22]<stdout>:            MAILLAGE=mesh,
[1,22]<stdout>:            AFFE=_F(
[1,22]<stdout>:                TOUT="OUI",
[1,22]<stdout>:                NOM_CMP=(
[1,22]<stdout>:                    "DX",
[1,22]<stdout>:                    "DY",
[1,22]<stdout>:                    "DZ",
[1,22]<stdout>:                ),
[1,22]<stdout>:                VALE=(
[1,22]<stdout>:                    0.0,
[1,22]<stdout>:                    0.0,
[1,22]<stdout>:                    0.0,
[1,22]<stdout>:                ),
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,22]<stdout>:
[1,22]<stdout>:    if params["solver"] == "PETSC":
[1,22]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,22]<stdout>:    elif params["solver"] == "MUMPS":
[1,22]<stdout>:        solver = CA.MumpsSolver(
[1,22]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,22]<stdout>:   [1,22]<stdout>:         RENUM="PARMETIS",
[1,22]<stdout>:            ACCELERATION="FR+",
[1,22]<stdout>:            POSTTRAITEMENTS="MINI",
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Factorize"):
[1,22]<stdout>:        solver.factorize(stiffness)
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Solve"):
[1,22]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,22]<stdout>:
[1,22]<stdout>:# write_stats(dofNum)
[1,22]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,22]<stdout>:if params["parallel"] == "HPC":
[1,22]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,22]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,22]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,22]<stdout>:
[1,22]<stdout>:CA.close()
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Command line #1:
[1,22]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,23]<stdout>:
[1,23]<stdout>:Content of the file to execute:
[1,23]<stdout>:# coding=utf-8
[1,23]<stdout>:#!/usr/bin/python
[1,23]<stdout>:
[1,23]<stdout>:import os
[1,23]<stdout>:from statistics import mean
[1,23]<stdout>:from datetime import datetime
[1,23]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,23]<stdout>:
[1,23]<stdout>:from code_aster.Commands import *
[1,23]<stdout>:from code_aster import CA
[1,23]<stdout>:from code_aster.Utilities import petscInitialize
[1,23]<stdout>:
[1,23]<stdout>:CA.init()
[1,23]<stdout>:
[1,23]<stdout>:params = {}
[1,23]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,23]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,23]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,23]<stdout>:
[1,23]<stdout>:# General parameters
[1,23]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,23]<stdout>:rank = comm.Get_rank()
[1,23]<stdout>:size = comm.Get_size()
[1,23]<stdout>:
[1,23]<stdout>:nbHexa = 8 ** params["refinements"]
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:def memory_peak(mess=None):
[1,23]<stdout>:    """Return memory peak in MB"""
[1,23]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:class ChronoCtxMgGen:
[1,23]<stdout>:    stats = {}
[1,23]<stdout>:
[1,23]<stdout>:    def __init__(self, what):
[1,23]<stdout>:        self._what = what
[1,23]<stdout>:
[1,23]<stdout>:    def __enter__(self):
[1,23]<stdout>:        self.start = datetime.now()
[1,23]<stdout>:
[1,23]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,23]<stdout>:        self.stop = datetime.now()
[1,23]<stdout>:        delta = self.stop - self.start
[1,23]<stdout>:        mem = memory_peak(self._what)
[1,23]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,23]<stdout>:    pass
[1,23]<stdout>:    # def __init__(self, what):
[1,23]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:def write_stats(nume_ddl):
[1,23]<stdout>:    if rank == 0:
[1,23]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,23]<stdout>:        print()
[1,23]<stdout>:        print("NB PROC")
[1,23]<stdout>:        print(size)
[1,23]<stdout>:        print()
[1,23]<stdout>:        print(
[1,23]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    for key, values in stats.items():
[1,23]<stdout>:        time = comm.gather(values[0], root=0)
[1,23]<stdout>:        mem = comm.gather(values[1], root=0)
[1,23]<stdout>:        if rank == 0:
[1,23]<stdout>:            print(
[1,23]<stdout>:                key
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(min(time))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(max(time))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(mean(time))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(min(mem))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(max(mem))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(mean(mem))
[1,23]<stdout>:            )
[1,23]<stdout>:
[1,23]<stdout>:    mesh = nume_ddl.getMesh()
[1,23]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,23]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,23]<stdout>:
[1,23]<stdout>:    if rank == 0:
[1,23]<stdout>:        print()
[1,23]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,23]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,23]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,23]<stdout>:
[1,23]<stdout>:    def show(*args, **kwargs):
[1,23]<stdout>:        if rank == 0:
[1,23]<stdout>:            print(*args, **kwargs)
[1,23]<stdout>:
[1,23]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,23]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,23]<stdout>:    separ = "| :--------------- | ----------: |"
[1,23]<stdout>:    show(fmti.format("Refinement", refine))
[1,23]<stdout>:    show(separ)
[1,23]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,23]<stdout>:    for key, values in data.items():
[1,23]<stdout>:        times = comm.gather(values[0], root=0)
[1,23]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,23]<stdout>:        if rank == 0:
[1,23]<stdout>:            show(fmtt.format(key, mean(times)))
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,23]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,23]<stdout>:
[1,23]<stdout>:with ChronoCtxMg("Total"):
[1,23]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,23]<stdout>:        if params["parallel"] == "HPC":
[1,23]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,23]<stdout>:        else:
[1,23]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Model"):
[1,23]<stdout>:        model = AFFE_MODELE(
[1,23]<stdout>:            MAILLAGE=mesh,
[1,23]<stdout>:            AFFE=_F(
[1,23]<stdout>:                TOUT="OUI",
[1,23]<stdout>:                PHENOMENE="MECANIQUE",
[1,23]<stdout>:                MODELISATION="3D",
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Material"):
[1,23]<stdout>:        steel = DEFI_MATERIAU(
[1,23]<stdout>:            ELAS=_F(
[1,23]<stdout>:                E=200000.0,
[1,23]<stdout>:                NU=0.3,
[1,23]<stdout>:            ),
[1,23]<stdout>:            ECRO_LINE=_F(
[1,23]<stdout>:   [1,23]<stdout>:             D_SIGM_EPSI=2000.0,
[1,23]<stdout>:                SY=200.0,
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:        mater = AFFE_MATERIAU(
[1,23]<stdout>:            MAILLAGE=mesh,
[1,23]<stdout>:            AFFE=_F(
[1,23]<stdout>:                TOUT="OUI",
[1,23]<stdout>:                MATER=steel,
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,23]<stdout>:        block = AFFE_CHAR_CINE(
[1,23]<stdout>:            MODELE=model,
[1,23]<stdout>:            MECA_IMPO=(
[1,23]<stdout>:                _F(
[1,23]<stdout>:                    GROUP_MA="LEFT",
[1,23]<stdout>:                    DX=0,
[1,23]<stdout>:                    DY=0.0,
[1,23]<stdout>:                    DZ=0.0,
[1,23]<stdout>:                ),
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,23]<stdout>:            MODELE=model,
[1,23]<stdout>:            MECA_IMPO=(
[1,23]<stdout>:                _F(
[1,23]<stdout>:                    GROUP_MA="RIGHT",
[1,23]<stdout>:                    DY=0.001,
[1,23]<stdout>:                    DZ=0.001,
[1,23]<stdout>:                ),
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,23]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,23]<stdout>:            MODELE=model,
[1,23]<stdout>:            OPTION="RIGI_MECA",
[1,23]<stdout>:            CHAM_MATER=mater,
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Numbering"):
[1,23]<stdout>:        dofNum = NUME_DDL(
[1,23]<stdout>:            MATR_RIGI=stiff_elem,
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Assembly"):
[1,23]<stdout>:        stiffness = ASSE_MATRICE(
[1,23]<stdout>:            MATR_ELEM=stiff_elem,
[1,23]<stdout>:            NUME_DDL=dofNum,
[1,23]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,23]<stdout>:        rhs = CREA_CHAMP(
[1,23]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,23]<stdout>:            OPERATION="AFFE",
[1,23]<stdout>:            MAILLAGE=mesh,
[1,23]<stdout>:            AFFE=_F(
[1,23]<stdout>:                TOUT="OUI",
[1,23]<stdout>:                NOM_CMP=(
[1,23]<stdout>:                    "DX",
[1,23]<stdout>:                    "DY",
[1,23]<stdout>:                    "DZ",
[1,23]<stdout>:                ),
[1,23]<stdout>:                VALE=(
[1,23]<stdout>:                    0.0,
[1,23]<stdout>:                    0.0,
[1,23]<stdout>:                    0.0,
[1,23]<stdout>:                ),
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,23]<stdout>:
[1,23]<stdout>:    if params["solver"] == "PETSC":
[1,23]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,23]<stdout>:    elif params["solver"] == "MUMPS":
[1,23]<stdout>:        solver = CA.MumpsSolver(
[1,23]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,23]<stdout>:            RENUM="PARMETIS",
[1,23]<stdout>:            ACCELERATION="FR+",
[1,23]<stdout>:            POSTTRAITEMENTS="MINI",
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Factorize"):
[1,23]<stdout>:        solver.factorize(stiffness)
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Solve"):
[1,23]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,23]<stdout>:
[1,23]<stdout>:# write_stats(dofNum)
[1,23]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,23]<stdout>:if params["parallel"] == "HPC":
[1,23]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,23]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,23]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,23]<stdout>:
[1,23]<stdout>:CA.close()
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Command line #1:
[1,23]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,21]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,10]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,22]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,23]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,1]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,12]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,3]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,21]<stdout>:checking MPI initialization...
[1,21]<stdout>:using COMM_WORLD.
[1,21]<stdout>:MPI is initialized.
[1,21]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,21]<stdout>:
[1,14]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,20]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,21]<stdout>:<INFO> Démarrage de l'exécution.
[1,21]<stdout>:
[1,21]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,21]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,21]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,21]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,21]<stdout>:                                                                                                    
[1,21]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,21]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,21]<stdout>:                                        Architecture : 64bit                                        
[1,21]<stdout>:                                    Type de processeur : aarch64                                    
[1,21]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,21]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,21]<stdout>:                                     Version de Python : 3.11.2                                     
[1,21]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,21]<stdout>:                                      Parallélisme MPI : actif                                      
[1,21]<stdout>:                                  Rang du processeur courant : 21                                   
[1,21]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,21]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,21]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,21]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,21]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,10]<stdout>:checking MPI initialization...
[1,10]<stdout>:using COMM_WORLD.
[1,10]<stdout>:MPI is initialized.
[1,10]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,10]<stdout>:
[1,21]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,21]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,21]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,21]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,21]<stdout>:
[1,10]<stdout>:<INFO> Démarrage de l'exécution.
[1,10]<stdout>:
[1,21]<stdout>:starting the execution...
[1,10]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,10]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,10]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,10]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,10]<stdout>:                                                                                                    
[1,10]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,10]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,10]<stdout>:                                        Architecture : 64bit                                        
[1,10]<stdout>:                                    Type de processeur : aarch64                                    
[1,10]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,10]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,10]<stdout>:                                     Version de Python : 3.11.2                                     
[1,10]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,22]<stdout>:checking MPI initialization...
[1,22]<stdout>:using COMM_WORLD.
[1,22]<stdout>:MPI is initialized.
[1,22]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,22]<stdout>:
[1,23]<stdout>:checking MPI initialization...
[1,23]<stdout>:using COMM_WORLD.
[1,23]<stdout>:MPI is initialized.
[1,23]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,23]<stdout>:
[1,10]<stdout>:                                      Parallélisme MPI : actif                                      
[1,10]<stdout>:                                  Rang du processeur courant : 10                                   
[1,10]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,10]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,10]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,11]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,9]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,1]<stdout>:checking MPI initialization...
[1,1]<stdout>:using COMM_WORLD.
[1,1]<stdout>:MPI is initialized.
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,23]<stdout>:<INFO> Démarrage de l'exécution.
[1,23]<stdout>:
[1,22]<stdout>:<INFO> Démarrage de l'exécution.
[1,22]<stdout>:
[1,17]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,23]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,22]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,23]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,23]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,10]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,22]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,22]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,12]<stdout>:checking MPI initialization...
[1,12]<stdout>:using COMM_WORLD.
[1,12]<stdout>:MPI is initialized.
[1,12]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,12]<stdout>:
[1,10]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,21]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,21]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,21]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,21]<stdout>:
[1,23]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,23]<stdout>:                                                                                                    
[1,23]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,23]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,23]<stdout>:                                        Architecture : 64bit                                        
[1,23]<stdout>:                                    Type de processeur : aarch64                                    
[1,23]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,23]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,22]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,22]<stdout>:                                                                                                    
[1,22]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,22]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,22]<stdout>:                                        Architecture : 64bit                                        
[1,22]<stdout>:                                    Type de processeur : aarch64                                    
[1,22]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,22]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,10]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,23]<stdout>:                                     Version de Python : 3.11.2                                     
[1,23]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,22]<stdout>:                                     Version de Python : 3.11.2                                     
[1,22]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,10]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,1]<stdout>:<INFO> Démarrage de l'exécution.
[1,1]<stdout>:
[1,23]<stdout>:                                      Parallélisme MPI : actif                                      
[1,23]<stdout>:                                  Rang du processeur courant : 23                                   
[1,23]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,10]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,22]<stdout>:                                      Parallélisme MPI : actif                                      
[1,22]<stdout>:                                  Rang du processeur courant : 22                                   
[1,22]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,10]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,3]<stdout>:checking MPI initialization...
[1,3]<stdout>:using COMM_WORLD.
[1,3]<stdout>:MPI is initialized.
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,23]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,23]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,1]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,22]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,22]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,1]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,1]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,12]<stdout>:<INFO> Démarrage de l'exécution.
[1,12]<stdout>:
[1,1]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,1]<stdout>:                                                                                                    
[1,1]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,1]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,1]<stdout>:                                        Architecture : 64bit                                        
[1,1]<stdout>:                                    Type de processeur : aarch64                                    
[1,1]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,1]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,10]<stdout>:
[1,1]<stdout>:                                     Version de Python : 3.11.2                                     
[1,1]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,12]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,10]<stdout>:starting the execution...
[1,1]<stdout>:                                      Parallélisme MPI : actif                                      
[1,1]<stdout>:                                   Rang du processeur courant : 1                                   
[1,1]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,12]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,12]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,3]<stdout>:<INFO> Démarrage de l'exécution.
[1,3]<stdout>:
[1,1]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,1]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,12]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,12]<stdout>:                                                                                                    
[1,12]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,12]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,12]<stdout>:                                        Architecture : 64bit                                        
[1,12]<stdout>:                                    Type de processeur : aarch64                                    
[1,12]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,12]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,3]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,23]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,12]<stdout>:                                     Version de Python : 3.11.2                                     
[1,12]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,22]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,23]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,3]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,3]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,12]<stdout>:                                      Parallélisme MPI : actif                                      
[1,12]<stdout>:                                  Rang du processeur courant : 12                                   
[1,12]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,22]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,23]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,12]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,12]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,22]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,23]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,3]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,3]<stdout>:                                                                                                    
[1,3]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,3]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,3]<stdout>:                                        Architecture : 64bit                                        
[1,3]<stdout>:                                    Type de processeur : aarch64                                    
[1,3]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,3]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,18]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,23]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,22]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,3]<stdout>:                                     Version de Python : 3.11.2                                     
[1,3]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,23]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,22]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,3]<stdout>:                                      Parallélisme MPI : actif                                      
[1,3]<stdout>:                                   Rang du processeur courant : 3                                   
[1,3]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,22]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,20]<stdout>:checking MPI initialization...
[1,20]<stdout>:using COMM_WORLD.
[1,20]<stdout>:MPI is initialized.
[1,20]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,20]<stdout>:
[1,14]<stdout>:checking MPI initialization...
[1,14]<stdout>:using COMM_WORLD.
[1,14]<stdout>:MPI is initialized.
[1,14]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,14]<stdout>:
[1,3]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,3]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,1]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,1]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,23]<stdout>:
[1,1]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,22]<stdout>:
[1,1]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,23]<stdout>:starting the execution...
[1,1]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,12]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,22]<stdout>:starting the execution...
[1,1]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,12]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,20]<stdout>:<INFO> Démarrage de l'exécution.
[1,20]<stdout>:
[1,10]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,10]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,10]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,10]<stdout>:
[1,12]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,14]<stdout>:<INFO> Démarrage de l'exécution.
[1,14]<stdout>:
[1,12]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,20]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,1]<stdout>:
[1,12]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,3]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,14]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,12]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,3]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,20]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,20]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,1]<stdout>:starting the execution...
[1,14]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,14]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,3]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,20]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,20]<stdout>:                                                                                                    
[1,20]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,20]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,20]<stdout>:                                        Architecture : 64bit                                        
[1,20]<stdout>:                                    Type de processeur : aarch64                                    
[1,20]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,20]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,3]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,14]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,14]<stdout>:                                                                                                    
[1,14]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,14]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,14]<stdout>:                                        Architecture : 64bit                                        
[1,14]<stdout>:                                    Type de processeur : aarch64                                    
[1,14]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,14]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,20]<stdout>:                                     Version de Python : 3.11.2                                     
[1,20]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,12]<stdout>:
[1,3]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,0]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,14]<stdout>:                                     Version de Python : 3.11.2                                     
[1,14]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,3]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,20]<stdout>:                                      Parallélisme MPI : actif                                      
[1,20]<stdout>:                                  Rang du processeur courant : 20                                   
[1,20]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,14]<stdout>:                                      Parallélisme MPI : actif                                      
[1,14]<stdout>:                                  Rang du processeur courant : 14                                   
[1,14]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,12]<stdout>:starting the execution...
[1,20]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,20]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,14]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,14]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,3]<stdout>:
[1,3]<stdout>:starting the execution...
[1,23]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,23]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,23]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,23]<stdout>:
[1,22]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,22]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,22]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,22]<stdout>:
[1,11]<stdout>:checking MPI initialization...
[1,11]<stdout>:using COMM_WORLD.
[1,11]<stdout>:MPI is initialized.
[1,11]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,11]<stdout>:
[1,9]<stdout>:checking MPI initialization...
[1,9]<stdout>:using COMM_WORLD.
[1,9]<stdout>:MPI is initialized.
[1,9]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,9]<stdout>:
[1,20]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,17]<stdout>:checking MPI initialization...
[1,17]<stdout>:using COMM_WORLD.
[1,17]<stdout>:MPI is initialized.
[1,17]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,17]<stdout>:
[1,20]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,20]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,14]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,1]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,1]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,1]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,1]<stdout>:
[1,20]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,14]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,20]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,14]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,11]<stdout>:<INFO> Démarrage de l'exécution.
[1,11]<stdout>:
[1,20]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,14]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,2]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,9]<stdout>:<INFO> Démarrage de l'exécution.
[1,9]<stdout>:
[1,14]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,19]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,17]<stdout>:<INFO> Démarrage de l'exécution.
[1,17]<stdout>:
[1,11]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,12]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,12]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,12]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,12]<stdout>:
[1,5]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,4]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,20]<stdout>:
[1,9]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,11]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,11]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,18]<stdout>:checking MPI initialization...
[1,18]<stdout>:using COMM_WORLD.
[1,18]<stdout>:MPI is initialized.
[1,18]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,18]<stdout>:
[1,17]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,14]<stdout>:
[1,9]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,9]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,20]<stdout>:starting the execution...
[1,17]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,17]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,11]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,11]<stdout>:                                                                                                    
[1,11]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,11]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,11]<stdout>:                                        Architecture : 64bit                                        
[1,11]<stdout>:                                    Type de processeur : aarch64                                    
[1,11]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,11]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,9]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,9]<stdout>:                                                                                                    
[1,9]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,9]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,9]<stdout>:                                        Architecture : 64bit                                        
[1,9]<stdout>:                                    Type de processeur : aarch64                                    
[1,9]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,9]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,7]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,3]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,3]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,3]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,3]<stdout>:
[1,11]<stdout>:                                     Version de Python : 3.11.2                                     
[1,11]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,14]<stdout>:starting the execution...
[1,17]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,17]<stdout>:                                                                                                    
[1,17]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,17]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,17]<stdout>:                                        Architecture : 64bit                                        
[1,17]<stdout>:                                    Type de processeur : aarch64                                    
[1,17]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,17]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,9]<stdout>:                                     Version de Python : 3.11.2                                     
[1,9]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,11]<stdout>:                                      Parallélisme MPI : actif                                      
[1,11]<stdout>:                                  Rang du processeur courant : 11                                   
[1,11]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,17]<stdout>:                                     Version de Python : 3.11.2                                     
[1,17]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,9]<stdout>:                                      Parallélisme MPI : actif                                      
[1,9]<stdout>:                                   Rang du processeur courant : 9                                   
[1,9]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,11]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,11]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,17]<stdout>:                                      Parallélisme MPI : actif                                      
[1,17]<stdout>:                                  Rang du processeur courant : 17                                   
[1,17]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,9]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,9]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,18]<stdout>:<INFO> Démarrage de l'exécution.
[1,18]<stdout>:
[1,17]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,17]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,16]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,18]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,0]<stdout>:checking MPI initialization...
[1,0]<stdout>:using COMM_WORLD.
[1,0]<stdout>:MPI is initialized.
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,8]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,13]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,18]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,18]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,18]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,18]<stdout>:                                                                                                    
[1,18]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,18]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,18]<stdout>:                                        Architecture : 64bit                                        
[1,18]<stdout>:                                    Type de processeur : aarch64                                    
[1,18]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,18]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,6]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,15]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,18]<stdout>:                                     Version de Python : 3.11.2                                     
[1,18]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,18]<stdout>:                                      Parallélisme MPI : actif                                      
[1,18]<stdout>:                                  Rang du processeur courant : 18                                   
[1,18]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,11]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,9]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,11]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,18]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,18]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,17]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,9]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,11]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,0]<stdout>:<INFO> Démarrage de l'exécution.
[1,0]<stdout>:
[1,11]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,17]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,9]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,20]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,20]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,20]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,20]<stdout>:
[1,11]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,9]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,17]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,0]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,11]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,17]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,9]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,9]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,17]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,0]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,0]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,14]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,14]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,14]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,14]<stdout>:
[1,17]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,0]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,0]<stdout>:                                                                                                    
[1,0]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,0]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,0]<stdout>:                                        Architecture : 64bit                                        
[1,0]<stdout>:                                    Type de processeur : aarch64                                    
[1,0]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,0]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,11]<stdout>:
[1,0]<stdout>:                                     Version de Python : 3.11.2                                     
[1,0]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,9]<stdout>:
[1,18]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                                      Parallélisme MPI : actif                                      
[1,0]<stdout>:                                   Rang du processeur courant : 0                                   
[1,0]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,17]<stdout>:
[1,18]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,11]<stdout>:starting the execution...
[1,0]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,0]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,18]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,9]<stdout>:starting the execution...
[1,18]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,17]<stdout>:starting the execution...
[1,18]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,18]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,18]<stdout>:
[1,0]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,18]<stdout>:starting the execution...
[1,0]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,0]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,0]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,0]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,11]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,11]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,11]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,11]<stdout>:
[1,9]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,9]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,9]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,9]<stdout>:
[1,0]<stdout>:
[1,17]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,17]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,17]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,17]<stdout>:
[1,0]<stdout>:starting the execution...
[1,2]<stdout>:checking MPI initialization...
[1,2]<stdout>:using COMM_WORLD.
[1,2]<stdout>:MPI is initialized.
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,2]<stdout>:<INFO> Démarrage de l'exécution.
[1,2]<stdout>:
[1,18]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,18]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,18]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,18]<stdout>:
[1,21]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,21]<stdout>:
[1,19]<stdout>:checking MPI initialization...
[1,19]<stdout>:using COMM_WORLD.
[1,19]<stdout>:MPI is initialized.
[1,19]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,19]<stdout>:
[1,2]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,2]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,2]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,5]<stdout>:checking MPI initialization...
[1,5]<stdout>:using COMM_WORLD.
[1,5]<stdout>:MPI is initialized.
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,4]<stdout>:checking MPI initialization...
[1,4]<stdout>:using COMM_WORLD.
[1,4]<stdout>:MPI is initialized.
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,2]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,2]<stdout>:                                                                                                    
[1,2]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,2]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,2]<stdout>:                                        Architecture : 64bit                                        
[1,2]<stdout>:                                    Type de processeur : aarch64                                    
[1,2]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,2]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,2]<stdout>:                                     Version de Python : 3.11.2                                     
[1,2]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,19]<stdout>:<INFO> Démarrage de l'exécution.
[1,19]<stdout>:
[1,2]<stdout>:                                      Parallélisme MPI : actif                                      
[1,2]<stdout>:                                   Rang du processeur courant : 2                                   
[1,2]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,7]<stdout>:checking MPI initialization...
[1,7]<stdout>:using COMM_WORLD.
[1,7]<stdout>:MPI is initialized.
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,2]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,2]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,0]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,0]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,0]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,0]<stdout>:
[1,19]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,5]<stdout>:<INFO> Démarrage de l'exécution.
[1,5]<stdout>:
[1,4]<stdout>:<INFO> Démarrage de l'exécution.
[1,4]<stdout>:
[1,19]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,19]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,8]<stdout>:checking MPI initialization...
[1,8]<stdout>:using COMM_WORLD.
[1,8]<stdout>:MPI is initialized.
[1,8]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,8]<stdout>:
[1,5]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,4]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,19]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,19]<stdout>:                                                                                                    
[1,19]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,19]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,19]<stdout>:                                        Architecture : 64bit                                        
[1,19]<stdout>:                                    Type de processeur : aarch64                                    
[1,19]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,19]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,6]<stdout>:checking MPI initialization...
[1,6]<stdout>:using COMM_WORLD.
[1,6]<stdout>:MPI is initialized.
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,16]<stdout>:checking MPI initialization...
[1,16]<stdout>:using COMM_WORLD.
[1,16]<stdout>:MPI is initialized.
[1,5]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,5]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,19]<stdout>:                                     Version de Python : 3.11.2                                     
[1,19]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,16]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,16]<stdout>:
[1,4]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,4]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,7]<stdout>:<INFO> Démarrage de l'exécution.
[1,7]<stdout>:
[1,19]<stdout>:                                      Parallélisme MPI : actif                                      
[1,19]<stdout>:                                  Rang du processeur courant : 19                                   
[1,19]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,13]<stdout>:checking MPI initialization...
[1,13]<stdout>:using COMM_WORLD.
[1,13]<stdout>:MPI is initialized.
[1,13]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,13]<stdout>:
[1,5]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,5]<stdout>:                                                                                                    
[1,5]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,5]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,5]<stdout>:                                        Architecture : 64bit                                        
[1,5]<stdout>:                                    Type de processeur : aarch64                                    
[1,5]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,5]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,4]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,4]<stdout>:                                                                                                    
[1,4]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,4]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,4]<stdout>:                                        Architecture : 64bit                                        
[1,4]<stdout>:                                    Type de processeur : aarch64                                    
[1,4]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,4]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,15]<stdout>:checking MPI initialization...
[1,15]<stdout>:using COMM_WORLD.
[1,15]<stdout>:MPI is initialized.
[1,15]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,15]<stdout>:
[1,19]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,19]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,5]<stdout>:                                     Version de Python : 3.11.2                                     
[1,5]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,7]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,4]<stdout>:                                     Version de Python : 3.11.2                                     
[1,4]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,5]<stdout>:                                      Parallélisme MPI : actif                                      
[1,5]<stdout>:                                   Rang du processeur courant : 5                                   
[1,5]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,2]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,4]<stdout>:                                      Parallélisme MPI : actif                                      
[1,4]<stdout>:                                   Rang du processeur courant : 4                                   
[1,4]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,7]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,7]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,8]<stdout>:<INFO> Démarrage de l'exécution.
[1,8]<stdout>:
[1,2]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,5]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,5]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,4]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,4]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,6]<stdout>:<INFO> Démarrage de l'exécution.
[1,6]<stdout>:
[1,2]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,16]<stdout>:<INFO> Démarrage de l'exécution.
[1,16]<stdout>:
[1,7]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,7]<stdout>:                                                                                                    
[1,7]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,7]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,7]<stdout>:                                        Architecture : 64bit                                        
[1,7]<stdout>:                                    Type de processeur : aarch64                                    
[1,7]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,7]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,2]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,8]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,7]<stdout>:                                     Version de Python : 3.11.2                                     
[1,7]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,13]<stdout>:<INFO> Démarrage de l'exécution.
[1,13]<stdout>:
[1,2]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,6]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,15]<stdout>:<INFO> Démarrage de l'exécution.
[1,15]<stdout>:
[1,16]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,8]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,8]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,2]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,7]<stdout>:                                      Parallélisme MPI : actif                                      
[1,7]<stdout>:                                   Rang du processeur courant : 7                                   
[1,7]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,6]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,6]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,7]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,7]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,13]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,16]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,16]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,8]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,8]<stdout>:                                                                                                    
[1,8]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,8]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,8]<stdout>:                                        Architecture : 64bit                                        
[1,8]<stdout>:                                    Type de processeur : aarch64                                    
[1,8]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,8]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,15]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,6]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,6]<stdout>:                                                                                                    
[1,6]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,6]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,6]<stdout>:                                        Architecture : 64bit                                        
[1,6]<stdout>:                                    Type de processeur : aarch64                                    
[1,6]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,6]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,8]<stdout>:                                     Version de Python : 3.11.2                                     
[1,8]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,13]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,13]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,16]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,16]<stdout>:                                                                                                    
[1,16]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,16]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,16]<stdout>:                                        Architecture : 64bit                                        
[1,16]<stdout>:                                    Type de processeur : aarch64                                    
[1,16]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,16]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,2]<stdout>:
[1,19]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,6]<stdout>:                                     Version de Python : 3.11.2                                     
[1,6]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,15]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,15]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,8]<stdout>:                                      Parallélisme MPI : actif                                      
[1,8]<stdout>:                                   Rang du processeur courant : 8                                   
[1,8]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,16]<stdout>:                                     Version de Python : 3.11.2                                     
[1,16]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,19]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,13]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,13]<stdout>:                                                                                                    
[1,13]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,13]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,13]<stdout>:                                        Architecture : 64bit                                        
[1,13]<stdout>:                                    Type de processeur : aarch64                                    
[1,13]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,13]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,19]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,6]<stdout>:                                      Parallélisme MPI : actif                                      
[1,6]<stdout>:                                   Rang du processeur courant : 6                                   
[1,6]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,15]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,15]<stdout>:                                                                                                    
[1,15]<stdout>:                              Exécution du : Thu Jan 23 16:32:54 2025                               
[1,15]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,15]<stdout>:                                        Architecture : 64bit                                        
[1,15]<stdout>:                                    Type de processeur : aarch64                                    
[1,15]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,15]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,8]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,8]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,16]<stdout>:                                      Parallélisme MPI : actif                                      
[1,16]<stdout>:                                  Rang du processeur courant : 16                                   
[1,16]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,5]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,13]<stdout>:                                     Version de Python : 3.11.2                                     
[1,13]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,2]<stdout>:starting the execution...
[1,19]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,6]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,6]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,15]<stdout>:                                     Version de Python : 3.11.2                                     
[1,15]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,4]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,5]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,13]<stdout>:                                      Parallélisme MPI : actif                                      
[1,13]<stdout>:                                  Rang du processeur courant : 13                                   
[1,13]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,16]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,16]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,19]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,15]<stdout>:                                      Parallélisme MPI : actif                                      
[1,15]<stdout>:                                  Rang du processeur courant : 15                                   
[1,15]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,4]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,5]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,19]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,13]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,13]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,5]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,4]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,15]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,15]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,5]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,4]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,5]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,7]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,4]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,19]<stdout>:
[1,4]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,7]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,19]<stdout>:starting the execution...
[1,7]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,5]<stdout>:
[1,7]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,8]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,4]<stdout>:
[1,8]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,5]<stdout>:starting the execution...
[1,6]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,8]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,16]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,6]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,8]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,4]<stdout>:starting the execution...
[1,16]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,13]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,6]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,8]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,16]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,7]<stdout>:
[1,15]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,13]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,6]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,8]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,16]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,15]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,13]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,6]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,16]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,13]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,15]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,6]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,7]<stdout>:starting the execution...
[1,10]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,10]<stdout>:
[1,16]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,15]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,13]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,8]<stdout>:
[1,13]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,15]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,2]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,2]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,2]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,2]<stdout>:
[1,15]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,6]<stdout>:
[1,8]<stdout>:starting the execution...
[1,16]<stdout>:
[1,13]<stdout>:
[1,15]<stdout>:
[1,6]<stdout>:starting the execution...
[1,16]<stdout>:starting the execution...
[1,13]<stdout>:starting the execution...
[1,15]<stdout>:starting the execution...
[1,19]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,19]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,19]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,19]<stdout>:
[1,5]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,5]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,5]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,5]<stdout>:
[1,4]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,4]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,4]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,4]<stdout>:
[1,23]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,23]<stdout>:
[1,7]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,7]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,7]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,7]<stdout>:
[1,8]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,8]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,8]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,8]<stdout>:
[1,22]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,22]<stdout>:
[1,6]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,6]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,6]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,6]<stdout>:
[1,16]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,16]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,16]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,16]<stdout>:
[1,13]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,13]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,13]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,13]<stdout>:
[1,15]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,15]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,15]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,15]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,1]<stdout>:
[1,12]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,12]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,3]<stdout>:
[1,14]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,14]<stdout>:
[1,20]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,20]<stdout>:
[1,11]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,11]<stdout>:
[1,17]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,17]<stdout>:
[1,9]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,9]<stdout>:
[1,18]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,18]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,0]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,2]<stdout>:
[1,19]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,19]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,5]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,4]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,7]<stdout>:
[1,16]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,16]<stdout>:
[1,13]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,13]<stdout>:
[1,8]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,8]<stdout>:
[1,15]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,15]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,6]<stdout>:
[1,21]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,21]<stdout>:
[1,10]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,10]<stdout>:
[1,23]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,23]<stdout>:
[1,22]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,22]<stdout>:
[1,12]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,12]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,14]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,14]<stdout>:
[1,20]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,20]<stdout>:
[1,9]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,9]<stdout>:
[1,17]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,17]<stdout>:
[1,18]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,18]<stdout>:
[1,11]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,11]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,19]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,19]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,16]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,16]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,8]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,8]<stdout>:
[1,13]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,13]<stdout>:
[1,15]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,15]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,21]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,21]<stdout>:
[1,21]<stdout>:Nom de la base                          :  ELEMBASE
[1,21]<stdout>:     Créée avec la version                   :  17.02.04
[1,21]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,21]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,21]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,21]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,21]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,21]<stdout>:     Taille maximum du répertoire            :  300
[1,21]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,21]<stdout>:
[1,21]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,21]<stdout>:
[1,10]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,10]<stdout>:
[1,10]<stdout>:Nom de la base                          :  ELEMBASE
[1,10]<stdout>:     Créée avec la version                   :  17.02.04
[1,10]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,10]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,10]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,10]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,10]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,10]<stdout>:     Taille maximum du répertoire            :  300
[1,10]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,10]<stdout>:
[1,10]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,10]<stdout>:
[1,23]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,23]<stdout>:
[1,23]<stdout>:Nom de la base                          :  ELEMBASE
[1,23]<stdout>:     Créée avec la version                   :  17.02.04
[1,23]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,23]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,23]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,23]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,23]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,23]<stdout>:     Taille maximum du répertoire            :  300
[1,23]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,23]<stdout>:
[1,23]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,23]<stdout>:
[1,22]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,22]<stdout>:
[1,22]<stdout>:Nom de la base                          :  ELEMBASE
[1,22]<stdout>:     Créée avec la version                   :  17.02.04
[1,22]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,22]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,22]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,22]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,22]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,22]<stdout>:     Taille maximum du répertoire            :  300
[1,22]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,22]<stdout>:
[1,22]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,22]<stdout>:
[1,12]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,12]<stdout>:
[1,12]<stdout>:Nom de la base                          :  ELEMBASE
[1,12]<stdout>:     Créée avec la version                   :  17.02.04
[1,12]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,12]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,12]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,12]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,12]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,12]<stdout>:     Taille maximum du répertoire            :  300
[1,12]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,12]<stdout>:
[1,12]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,12]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Créée avec la version                   :  17.02.04
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Créée avec la version                   :  17.02.04
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,14]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,14]<stdout>:
[1,14]<stdout>:Nom de la base                          :  ELEMBASE
[1,14]<stdout>:     Créée avec la version                   :  17.02.04
[1,14]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,14]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,14]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,14]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,14]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,14]<stdout>:     Taille maximum du répertoire            :  300
[1,14]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,14]<stdout>:
[1,14]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,14]<stdout>:
[1,20]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,20]<stdout>:
[1,20]<stdout>:Nom de la base                          :  ELEMBASE
[1,20]<stdout>:     Créée avec la version                   :  17.02.04
[1,20]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,20]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,20]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,20]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,20]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,20]<stdout>:     Taille maximum du répertoire            :  300
[1,20]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,20]<stdout>:
[1,20]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,20]<stdout>:
[1,9]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,9]<stdout>:
[1,9]<stdout>:Nom de la base                          :  ELEMBASE
[1,9]<stdout>:     Créée avec la version                   :  17.02.04
[1,9]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,9]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,9]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,9]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,9]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,9]<stdout>:     Taille maximum du répertoire            :  300
[1,9]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,9]<stdout>:
[1,9]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,9]<stdout>:
[1,17]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,17]<stdout>:
[1,17]<stdout>:Nom de la base                          :  ELEMBASE
[1,17]<stdout>:     Créée avec la version                   :  17.02.04
[1,17]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,17]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,17]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,17]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,17]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,17]<stdout>:     Taille maximum du répertoire            :  300
[1,17]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,17]<stdout>:
[1,17]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,17]<stdout>:
[1,18]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,18]<stdout>:
[1,18]<stdout>:Nom de la base                          :  ELEMBASE
[1,18]<stdout>:     Créée avec la version                   :  17.02.04
[1,18]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,18]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,18]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,18]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,18]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,18]<stdout>:     Taille maximum du répertoire            :  300
[1,18]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,18]<stdout>:
[1,18]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,18]<stdout>:
[1,11]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,11]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,11]<stdout>:Nom de la base                          :  ELEMBASE
[1,11]<stdout>:     Créée avec la version                   :  17.02.04
[1,11]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,11]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,11]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,11]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,11]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,11]<stdout>:     Taille maximum du répertoire            :  300
[1,11]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,11]<stdout>:
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Créée avec la version                   :  17.02.04
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,11]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,11]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Créée avec la version                   :  17.02.04
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Créée avec la version                   :  17.02.04
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,19]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,19]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,19]<stdout>:Nom de la base                          :  ELEMBASE
[1,19]<stdout>:     Créée avec la version                   :  17.02.04
[1,19]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,19]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,19]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,19]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,19]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,19]<stdout>:     Taille maximum du répertoire            :  300
[1,19]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,19]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Créée avec la version                   :  17.02.04
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,19]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,19]<stdout>:
[1,8]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,8]<stdout>:
[1,8]<stdout>:Nom de la base                          :  ELEMBASE
[1,8]<stdout>:     Créée avec la version                   :  17.02.04
[1,8]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,8]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,8]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,8]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,8]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,8]<stdout>:     Taille maximum du répertoire            :  300
[1,8]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,8]<stdout>:
[1,8]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,8]<stdout>:
[1,16]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,16]<stdout>:
[1,16]<stdout>:Nom de la base                          :  ELEMBASE
[1,16]<stdout>:     Créée avec la version                   :  17.02.04
[1,16]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,16]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,16]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,16]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,16]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,16]<stdout>:     Taille maximum du répertoire            :  300
[1,16]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,16]<stdout>:
[1,15]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,15]<stdout>:
[1,16]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,16]<stdout>:
[1,15]<stdout>:Nom de la base                          :  ELEMBASE
[1,15]<stdout>:     Créée avec la version                   :  17.02.04
[1,15]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,15]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,15]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,15]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,15]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,15]<stdout>:     Taille maximum du répertoire            :  300
[1,15]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,15]<stdout>:
[1,13]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,13]<stdout>:
[1,15]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,15]<stdout>:
[1,13]<stdout>:Nom de la base                          :  ELEMBASE
[1,13]<stdout>:     Créée avec la version                   :  17.02.04
[1,13]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,13]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,13]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,13]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,13]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,13]<stdout>:     Taille maximum du répertoire            :  300
[1,13]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,13]<stdout>:
[1,13]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,13]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Créée avec la version                   :  17.02.04
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Créée avec la version                   :  17.02.04
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,21]<stdout>:Nom de la base                          :  ELEMBASE
[1,21]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,21]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,21]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,21]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,21]<stdout>:     Nombre total d'accès en lecture         :  63
[1,21]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,21]<stdout>:     Nombre total d'accès en écriture        :  0
[1,21]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,21]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,21]<stdout>:     Taille maximum du répertoire            :  300
[1,21]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,21]<stdout>:
[1,21]<stdout>:Relecture des catalogues des éléments faite.
[1,21]<stdout>:
[1,21]<stdout>:Fin de lecture (durée  0.027635  s.) 
[1,21]<stdout>:
[1,21]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,21]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,21]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,21]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,21]<stdout>:# Mémoire (Mo) :   677.59 /   668.73 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.20s, elaps:        0.21s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:Nom de la base                          :  ELEMBASE
[1,10]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,10]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,10]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,10]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,10]<stdout>:     Nombre total d'accès en lecture         :  63
[1,10]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,10]<stdout>:     Nombre total d'accès en écriture        :  0
[1,10]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,10]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,10]<stdout>:     Taille maximum du répertoire            :  300
[1,10]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,10]<stdout>:
[1,23]<stdout>:Nom de la base                          :  ELEMBASE
[1,23]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,23]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,23]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,23]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,23]<stdout>:     Nombre total d'accès en lecture         :  63
[1,23]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,23]<stdout>:     Nombre total d'accès en écriture        :  0
[1,23]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,23]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,23]<stdout>:     Taille maximum du répertoire            :  300
[1,23]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,23]<stdout>:
[1,10]<stdout>:Relecture des catalogues des éléments faite.
[1,10]<stdout>:
[1,23]<stdout>:Relecture des catalogues des éléments faite.
[1,23]<stdout>:
[1,10]<stdout>:Fin de lecture (durée  0.028111  s.) 
[1,10]<stdout>:
[1,23]<stdout>:Fin de lecture (durée  0.027942  s.) 
[1,23]<stdout>:
[1,10]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,10]<stdout>:                         ajouté à l'initialisation du processus : 677.60 Mo                         
[1,10]<stdout>:                               Limite cible du processus : 4876.00 Mo                               
[1,23]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,23]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,23]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,10]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,23]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,22]<stdout>:Nom de la base                          :  ELEMBASE
[1,22]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,22]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,22]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,22]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,22]<stdout>:     Nombre total d'accès en lecture         :  63
[1,22]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,22]<stdout>:     Nombre total d'accès en écriture        :  0
[1,22]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,22]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,22]<stdout>:     Taille maximum du répertoire            :  300
[1,22]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,22]<stdout>:
[1,22]<stdout>:Relecture des catalogues des éléments faite.
[1,22]<stdout>:
[1,22]<stdout>:Fin de lecture (durée  0.027743  s.) 
[1,22]<stdout>:
[1,23]<stdout>:# Mémoire (Mo) :   677.59 /   668.73 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :   677.60 /   668.59 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.19s, elaps:        0.22s)
[1,22]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,22]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,22]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,10]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.20s, elaps:        0.22s)
[1,22]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Mémoire (Mo) :   677.59 /   668.73 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0001   user+syst:        0.05s (syst:        0.17s, elaps:        0.22s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre total d'accès en lecture         :  63
[1,1]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,1]<stdout>:     Nombre total d'accès en écriture        :  0
[1,1]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,12]<stdout>:Nom de la base                          :  ELEMBASE
[1,12]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,12]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,12]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,12]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,12]<stdout>:     Nombre total d'accès en lecture         :  63
[1,12]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,12]<stdout>:     Nombre total d'accès en écriture        :  0
[1,12]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,12]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,12]<stdout>:     Taille maximum du répertoire            :  300
[1,12]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,12]<stdout>:
[1,1]<stdout>:Relecture des catalogues des éléments faite.
[1,1]<stdout>:
[1,12]<stdout>:Relecture des catalogues des éléments faite.
[1,12]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre total d'accès en lecture         :  63
[1,3]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,3]<stdout>:     Nombre total d'accès en écriture        :  0
[1,3]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,1]<stdout>:Fin de lecture (durée  0.027948  s.) 
[1,1]<stdout>:
[1,12]<stdout>:Fin de lecture (durée  0.028175  s.) 
[1,12]<stdout>:
[1,3]<stdout>:Relecture des catalogues des éléments faite.
[1,3]<stdout>:
[1,3]<stdout>:Fin de lecture (durée  0.027567  s.) 
[1,3]<stdout>:
[1,1]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,1]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,1]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,12]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,12]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,12]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,1]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,12]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,3]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,3]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,3]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,3]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,12]<stdout>:# Mémoire (Mo) :   677.59 /   668.73 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :   677.58 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.21s, elaps:        0.22s)
[1,1]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.18s, elaps:        0.22s)
[1,3]<stdout>:# Mémoire (Mo) :   677.58 /   668.59 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.20s, elaps:        0.22s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:Nom de la base                          :  ELEMBASE
[1,14]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,14]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,14]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,14]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,14]<stdout>:     Nombre total d'accès en lecture         :  63
[1,14]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,14]<stdout>:     Nombre total d'accès en écriture        :  0
[1,14]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,14]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,14]<stdout>:     Taille maximum du répertoire            :  300
[1,14]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,14]<stdout>:
[1,14]<stdout>:Relecture des catalogues des éléments faite.
[1,14]<stdout>:
[1,14]<stdout>:Fin de lecture (durée  0.027700  s.) 
[1,14]<stdout>:
[1,20]<stdout>:Nom de la base                          :  ELEMBASE
[1,20]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,20]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,20]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,20]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,20]<stdout>:     Nombre total d'accès en lecture         :  63
[1,20]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,20]<stdout>:     Nombre total d'accès en écriture        :  0
[1,20]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,20]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,20]<stdout>:     Taille maximum du répertoire            :  300
[1,20]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,20]<stdout>:
[1,20]<stdout>:Relecture des catalogues des éléments faite.
[1,20]<stdout>:
[1,14]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,14]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,14]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,20]<stdout>:Fin de lecture (durée  0.027547  s.) 
[1,20]<stdout>:
[1,14]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,20]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,20]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,20]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,20]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,14]<stdout>:# Mémoire (Mo) :   677.59 /   668.73 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.19s, elaps:        0.22s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Mémoire (Mo) :   677.59 /   668.73 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.21s, elaps:        0.22s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:Nom de la base                          :  ELEMBASE
[1,9]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,9]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,9]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,9]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,9]<stdout>:     Nombre total d'accès en lecture         :  63
[1,9]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,9]<stdout>:     Nombre total d'accès en écriture        :  0
[1,9]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,9]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,9]<stdout>:     Taille maximum du répertoire            :  300
[1,9]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,9]<stdout>:
[1,17]<stdout>:Nom de la base                          :  ELEMBASE
[1,17]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,17]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,17]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,17]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,17]<stdout>:     Nombre total d'accès en lecture         :  63
[1,17]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,17]<stdout>:     Nombre total d'accès en écriture        :  0
[1,17]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,17]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,17]<stdout>:     Taille maximum du répertoire            :  300
[1,17]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,17]<stdout>:
[1,9]<stdout>:Relecture des catalogues des éléments faite.
[1,9]<stdout>:
[1,18]<stdout>:Nom de la base                          :  ELEMBASE
[1,18]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,18]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,18]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,18]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,18]<stdout>:     Nombre total d'accès en lecture         :  63
[1,18]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,18]<stdout>:     Nombre total d'accès en écriture        :  0
[1,18]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,18]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,18]<stdout>:     Taille maximum du répertoire            :  300
[1,18]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,18]<stdout>:
[1,17]<stdout>:Relecture des catalogues des éléments faite.
[1,17]<stdout>:
[1,9]<stdout>:Fin de lecture (durée  0.027058  s.) 
[1,9]<stdout>:
[1,18]<stdout>:Relecture des catalogues des éléments faite.
[1,18]<stdout>:
[1,17]<stdout>:Fin de lecture (durée  0.026941  s.) 
[1,17]<stdout>:
[1,18]<stdout>:Fin de lecture (durée  0.026606  s.) 
[1,18]<stdout>:
[1,9]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,9]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,9]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,17]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,17]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,17]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,18]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,18]<stdout>:                         ajouté à l'initialisation du processus : 677.60 Mo                         
[1,18]<stdout>:                               Limite cible du processus : 4876.00 Mo                               
[1,9]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,17]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,18]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,9]<stdout>:# Mémoire (Mo) :   677.58 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Mémoire (Mo) :   677.59 /   668.73 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Mémoire (Mo) :   677.60 /   668.59 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.17s, elaps:        0.22s)
[1,17]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.20s, elaps:        0.22s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.20s, elaps:        0.22s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre total d'accès en lecture         :  63
[1,0]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,0]<stdout>:     Nombre total d'accès en écriture        :  0
[1,0]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,0]<stdout>:Relecture des catalogues des éléments faite.
[1,0]<stdout>:
[1,11]<stdout>:Nom de la base                          :  ELEMBASE
[1,11]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,11]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,11]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,11]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,11]<stdout>:     Nombre total d'accès en lecture         :  63
[1,11]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,11]<stdout>:     Nombre total d'accès en écriture        :  0
[1,11]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,11]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,11]<stdout>:     Taille maximum du répertoire            :  300
[1,11]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,11]<stdout>:
[1,0]<stdout>:Fin de lecture (durée  0.026482  s.) 
[1,0]<stdout>:
[1,11]<stdout>:Relecture des catalogues des éléments faite.
[1,11]<stdout>:
[1,11]<stdout>:Fin de lecture (durée  0.026594  s.) 
[1,11]<stdout>:
[1,0]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.49 Mo                       
[1,0]<stdout>:                         ajouté à l'initialisation du processus : 677.57 Mo                         
[1,0]<stdout>:                               Limite cible du processus : 4876.07 Mo                               
[1,0]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,11]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,11]<stdout>:                         ajouté à l'initialisation du processus : 677.60 Mo                         
[1,11]<stdout>:                               Limite cible du processus : 4876.00 Mo                               
[1,11]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,0]<stdout>:# Mémoire (Mo) :   677.57 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Mémoire (Mo) :   677.60 /   668.73 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.20s, elaps:        0.21s)
[1,11]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.20s, elaps:        0.22s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre total d'accès en lecture         :  63
[1,2]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,2]<stdout>:     Nombre total d'accès en écriture        :  0
[1,2]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,2]<stdout>:Relecture des catalogues des éléments faite.
[1,2]<stdout>:
[1,2]<stdout>:Fin de lecture (durée  0.025811  s.) 
[1,2]<stdout>:
[1,2]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,2]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,2]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,2]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre total d'accès en lecture         :  63
[1,5]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,5]<stdout>:     Nombre total d'accès en écriture        :  0
[1,5]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,2]<stdout>:# Mémoire (Mo) :   677.58 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:Relecture des catalogues des éléments faite.
[1,5]<stdout>:
[1,2]<stdout>:# Fin commande #0001   user+syst:        0.04s (syst:        0.19s, elaps:        0.21s)
[1,5]<stdout>:Fin de lecture (durée  0.025209  s.) 
[1,5]<stdout>:
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,5]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,5]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,5]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,19]<stdout>:Nom de la base                          :  ELEMBASE
[1,19]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,19]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,19]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,19]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,19]<stdout>:     Nombre total d'accès en lecture         :  63
[1,19]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,19]<stdout>:     Nombre total d'accès en écriture        :  0
[1,19]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,19]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,19]<stdout>:     Taille maximum du répertoire            :  300
[1,19]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,19]<stdout>:
[1,19]<stdout>:Relecture des catalogues des éléments faite.
[1,19]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre total d'accès en lecture         :  63
[1,4]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,4]<stdout>:     Nombre total d'accès en écriture        :  0
[1,4]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,19]<stdout>:Fin de lecture (durée  0.025353  s.) 
[1,19]<stdout>:
[1,5]<stdout>:# Mémoire (Mo) :   677.58 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:Relecture des catalogues des éléments faite.
[1,4]<stdout>:
[1,4]<stdout>:Fin de lecture (durée  0.025424  s.) 
[1,4]<stdout>:
[1,5]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.20s, elaps:        0.21s)
[1,19]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,19]<stdout>:                         ajouté à l'initialisation du processus : 677.60 Mo                         
[1,19]<stdout>:                               Limite cible du processus : 4876.00 Mo                               
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,4]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,4]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,4]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,4]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,8]<stdout>:Nom de la base                          :  ELEMBASE
[1,8]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,8]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,8]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,8]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,8]<stdout>:     Nombre total d'accès en lecture         :  63
[1,8]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,8]<stdout>:     Nombre total d'accès en écriture        :  0
[1,8]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,8]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,8]<stdout>:     Taille maximum du répertoire            :  300
[1,8]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,8]<stdout>:
[1,8]<stdout>:Relecture des catalogues des éléments faite.
[1,8]<stdout>:
[1,8]<stdout>:Fin de lecture (durée  0.025069  s.) 
[1,8]<stdout>:
[1,19]<stdout>:# Mémoire (Mo) :   677.60 /   668.59 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :   677.58 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,8]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,8]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,16]<stdout>:Nom de la base                          :  ELEMBASE
[1,16]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,16]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,16]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,16]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,16]<stdout>:     Nombre total d'accès en lecture         :  63
[1,16]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,16]<stdout>:     Nombre total d'accès en écriture        :  0
[1,16]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,16]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,16]<stdout>:     Taille maximum du répertoire            :  300
[1,16]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,16]<stdout>:
[1,19]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.18s, elaps:        0.22s)
[1,13]<stdout>:Nom de la base                          :  ELEMBASE
[1,13]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,13]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,13]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,13]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,13]<stdout>:     Nombre total d'accès en lecture         :  63
[1,13]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,13]<stdout>:     Nombre total d'accès en écriture        :  0
[1,13]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,13]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,13]<stdout>:     Taille maximum du répertoire            :  300
[1,13]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,13]<stdout>:
[1,8]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre total d'accès en lecture         :  63
[1,7]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,7]<stdout>:     Nombre total d'accès en écriture        :  0
[1,7]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,15]<stdout>:Nom de la base                          :  ELEMBASE
[1,15]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,15]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,15]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,15]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,15]<stdout>:     Nombre total d'accès en lecture         :  63
[1,15]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,15]<stdout>:     Nombre total d'accès en écriture        :  0
[1,15]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,15]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,15]<stdout>:     Taille maximum du répertoire            :  300
[1,15]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,15]<stdout>:
[1,4]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.21s, elaps:        0.22s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:Relecture des catalogues des éléments faite.
[1,16]<stdout>:
[1,13]<stdout>:Relecture des catalogues des éléments faite.
[1,13]<stdout>:
[1,7]<stdout>:Relecture des catalogues des éléments faite.
[1,7]<stdout>:
[1,15]<stdout>:Relecture des catalogues des éléments faite.
[1,15]<stdout>:
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:Fin de lecture (durée  0.025186  s.) 
[1,16]<stdout>:
[1,13]<stdout>:Fin de lecture (durée  0.025022  s.) 
[1,13]<stdout>:
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre total d'accès en lecture         :  63
[1,6]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,6]<stdout>:     Nombre total d'accès en écriture        :  0
[1,6]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,15]<stdout>:Fin de lecture (durée  0.025140  s.) 
[1,15]<stdout>:
[1,7]<stdout>:Fin de lecture (durée  0.024867  s.) 
[1,7]<stdout>:
[1,6]<stdout>:Relecture des catalogues des éléments faite.
[1,6]<stdout>:
[1,16]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,16]<stdout>:                         ajouté à l'initialisation du processus : 677.60 Mo                         
[1,16]<stdout>:                               Limite cible du processus : 4876.00 Mo                               
[1,6]<stdout>:Fin de lecture (durée  0.024613  s.) 
[1,6]<stdout>:
[1,13]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,13]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,13]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,7]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,7]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,7]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,16]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,15]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,15]<stdout>:                         ajouté à l'initialisation du processus : 677.60 Mo                         
[1,15]<stdout>:                               Limite cible du processus : 4876.00 Mo                               
[1,8]<stdout>:# Mémoire (Mo) :   677.58 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,7]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,15]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,8]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.18s, elaps:        0.22s)
[1,6]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,6]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,6]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,13]<stdout>:# Mémoire (Mo) :   677.59 /   668.73 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Mémoire (Mo) :   677.60 /   668.59 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :   677.60 /   668.73 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :   677.58 /   668.59 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0001   user+syst:        0.04s (syst:        0.18s, elaps:        0.22s)
[1,16]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.19s, elaps:        0.22s)
[1,7]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.20s, elaps:        0.22s)
[1,15]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.20s, elaps:        0.22s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :   677.58 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.20s, elaps:        0.22s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:PETSc initialized...
[1,12]<stdout>:PETSc initialized...
[1,21]<stdout>:PETSc initialized...
[1,7]<stdout>:PETSc initialized...
[1,5]<stdout>:PETSc initialized...
[1,16]<stdout>:PETSc initialized...
[1,3]<stdout>:PETSc initialized...
[1,19]<stdout>:PETSc initialized...
[1,11]<stdout>:PETSc initialized...
[1,0]<stdout>:PETSc initialized...
[1,17]<stdout>:PETSc initialized...
[1,1]<stdout>:PETSc initialized...
[1,8]<stdout>:PETSc initialized...
[1,22]<stdout>:PETSc initialized...
[1,2]<stdout>:PETSc initialized...
[1,4]<stdout>:PETSc initialized...
[1,10]<stdout>:PETSc initialized...
[1,6]<stdout>:PETSc initialized...
[1,23]<stdout>:PETSc initialized...
[1,14]<stdout>:PETSc initialized...
[1,18]<stdout>:PETSc initialized...
[1,13]<stdout>:PETSc initialized...
[1,15]<stdout>:PETSc initialized...
[1,20]<stdout>:PETSc initialized...
[1,0]<stdout>:Nom MED du maillage : PARALLEPIPED
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000001 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                      274625
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                     287488
[1,0]<stdout>:                              SEG2                  768
[1,0]<stdout>:                              QUAD4               24576
[1,0]<stdout>:                              HEXA8              262144
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                8
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES              19
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACCES='NEW',
[1,0]<stdout>:             ACTION='ASSOCIER',
[1,0]<stdout>:             FICHIER='/tmp/buildCubel0ivkmuc/buildCube.med',
[1,0]<stdout>:             TYPE='BINARY',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:Deleting '/tmp/buildCubel0ivkmuc/buildCube.med': No such file or directory
[1,0]<stdout>:# Mémoire (Mo) :  1199.24 /   868.75 /   249.04 /   213.86 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0002   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:Création du fichier au format MED 3.3.1.
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0003 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACTION='LIBERER',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1199.24 /   868.88 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0003   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,10]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,2]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,6]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,23]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,14]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,4]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,18]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,13]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,15]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,7]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,5]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,16]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,3]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,19]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,12]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,11]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,9]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,20]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,21]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,17]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,1]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,8]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,22]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,0]<stdout>:
[1,0]<stdout>:Nom MED du maillage : 00000001
[1,0]<stdout>:
[1,12]<stdout>:Nom MED du maillage : 00000001
[1,12]<stdout>:
[1,1]<stdout>:Nom MED du maillage : 00000001
[1,1]<stdout>:
[1,9]<stdout>:Nom MED du maillage : 00000001
[1,9]<stdout>:
[1,22]<stdout>:Nom MED du maillage : 00000001
[1,22]<stdout>:
[1,2]<stdout>:Nom MED du maillage : 00000001
[1,2]<stdout>:
[1,14]<stdout>:Nom MED du maillage : 00000001
[1,14]<stdout>:
[1,3]<stdout>:Nom MED du maillage : 00000001
[1,3]<stdout>:
[1,17]<stdout>:Nom MED du maillage : 00000001
[1,17]<stdout>:
[1,16]<stdout>:Nom MED du maillage : 00000001
[1,16]<stdout>:
[1,5]<stdout>:Nom MED du maillage : 00000001
[1,5]<stdout>:
[1,23]<stdout>:Nom MED du maillage : 00000001
[1,23]<stdout>:
[1,8]<stdout>:Nom MED du maillage : 00000001
[1,8]<stdout>:
[1,21]<stdout>:Nom MED du maillage : 00000001
[1,21]<stdout>:
[1,15]<stdout>:Nom MED du maillage : 00000001
[1,15]<stdout>:
[1,13]<stdout>:Nom MED du maillage : 00000001
[1,13]<stdout>:
[1,10]<stdout>:Nom MED du maillage : 00000001
[1,10]<stdout>:
[1,20]<stdout>:Nom MED du maillage : 00000001
[1,20]<stdout>:
[1,4]<stdout>:Nom MED du maillage : 00000001
[1,4]<stdout>:
[1,18]<stdout>:Nom MED du maillage : 00000001
[1,18]<stdout>:
[1,11]<stdout>:Nom MED du maillage : 00000001
[1,11]<stdout>:
[1,6]<stdout>:Nom MED du maillage : 00000001
[1,6]<stdout>:
[1,7]<stdout>:Nom MED du maillage : 00000001
[1,7]<stdout>:
[1,19]<stdout>:Nom MED du maillage : 00000001
[1,19]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,8]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,9]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt282
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt282
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt282
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt282
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt282
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt282
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt282
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt282
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt282
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt282
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt282
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt282
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt282
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt282
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt282
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt282
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt282
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt282
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt282
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt282
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt282
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt282
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt282
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt282
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,16]<stdout>:ligne 282
[1,3]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,3]<stdout>:ligne 282
[1,22]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,22]<stdout>:ligne 282
[1,11]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,11]<stdout>:ligne 282
[1,2]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,2]<stdout>:ligne 282
[1,21]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,21]<stdout>:ligne 282
[1,14]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,14]<stdout>:ligne 282
[1,7]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,7]<stdout>:ligne 282
[1,4]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,4]<stdout>:ligne 282
[1,10]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,10]<stdout>:ligne 282
[1,23]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,23]<stdout>:ligne 282
[1,9]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,9]<stdout>:ligne 282
[1,18]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,18]<stdout>:ligne 282
[1,0]<stdout>:# Commande #0004 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,0]<stdout>:ligne 282
[1,15]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,15]<stdout>:ligne 282
[1,17]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,17]<stdout>:ligne 282
[1,20]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,20]<stdout>:ligne 282
[1,12]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,12]<stdout>:ligne 282
[1,1]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,1]<stdout>:ligne 282
[1,13]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,13]<stdout>:ligne 282
[1,8]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,8]<stdout>:ligne 282
[1,19]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,19]<stdout>:ligne 282
[1,5]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,5]<stdout>:ligne 282
[1,6]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,6]<stdout>:ligne 282
[1,16]<stdout>:CREA_MAILLAGE(INFO=1,
[1,16]<stdout>:              MAILLAGE='<00000002>',
[1,16]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,16]<stdout>:                             TOUT='OUI'))
[1,16]<stdout>:
[1,14]<stdout>:CREA_MAILLAGE(INFO=1,
[1,14]<stdout>:              MAILLAGE='<00000002>',
[1,14]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,14]<stdout>:                             TOUT='OUI'))
[1,14]<stdout>:
[1,3]<stdout>:CREA_MAILLAGE(INFO=1,
[1,3]<stdout>:              MAILLAGE='<00000002>',
[1,3]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,3]<stdout>:                             TOUT='OUI'))
[1,3]<stdout>:
[1,22]<stdout>:CREA_MAILLAGE(INFO=1,
[1,22]<stdout>:              MAILLAGE='<00000002>',
[1,22]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,22]<stdout>:                             TOUT='OUI'))
[1,22]<stdout>:
[1,11]<stdout>:CREA_MAILLAGE(INFO=1,
[1,11]<stdout>:              MAILLAGE='<00000002>',
[1,11]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,11]<stdout>:                             TOUT='OUI'))
[1,11]<stdout>:
[1,2]<stdout>:CREA_MAILLAGE(INFO=1,
[1,2]<stdout>:              MAILLAGE='<00000002>',
[1,2]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,2]<stdout>:                             TOUT='OUI'))
[1,2]<stdout>:
[1,21]<stdout>:CREA_MAILLAGE(INFO=1,
[1,21]<stdout>:              MAILLAGE='<00000002>',
[1,21]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,21]<stdout>:                             TOUT='OUI'))
[1,21]<stdout>:
[1,12]<stdout>:CREA_MAILLAGE(INFO=1,
[1,12]<stdout>:              MAILLAGE='<00000002>',
[1,12]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,12]<stdout>:                             TOUT='OUI'))
[1,12]<stdout>:
[1,1]<stdout>:CREA_MAILLAGE(INFO=1,
[1,1]<stdout>:              MAILLAGE='<00000002>',
[1,1]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,1]<stdout>:                             TOUT='OUI'))
[1,1]<stdout>:
[1,13]<stdout>:CREA_MAILLAGE(INFO=1,
[1,13]<stdout>:              MAILLAGE='<00000002>',
[1,13]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,13]<stdout>:                             TOUT='OUI'))
[1,13]<stdout>:
[1,6]<stdout>:CREA_MAILLAGE(INFO=1,
[1,6]<stdout>:              MAILLAGE='<00000002>',
[1,6]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,6]<stdout>:                             TOUT='OUI'))
[1,6]<stdout>:
[1,8]<stdout>:CREA_MAILLAGE(INFO=1,
[1,8]<stdout>:              MAILLAGE='<00000002>',
[1,8]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,8]<stdout>:                             TOUT='OUI'))
[1,8]<stdout>:
[1,7]<stdout>:CREA_MAILLAGE(INFO=1,
[1,7]<stdout>:              MAILLAGE='<00000002>',
[1,7]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,7]<stdout>:                             TOUT='OUI'))
[1,7]<stdout>:
[1,10]<stdout>:CREA_MAILLAGE(INFO=1,
[1,10]<stdout>:              MAILLAGE='<00000002>',
[1,10]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,10]<stdout>:                             TOUT='OUI'))
[1,10]<stdout>:
[1,23]<stdout>:CREA_MAILLAGE(INFO=1,
[1,23]<stdout>:              MAILLAGE='<00000002>',
[1,23]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,23]<stdout>:                             TOUT='OUI'))
[1,23]<stdout>:
[1,9]<stdout>:CREA_MAILLAGE(INFO=1,
[1,9]<stdout>:              MAILLAGE='<00000002>',
[1,9]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,9]<stdout>:                             TOUT='OUI'))
[1,9]<stdout>:
[1,18]<stdout>:CREA_MAILLAGE(INFO=1,
[1,18]<stdout>:              MAILLAGE='<00000002>',
[1,18]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,18]<stdout>:                             TOUT='OUI'))
[1,18]<stdout>:
[1,0]<stdout>:CREA_MAILLAGE(INFO=1,
[1,0]<stdout>:              MAILLAGE='<00000002>',
[1,0]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,0]<stdout>:                             TOUT='OUI'))
[1,0]<stdout>:
[1,15]<stdout>:CREA_MAILLAGE(INFO=1,
[1,15]<stdout>:              MAILLAGE='<00000002>',
[1,15]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,15]<stdout>:                             TOUT='OUI'))
[1,15]<stdout>:
[1,17]<stdout>:CREA_MAILLAGE(INFO=1,
[1,17]<stdout>:              MAILLAGE='<00000002>',
[1,17]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,17]<stdout>:                             TOUT='OUI'))
[1,17]<stdout>:
[1,20]<stdout>:CREA_MAILLAGE(INFO=1,
[1,20]<stdout>:              MAILLAGE='<00000002>',
[1,20]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,20]<stdout>:                             TOUT='OUI'))
[1,20]<stdout>:
[1,19]<stdout>:CREA_MAILLAGE(INFO=1,
[1,19]<stdout>:              MAILLAGE='<00000002>',
[1,19]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,19]<stdout>:                             TOUT='OUI'))
[1,19]<stdout>:
[1,4]<stdout>:CREA_MAILLAGE(INFO=1,
[1,4]<stdout>:              MAILLAGE='<00000002>',
[1,4]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,4]<stdout>:                             TOUT='OUI'))
[1,4]<stdout>:
[1,5]<stdout>:CREA_MAILLAGE(INFO=1,
[1,5]<stdout>:              MAILLAGE='<00000002>',
[1,5]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,5]<stdout>:                             TOUT='OUI'))
[1,5]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,19]<stdout>:
[1,19]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,19]<stdout>:MAILLAGE_P                                                                      
[1,19]<stdout>:
[1,19]<stdout>:NOMBRE DE NOEUDS                       98966
[1,19]<stdout>:
[1,19]<stdout>:NOMBRE DE MAILLES                      97642
[1,19]<stdout>:                              SEG2                  131
[1,19]<stdout>:                              QUAD4                6480
[1,19]<stdout>:                              HEXA8               91031
[1,19]<stdout>:
[1,19]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,19]<stdout>:
[1,19]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,19]<stdout>:
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.25      0.00      0.24
[1,7]<stdout>:
[1,7]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,7]<stdout>:
[1,7]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,7]<stdout>:MAILLAGE_P                                                                      
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE NOEUDS                      104429
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE MAILLES                     101320
[1,7]<stdout>:                              SEG2                   47
[1,7]<stdout>:                              QUAD4                4546
[1,7]<stdout>:                              HEXA8               96727
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE GROUPES DE MAILLES               6
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.18      0.00      0.19
[1,4]<stdout>:
[1,4]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,4]<stdout>:
[1,4]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,4]<stdout>:MAILLAGE_P                                                                      
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE NOEUDS                      111478
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE MAILLES                     105006
[1,4]<stdout>:                              QUAD4                1642
[1,4]<stdout>:                              HEXA8              103364
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,10]<stdout>:
[1,10]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,10]<stdout>:
[1,10]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,10]<stdout>:MAILLAGE_P                                                                      
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE NOEUDS                      105824
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE MAILLES                     100865
[1,10]<stdout>:                              SEG2                   23
[1,10]<stdout>:                              QUAD4                2973
[1,10]<stdout>:                              HEXA8               97869
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.13      0.00      0.14
[1,14]<stdout>:
[1,14]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,14]<stdout>:
[1,14]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,14]<stdout>:MAILLAGE_P                                                                      
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE NOEUDS                      104148
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE MAILLES                      99660
[1,14]<stdout>:                              SEG2                   33
[1,14]<stdout>:                              QUAD4                3278
[1,14]<stdout>:                              HEXA8               96349
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.06
[1,23]<stdout>:
[1,23]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,23]<stdout>:
[1,23]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,23]<stdout>:MAILLAGE_P                                                                      
[1,23]<stdout>:
[1,23]<stdout>:NOMBRE DE NOEUDS                       98156
[1,23]<stdout>:
[1,23]<stdout>:NOMBRE DE MAILLES                      92712
[1,23]<stdout>:                              QUAD4                1572
[1,23]<stdout>:                              HEXA8               91140
[1,23]<stdout>:
[1,23]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,23]<stdout>:
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.04      0.00      0.04
[1,9]<stdout>:
[1,9]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,9]<stdout>:
[1,9]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,9]<stdout>:MAILLAGE_P                                                                      
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE NOEUDS                       97530
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE MAILLES                      94982
[1,9]<stdout>:                              SEG2                   80
[1,9]<stdout>:                              QUAD4                4800
[1,9]<stdout>:                              HEXA8               90102
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.26      0.00      0.26
[1,18]<stdout>:
[1,18]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,18]<stdout>:
[1,18]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,18]<stdout>:MAILLAGE_P                                                                      
[1,18]<stdout>:
[1,18]<stdout>:NOMBRE DE NOEUDS                      100684
[1,18]<stdout>:
[1,18]<stdout>:NOMBRE DE MAILLES                      94493
[1,18]<stdout>:                              QUAD4                1257
[1,18]<stdout>:                              HEXA8               93236
[1,18]<stdout>:
[1,18]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,18]<stdout>:
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.09      0.00      0.10
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,0]<stdout>:MAILLAGE_P                                                                      
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                      100867
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                     100832
[1,0]<stdout>:                              SEG2                  152
[1,0]<stdout>:                              QUAD4                6992
[1,0]<stdout>:                              HEXA8               93688
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.35      0.00      0.36
[1,3]<stdout>:
[1,3]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,3]<stdout>:
[1,3]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,3]<stdout>:MAILLAGE_P                                                                      
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE NOEUDS                       93398
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE MAILLES                      93289
[1,3]<stdout>:                              SEG2                  143
[1,3]<stdout>:                              QUAD4                6414
[1,3]<stdout>:                              HEXA8               86732
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.43      0.00      0.45
[1,15]<stdout>:
[1,15]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,15]<stdout>:
[1,15]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,15]<stdout>:MAILLAGE_P                                                                      
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE NOEUDS                       98882
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE MAILLES                      95162
[1,15]<stdout>:                              SEG2                   31
[1,15]<stdout>:                              QUAD4                3873
[1,15]<stdout>:                              HEXA8               91258
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.22      0.00      0.23
[1,22]<stdout>:
[1,22]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,22]<stdout>:
[1,22]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,22]<stdout>:MAILLAGE_P                                                                      
[1,22]<stdout>:
[1,22]<stdout>:NOMBRE DE NOEUDS                       99188
[1,22]<stdout>:
[1,22]<stdout>:NOMBRE DE MAILLES                      98005
[1,22]<stdout>:                              SEG2                  141
[1,22]<stdout>:                              QUAD4                6434
[1,22]<stdout>:                              HEXA8               91430
[1,22]<stdout>:
[1,22]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,22]<stdout>:
[1,22]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,22]<stdout>:
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.15      0.00      0.15
[1,11]<stdout>:
[1,11]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,11]<stdout>:
[1,11]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,11]<stdout>:MAILLAGE_P                                                                      
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE NOEUDS                       94164
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE MAILLES                      92160
[1,11]<stdout>:                              SEG2                  100
[1,11]<stdout>:                              QUAD4                5228
[1,11]<stdout>:                              HEXA8               86832
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE GROUPES DE MAILLES               6
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.15      0.00      0.14
[1,2]<stdout>:
[1,2]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,2]<stdout>:
[1,2]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,2]<stdout>:MAILLAGE_P                                                                      
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE NOEUDS                       94230
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE MAILLES                      92213
[1,2]<stdout>:                              SEG2                   53
[1,2]<stdout>:                              QUAD4                4479
[1,2]<stdout>:                              HEXA8               87681
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.32      0.00      0.32
[1,17]<stdout>:
[1,17]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,17]<stdout>:
[1,17]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,17]<stdout>:MAILLAGE_P                                                                      
[1,17]<stdout>:
[1,17]<stdout>:NOMBRE DE NOEUDS                       93668
[1,17]<stdout>:
[1,17]<stdout>:NOMBRE DE MAILLES                      93359
[1,17]<stdout>:                              SEG2                  138
[1,17]<stdout>:                              QUAD4                6105
[1,17]<stdout>:                              HEXA8               87116
[1,17]<stdout>:
[1,17]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,17]<stdout>:
[1,17]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,17]<stdout>:
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.41      0.00      0.41
[1,21]<stdout>:
[1,21]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,21]<stdout>:
[1,21]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,21]<stdout>:MAILLAGE_P                                                                      
[1,21]<stdout>:
[1,21]<stdout>:NOMBRE DE NOEUDS                       95452
[1,21]<stdout>:
[1,21]<stdout>:NOMBRE DE MAILLES                      92894
[1,21]<stdout>:                              SEG2                   51
[1,21]<stdout>:                              QUAD4                4419
[1,21]<stdout>:                              HEXA8               88424
[1,21]<stdout>:
[1,21]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,21]<stdout>:
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.21      0.01      0.20
[1,12]<stdout>:
[1,12]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,12]<stdout>:
[1,12]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,12]<stdout>:MAILLAGE_P                                                                      
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE NOEUDS                       91020
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE MAILLES                      90985
[1,12]<stdout>:                              SEG2                  141
[1,12]<stdout>:                              QUAD4                6296
[1,12]<stdout>:                              HEXA8               84548
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.55      0.00      0.55
[1,1]<stdout>:
[1,1]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,1]<stdout>:
[1,1]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,1]<stdout>:MAILLAGE_P                                                                      
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE NOEUDS                      107408
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE MAILLES                     102264
[1,1]<stdout>:                              QUAD4                1908
[1,1]<stdout>:                              HEXA8              100356
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.13      0.00      0.13
[1,13]<stdout>:
[1,13]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,13]<stdout>:
[1,13]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,13]<stdout>:MAILLAGE_P                                                                      
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE NOEUDS                      104694
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE MAILLES                     100061
[1,13]<stdout>:                              SEG2                   25
[1,13]<stdout>:                              QUAD4                3383
[1,13]<stdout>:                              HEXA8               96653
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.07      0.00      0.07
[1,6]<stdout>:
[1,6]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,6]<stdout>:
[1,6]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,6]<stdout>:MAILLAGE_P                                                                      
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE NOEUDS                       94233
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE MAILLES                      93722
[1,6]<stdout>:                              SEG2                  142
[1,6]<stdout>:                              QUAD4                6604
[1,6]<stdout>:                              HEXA8               86976
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.56      0.00      0.55
[1,16]<stdout>:
[1,16]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,16]<stdout>:
[1,16]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,16]<stdout>:MAILLAGE_P                                                                      
[1,16]<stdout>:
[1,16]<stdout>:NOMBRE DE NOEUDS                      106614
[1,16]<stdout>:
[1,16]<stdout>:NOMBRE DE MAILLES                     101326
[1,16]<stdout>:                              SEG2                   25
[1,16]<stdout>:                              QUAD4                2641
[1,16]<stdout>:                              HEXA8               98660
[1,16]<stdout>:
[1,16]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,16]<stdout>:
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,8]<stdout>:
[1,8]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,8]<stdout>:
[1,8]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,8]<stdout>:MAILLAGE_P                                                                      
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE NOEUDS                      101366
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE MAILLES                      95112
[1,8]<stdout>:                              QUAD4                1170
[1,8]<stdout>:                              HEXA8               93942
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.15      0.00      0.16
[1,5]<stdout>:
[1,5]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,5]<stdout>:
[1,5]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,5]<stdout>:MAILLAGE_P                                                                      
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE NOEUDS                       98232
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE MAILLES                      95866
[1,5]<stdout>:                              SEG2                   43
[1,5]<stdout>:                              QUAD4                4335
[1,5]<stdout>:                              HEXA8               91488
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.16      0.00      0.18
[1,20]<stdout>:
[1,20]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,20]<stdout>:
[1,20]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 16:33:01 DE TYPE        
[1,20]<stdout>:MAILLAGE_P                                                                      
[1,20]<stdout>:
[1,20]<stdout>:NOMBRE DE NOEUDS                       99572
[1,20]<stdout>:
[1,20]<stdout>:NOMBRE DE MAILLES                      96800
[1,20]<stdout>:                              SEG2                   63
[1,20]<stdout>:                              QUAD4                4848
[1,20]<stdout>:                              HEXA8               91889
[1,20]<stdout>:
[1,20]<stdout>:NOMBRE DE GROUPES DE MAILLES               6
[1,20]<stdout>:
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.11      0.00      0.10
[1,12]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,12]<stdout>:# Mémoire (Mo) :  1228.93 /   787.16 /   227.11 /   195.07 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0002   user+syst:        1.69s (syst:        0.57s, elaps:        2.26s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,23]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,2]<stdout>:# Mémoire (Mo) :  1276.32 /   790.12 /   228.10 /   196.04 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0002   user+syst:        1.48s (syst:        0.78s, elaps:        2.27s)
[1,23]<stdout>:# Mémoire (Mo) :  1318.01 /   795.50 /   229.90 /   197.79 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Fin commande #0002   user+syst:        1.38s (syst:        0.88s, elaps:        2.27s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,17]<stdout>:# Mémoire (Mo) :  1262.46 /   790.35 /   228.29 /   196.22 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0002   user+syst:        1.45s (syst:        0.81s, elaps:        2.27s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,11]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,21]<stdout>:# Mémoire (Mo) :  1276.95 /   790.46 /   228.27 /   196.19 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Mémoire (Mo) :  1307.23 /   792.13 /   228.75 /   196.66 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0002   user+syst:        1.47s (syst:        0.79s, elaps:        2.27s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0002   user+syst:        1.38s (syst:        0.87s, elaps:        2.27s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,3]<stdout>:# Mémoire (Mo) :  1242.63 /   788.62 /   227.75 /   195.69 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0002   user+syst:        1.57s (syst:        0.69s, elaps:        2.27s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,6]<stdout>:# Mémoire (Mo) :  1238.39 /   788.50 /   227.77 /   195.70 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0002   user+syst:        1.66s (syst:        0.61s, elaps:        2.27s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,9]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,9]<stdout>:# Mémoire (Mo) :  1279.08 /   790.84 /   228.86 /   196.77 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  1313.01 /   795.80 /   230.35 /   198.21 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0002   user+syst:        1.36s (syst:        0.89s, elaps:        2.27s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0002   user+syst:        1.45s (syst:        0.82s, elaps:        2.27s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,18]<stdout>:# Mémoire (Mo) :  1291.09 /   794.06 /   229.92 /   197.80 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0002   user+syst:        1.40s (syst:        0.86s, elaps:        2.27s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,19]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,19]<stdout>:# Mémoire (Mo) :  1282.77 /   793.16 /   229.70 /   197.58 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  1294.10 /   792.95 /   229.41 /   197.29 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0002   user+syst:        1.36s (syst:        0.89s, elaps:        2.27s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Fin commande #0002   user+syst:        1.43s (syst:        0.84s, elaps:        2.27s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,20]<stdout>:# Mémoire (Mo) :  1327.55 /   795.09 /   230.26 /   198.12 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0002   user+syst:        1.38s (syst:        0.87s, elaps:        2.27s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,5]<stdout>:# Mémoire (Mo) :  1298.94 /   792.84 /   229.49 /   197.39 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0002   user+syst:        1.44s (syst:        0.83s, elaps:        2.28s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,22]<stdout>:# Mémoire (Mo) :  1292.95 /   794.25 /   230.23 /   198.10 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0002   user+syst:        1.41s (syst:        0.86s, elaps:        2.28s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0004 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,14]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,14]<stdout>:# Mémoire (Mo) :  1336.25 /   797.47 /   231.45 /   199.28 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Mémoire (Mo) :  1386.22 /   904.86 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0002   user+syst:        1.33s (syst:        0.94s, elaps:        2.28s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0004   user+syst:        1.49s (syst:        0.78s, elaps:        2.28s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,13]<stdout>:# Mémoire (Mo) :  1317.60 /   796.14 /   231.29 /   199.12 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0002   user+syst:        1.42s (syst:        0.84s, elaps:        2.28s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,16]<stdout>:# Mémoire (Mo) :  1342.83 /   798.63 /   232.11 /   199.92 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0002   user+syst:        1.44s (syst:        0.84s, elaps:        2.28s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,10]<stdout>:# Mémoire (Mo) :  1338.99 /   798.15 /   231.79 /   199.61 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0002   user+syst:        1.37s (syst:        0.90s, elaps:        2.28s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,7]<stdout>:# Mémoire (Mo) :  1333.10 /   796.70 /   231.38 /   199.20 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0002   user+syst:        1.41s (syst:        0.87s, elaps:        2.28s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,1]<stdout>:# Mémoire (Mo) :  1311.07 /   796.65 /   231.65 /   199.47 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0002   user+syst:        1.38s (syst:        0.90s, elaps:        2.28s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,4]<stdout>:# Mémoire (Mo) :  1346.56 /   800.26 /   232.92 /   200.69 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0002   user+syst:        1.38s (syst:        0.90s, elaps:        2.29s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt131
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt131
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt131
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt131
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt131
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt131
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt131
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt131
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt131
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt131
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt131
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt131
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt131
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt131
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt131
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt131
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt131
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt131
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt131
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt131
[1,21]<stdout>:# Commande #0003 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 131
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt131
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Commande #0003 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 131
[1,12]<stdout>:# Commande #0003 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 131
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt131
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0003 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 131
[1,6]<stdout>:# Commande #0003 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 131
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt131
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0003 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 131
[1,2]<stdout>:# Commande #0003 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 131
[1,8]<stdout>:# Commande #0003 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 131
[1,1]<stdout>:# Commande #0003 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 131
[1,9]<stdout>:# Commande #0003 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 131
[1,18]<stdout>:# Commande #0003 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 131
[1,5]<stdout>:# Commande #0003 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 131
[1,23]<stdout>:# Commande #0003 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 131
[1,11]<stdout>:# Commande #0003 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 131
[1,13]<stdout>:# Commande #0003 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 131
[1,20]<stdout>:# Commande #0003 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 131
[1,19]<stdout>:# Commande #0003 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 131
[1,14]<stdout>:# Commande #0003 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 131
[1,7]<stdout>:# Commande #0003 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 131
[1,10]<stdout>:# Commande #0003 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 131
[1,4]<stdout>:# Commande #0003 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 131
[1,22]<stdout>:# Commande #0003 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 131
[1,18]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,18]<stdout>:                            PHENOMENE='MECANIQUE',
[1,18]<stdout>:                            TOUT='OUI'),
[1,18]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,18]<stdout>:                    INFO=1,
[1,18]<stdout>:                    MAILLAGE='<00000004>',
[1,18]<stdout>:                    VERI_JACOBIEN='OUI',
[1,18]<stdout>:                    VERI_NORM_IFS='OUI',
[1,18]<stdout>:                    VERI_PLAN='OUI')
[1,18]<stdout>:
[1,12]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,12]<stdout>:                            PHENOMENE='MECANIQUE',
[1,12]<stdout>:                            TOUT='OUI'),
[1,12]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,12]<stdout>:                    INFO=1,
[1,12]<stdout>:                    MAILLAGE='<00000004>',
[1,12]<stdout>:                    VERI_JACOBIEN='OUI',
[1,12]<stdout>:                    VERI_NORM_IFS='OUI',
[1,12]<stdout>:                    VERI_PLAN='OUI')
[1,12]<stdout>:
[1,21]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,21]<stdout>:                            PHENOMENE='MECANIQUE',
[1,21]<stdout>:                            TOUT='OUI'),
[1,21]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,21]<stdout>:                    INFO=1,
[1,21]<stdout>:                    MAILLAGE='<00000004>',
[1,21]<stdout>:                    VERI_JACOBIEN='OUI',
[1,21]<stdout>:                    VERI_NORM_IFS='OUI',
[1,21]<stdout>:                    VERI_PLAN='OUI')
[1,21]<stdout>:
[1,17]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,17]<stdout>:                            PHENOMENE='MECANIQUE',
[1,17]<stdout>:                            TOUT='OUI'),
[1,17]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,17]<stdout>:                    INFO=1,
[1,17]<stdout>:                    MAILLAGE='<00000004>',
[1,17]<stdout>:                    VERI_JACOBIEN='OUI',
[1,17]<stdout>:                    VERI_NORM_IFS='OUI',
[1,17]<stdout>:                    VERI_PLAN='OUI')
[1,17]<stdout>:
[1,3]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,3]<stdout>:                            PHENOMENE='MECANIQUE',
[1,3]<stdout>:                            TOUT='OUI'),
[1,3]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,3]<stdout>:                    INFO=1,
[1,3]<stdout>:                    MAILLAGE='<00000004>',
[1,3]<stdout>:                    VERI_JACOBIEN='OUI',
[1,3]<stdout>:                    VERI_NORM_IFS='OUI',
[1,3]<stdout>:                    VERI_PLAN='OUI')
[1,3]<stdout>:
[1,6]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,6]<stdout>:                            PHENOMENE='MECANIQUE',
[1,6]<stdout>:                            TOUT='OUI'),
[1,6]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,6]<stdout>:                    INFO=1,
[1,6]<stdout>:                    MAILLAGE='<00000004>',
[1,6]<stdout>:                    VERI_JACOBIEN='OUI',
[1,6]<stdout>:                    VERI_NORM_IFS='OUI',
[1,6]<stdout>:                    VERI_PLAN='OUI')
[1,6]<stdout>:
[1,16]<stdout>:# Commande #0003 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 131
[1,15]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,15]<stdout>:                            PHENOMENE='MECANIQUE',
[1,15]<stdout>:                            TOUT='OUI'),
[1,15]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,15]<stdout>:                    INFO=1,
[1,15]<stdout>:                    MAILLAGE='<00000004>',
[1,15]<stdout>:                    VERI_JACOBIEN='OUI',
[1,15]<stdout>:                    VERI_NORM_IFS='OUI',
[1,15]<stdout>:                    VERI_PLAN='OUI')
[1,15]<stdout>:
[1,2]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,2]<stdout>:                            PHENOMENE='MECANIQUE',
[1,2]<stdout>:                            TOUT='OUI'),
[1,2]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,2]<stdout>:                    INFO=1,
[1,2]<stdout>:                    MAILLAGE='<00000004>',
[1,2]<stdout>:                    VERI_JACOBIEN='OUI',
[1,2]<stdout>:                    VERI_NORM_IFS='OUI',
[1,2]<stdout>:                    VERI_PLAN='OUI')
[1,2]<stdout>:
[1,8]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,8]<stdout>:                            PHENOMENE='MECANIQUE',
[1,8]<stdout>:                            TOUT='OUI'),
[1,8]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,8]<stdout>:                    INFO=1,
[1,8]<stdout>:                    MAILLAGE='<00000004>',
[1,8]<stdout>:                    VERI_JACOBIEN='OUI',
[1,8]<stdout>:                    VERI_NORM_IFS='OUI',
[1,8]<stdout>:                    VERI_PLAN='OUI')
[1,8]<stdout>:
[1,1]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,1]<stdout>:                            PHENOMENE='MECANIQUE',
[1,1]<stdout>:                            TOUT='OUI'),
[1,1]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,1]<stdout>:                    INFO=1,
[1,1]<stdout>:                    MAILLAGE='<00000004>',
[1,1]<stdout>:                    VERI_JACOBIEN='OUI',
[1,1]<stdout>:                    VERI_NORM_IFS='OUI',
[1,1]<stdout>:                    VERI_PLAN='OUI')
[1,1]<stdout>:
[1,9]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,9]<stdout>:                            PHENOMENE='MECANIQUE',
[1,9]<stdout>:                            TOUT='OUI'),
[1,9]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,9]<stdout>:                    INFO=1,
[1,9]<stdout>:                    MAILLAGE='<00000004>',
[1,9]<stdout>:                    VERI_JACOBIEN='OUI',
[1,9]<stdout>:                    VERI_NORM_IFS='OUI',
[1,9]<stdout>:                    VERI_PLAN='OUI')
[1,9]<stdout>:
[1,5]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,5]<stdout>:                            PHENOMENE='MECANIQUE',
[1,5]<stdout>:                            TOUT='OUI'),
[1,5]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,5]<stdout>:                    INFO=1,
[1,5]<stdout>:                    MAILLAGE='<00000004>',
[1,5]<stdout>:                    VERI_JACOBIEN='OUI',
[1,5]<stdout>:                    VERI_NORM_IFS='OUI',
[1,5]<stdout>:                    VERI_PLAN='OUI')
[1,5]<stdout>:
[1,23]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,23]<stdout>:                            PHENOMENE='MECANIQUE',
[1,23]<stdout>:                            TOUT='OUI'),
[1,23]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,23]<stdout>:                    INFO=1,
[1,23]<stdout>:                    MAILLAGE='<00000004>',
[1,23]<stdout>:                    VERI_JACOBIEN='OUI',
[1,23]<stdout>:                    VERI_NORM_IFS='OUI',
[1,23]<stdout>:                    VERI_PLAN='OUI')
[1,23]<stdout>:
[1,11]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,11]<stdout>:                            PHENOMENE='MECANIQUE',
[1,11]<stdout>:                            TOUT='OUI'),
[1,11]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,11]<stdout>:                    INFO=1,
[1,11]<stdout>:                    MAILLAGE='<00000004>',
[1,11]<stdout>:                    VERI_JACOBIEN='OUI',
[1,11]<stdout>:                    VERI_NORM_IFS='OUI',
[1,11]<stdout>:                    VERI_PLAN='OUI')
[1,11]<stdout>:
[1,13]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,13]<stdout>:                            PHENOMENE='MECANIQUE',
[1,13]<stdout>:                            TOUT='OUI'),
[1,13]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,13]<stdout>:                    INFO=1,
[1,13]<stdout>:                    MAILLAGE='<00000004>',
[1,13]<stdout>:                    VERI_JACOBIEN='OUI',
[1,13]<stdout>:                    VERI_NORM_IFS='OUI',
[1,13]<stdout>:                    VERI_PLAN='OUI')
[1,13]<stdout>:
[1,20]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,20]<stdout>:                            PHENOMENE='MECANIQUE',
[1,20]<stdout>:                            TOUT='OUI'),
[1,20]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,20]<stdout>:                    INFO=1,
[1,20]<stdout>:                    MAILLAGE='<00000004>',
[1,20]<stdout>:                    VERI_JACOBIEN='OUI',
[1,20]<stdout>:                    VERI_NORM_IFS='OUI',
[1,20]<stdout>:                    VERI_PLAN='OUI')
[1,20]<stdout>:
[1,7]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,7]<stdout>:                            PHENOMENE='MECANIQUE',
[1,7]<stdout>:                            TOUT='OUI'),
[1,7]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,7]<stdout>:                    INFO=1,
[1,7]<stdout>:                    MAILLAGE='<00000004>',
[1,7]<stdout>:                    VERI_JACOBIEN='OUI',
[1,7]<stdout>:                    VERI_NORM_IFS='OUI',
[1,7]<stdout>:                    VERI_PLAN='OUI')
[1,7]<stdout>:
[1,10]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,10]<stdout>:                            PHENOMENE='MECANIQUE',
[1,10]<stdout>:                            TOUT='OUI'),
[1,10]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,10]<stdout>:                    INFO=1,
[1,10]<stdout>:                    MAILLAGE='<00000004>',
[1,10]<stdout>:                    VERI_JACOBIEN='OUI',
[1,10]<stdout>:                    VERI_NORM_IFS='OUI',
[1,10]<stdout>:                    VERI_PLAN='OUI')
[1,10]<stdout>:
[1,19]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,19]<stdout>:                            PHENOMENE='MECANIQUE',
[1,19]<stdout>:                            TOUT='OUI'),
[1,19]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,19]<stdout>:                    INFO=1,
[1,19]<stdout>:                    MAILLAGE='<00000004>',
[1,19]<stdout>:                    VERI_JACOBIEN='OUI',
[1,19]<stdout>:                    VERI_NORM_IFS='OUI',
[1,19]<stdout>:                    VERI_PLAN='OUI')
[1,19]<stdout>:
[1,14]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,14]<stdout>:                            PHENOMENE='MECANIQUE',
[1,14]<stdout>:                            TOUT='OUI'),
[1,14]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,14]<stdout>:                    INFO=1,
[1,14]<stdout>:                    MAILLAGE='<00000004>',
[1,14]<stdout>:                    VERI_JACOBIEN='OUI',
[1,14]<stdout>:                    VERI_NORM_IFS='OUI',
[1,14]<stdout>:                    VERI_PLAN='OUI')
[1,14]<stdout>:
[1,4]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,4]<stdout>:                            PHENOMENE='MECANIQUE',
[1,4]<stdout>:                            TOUT='OUI'),
[1,4]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,4]<stdout>:                    INFO=1,
[1,4]<stdout>:                    MAILLAGE='<00000004>',
[1,4]<stdout>:                    VERI_JACOBIEN='OUI',
[1,4]<stdout>:                    VERI_NORM_IFS='OUI',
[1,4]<stdout>:                    VERI_PLAN='OUI')
[1,4]<stdout>:
[1,22]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,22]<stdout>:                            PHENOMENE='MECANIQUE',
[1,22]<stdout>:                            TOUT='OUI'),
[1,22]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,22]<stdout>:                    INFO=1,
[1,22]<stdout>:                    MAILLAGE='<00000004>',
[1,22]<stdout>:                    VERI_JACOBIEN='OUI',
[1,22]<stdout>:                    VERI_NORM_IFS='OUI',
[1,22]<stdout>:                    VERI_PLAN='OUI')
[1,22]<stdout>:
[1,16]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,16]<stdout>:                            PHENOMENE='MECANIQUE',
[1,16]<stdout>:                            TOUT='OUI'),
[1,16]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,16]<stdout>:                    INFO=1,
[1,16]<stdout>:                    MAILLAGE='<00000004>',
[1,16]<stdout>:                    VERI_JACOBIEN='OUI',
[1,16]<stdout>:                    VERI_NORM_IFS='OUI',
[1,16]<stdout>:                    VERI_PLAN='OUI')
[1,16]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt131
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0005 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 131
[1,0]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,0]<stdout>:                            PHENOMENE='MECANIQUE',
[1,0]<stdout>:                            TOUT='OUI'),
[1,0]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,0]<stdout>:                    INFO=1,
[1,0]<stdout>:                    MAILLAGE='<00000004>',
[1,0]<stdout>:                    VERI_JACOBIEN='OUI',
[1,0]<stdout>:                    VERI_NORM_IFS='OUI',
[1,0]<stdout>:                    VERI_PLAN='OUI')
[1,0]<stdout>:
[1,12]<stdout>:Sur les 90985 mailles du maillage 00000004, on a demandé l'affectation de 90985, on a pu en affecter
[1,12]<stdout>:90985.
[1,9]<stdout>:Sur les 94982 mailles du maillage 00000004, on a demandé l'affectation de 94982, on a pu en affecter
[1,9]<stdout>:94982.
[1,23]<stdout>:Sur les 92712 mailles du maillage 00000004, on a demandé l'affectation de 92712, on a pu en affecter
[1,23]<stdout>:92712.
[1,17]<stdout>:Sur les 93359 mailles du maillage 00000004, on a demandé l'affectation de 93359, on a pu en affecter
[1,17]<stdout>:93359.
[1,3]<stdout>:Sur les 93289 mailles du maillage 00000004, on a demandé l'affectation de 93289, on a pu en affecter
[1,3]<stdout>:93289.
[1,21]<stdout>:Sur les 92894 mailles du maillage 00000004, on a demandé l'affectation de 92894, on a pu en affecter
[1,21]<stdout>:92894.
[1,5]<stdout>:Sur les 95866 mailles du maillage 00000004, on a demandé l'affectation de 95866, on a pu en affecter
[1,5]<stdout>:95866.
[1,2]<stdout>:Sur les 92213 mailles du maillage 00000004, on a demandé l'affectation de 92213, on a pu en affecter
[1,2]<stdout>:92213.
[1,18]<stdout>:Sur les 94493 mailles du maillage 00000004, on a demandé l'affectation de 94493, on a pu en affecter
[1,18]<stdout>:94493.
[1,11]<stdout>:Sur les 92160 mailles du maillage 00000004, on a demandé l'affectation de 92160, on a pu en affecter
[1,11]<stdout>:92160.
[1,8]<stdout>:Sur les 95112 mailles du maillage 00000004, on a demandé l'affectation de 95112, on a pu en affecter
[1,8]<stdout>:95112.
[1,20]<stdout>:Sur les 96800 mailles du maillage 00000004, on a demandé l'affectation de 96800, on a pu en affecter
[1,20]<stdout>:96800.
[1,22]<stdout>:Sur les 98005 mailles du maillage 00000004, on a demandé l'affectation de 98005, on a pu en affecter
[1,22]<stdout>:98005.
[1,0]<stdout>:Sur les 100832 mailles du maillage 00000004, on a demandé l'affectation de 100832, on a pu en
[1,0]<stdout>:affecter 100832.
[1,6]<stdout>:Sur les 93722 mailles du maillage 00000004, on a demandé l'affectation de 93722, on a pu en affecter
[1,6]<stdout>:93722.
[1,13]<stdout>:Sur les 100061 mailles du maillage 00000004, on a demandé l'affectation de 100061, on a pu en
[1,13]<stdout>:affecter 100061.
[1,14]<stdout>:Sur les 99660 mailles du maillage 00000004, on a demandé l'affectation de 99660, on a pu en affecter
[1,14]<stdout>:99660.
[1,15]<stdout>:Sur les 95162 mailles du maillage 00000004, on a demandé l'affectation de 95162, on a pu en affecter
[1,15]<stdout>:95162.
[1,7]<stdout>:Sur les 101320 mailles du maillage 00000004, on a demandé l'affectation de 101320, on a pu en
[1,7]<stdout>:affecter 101320.
[1,16]<stdout>:Sur les 101326 mailles du maillage 00000004, on a demandé l'affectation de 101326, on a pu en
[1,16]<stdout>:affecter 101326.
[1,4]<stdout>:Sur les 105006 mailles du maillage 00000004, on a demandé l'affectation de 105006, on a pu en
[1,4]<stdout>:affecter 105006.
[1,1]<stdout>:Sur les 102264 mailles du maillage 00000004, on a demandé l'affectation de 102264, on a pu en
[1,1]<stdout>:affecter 102264.
[1,19]<stdout>:Sur les 97642 mailles du maillage 00000004, on a demandé l'affectation de 97642, on a pu en affecter
[1,19]<stdout>:97642.
[1,10]<stdout>:Sur les 100865 mailles du maillage 00000004, on a demandé l'affectation de 100865, on a pu en
[1,10]<stdout>:affecter 100865.
[1,12]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,12]<stdout>:_                _                SEG2         MECA_ARETE2      141
[1,12]<stdout>:_                _                QUAD4        MECA_FACE4       6296
[1,12]<stdout>:3D               _                HEXA8        MECA_HEXA8       84548
[1,2]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,3]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,6]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,17]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,11]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,21]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,2]<stdout>:_                _                SEG2         MECA_ARETE2      53
[1,2]<stdout>:_                _                QUAD4        MECA_FACE4       4479
[1,2]<stdout>:3D               _                HEXA8        MECA_HEXA8       87681
[1,3]<stdout>:_                _                SEG2         MECA_ARETE2      143
[1,23]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,6]<stdout>:_                _                SEG2         MECA_ARETE2      142
[1,3]<stdout>:_                _                QUAD4        MECA_FACE4       6414
[1,17]<stdout>:_                _                SEG2         MECA_ARETE2      138
[1,6]<stdout>:_                _                QUAD4        MECA_FACE4       6604
[1,3]<stdout>:3D               _                HEXA8        MECA_HEXA8       86732
[1,6]<stdout>:3D               _                HEXA8        MECA_HEXA8       86976
[1,17]<stdout>:_                _                QUAD4        MECA_FACE4       6105
[1,11]<stdout>:_                _                SEG2         MECA_ARETE2      100
[1,17]<stdout>:3D               _                HEXA8        MECA_HEXA8       87116
[1,21]<stdout>:_                _                SEG2         MECA_ARETE2      51
[1,11]<stdout>:_                _                QUAD4        MECA_FACE4       5228
[1,11]<stdout>:3D               _                HEXA8        MECA_HEXA8       86832
[1,21]<stdout>:_                _                QUAD4        MECA_FACE4       4419
[1,21]<stdout>:3D               _                HEXA8        MECA_HEXA8       88424
[1,23]<stdout>:_                _                QUAD4        MECA_FACE4       1572
[1,23]<stdout>:3D               _                HEXA8        MECA_HEXA8       91140
[1,9]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,18]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,9]<stdout>:_                _                SEG2         MECA_ARETE2      80
[1,5]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,9]<stdout>:_                _                QUAD4        MECA_FACE4       4800
[1,8]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,9]<stdout>:3D               _                HEXA8        MECA_HEXA8       90102
[1,20]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,18]<stdout>:_                _                QUAD4        MECA_FACE4       1257
[1,15]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,18]<stdout>:3D               _                HEXA8        MECA_HEXA8       93236
[1,8]<stdout>:_                _                QUAD4        MECA_FACE4       1170
[1,5]<stdout>:_                _                SEG2         MECA_ARETE2      43
[1,19]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,8]<stdout>:3D               _                HEXA8        MECA_HEXA8       93942
[1,5]<stdout>:_                _                QUAD4        MECA_FACE4       4335
[1,5]<stdout>:3D               _                HEXA8        MECA_HEXA8       91488
[1,20]<stdout>:_                _                SEG2         MECA_ARETE2      63
[1,20]<stdout>:_                _                QUAD4        MECA_FACE4       4848
[1,20]<stdout>:3D               _                HEXA8        MECA_HEXA8       91889
[1,15]<stdout>:_                _                SEG2         MECA_ARETE2      31
[1,15]<stdout>:_                _                QUAD4        MECA_FACE4       3873
[1,15]<stdout>:3D               _                HEXA8        MECA_HEXA8       91258
[1,19]<stdout>:_                _                SEG2         MECA_ARETE2      131
[1,22]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,19]<stdout>:_                _                QUAD4        MECA_FACE4       6480
[1,19]<stdout>:3D               _                HEXA8        MECA_HEXA8       91031
[1,22]<stdout>:_                _                SEG2         MECA_ARETE2      141
[1,22]<stdout>:_                _                QUAD4        MECA_FACE4       6434
[1,22]<stdout>:3D               _                HEXA8        MECA_HEXA8       91430
[1,0]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,14]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,10]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,0]<stdout>:_                _                SEG2         MECA_ARETE2      152
[1,7]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,0]<stdout>:_                _                QUAD4        MECA_FACE4       6992
[1,0]<stdout>:3D               _                HEXA8        MECA_HEXA8       93688
[1,14]<stdout>:_                _                SEG2         MECA_ARETE2      33
[1,14]<stdout>:_                _                QUAD4        MECA_FACE4       3278
[1,14]<stdout>:3D               _                HEXA8        MECA_HEXA8       96349
[1,10]<stdout>:_                _                SEG2         MECA_ARETE2      23
[1,10]<stdout>:_                _                QUAD4        MECA_FACE4       2973
[1,10]<stdout>:3D               _                HEXA8        MECA_HEXA8       97869
[1,7]<stdout>:_                _                SEG2         MECA_ARETE2      47
[1,7]<stdout>:_                _                QUAD4        MECA_FACE4       4546
[1,7]<stdout>:3D               _                HEXA8        MECA_HEXA8       96727
[1,16]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,1]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,16]<stdout>:_                _                SEG2         MECA_ARETE2      25
[1,16]<stdout>:_                _                QUAD4        MECA_FACE4       2641
[1,16]<stdout>:3D               _                HEXA8        MECA_HEXA8       98660
[1,1]<stdout>:_                _                QUAD4        MECA_FACE4       1908
[1,13]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,1]<stdout>:3D               _                HEXA8        MECA_HEXA8       100356
[1,13]<stdout>:_                _                SEG2         MECA_ARETE2      25
[1,13]<stdout>:_                _                QUAD4        MECA_FACE4       3383
[1,4]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,13]<stdout>:3D               _                HEXA8        MECA_HEXA8       96653
[1,4]<stdout>:_                _                QUAD4        MECA_FACE4       1642
[1,4]<stdout>:3D               _                HEXA8        MECA_HEXA8       103364
[1,17]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.06      0.00      0.05
[1,17]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,11]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,23]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.06      0.00      0.05
[1,23]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,21]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,21]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.01      0.03
[1,18]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,18]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.03
[1,15]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,3]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,12]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,20]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.06      0.00      0.05
[1,20]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,2]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.06      0.00      0.05
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,8]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,16]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.06      0.00      0.06
[1,16]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,5]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,22]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,22]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,9]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,14]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.06
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,13]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.06      0.00      0.06
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,7]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.06      0.00      0.06
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,19]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,19]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,0]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.06      0.00      0.05
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,10]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.06
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,4]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.06      0.00      0.06
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,1]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.06      0.00      0.06
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,6]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.05
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,17]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,23]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,21]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,0]<stdout>:# Résultat commande #0005 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,17]<stdout>:# Mémoire (Mo) :  1262.46 /   824.51 /   230.72 /   214.77 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Mémoire (Mo) :  1318.01 /   828.23 /   231.81 /   215.13 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Mémoire (Mo) :  1276.95 /   824.61 /   231.01 /   214.87 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,21]<stdout>:# Fin commande #0003   user+syst:        0.37s (syst:        0.01s, elaps:        0.38s)
[1,17]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  1386.22 /   895.05 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0005   user+syst:        0.35s (syst:        0.00s, elaps:        0.35s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,11]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,2]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,11]<stdout>:# Mémoire (Mo) :  1307.23 /   824.86 /   230.66 /   214.66 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  1228.93 /   821.28 /   229.95 /   214.31 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,11]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.01s, elaps:        0.38s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,2]<stdout>:# Mémoire (Mo) :  1276.32 /   822.86 /   230.71 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,18]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,2]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,5]<stdout>:# Mémoire (Mo) :  1298.94 /   825.57 /   232.18 /   215.42 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  1294.10 /   825.68 /   232.20 /   215.36 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,5]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Mémoire (Mo) :  1291.09 /   826.79 /   232.49 /   215.50 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  1242.63 /   822.78 /   230.66 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,15]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.01s, elaps:        0.38s)
[1,8]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,18]<stdout>:# Fin commande #0003   user+syst:        0.37s (syst:        0.01s, elaps:        0.38s)
[1,3]<stdout>:# Fin commande #0003   user+syst:        0.37s (syst:        0.00s, elaps:        0.38s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,9]<stdout>:# Mémoire (Mo) :  1279.08 /   825.02 /   231.63 /   215.23 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,8]<stdout>:# Mémoire (Mo) :  1313.01 /   828.53 /   232.68 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  1238.39 /   822.66 /   230.85 /   214.81 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,13]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,20]<stdout>:# Mémoire (Mo) :  1327.55 /   827.82 /   232.51 /   215.57 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,7]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,9]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,6]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,8]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,22]<stdout>:# Mémoire (Mo) :  1292.95 /   826.99 /   232.85 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,20]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,4]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,19]<stdout>:# Mémoire (Mo) :  1282.77 /   827.39 /   232.47 /   215.56 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Mémoire (Mo) :  1336.25 /   830.20 /   234.00 /   216.25 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  1338.99 /   830.88 /   234.46 /   216.51 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,7]<stdout>:# Mémoire (Mo) :  1333.10 /   829.43 /   234.24 /   216.43 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  1317.60 /   828.88 /   234.15 /   216.32 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Mémoire (Mo) :  1342.83 /   831.36 /   234.67 /   216.63 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,19]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,1]<stdout>:# Mémoire (Mo) :  1311.07 /   830.95 /   234.96 /   216.85 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1346.56 /   832.99 /   236.02 /   217.41 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,7]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,16]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0003   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt141
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt141
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt141
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt141
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0006 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 141
[1,21]<stdout>:# Commande #0004 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 141
[1,17]<stdout>:# Commande #0004 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 141
[1,23]<stdout>:# Commande #0004 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 141
[1,0]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                                   SY=200.0),
[1,0]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,0]<stdout>:                              COEF_AMOR=1.0,
[1,0]<stdout>:                              E=200000.0,
[1,0]<stdout>:                              K_DESSIC=0.0,
[1,0]<stdout>:                              NU=0.3),
[1,0]<stdout>:                      INFO=1)
[1,0]<stdout>:
[1,23]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,23]<stdout>:                                   SY=200.0),
[1,23]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,23]<stdout>:                              COEF_AMOR=1.0,
[1,23]<stdout>:                              E=200000.0,
[1,23]<stdout>:                              K_DESSIC=0.0,
[1,23]<stdout>:                              NU=0.3),
[1,23]<stdout>:                      INFO=1)
[1,23]<stdout>:
[1,21]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,21]<stdout>:                                   SY=200.0),
[1,21]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,21]<stdout>:                              COEF_AMOR=1.0,
[1,21]<stdout>:                              E=200000.0,
[1,21]<stdout>:                              K_DESSIC=0.0,
[1,21]<stdout>:                              NU=0.3),
[1,21]<stdout>:                      INFO=1)
[1,21]<stdout>:
[1,17]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,17]<stdout>:                                   SY=200.0),
[1,17]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,17]<stdout>:                              COEF_AMOR=1.0,
[1,17]<stdout>:                              E=200000.0,
[1,17]<stdout>:                              K_DESSIC=0.0,
[1,17]<stdout>:                              NU=0.3),
[1,17]<stdout>:                      INFO=1)
[1,17]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt141
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt141
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt141
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0004 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 141
[1,11]<stdout>:# Commande #0004 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 141
[1,2]<stdout>:# Commande #0004 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 141
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt141
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt141
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt141
[1,12]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,12]<stdout>:                                   SY=200.0),
[1,12]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,12]<stdout>:                              COEF_AMOR=1.0,
[1,12]<stdout>:                              E=200000.0,
[1,12]<stdout>:                              K_DESSIC=0.0,
[1,12]<stdout>:                              NU=0.3),
[1,12]<stdout>:                      INFO=1)
[1,12]<stdout>:
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt141
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0004 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 141
[1,11]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,11]<stdout>:                                   SY=200.0),
[1,11]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,11]<stdout>:                              COEF_AMOR=1.0,
[1,11]<stdout>:                              E=200000.0,
[1,11]<stdout>:                              K_DESSIC=0.0,
[1,11]<stdout>:                              NU=0.3),
[1,11]<stdout>:                      INFO=1)
[1,11]<stdout>:
[1,15]<stdout>:# Commande #0004 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 141
[1,2]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                                   SY=200.0),
[1,2]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,2]<stdout>:                              COEF_AMOR=1.0,
[1,2]<stdout>:                              E=200000.0,
[1,2]<stdout>:                              K_DESSIC=0.0,
[1,2]<stdout>:                              NU=0.3),
[1,2]<stdout>:                      INFO=1)
[1,2]<stdout>:
[1,18]<stdout>:# Commande #0004 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 141
[1,3]<stdout>:# Commande #0004 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 141
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt141
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt141
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt141
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt141
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt141
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                                   SY=200.0),
[1,5]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,5]<stdout>:                              COEF_AMOR=1.0,
[1,5]<stdout>:                              E=200000.0,
[1,5]<stdout>:                              K_DESSIC=0.0,
[1,5]<stdout>:                              NU=0.3),
[1,5]<stdout>:                      INFO=1)
[1,5]<stdout>:
[1,15]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,15]<stdout>:                                   SY=200.0),
[1,15]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,15]<stdout>:                              COEF_AMOR=1.0,
[1,15]<stdout>:                              E=200000.0,
[1,15]<stdout>:                              K_DESSIC=0.0,
[1,15]<stdout>:                              NU=0.3),
[1,15]<stdout>:                      INFO=1)
[1,15]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt141
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt141
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt141
[1,18]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,18]<stdout>:                                   SY=200.0),
[1,18]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,18]<stdout>:                              COEF_AMOR=1.0,
[1,18]<stdout>:                              E=200000.0,
[1,18]<stdout>:                              K_DESSIC=0.0,
[1,18]<stdout>:                              NU=0.3),
[1,18]<stdout>:                      INFO=1)
[1,18]<stdout>:
[1,3]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                                   SY=200.0),
[1,3]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,3]<stdout>:                              COEF_AMOR=1.0,
[1,3]<stdout>:                              E=200000.0,
[1,3]<stdout>:                              K_DESSIC=0.0,
[1,3]<stdout>:                              NU=0.3),
[1,3]<stdout>:                      INFO=1)
[1,3]<stdout>:
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Commande #0004 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 141
[1,8]<stdout>:# Commande #0004 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 141
[1,9]<stdout>:# Commande #0004 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 141
[1,20]<stdout>:# Commande #0004 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 141
[1,6]<stdout>:# Commande #0004 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 141
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt141
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt141
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt141
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt141
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt141
[1,19]<stdout>:# Commande #0004 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 141
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0004 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 141
[1,10]<stdout>:# Commande #0004 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 141
[1,13]<stdout>:# Commande #0004 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 141
[1,4]<stdout>:# Commande #0004 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 141
[1,9]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,9]<stdout>:                                   SY=200.0),
[1,9]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,9]<stdout>:                              COEF_AMOR=1.0,
[1,9]<stdout>:                              E=200000.0,
[1,9]<stdout>:                              K_DESSIC=0.0,
[1,9]<stdout>:                              NU=0.3),
[1,9]<stdout>:                      INFO=1)
[1,9]<stdout>:
[1,20]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,20]<stdout>:                                   SY=200.0),
[1,20]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,20]<stdout>:                              COEF_AMOR=1.0,
[1,20]<stdout>:                              E=200000.0,
[1,20]<stdout>:                              K_DESSIC=0.0,
[1,20]<stdout>:                              NU=0.3),
[1,20]<stdout>:                      INFO=1)
[1,20]<stdout>:
[1,1]<stdout>:# Commande #0004 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 141
[1,6]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                                   SY=200.0),
[1,6]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,6]<stdout>:                              COEF_AMOR=1.0,
[1,6]<stdout>:                              E=200000.0,
[1,6]<stdout>:                              K_DESSIC=0.0,
[1,6]<stdout>:                              NU=0.3),
[1,6]<stdout>:                      INFO=1)
[1,6]<stdout>:
[1,7]<stdout>:# Commande #0004 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 141
[1,22]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,22]<stdout>:                                   SY=200.0),
[1,22]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,22]<stdout>:                              COEF_AMOR=1.0,
[1,22]<stdout>:                              E=200000.0,
[1,22]<stdout>:                              K_DESSIC=0.0,
[1,22]<stdout>:                              NU=0.3),
[1,22]<stdout>:                      INFO=1)
[1,22]<stdout>:
[1,16]<stdout>:# Commande #0004 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 141
[1,8]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,8]<stdout>:                                   SY=200.0),
[1,8]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,8]<stdout>:                              COEF_AMOR=1.0,
[1,8]<stdout>:                              E=200000.0,
[1,8]<stdout>:                              K_DESSIC=0.0,
[1,8]<stdout>:                              NU=0.3),
[1,8]<stdout>:                      INFO=1)
[1,8]<stdout>:
[1,19]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,19]<stdout>:                                   SY=200.0),
[1,19]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,19]<stdout>:                              COEF_AMOR=1.0,
[1,19]<stdout>:                              E=200000.0,
[1,19]<stdout>:                              K_DESSIC=0.0,
[1,19]<stdout>:                              NU=0.3),
[1,19]<stdout>:                      INFO=1)
[1,19]<stdout>:
[1,14]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,14]<stdout>:                                   SY=200.0),
[1,14]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,14]<stdout>:                              COEF_AMOR=1.0,
[1,14]<stdout>:                              E=200000.0,
[1,14]<stdout>:                              K_DESSIC=0.0,
[1,14]<stdout>:                              NU=0.3),
[1,14]<stdout>:                      INFO=1)
[1,14]<stdout>:
[1,10]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,10]<stdout>:                                   SY=200.0),
[1,10]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,10]<stdout>:                              COEF_AMOR=1.0,
[1,10]<stdout>:                              E=200000.0,
[1,10]<stdout>:                              K_DESSIC=0.0,
[1,10]<stdout>:                              NU=0.3),
[1,10]<stdout>:                      INFO=1)
[1,10]<stdout>:
[1,4]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                                   SY=200.0),
[1,4]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,4]<stdout>:                              COEF_AMOR=1.0,
[1,4]<stdout>:                              E=200000.0,
[1,4]<stdout>:                              K_DESSIC=0.0,
[1,4]<stdout>:                              NU=0.3),
[1,4]<stdout>:                      INFO=1)
[1,4]<stdout>:
[1,1]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                                   SY=200.0),
[1,1]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,1]<stdout>:                              COEF_AMOR=1.0,
[1,1]<stdout>:                              E=200000.0,
[1,1]<stdout>:                              K_DESSIC=0.0,
[1,1]<stdout>:                              NU=0.3),
[1,1]<stdout>:                      INFO=1)
[1,1]<stdout>:
[1,13]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,13]<stdout>:                                   SY=200.0),
[1,13]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,13]<stdout>:                              COEF_AMOR=1.0,
[1,13]<stdout>:                              E=200000.0,
[1,13]<stdout>:                              K_DESSIC=0.0,
[1,13]<stdout>:                              NU=0.3),
[1,13]<stdout>:                      INFO=1)
[1,13]<stdout>:
[1,7]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                                   SY=200.0),
[1,7]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,7]<stdout>:                              COEF_AMOR=1.0,
[1,7]<stdout>:                              E=200000.0,
[1,7]<stdout>:                              K_DESSIC=0.0,
[1,7]<stdout>:                              NU=0.3),
[1,7]<stdout>:                      INFO=1)
[1,7]<stdout>:
[1,16]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,16]<stdout>:                                   SY=200.0),
[1,16]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,16]<stdout>:                              COEF_AMOR=1.0,
[1,16]<stdout>:                              E=200000.0,
[1,16]<stdout>:                              K_DESSIC=0.0,
[1,16]<stdout>:                              NU=0.3),
[1,16]<stdout>:                      INFO=1)
[1,16]<stdout>:
[1,23]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,17]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,21]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,23]<stdout>:# Mémoire (Mo) :  1318.01 /   828.23 /   231.81 /   215.13 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Mémoire (Mo) :  1262.46 /   824.51 /   230.72 /   214.77 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Mémoire (Mo) :  1276.95 /   824.61 /   231.01 /   214.87 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,12]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,2]<stdout>:# Mémoire (Mo) :  1276.32 /   822.86 /   230.71 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  1228.93 /   821.28 /   229.95 /   214.31 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,2]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Mémoire (Mo) :  1307.23 /   824.86 /   230.66 /   214.66 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,5]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,18]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,11]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,5]<stdout>:# Mémoire (Mo) :  1298.94 /   825.57 /   232.18 /   215.42 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Mémoire (Mo) :  1291.09 /   826.79 /   232.49 /   215.50 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  1242.63 /   822.78 /   230.66 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,9]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,22]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,3]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,18]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,5]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,10]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Mémoire (Mo) :  1282.77 /   827.39 /   232.47 /   215.56 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Mémoire (Mo) :  1294.10 /   825.68 /   232.20 /   215.36 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Mémoire (Mo) :  1292.95 /   826.99 /   232.85 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :  1279.08 /   825.02 /   231.63 /   215.23 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,1]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,14]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  1338.99 /   830.88 /   234.46 /   216.51 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.01s, elaps:        0.02s)
[1,9]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,10]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,20]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,14]<stdout>:# Mémoire (Mo) :  1336.25 /   830.20 /   234.00 /   216.25 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1311.07 /   830.95 /   234.96 /   216.85 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,14]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0006 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,8]<stdout>:# Mémoire (Mo) :  1313.01 /   828.53 /   232.68 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Mémoire (Mo) :  1327.55 /   827.82 /   232.51 /   215.57 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  1238.39 /   822.66 /   230.85 /   214.81 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,20]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.01s, elaps:        0.02s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,0]<stdout>:# Mémoire (Mo) :  1386.22 /   895.05 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,16]<stdout>:# Mémoire (Mo) :  1342.83 /   831.36 /   234.67 /   216.63 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt152
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt152
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt152
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0006   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,7]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1346.56 /   832.99 /   236.02 /   217.41 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,13]<stdout>:# Mémoire (Mo) :  1317.60 /   828.88 /   234.15 /   216.32 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,21]<stdout>:# Commande #0005 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 152
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,23]<stdout>:# Commande #0005 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 152
[1,17]<stdout>:# Commande #0005 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:# Mémoire (Mo) :  1333.10 /   829.43 /   234.24 /   216.43 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,21]<stdout>:                              TOUT='OUI'),
[1,21]<stdout>:                      INFO=1,
[1,21]<stdout>:                      MAILLAGE='<00000004>')
[1,21]<stdout>:
[1,23]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,23]<stdout>:                              TOUT='OUI'),
[1,23]<stdout>:                      INFO=1,
[1,23]<stdout>:                      MAILLAGE='<00000004>')
[1,23]<stdout>:
[1,17]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,17]<stdout>:                              TOUT='OUI'),
[1,17]<stdout>:                      INFO=1,
[1,17]<stdout>:                      MAILLAGE='<00000004>')
[1,17]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt152
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt152
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0005 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 152
[1,12]<stdout>:# Commande #0005 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 152
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt152
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0005 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 152
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt152
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt152
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt152
[1,2]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,2]<stdout>:                              TOUT='OUI'),
[1,2]<stdout>:                      INFO=1,
[1,2]<stdout>:                      MAILLAGE='<00000004>')
[1,2]<stdout>:
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,12]<stdout>:                              TOUT='OUI'),
[1,12]<stdout>:                      INFO=1,
[1,12]<stdout>:                      MAILLAGE='<00000004>')
[1,12]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt152
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0005 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 152
[1,18]<stdout>:# Commande #0005 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 152
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt152
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt152
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0005 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 152
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt152
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt152
[1,11]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,11]<stdout>:                              TOUT='OUI'),
[1,11]<stdout>:                      INFO=1,
[1,11]<stdout>:                      MAILLAGE='<00000004>')
[1,11]<stdout>:
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0005 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 152
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt152
[1,15]<stdout>:# Commande #0005 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 152
[1,22]<stdout>:# Commande #0005 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 152
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0005 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 152
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt152
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0005 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 152
[1,3]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,3]<stdout>:                              TOUT='OUI'),
[1,3]<stdout>:                      INFO=1,
[1,3]<stdout>:                      MAILLAGE='<00000004>')
[1,3]<stdout>:
[1,18]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,18]<stdout>:                              TOUT='OUI'),
[1,18]<stdout>:                      INFO=1,
[1,18]<stdout>:                      MAILLAGE='<00000004>')
[1,18]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt152
[1,5]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,5]<stdout>:                              TOUT='OUI'),
[1,5]<stdout>:                      INFO=1,
[1,5]<stdout>:                      MAILLAGE='<00000004>')
[1,5]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt152
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,19]<stdout>:                              TOUT='OUI'),
[1,19]<stdout>:                      INFO=1,
[1,19]<stdout>:                      MAILLAGE='<00000004>')
[1,19]<stdout>:
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0005 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 152
[1,1]<stdout>:# Commande #0005 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 152
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt152
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,22]<stdout>:                              TOUT='OUI'),
[1,22]<stdout>:                      INFO=1,
[1,22]<stdout>:                      MAILLAGE='<00000004>')
[1,22]<stdout>:
[1,15]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,15]<stdout>:                              TOUT='OUI'),
[1,15]<stdout>:                      INFO=1,
[1,15]<stdout>:                      MAILLAGE='<00000004>')
[1,15]<stdout>:
[1,9]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,9]<stdout>:                              TOUT='OUI'),
[1,9]<stdout>:                      INFO=1,
[1,9]<stdout>:                      MAILLAGE='<00000004>')
[1,9]<stdout>:
[1,8]<stdout>:# Commande #0005 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 152
[1,20]<stdout>:# Commande #0005 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 152
[1,10]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,10]<stdout>:                              TOUT='OUI'),
[1,10]<stdout>:                      INFO=1,
[1,10]<stdout>:                      MAILLAGE='<00000004>')
[1,10]<stdout>:
[1,6]<stdout>:# Commande #0005 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 152
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt152
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt152
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,1]<stdout>:                              TOUT='OUI'),
[1,1]<stdout>:                      INFO=1,
[1,1]<stdout>:                      MAILLAGE='<00000004>')
[1,1]<stdout>:
[1,14]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,14]<stdout>:                              TOUT='OUI'),
[1,14]<stdout>:                      INFO=1,
[1,14]<stdout>:                      MAILLAGE='<00000004>')
[1,14]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt152
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt152
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,8]<stdout>:                              TOUT='OUI'),
[1,8]<stdout>:                      INFO=1,
[1,8]<stdout>:                      MAILLAGE='<00000004>')
[1,8]<stdout>:
[1,16]<stdout>:# Commande #0005 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 152
[1,20]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,20]<stdout>:                              TOUT='OUI'),
[1,20]<stdout>:                      INFO=1,
[1,20]<stdout>:                      MAILLAGE='<00000004>')
[1,20]<stdout>:
[1,0]<stdout>:# Commande #0007 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt152
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0005 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 152
[1,6]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,6]<stdout>:                              TOUT='OUI'),
[1,6]<stdout>:                      INFO=1,
[1,6]<stdout>:                      MAILLAGE='<00000004>')
[1,6]<stdout>:
[1,13]<stdout>:# Commande #0005 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:# Commande #0005 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 152
[1,16]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,16]<stdout>:                              TOUT='OUI'),
[1,16]<stdout>:                      INFO=1,
[1,16]<stdout>:                      MAILLAGE='<00000004>')
[1,16]<stdout>:
[1,0]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,0]<stdout>:                              TOUT='OUI'),
[1,0]<stdout>:                      INFO=1,
[1,0]<stdout>:                      MAILLAGE='<00000004>')
[1,0]<stdout>:
[1,4]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,4]<stdout>:                              TOUT='OUI'),
[1,4]<stdout>:                      INFO=1,
[1,4]<stdout>:                      MAILLAGE='<00000004>')
[1,4]<stdout>:
[1,13]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,13]<stdout>:                              TOUT='OUI'),
[1,13]<stdout>:                      INFO=1,
[1,13]<stdout>:                      MAILLAGE='<00000004>')
[1,13]<stdout>:
[1,7]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,7]<stdout>:                              TOUT='OUI'),
[1,7]<stdout>:                      INFO=1,
[1,7]<stdout>:                      MAILLAGE='<00000004>')
[1,7]<stdout>:
[1,23]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,23]<stdout>:# Mémoire (Mo) :  1318.01 /   828.23 /   231.81 /   215.13 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,23]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Mémoire (Mo) :  1262.46 /   824.51 /   230.72 /   214.77 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,17]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Mémoire (Mo) :  1276.95 /   824.61 /   231.01 /   214.87 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,12]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,2]<stdout>:# Mémoire (Mo) :  1276.32 /   822.86 /   230.71 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  1228.93 /   821.28 /   229.95 /   214.31 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,2]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,11]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,5]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,12]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Mémoire (Mo) :  1291.09 /   826.79 /   232.49 /   215.50 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Mémoire (Mo) :  1282.77 /   827.39 /   232.47 /   215.56 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  1298.94 /   825.57 /   232.18 /   215.42 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,11]<stdout>:# Mémoire (Mo) :  1307.23 /   824.86 /   230.66 /   214.66 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,22]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,19]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt161
[1,3]<stdout>:# Mémoire (Mo) :  1242.63 /   822.78 /   230.66 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,22]<stdout>:# Mémoire (Mo) :  1292.95 /   826.99 /   232.85 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt161
[1,10]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,14]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,9]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,23]<stdout>:# Commande #0006 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 161
[1,22]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,15]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Commande #0006 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 161
[1,9]<stdout>:# Mémoire (Mo) :  1279.08 /   825.02 /   231.63 /   215.23 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :  1338.99 /   830.88 /   234.46 /   216.51 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Mémoire (Mo) :  1336.25 /   830.20 /   234.00 /   216.25 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1311.07 /   830.95 /   234.96 /   216.85 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt161
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,23]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,23]<stdout>:                                    DY=0.0,
[1,23]<stdout>:                                    DZ=0.0,
[1,23]<stdout>:                                    GROUP_MA='LEFT'),
[1,23]<stdout>:                       MODELE=model,
[1,23]<stdout>:                       SYNTAXE='NON')
[1,23]<stdout>:
[1,15]<stdout>:# Mémoire (Mo) :  1294.10 /   825.68 /   232.20 /   215.36 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,9]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,10]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,17]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,17]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,17]<stdout>:                                    DY=0.0,
[1,17]<stdout>:                                    DZ=0.0,
[1,17]<stdout>:                                    GROUP_MA='LEFT'),
[1,17]<stdout>:                       MODELE=model,
[1,17]<stdout>:                       SYNTAXE='NON')
[1,17]<stdout>:
[1,21]<stdout>:# Commande #0006 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 161
[1,20]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :  1238.39 /   822.66 /   230.85 /   214.81 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  1313.01 /   828.53 /   232.68 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Mémoire (Mo) :  1327.55 /   827.82 /   232.51 /   215.57 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,21]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,21]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,21]<stdout>:                                    DY=0.0,
[1,21]<stdout>:                                    DZ=0.0,
[1,21]<stdout>:                                    GROUP_MA='LEFT'),
[1,21]<stdout>:                       MODELE=model,
[1,21]<stdout>:                       SYNTAXE='NON')
[1,21]<stdout>:
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,4]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,13]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,16]<stdout>:# Mémoire (Mo) :  1342.83 /   831.36 /   234.67 /   216.63 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :  1346.56 /   832.99 /   236.02 /   217.41 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt161
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt161
[1,16]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,4]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Mémoire (Mo) :  1317.60 /   828.88 /   234.15 /   216.32 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0006 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 161
[1,13]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,12]<stdout>:# Commande #0006 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 161
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt161
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt161
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt161
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt161
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,2]<stdout>:                                    DY=0.0,
[1,2]<stdout>:                                    DZ=0.0,
[1,2]<stdout>:                                    GROUP_MA='LEFT'),
[1,2]<stdout>:                       MODELE=model,
[1,2]<stdout>:                       SYNTAXE='NON')
[1,2]<stdout>:
[1,12]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,12]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,12]<stdout>:                                    DY=0.0,
[1,12]<stdout>:                                    DZ=0.0,
[1,12]<stdout>:                                    GROUP_MA='LEFT'),
[1,12]<stdout>:                       MODELE=model,
[1,12]<stdout>:                       SYNTAXE='NON')
[1,12]<stdout>:
[1,18]<stdout>:# Commande #0006 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 161
[1,7]<stdout>:# Mémoire (Mo) :  1333.10 /   829.43 /   234.24 /   216.43 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt161
[1,11]<stdout>:# Commande #0006 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 161
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0006 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 161
[1,19]<stdout>:# Commande #0006 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 161
[1,7]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt161
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0006 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 161
[1,18]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,18]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,18]<stdout>:                                    DY=0.0,
[1,18]<stdout>:                                    DZ=0.0,
[1,18]<stdout>:                                    GROUP_MA='LEFT'),
[1,18]<stdout>:                       MODELE=model,
[1,18]<stdout>:                       SYNTAXE='NON')
[1,18]<stdout>:
[1,19]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,19]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,19]<stdout>:                                    DY=0.0,
[1,19]<stdout>:                                    DZ=0.0,
[1,19]<stdout>:                                    GROUP_MA='LEFT'),
[1,19]<stdout>:                       MODELE=model,
[1,19]<stdout>:                       SYNTAXE='NON')
[1,19]<stdout>:
[1,5]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,5]<stdout>:                                    DY=0.0,
[1,5]<stdout>:                                    DZ=0.0,
[1,5]<stdout>:                                    GROUP_MA='LEFT'),
[1,5]<stdout>:                       MODELE=model,
[1,5]<stdout>:                       SYNTAXE='NON')
[1,5]<stdout>:
[1,11]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,11]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,11]<stdout>:                                    DY=0.0,
[1,11]<stdout>:                                    DZ=0.0,
[1,11]<stdout>:                                    GROUP_MA='LEFT'),
[1,11]<stdout>:                       MODELE=model,
[1,11]<stdout>:                       SYNTAXE='NON')
[1,11]<stdout>:
[1,22]<stdout>:# Commande #0006 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 161
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt161
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt161
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt161
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,3]<stdout>:                                    DY=0.0,
[1,3]<stdout>:                                    DZ=0.0,
[1,3]<stdout>:                                    GROUP_MA='LEFT'),
[1,3]<stdout>:                       MODELE=model,
[1,3]<stdout>:                       SYNTAXE='NON')
[1,3]<stdout>:
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt161
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt161
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,22]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,22]<stdout>:                                    DY=0.0,
[1,22]<stdout>:                                    DZ=0.0,
[1,22]<stdout>:                                    GROUP_MA='LEFT'),
[1,22]<stdout>:                       MODELE=model,
[1,22]<stdout>:                       SYNTAXE='NON')
[1,22]<stdout>:
[1,9]<stdout>:# Commande #0006 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 161
[1,10]<stdout>:# Commande #0006 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 161
[1,14]<stdout>:# Commande #0006 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 161
[1,1]<stdout>:# Commande #0006 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 161
[1,15]<stdout>:# Commande #0006 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 161
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt161
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt161
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,9]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,9]<stdout>:                                    DY=0.0,
[1,9]<stdout>:                                    DZ=0.0,
[1,9]<stdout>:                                    GROUP_MA='LEFT'),
[1,9]<stdout>:                       MODELE=model,
[1,9]<stdout>:                       SYNTAXE='NON')
[1,9]<stdout>:
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,10]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,10]<stdout>:                                    DY=0.0,
[1,10]<stdout>:                                    DZ=0.0,
[1,10]<stdout>:                                    GROUP_MA='LEFT'),
[1,10]<stdout>:                       MODELE=model,
[1,10]<stdout>:                       SYNTAXE='NON')
[1,10]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt161
[1,14]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,14]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,14]<stdout>:                                    DY=0.0,
[1,14]<stdout>:                                    DZ=0.0,
[1,14]<stdout>:                                    GROUP_MA='LEFT'),
[1,14]<stdout>:                       MODELE=model,
[1,14]<stdout>:                       SYNTAXE='NON')
[1,14]<stdout>:
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,1]<stdout>:                                    DY=0.0,
[1,1]<stdout>:                                    DZ=0.0,
[1,1]<stdout>:                                    GROUP_MA='LEFT'),
[1,1]<stdout>:                       MODELE=model,
[1,1]<stdout>:                       SYNTAXE='NON')
[1,1]<stdout>:
[1,15]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,15]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,15]<stdout>:                                    DY=0.0,
[1,15]<stdout>:                                    DZ=0.0,
[1,15]<stdout>:                                    GROUP_MA='LEFT'),
[1,15]<stdout>:                       MODELE=model,
[1,15]<stdout>:                       SYNTAXE='NON')
[1,15]<stdout>:
[1,8]<stdout>:# Commande #0006 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 161
[1,6]<stdout>:# Commande #0006 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 161
[1,20]<stdout>:# Commande #0006 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt161
[1,6]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,6]<stdout>:                                    DY=0.0,
[1,6]<stdout>:                                    DZ=0.0,
[1,6]<stdout>:                                    GROUP_MA='LEFT'),
[1,6]<stdout>:                       MODELE=model,
[1,6]<stdout>:                       SYNTAXE='NON')
[1,6]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt161
[1,8]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,8]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,8]<stdout>:                                    DY=0.0,
[1,8]<stdout>:                                    DZ=0.0,
[1,8]<stdout>:                                    GROUP_MA='LEFT'),
[1,8]<stdout>:                       MODELE=model,
[1,8]<stdout>:                       SYNTAXE='NON')
[1,8]<stdout>:
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,20]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,20]<stdout>:                                    DY=0.0,
[1,20]<stdout>:                                    DZ=0.0,
[1,20]<stdout>:                                    GROUP_MA='LEFT'),
[1,20]<stdout>:                       MODELE=model,
[1,20]<stdout>:                       SYNTAXE='NON')
[1,20]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt161
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0006 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:# Commande #0006 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 161
[1,13]<stdout>:# Commande #0006 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,4]<stdout>:                                    DY=0.0,
[1,4]<stdout>:                                    DZ=0.0,
[1,4]<stdout>:                                    GROUP_MA='LEFT'),
[1,4]<stdout>:                       MODELE=model,
[1,4]<stdout>:                       SYNTAXE='NON')
[1,4]<stdout>:
[1,16]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,16]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,16]<stdout>:                                    DY=0.0,
[1,16]<stdout>:                                    DZ=0.0,
[1,16]<stdout>:                                    GROUP_MA='LEFT'),
[1,16]<stdout>:                       MODELE=model,
[1,16]<stdout>:                       SYNTAXE='NON')
[1,16]<stdout>:
[1,0]<stdout>:# Résultat commande #0007 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,13]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,13]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,13]<stdout>:                                    DY=0.0,
[1,13]<stdout>:                                    DZ=0.0,
[1,13]<stdout>:                                    GROUP_MA='LEFT'),
[1,13]<stdout>:                       MODELE=model,
[1,13]<stdout>:                       SYNTAXE='NON')
[1,13]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt161
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  1386.22 /   895.05 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Commande #0006 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:# Fin commande #0007   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,7]<stdout>:                                    DY=0.0,
[1,7]<stdout>:                                    DZ=0.0,
[1,7]<stdout>:                                    GROUP_MA='LEFT'),
[1,7]<stdout>:                       MODELE=model,
[1,7]<stdout>:                       SYNTAXE='NON')
[1,7]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt161
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0008 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,0]<stdout>:                                    DY=0.0,
[1,0]<stdout>:                                    DZ=0.0,
[1,0]<stdout>:                                    GROUP_MA='LEFT'),
[1,0]<stdout>:                       MODELE=model,
[1,0]<stdout>:                       SYNTAXE='NON')
[1,0]<stdout>:
[1,12]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,12]<stdout>:# Mémoire (Mo) :  1228.93 /   821.28 /   229.95 /   214.31 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt173
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0007 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 173
[1,12]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,12]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,12]<stdout>:                                            DZ=0.001,
[1,12]<stdout>:                                            GROUP_MA='RIGHT'),
[1,12]<stdout>:                               MODELE=model,
[1,12]<stdout>:                               SYNTAXE='NON')
[1,12]<stdout>:
[1,3]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,3]<stdout>:# Mémoire (Mo) :  1242.63 /   822.78 /   230.66 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,6]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,17]<stdout>:# Mémoire (Mo) :  1262.46 /   824.51 /   230.72 /   214.77 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  1238.39 /   822.66 /   230.85 /   214.81 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,11]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,2]<stdout>:# Mémoire (Mo) :  1276.32 /   822.86 /   230.71 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Mémoire (Mo) :  1307.23 /   824.86 /   230.66 /   214.66 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,21]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Mémoire (Mo) :  1276.95 /   824.61 /   231.01 /   214.87 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt173
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Fin commande #0006   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0007 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 173
[1,3]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,3]<stdout>:                                            DZ=0.001,
[1,3]<stdout>:                                            GROUP_MA='RIGHT'),
[1,3]<stdout>:                               MODELE=model,
[1,3]<stdout>:                               SYNTAXE='NON')
[1,3]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt173
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt173
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Commande #0007 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 173
[1,6]<stdout>:# Commande #0007 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 173
[1,17]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,17]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,17]<stdout>:                                            DZ=0.001,
[1,17]<stdout>:                                            GROUP_MA='RIGHT'),
[1,17]<stdout>:                               MODELE=model,
[1,17]<stdout>:                               SYNTAXE='NON')
[1,17]<stdout>:
[1,6]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,6]<stdout>:                                            DZ=0.001,
[1,6]<stdout>:                                            GROUP_MA='RIGHT'),
[1,6]<stdout>:                               MODELE=model,
[1,6]<stdout>:                               SYNTAXE='NON')
[1,6]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt173
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt173
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0007 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 173
[1,11]<stdout>:# Commande #0007 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 173
[1,2]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,2]<stdout>:                                            DZ=0.001,
[1,2]<stdout>:                                            GROUP_MA='RIGHT'),
[1,2]<stdout>:                               MODELE=model,
[1,2]<stdout>:                               SYNTAXE='NON')
[1,2]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt173
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,11]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,11]<stdout>:                                            DZ=0.001,
[1,11]<stdout>:                                            GROUP_MA='RIGHT'),
[1,11]<stdout>:                               MODELE=model,
[1,11]<stdout>:                               SYNTAXE='NON')
[1,11]<stdout>:
[1,21]<stdout>:# Commande #0007 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 173
[1,21]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,21]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,21]<stdout>:                                            DZ=0.001,
[1,21]<stdout>:                                            GROUP_MA='RIGHT'),
[1,21]<stdout>:                               MODELE=model,
[1,21]<stdout>:                               SYNTAXE='NON')
[1,21]<stdout>:
[1,9]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,9]<stdout>:# Mémoire (Mo) :  1279.08 /   825.02 /   231.63 /   215.23 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0006   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,5]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,23]<stdout>:# Mémoire (Mo) :  1318.01 /   828.23 /   231.81 /   215.13 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  1298.94 /   825.57 /   232.18 /   215.42 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,23]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,5]<stdout>:# Fin commande #0006   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Mémoire (Mo) :  1292.95 /   826.99 /   232.85 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,22]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Mémoire (Mo) :  1282.77 /   827.39 /   232.47 /   215.56 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0006   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,15]<stdout>:# Mémoire (Mo) :  1294.10 /   825.68 /   232.20 /   215.36 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt173
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,0]<stdout>:# Résultat commande #0008 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,15]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0007 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 173
[1,20]<stdout>:# Mémoire (Mo) :  1327.55 /   827.82 /   232.51 /   215.57 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,9]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,9]<stdout>:                                            DZ=0.001,
[1,9]<stdout>:                                            GROUP_MA='RIGHT'),
[1,9]<stdout>:                               MODELE=model,
[1,9]<stdout>:                               SYNTAXE='NON')
[1,9]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1386.22 /   895.05 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt173
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt173
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0008   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,23]<stdout>:# Commande #0007 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 173
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0007 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 173
[1,23]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,23]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,23]<stdout>:                                            DZ=0.001,
[1,23]<stdout>:                                            GROUP_MA='RIGHT'),
[1,23]<stdout>:                               MODELE=model,
[1,23]<stdout>:                               SYNTAXE='NON')
[1,23]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt173
[1,5]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,5]<stdout>:                                            DZ=0.001,
[1,5]<stdout>:                                            GROUP_MA='RIGHT'),
[1,5]<stdout>:                               MODELE=model,
[1,5]<stdout>:                               SYNTAXE='NON')
[1,5]<stdout>:
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Commande #0007 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 173
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt173
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,22]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,22]<stdout>:                                            DZ=0.001,
[1,22]<stdout>:                                            GROUP_MA='RIGHT'),
[1,22]<stdout>:                               MODELE=model,
[1,22]<stdout>:                               SYNTAXE='NON')
[1,22]<stdout>:
[1,8]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,19]<stdout>:# Commande #0007 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 173
[1,19]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,19]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,19]<stdout>:                                            DZ=0.001,
[1,19]<stdout>:                                            GROUP_MA='RIGHT'),
[1,19]<stdout>:                               MODELE=model,
[1,19]<stdout>:                               SYNTAXE='NON')
[1,19]<stdout>:
[1,8]<stdout>:# Mémoire (Mo) :  1313.01 /   828.53 /   232.68 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0006   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt173
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Mémoire (Mo) :  1291.09 /   826.79 /   232.49 /   215.50 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Commande #0007 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 173
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt173
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Fin commande #0006   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,15]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,15]<stdout>:                                            DZ=0.001,
[1,15]<stdout>:                                            GROUP_MA='RIGHT'),
[1,15]<stdout>:                               MODELE=model,
[1,15]<stdout>:                               SYNTAXE='NON')
[1,15]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt173
[1,20]<stdout>:# Commande #0007 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 173
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,20]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,20]<stdout>:                                            DZ=0.001,
[1,20]<stdout>:                                            GROUP_MA='RIGHT'),
[1,20]<stdout>:                               MODELE=model,
[1,20]<stdout>:                               SYNTAXE='NON')
[1,20]<stdout>:
[1,0]<stdout>:# Commande #0009 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 173
[1,0]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,0]<stdout>:                                            DZ=0.001,
[1,0]<stdout>:                                            GROUP_MA='RIGHT'),
[1,0]<stdout>:                               MODELE=model,
[1,0]<stdout>:                               SYNTAXE='NON')
[1,0]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt173
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0007 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 173
[1,8]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,8]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,8]<stdout>:                                            DZ=0.001,
[1,8]<stdout>:                                            GROUP_MA='RIGHT'),
[1,8]<stdout>:                               MODELE=model,
[1,8]<stdout>:                               SYNTAXE='NON')
[1,8]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt173
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0007 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 173
[1,18]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,18]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,18]<stdout>:                                            DZ=0.001,
[1,18]<stdout>:                                            GROUP_MA='RIGHT'),
[1,18]<stdout>:                               MODELE=model,
[1,18]<stdout>:                               SYNTAXE='NON')
[1,18]<stdout>:
[1,14]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,14]<stdout>:# Mémoire (Mo) :  1336.25 /   830.20 /   234.00 /   216.25 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0006   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,7]<stdout>:# Mémoire (Mo) :  1333.10 /   829.43 /   234.24 /   216.43 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,13]<stdout>:# Mémoire (Mo) :  1317.60 /   828.88 /   234.15 /   216.32 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0006   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt173
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,14]<stdout>:# Commande #0007 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 173
[1,10]<stdout>:# Mémoire (Mo) :  1338.99 /   830.88 /   234.46 /   216.51 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,14]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,14]<stdout>:                                            DZ=0.001,
[1,14]<stdout>:                                            GROUP_MA='RIGHT'),
[1,14]<stdout>:                               MODELE=model,
[1,14]<stdout>:                               SYNTAXE='NON')
[1,14]<stdout>:
[1,10]<stdout>:# Fin commande #0006   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt173
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0007 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 173
[1,7]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,7]<stdout>:                                            DZ=0.001,
[1,7]<stdout>:                                            GROUP_MA='RIGHT'),
[1,7]<stdout>:                               MODELE=model,
[1,7]<stdout>:                               SYNTAXE='NON')
[1,7]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt173
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Commande #0007 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 173
[1,16]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,13]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,13]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,13]<stdout>:                                            DZ=0.001,
[1,13]<stdout>:                                            GROUP_MA='RIGHT'),
[1,13]<stdout>:                               MODELE=model,
[1,13]<stdout>:                               SYNTAXE='NON')
[1,13]<stdout>:
[1,1]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,16]<stdout>:# Mémoire (Mo) :  1342.83 /   831.36 /   234.67 /   216.63 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :  1311.07 /   830.95 /   234.96 /   216.85 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt173
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0006   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0007 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 173
[1,10]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,10]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,10]<stdout>:                                            DZ=0.001,
[1,10]<stdout>:                                            GROUP_MA='RIGHT'),
[1,10]<stdout>:                               MODELE=model,
[1,10]<stdout>:                               SYNTAXE='NON')
[1,10]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt173
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt173
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0007 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 173
[1,16]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,16]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,16]<stdout>:                                            DZ=0.001,
[1,16]<stdout>:                                            GROUP_MA='RIGHT'),
[1,16]<stdout>:                               MODELE=model,
[1,16]<stdout>:                               SYNTAXE='NON')
[1,16]<stdout>:
[1,1]<stdout>:# Commande #0007 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 173
[1,1]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,1]<stdout>:                                            DZ=0.001,
[1,1]<stdout>:                                            GROUP_MA='RIGHT'),
[1,1]<stdout>:                               MODELE=model,
[1,1]<stdout>:                               SYNTAXE='NON')
[1,1]<stdout>:
[1,4]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,4]<stdout>:# Mémoire (Mo) :  1346.56 /   832.99 /   236.02 /   217.41 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0006   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt173
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0007 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 173
[1,4]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,4]<stdout>:                                            DZ=0.001,
[1,4]<stdout>:                                            GROUP_MA='RIGHT'),
[1,4]<stdout>:                               MODELE=model,
[1,4]<stdout>:                               SYNTAXE='NON')
[1,4]<stdout>:
[1,12]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,12]<stdout>:<MechanicalDirichletBC>
[1,12]<stdout>:# Mémoire (Mo) :  1228.93 /   821.28 /   229.95 /   214.31 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,17]<stdout>:<MechanicalDirichletBC>
[1,6]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,6]<stdout>:<MechanicalDirichletBC>
[1,17]<stdout>:# Mémoire (Mo) :  1262.46 /   824.51 /   230.72 /   214.77 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  1238.39 /   822.66 /   230.85 /   214.81 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,11]<stdout>:<MechanicalDirichletBC>
[1,3]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,3]<stdout>:<MechanicalDirichletBC>
[1,11]<stdout>:# Mémoire (Mo) :  1307.23 /   824.86 /   230.66 /   214.66 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Mémoire (Mo) :  1242.63 /   822.78 /   230.66 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,2]<stdout>:<MechanicalDirichletBC>
[1,2]<stdout>:# Mémoire (Mo) :  1276.32 /   822.86 /   230.71 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt185
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,21]<stdout>:<MechanicalDirichletBC>
[1,21]<stdout>:# Mémoire (Mo) :  1276.95 /   824.61 /   231.01 /   214.87 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Commande #0008 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 185
[1,21]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,12]<stdout>:                            CHAM_MATER=mater,
[1,12]<stdout>:                            INST=0.0,
[1,12]<stdout>:                            MODELE=model,
[1,12]<stdout>:                            MODE_FOURIER=0,
[1,12]<stdout>:                            OPTION='RIGI_MECA')
[1,12]<stdout>:
[1,9]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,9]<stdout>:<MechanicalDirichletBC>
[1,9]<stdout>:# Mémoire (Mo) :  1279.08 /   825.02 /   231.63 /   215.23 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt185
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt185
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,19]<stdout>:<MechanicalDirichletBC>
[1,5]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,5]<stdout>:<MechanicalDirichletBC>
[1,23]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,23]<stdout>:<MechanicalDirichletBC>
[1,17]<stdout>:# Commande #0008 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 185
[1,19]<stdout>:# Mémoire (Mo) :  1282.77 /   827.39 /   232.47 /   215.56 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Commande #0008 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 185
[1,5]<stdout>:# Mémoire (Mo) :  1298.94 /   825.57 /   232.18 /   215.42 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Mémoire (Mo) :  1318.01 /   828.23 /   231.81 /   215.13 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt185
[1,19]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt185
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,17]<stdout>:                            CHAM_MATER=mater,
[1,17]<stdout>:                            INST=0.0,
[1,17]<stdout>:                            MODELE=model,
[1,17]<stdout>:                            MODE_FOURIER=0,
[1,17]<stdout>:                            OPTION='RIGI_MECA')
[1,17]<stdout>:
[1,6]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,6]<stdout>:                            CHAM_MATER=mater,
[1,6]<stdout>:                            INST=0.0,
[1,6]<stdout>:                            MODELE=model,
[1,6]<stdout>:                            MODE_FOURIER=0,
[1,6]<stdout>:                            OPTION='RIGI_MECA')
[1,6]<stdout>:
[1,11]<stdout>:# Commande #0008 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 185
[1,3]<stdout>:# Commande #0008 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 185
[1,15]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,15]<stdout>:<MechanicalDirichletBC>
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt185
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Mémoire (Mo) :  1294.10 /   825.68 /   232.20 /   215.36 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,11]<stdout>:                            CHAM_MATER=mater,
[1,11]<stdout>:                            INST=0.0,
[1,11]<stdout>:                            MODELE=model,
[1,11]<stdout>:                            MODE_FOURIER=0,
[1,11]<stdout>:                            OPTION='RIGI_MECA')
[1,11]<stdout>:
[1,15]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,3]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,3]<stdout>:                            CHAM_MATER=mater,
[1,3]<stdout>:                            INST=0.0,
[1,3]<stdout>:                            MODELE=model,
[1,3]<stdout>:                            MODE_FOURIER=0,
[1,3]<stdout>:                            OPTION='RIGI_MECA')
[1,3]<stdout>:
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0008 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 185
[1,2]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,2]<stdout>:                            CHAM_MATER=mater,
[1,2]<stdout>:                            INST=0.0,
[1,2]<stdout>:                            MODELE=model,
[1,2]<stdout>:                            MODE_FOURIER=0,
[1,2]<stdout>:                            OPTION='RIGI_MECA')
[1,2]<stdout>:
[1,20]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,20]<stdout>:<MechanicalDirichletBC>
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt185
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Mémoire (Mo) :  1327.55 /   827.82 /   232.51 /   215.57 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,22]<stdout>:<MechanicalDirichletBC>
[1,20]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Commande #0008 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 185
[1,22]<stdout>:# Mémoire (Mo) :  1292.95 /   826.99 /   232.85 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0009 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,0]<stdout>:<MechanicalDirichletBC>
[1,8]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,8]<stdout>:<MechanicalDirichletBC>
[1,21]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,21]<stdout>:                            CHAM_MATER=mater,
[1,21]<stdout>:                            INST=0.0,
[1,21]<stdout>:                            MODELE=model,
[1,21]<stdout>:                            MODE_FOURIER=0,
[1,21]<stdout>:                            OPTION='RIGI_MECA')
[1,21]<stdout>:
[1,18]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,18]<stdout>:<MechanicalDirichletBC>
[1,0]<stdout>:# Mémoire (Mo) :  1386.22 /   895.05 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  1313.01 /   828.53 /   232.68 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Mémoire (Mo) :  1291.09 /   826.79 /   232.49 /   215.50 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0009   user+syst:        0.06s (syst:        0.00s, elaps:        0.06s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,18]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt185
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0008 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 185
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt185
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt185
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,9]<stdout>:                            CHAM_MATER=mater,
[1,9]<stdout>:                            INST=0.0,
[1,9]<stdout>:                            MODELE=model,
[1,9]<stdout>:                            MODE_FOURIER=0,
[1,9]<stdout>:                            OPTION='RIGI_MECA')
[1,9]<stdout>:
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt185
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0008 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 185
[1,5]<stdout>:# Commande #0008 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 185
[1,23]<stdout>:# Commande #0008 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 185
[1,19]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,19]<stdout>:                            CHAM_MATER=mater,
[1,19]<stdout>:                            INST=0.0,
[1,19]<stdout>:                            MODELE=model,
[1,19]<stdout>:                            MODE_FOURIER=0,
[1,19]<stdout>:                            OPTION='RIGI_MECA')
[1,19]<stdout>:
[1,5]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,5]<stdout>:                            CHAM_MATER=mater,
[1,5]<stdout>:                            INST=0.0,
[1,5]<stdout>:                            MODELE=model,
[1,5]<stdout>:                            MODE_FOURIER=0,
[1,5]<stdout>:                            OPTION='RIGI_MECA')
[1,5]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt185
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,23]<stdout>:                            CHAM_MATER=mater,
[1,23]<stdout>:                            INST=0.0,
[1,23]<stdout>:                            MODELE=model,
[1,23]<stdout>:                            MODE_FOURIER=0,
[1,23]<stdout>:                            OPTION='RIGI_MECA')
[1,23]<stdout>:
[1,15]<stdout>:# Commande #0008 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 185
[1,7]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,7]<stdout>:<MechanicalDirichletBC>
[1,15]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,15]<stdout>:                            CHAM_MATER=mater,
[1,15]<stdout>:                            INST=0.0,
[1,15]<stdout>:                            MODELE=model,
[1,15]<stdout>:                            MODE_FOURIER=0,
[1,15]<stdout>:                            OPTION='RIGI_MECA')
[1,15]<stdout>:
[1,7]<stdout>:# Mémoire (Mo) :  1333.10 /   829.43 /   234.24 /   216.43 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt185
[1,14]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,14]<stdout>:<MechanicalDirichletBC>
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt185
[1,14]<stdout>:# Mémoire (Mo) :  1336.25 /   830.20 /   234.00 /   216.25 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Commande #0008 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 185
[1,22]<stdout>:# Commande #0008 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 185
[1,13]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,13]<stdout>:<MechanicalDirichletBC>
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt185
[1,20]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,20]<stdout>:                            CHAM_MATER=mater,
[1,20]<stdout>:                            INST=0.0,
[1,20]<stdout>:                            MODELE=model,
[1,20]<stdout>:                            MODE_FOURIER=0,
[1,20]<stdout>:                            OPTION='RIGI_MECA')
[1,20]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt185
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt185
[1,13]<stdout>:# Mémoire (Mo) :  1317.60 /   828.88 /   234.15 /   216.32 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,22]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,22]<stdout>:                            CHAM_MATER=mater,
[1,22]<stdout>:                            INST=0.0,
[1,22]<stdout>:                            MODELE=model,
[1,22]<stdout>:                            MODE_FOURIER=0,
[1,22]<stdout>:                            OPTION='RIGI_MECA')
[1,22]<stdout>:
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0008 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 185
[1,0]<stdout>:# Commande #0010 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 185
[1,18]<stdout>:# Commande #0008 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 185
[1,10]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,10]<stdout>:<MechanicalDirichletBC>
[1,8]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,8]<stdout>:                            CHAM_MATER=mater,
[1,8]<stdout>:                            INST=0.0,
[1,8]<stdout>:                            MODELE=model,
[1,8]<stdout>:                            MODE_FOURIER=0,
[1,8]<stdout>:                            OPTION='RIGI_MECA')
[1,8]<stdout>:
[1,0]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,0]<stdout>:                            CHAM_MATER=mater,
[1,0]<stdout>:                            INST=0.0,
[1,0]<stdout>:                            MODELE=model,
[1,0]<stdout>:                            MODE_FOURIER=0,
[1,0]<stdout>:                            OPTION='RIGI_MECA')
[1,0]<stdout>:
[1,10]<stdout>:# Mémoire (Mo) :  1338.99 /   830.88 /   234.46 /   216.51 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,18]<stdout>:                            CHAM_MATER=mater,
[1,18]<stdout>:                            INST=0.0,
[1,18]<stdout>:                            MODELE=model,
[1,18]<stdout>:                            MODE_FOURIER=0,
[1,18]<stdout>:                            OPTION='RIGI_MECA')
[1,18]<stdout>:
[1,10]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,16]<stdout>:<MechanicalDirichletBC>
[1,1]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,1]<stdout>:<MechanicalDirichletBC>
[1,16]<stdout>:# Mémoire (Mo) :  1342.83 /   831.36 /   234.67 /   216.63 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1311.07 /   830.95 /   234.96 /   216.85 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0007   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt185
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt185
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0008 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 185
[1,14]<stdout>:# Commande #0008 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 185
[1,7]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,7]<stdout>:                            CHAM_MATER=mater,
[1,7]<stdout>:                            INST=0.0,
[1,7]<stdout>:                            MODELE=model,
[1,7]<stdout>:                            MODE_FOURIER=0,
[1,7]<stdout>:                            OPTION='RIGI_MECA')
[1,7]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt185
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,14]<stdout>:                            CHAM_MATER=mater,
[1,14]<stdout>:                            INST=0.0,
[1,14]<stdout>:                            MODELE=model,
[1,14]<stdout>:                            MODE_FOURIER=0,
[1,14]<stdout>:                            OPTION='RIGI_MECA')
[1,14]<stdout>:
[1,13]<stdout>:# Commande #0008 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 185
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt185
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,13]<stdout>:                            CHAM_MATER=mater,
[1,13]<stdout>:                            INST=0.0,
[1,13]<stdout>:                            MODELE=model,
[1,13]<stdout>:                            MODE_FOURIER=0,
[1,13]<stdout>:                            OPTION='RIGI_MECA')
[1,13]<stdout>:
[1,10]<stdout>:# Commande #0008 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 185
[1,10]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,10]<stdout>:                            CHAM_MATER=mater,
[1,10]<stdout>:                            INST=0.0,
[1,10]<stdout>:                            MODELE=model,
[1,10]<stdout>:                            MODE_FOURIER=0,
[1,10]<stdout>:                            OPTION='RIGI_MECA')
[1,10]<stdout>:
[1,4]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,4]<stdout>:<MechanicalDirichletBC>
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt185
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1346.56 /   832.99 /   236.02 /   217.41 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt185
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0007   user+syst:        0.05s (syst:        0.00s, elaps:        0.06s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0008 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 185
[1,1]<stdout>:# Commande #0008 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 185
[1,16]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,16]<stdout>:                            CHAM_MATER=mater,
[1,16]<stdout>:                            INST=0.0,
[1,16]<stdout>:                            MODELE=model,
[1,16]<stdout>:                            MODE_FOURIER=0,
[1,16]<stdout>:                            OPTION='RIGI_MECA')
[1,16]<stdout>:
[1,1]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,1]<stdout>:                            CHAM_MATER=mater,
[1,1]<stdout>:                            INST=0.0,
[1,1]<stdout>:                            MODELE=model,
[1,1]<stdout>:                            MODE_FOURIER=0,
[1,1]<stdout>:                            OPTION='RIGI_MECA')
[1,1]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt185
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0008 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 185
[1,4]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,4]<stdout>:                            CHAM_MATER=mater,
[1,4]<stdout>:                            INST=0.0,
[1,4]<stdout>:                            MODELE=model,
[1,4]<stdout>:                            MODE_FOURIER=0,
[1,4]<stdout>:                            OPTION='RIGI_MECA')
[1,4]<stdout>:
[1,12]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,12]<stdout>:<ElementaryMatrixDisplacementReal>
[1,12]<stdout>:# Mémoire (Mo) :  1228.93 /  1015.08 /   421.69 /   214.31 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0008   user+syst:        0.77s (syst:        0.05s, elaps:        0.81s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt192
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0009 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 192
[1,12]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,12]<stdout>:                  MATR_RIGI=stiff_elem)
[1,12]<stdout>:
[1,11]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,11]<stdout>:<ElementaryMatrixDisplacementReal>
[1,11]<stdout>:# Mémoire (Mo) :  1307.23 /  1023.69 /   427.51 /   214.66 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0008   user+syst:        0.82s (syst:        0.01s, elaps:        0.84s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt192
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0009 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 192
[1,11]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,11]<stdout>:                  MATR_RIGI=stiff_elem)
[1,11]<stdout>:
[1,6]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,6]<stdout>:<ElementaryMatrixDisplacementReal>
[1,6]<stdout>:# Mémoire (Mo) :  1238.39 /  1021.81 /   428.21 /   214.81 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0008   user+syst:        0.81s (syst:        0.03s, elaps:        0.84s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,3]<stdout>:<ElementaryMatrixDisplacementReal>
[1,3]<stdout>:# Mémoire (Mo) :  1242.63 /  1021.56 /   427.37 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0008   user+syst:        0.82s (syst:        0.02s, elaps:        0.84s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt192
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0009 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 192
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt192
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0009 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 192
[1,6]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,6]<stdout>:                  MATR_RIGI=stiff_elem)
[1,6]<stdout>:
[1,3]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,3]<stdout>:                  MATR_RIGI=stiff_elem)
[1,3]<stdout>:
[1,17]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,17]<stdout>:<ElementaryMatrixDisplacementReal>
[1,17]<stdout>:# Mémoire (Mo) :  1262.46 /  1024.21 /   428.28 /   214.77 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0008   user+syst:        0.83s (syst:        0.02s, elaps:        0.85s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,2]<stdout>:<ElementaryMatrixDisplacementReal>
[1,2]<stdout>:# Mémoire (Mo) :  1276.32 /  1023.74 /   429.45 /   214.73 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0008   user+syst:        0.82s (syst:        0.03s, elaps:        0.85s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt192
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Commande #0009 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 192
[1,17]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,17]<stdout>:                  MATR_RIGI=stiff_elem)
[1,17]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt192
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0009 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 192
[1,2]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,2]<stdout>:                  MATR_RIGI=stiff_elem)
[1,2]<stdout>:
[1,21]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,21]<stdout>:<ElementaryMatrixDisplacementReal>
[1,21]<stdout>:# Mémoire (Mo) :  1276.95 /  1027.13 /   431.30 /   214.87 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0008   user+syst:        0.84s (syst:        0.02s, elaps:        0.85s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt192
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Commande #0009 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 192
[1,21]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,21]<stdout>:                  MATR_RIGI=stiff_elem)
[1,21]<stdout>:
[1,9]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,9]<stdout>:<ElementaryMatrixDisplacementReal>
[1,9]<stdout>:# Mémoire (Mo) :  1279.08 /  1031.55 /   435.83 /   215.23 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0008   user+syst:        0.84s (syst:        0.03s, elaps:        0.87s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt192
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0009 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 192
[1,9]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,9]<stdout>:                  MATR_RIGI=stiff_elem)
[1,9]<stdout>:
[1,19]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,19]<stdout>:<ElementaryMatrixDisplacementReal>
[1,19]<stdout>:# Mémoire (Mo) :  1282.77 /  1035.99 /   438.72 /   215.56 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0008   user+syst:        0.85s (syst:        0.03s, elaps:        0.88s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt192
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0009 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 192
[1,19]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,19]<stdout>:                  MATR_RIGI=stiff_elem)
[1,19]<stdout>:
[1,15]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,15]<stdout>:<ElementaryMatrixDisplacementReal>
[1,15]<stdout>:# Mémoire (Mo) :  1294.10 /  1034.81 /   439.02 /   215.36 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0008   user+syst:        0.85s (syst:        0.02s, elaps:        0.88s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,23]<stdout>:<ElementaryMatrixDisplacementReal>
[1,23]<stdout>:# Mémoire (Mo) :  1318.01 /  1037.03 /   438.21 /   215.13 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0008   user+syst:        0.86s (syst:        0.01s, elaps:        0.88s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt192
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0009 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 192
[1,15]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,15]<stdout>:                  MATR_RIGI=stiff_elem)
[1,15]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt192
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0009 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 192
[1,23]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,23]<stdout>:                  MATR_RIGI=stiff_elem)
[1,23]<stdout>:
[1,22]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,22]<stdout>:<ElementaryMatrixDisplacementReal>
[1,22]<stdout>:# Mémoire (Mo) :  1292.95 /  1036.43 /   440.08 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0008   user+syst:        0.84s (syst:        0.04s, elaps:        0.88s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt192
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Commande #0009 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 192
[1,22]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,22]<stdout>:                  MATR_RIGI=stiff_elem)
[1,22]<stdout>:
[1,5]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,5]<stdout>:<ElementaryMatrixDisplacementReal>
[1,5]<stdout>:# Mémoire (Mo) :  1298.94 /  1035.25 /   439.33 /   215.42 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0008   user+syst:        0.84s (syst:        0.05s, elaps:        0.89s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt192
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0009 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 192
[1,5]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,5]<stdout>:                  MATR_RIGI=stiff_elem)
[1,5]<stdout>:
[1,20]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,20]<stdout>:<ElementaryMatrixDisplacementReal>
[1,20]<stdout>:# Mémoire (Mo) :  1327.55 /  1038.34 /   440.69 /   215.57 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0008   user+syst:        0.85s (syst:        0.04s, elaps:        0.89s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt192
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Commande #0009 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 192
[1,20]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,20]<stdout>:                  MATR_RIGI=stiff_elem)
[1,20]<stdout>:
[1,0]<stdout>:# Résultat commande #0010 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,0]<stdout>:<ElementaryMatrixDisplacementReal>
[1,0]<stdout>:# Mémoire (Mo) :  1386.22 /  1052.61 /   445.65 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0010   user+syst:        0.85s (syst:        0.04s, elaps:        0.90s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt192
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0011 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 192
[1,0]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,0]<stdout>:                  MATR_RIGI=stiff_elem)
[1,0]<stdout>:
[1,18]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,18]<stdout>:<ElementaryMatrixDisplacementReal>
[1,18]<stdout>:# Mémoire (Mo) :  1291.09 /  1040.45 /   443.71 /   215.50 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0008   user+syst:        0.87s (syst:        0.02s, elaps:        0.90s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt192
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0009 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 192
[1,18]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,18]<stdout>:                  MATR_RIGI=stiff_elem)
[1,18]<stdout>:
[1,8]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,8]<stdout>:<ElementaryMatrixDisplacementReal>
[1,8]<stdout>:# Mémoire (Mo) :  1313.01 /  1043.70 /   445.38 /   215.62 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0008   user+syst:        0.87s (syst:        0.03s, elaps:        0.91s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt192
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0009 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 192
[1,8]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,8]<stdout>:                  MATR_RIGI=stiff_elem)
[1,8]<stdout>:
[1,14]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,14]<stdout>:<ElementaryMatrixDisplacementReal>
[1,14]<stdout>:# Mémoire (Mo) :  1336.25 /  1050.84 /   452.18 /   216.25 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0008   user+syst:        0.88s (syst:        0.06s, elaps:        0.94s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt192
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,7]<stdout>:<ElementaryMatrixDisplacementReal>
[1,14]<stdout>:# Commande #0009 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 192
[1,7]<stdout>:# Mémoire (Mo) :  1333.10 /  1051.09 /   453.15 /   216.43 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0008   user+syst:        0.88s (syst:        0.04s, elaps:        0.94s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,14]<stdout>:                  MATR_RIGI=stiff_elem)
[1,14]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt192
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0009 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 192
[1,7]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,7]<stdout>:                  MATR_RIGI=stiff_elem)
[1,7]<stdout>:
[1,13]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,13]<stdout>:<ElementaryMatrixDisplacementReal>
[1,13]<stdout>:# Mémoire (Mo) :  1317.60 /  1050.32 /   452.88 /   216.32 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0008   user+syst:        0.89s (syst:        0.03s, elaps:        0.94s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt192
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Commande #0009 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 192
[1,13]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,13]<stdout>:                  MATR_RIGI=stiff_elem)
[1,13]<stdout>:
[1,10]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,10]<stdout>:<ElementaryMatrixDisplacementReal>
[1,10]<stdout>:# Mémoire (Mo) :  1338.99 /  1055.08 /   456.10 /   216.51 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0008   user+syst:        0.92s (syst:        0.02s, elaps:        0.94s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt192
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0009 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 192
[1,10]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,10]<stdout>:                  MATR_RIGI=stiff_elem)
[1,10]<stdout>:
[1,16]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,16]<stdout>:<ElementaryMatrixDisplacementReal>
[1,16]<stdout>:# Mémoire (Mo) :  1342.83 /  1057.42 /   457.89 /   216.63 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0008   user+syst:        0.90s (syst:        0.05s, elaps:        0.95s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt192
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0009 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 192
[1,16]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,16]<stdout>:                  MATR_RIGI=stiff_elem)
[1,16]<stdout>:
[1,1]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,1]<stdout>:<ElementaryMatrixDisplacementReal>
[1,1]<stdout>:# Mémoire (Mo) :  1311.07 /  1060.81 /   462.10 /   216.85 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0008   user+syst:        0.92s (syst:        0.04s, elaps:        0.96s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt192
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0009 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 192
[1,1]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,1]<stdout>:                  MATR_RIGI=stiff_elem)
[1,1]<stdout>:
[1,4]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,4]<stdout>:<ElementaryMatrixDisplacementReal>
[1,4]<stdout>:# Mémoire (Mo) :  1346.56 /  1069.79 /   469.78 /   217.41 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0008   user+syst:        0.94s (syst:        0.06s, elaps:        0.99s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt192
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0009 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 192
[1,4]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,4]<stdout>:                  MATR_RIGI=stiff_elem)
[1,4]<stdout>:
[1,7]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,7]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,7]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,7]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,7]<stdout>:     aux 0 relations linéaires dualisées.
[1,11]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,11]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,11]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,11]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,11]<stdout>:     aux 0 relations linéaires dualisées.
[1,17]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,17]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,17]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,17]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,17]<stdout>:     aux 0 relations linéaires dualisées.
[1,0]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,0]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,0]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,0]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,0]<stdout>:     aux 0 relations linéaires dualisées.
[1,22]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,22]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,22]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,22]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,22]<stdout>:     aux 0 relations linéaires dualisées.
[1,19]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,19]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,19]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,19]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,19]<stdout>:     aux 0 relations linéaires dualisées.
[1,20]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,20]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,20]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,20]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,20]<stdout>:     aux 0 relations linéaires dualisées.
[1,23]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,23]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,23]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,23]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,23]<stdout>:     aux 0 relations linéaires dualisées.
[1,9]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,9]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,9]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,9]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,9]<stdout>:     aux 0 relations linéaires dualisées.
[1,6]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,6]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,6]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,6]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,6]<stdout>:     aux 0 relations linéaires dualisées.
[1,14]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,14]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,14]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,14]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,14]<stdout>:     aux 0 relations linéaires dualisées.
[1,8]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,8]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,8]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,8]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,8]<stdout>:     aux 0 relations linéaires dualisées.
[1,12]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,12]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,12]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,12]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,12]<stdout>:     aux 0 relations linéaires dualisées.
[1,5]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,5]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,5]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,5]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,5]<stdout>:     aux 0 relations linéaires dualisées.
[1,18]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,18]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,18]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,18]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,18]<stdout>:     aux 0 relations linéaires dualisées.
[1,2]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,2]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,2]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,2]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,2]<stdout>:     aux 0 relations linéaires dualisées.
[1,21]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,21]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,21]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,21]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,21]<stdout>:     aux 0 relations linéaires dualisées.
[1,1]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,1]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,1]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,1]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,1]<stdout>:     aux 0 relations linéaires dualisées.
[1,10]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,10]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,10]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,10]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,10]<stdout>:     aux 0 relations linéaires dualisées.
[1,13]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,13]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,13]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,13]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,13]<stdout>:     aux 0 relations linéaires dualisées.
[1,4]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,4]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,4]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,4]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,4]<stdout>:     aux 0 relations linéaires dualisées.
[1,3]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,3]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,3]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,3]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,3]<stdout>:     aux 0 relations linéaires dualisées.
[1,16]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,16]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,16]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,16]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,16]<stdout>:     aux 0 relations linéaires dualisées.
[1,15]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,15]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,15]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,15]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,15]<stdout>:     aux 0 relations linéaires dualisées.
[1,9]<stdout>:La matrice est de taille 292590 équations.
[1,9]<stdout>:  Elle contient 11389923 termes non nuls si elle est symétrique et 22487256 termes non nuls si elle
[1,9]<stdout>:n'est pas symétrique.
[1,9]<stdout>:  Soit un taux de remplissage de   0.026 %.
[1,3]<stdout>:La matrice est de taille 280194 équations.
[1,3]<stdout>:  Elle contient 10944057 termes non nuls si elle est symétrique et 21607920 termes non nuls si elle
[1,3]<stdout>:n'est pas symétrique.
[1,3]<stdout>:  Soit un taux de remplissage de   0.028 %.
[1,0]<stdout>:La matrice est de taille 302601 équations.
[1,0]<stdout>:  Elle contient 11820948 termes non nuls si elle est symétrique et 23339295 termes non nuls si elle
[1,0]<stdout>:n'est pas symétrique.
[1,0]<stdout>:  Soit un taux de remplissage de   0.025 %.
[1,7]<stdout>:La matrice est de taille 313287 équations.
[1,7]<stdout>:  Elle contient 12216198 termes non nuls si elle est symétrique et 24119109 termes non nuls si elle
[1,7]<stdout>:n'est pas symétrique.
[1,7]<stdout>:  Soit un taux de remplissage de   0.025 %.
[1,23]<stdout>:La matrice est de taille 294468 équations.
[1,23]<stdout>:  Elle contient 11500833 termes non nuls si elle est symétrique et 22707198 termes non nuls si elle
[1,23]<stdout>:n'est pas symétrique.
[1,23]<stdout>:  Soit un taux de remplissage de   0.026 %.
[1,20]<stdout>:La matrice est de taille 298716 équations.
[1,20]<stdout>:  Elle contient 11620407 termes non nuls si elle est symétrique et 22942098 termes non nuls si elle
[1,20]<stdout>:n'est pas symétrique.
[1,20]<stdout>:  Soit un taux de remplissage de   0.026 %.
[1,17]<stdout>:La matrice est de taille 281004 équations.
[1,17]<stdout>:  Elle contient 10986474 termes non nuls si elle est symétrique et 21691944 termes non nuls si elle
[1,17]<stdout>:n'est pas symétrique.
[1,17]<stdout>:  Soit un taux de remplissage de   0.027 %.
[1,15]<stdout>:La matrice est de taille 296646 équations.
[1,15]<stdout>:  Elle contient 11540586 termes non nuls si elle est symétrique et 22784526 termes non nuls si elle
[1,15]<stdout>:n'est pas symétrique.
[1,15]<stdout>:  Soit un taux de remplissage de   0.026 %.
[1,12]<stdout>:La matrice est de taille 273060 équations.
[1,12]<stdout>:  Elle contient 10667331 termes non nuls si elle est symétrique et 21061602 termes non nuls si elle
[1,12]<stdout>:n'est pas symétrique.
[1,12]<stdout>:  Soit un taux de remplissage de   0.028 %.
[1,11]<stdout>:La matrice est de taille 282492 équations.
[1,11]<stdout>:  Elle contient 10983951 termes non nuls si elle est symétrique et 21685410 termes non nuls si elle
[1,11]<stdout>:n'est pas symétrique.
[1,11]<stdout>:  Soit un taux de remplissage de   0.027 %.
[1,14]<stdout>:La matrice est de taille 312444 équations.
[1,14]<stdout>:  Elle contient 12173913 termes non nuls si elle est symétrique et 24035382 termes non nuls si elle
[1,14]<stdout>:n'est pas symétrique.
[1,14]<stdout>:  Soit un taux de remplissage de   0.025 %.
[1,10]<stdout>:La matrice est de taille 317472 équations.
[1,10]<stdout>:  Elle contient 12367506 termes non nuls si elle est symétrique et 24417540 termes non nuls si elle
[1,10]<stdout>:n'est pas symétrique.
[1,10]<stdout>:  Soit un taux de remplissage de   0.024 %.
[1,5]<stdout>:La matrice est de taille 294696 équations.
[1,5]<stdout>:  Elle contient 11532240 termes non nuls si elle est symétrique et 22769784 termes non nuls si elle
[1,5]<stdout>:n'est pas symétrique.
[1,5]<stdout>:  Soit un taux de remplissage de   0.026 %.
[1,18]<stdout>:La matrice est de taille 302052 équations.
[1,18]<stdout>:  Elle contient 11776542 termes non nuls si elle est symétrique et 23251032 termes non nuls si elle
[1,18]<stdout>:n'est pas symétrique.
[1,18]<stdout>:  Soit un taux de remplissage de   0.025 %.
[1,21]<stdout>:La matrice est de taille 286356 équations.
[1,21]<stdout>:  Elle contient 11167242 termes non nuls si elle est symétrique et 22048128 termes non nuls si elle
[1,21]<stdout>:n'est pas symétrique.
[1,21]<stdout>:  Soit un taux de remplissage de   0.027 %.
[1,19]<stdout>:La matrice est de taille 296898 équations.
[1,19]<stdout>:  Elle contient 11525538 termes non nuls si elle est symétrique et 22754178 termes non nuls si elle
[1,19]<stdout>:n'est pas symétrique.
[1,19]<stdout>:  Soit un taux de remplissage de   0.026 %.
[1,6]<stdout>:La matrice est de taille 282699 équations.
[1,6]<stdout>:  Elle contient 10998594 termes non nuls si elle est symétrique et 21714489 termes non nuls si elle
[1,6]<stdout>:n'est pas symétrique.
[1,6]<stdout>:  Soit un taux de remplissage de   0.027 %.
[1,2]<stdout>:La matrice est de taille 282690 équations.
[1,2]<stdout>:  Elle contient 11055870 termes non nuls si elle est symétrique et 21829050 termes non nuls si elle
[1,2]<stdout>:n'est pas symétrique.
[1,2]<stdout>:  Soit un taux de remplissage de   0.027 %.
[1,8]<stdout>:La matrice est de taille 304098 équations.
[1,8]<stdout>:  Elle contient 11862291 termes non nuls si elle est symétrique et 23420484 termes non nuls si elle
[1,8]<stdout>:n'est pas symétrique.
[1,8]<stdout>:  Soit un taux de remplissage de   0.025 %.
[1,16]<stdout>:La matrice est de taille 319842 équations.
[1,16]<stdout>:  Elle contient 12464568 termes non nuls si elle est symétrique et 24609294 termes non nuls si elle
[1,16]<stdout>:n'est pas symétrique.
[1,16]<stdout>:  Soit un taux de remplissage de   0.024 %.
[1,22]<stdout>:La matrice est de taille 297564 équations.
[1,22]<stdout>:  Elle contient 11567343 termes non nuls si elle est symétrique et 22837122 termes non nuls si elle
[1,22]<stdout>:n'est pas symétrique.
[1,22]<stdout>:  Soit un taux de remplissage de   0.026 %.
[1,13]<stdout>:La matrice est de taille 314082 équations.
[1,13]<stdout>:  Elle contient 12221415 termes non nuls si elle est symétrique et 24128748 termes non nuls si elle
[1,13]<stdout>:n'est pas symétrique.
[1,13]<stdout>:  Soit un taux de remplissage de   0.024 %.
[1,1]<stdout>:La matrice est de taille 322224 équations.
[1,1]<stdout>:  Elle contient 12635913 termes non nuls si elle est symétrique et 24949602 termes non nuls si elle
[1,1]<stdout>:n'est pas symétrique.
[1,1]<stdout>:  Soit un taux de remplissage de   0.024 %.
[1,4]<stdout>:La matrice est de taille 334434 équations.
[1,4]<stdout>:  Elle contient 13050069 termes non nuls si elle est symétrique et 25765704 termes non nuls si elle
[1,4]<stdout>:n'est pas symétrique.
[1,4]<stdout>:  Soit un taux de remplissage de   0.023 %.
[1,12]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,2]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,9]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,3]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,10]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,1]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,19]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,8]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,20]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,22]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,14]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,12]<stdout>:# Mémoire (Mo) :  1367.41 /  1074.54 /   773.53 /   530.52 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,9]<stdout>:# Mémoire (Mo) :  1390.21 /  1097.34 /   792.07 /   535.08 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  1377.57 /  1084.70 /   780.82 /   532.29 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,2]<stdout>:# Mémoire (Mo) :  1380.38 /  1087.50 /   783.59 /   532.86 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1424.02 /  1131.15 /   825.44 /   542.70 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Mémoire (Mo) :  1393.22 /  1100.35 /   795.78 /   536.09 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :  1419.38 /  1126.50 /   818.08 /   541.18 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,23]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,2]<stdout>:# Fin commande #0009   user+syst:        0.71s (syst:        0.95s, elaps:        1.65s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :  1411.62 /  1118.75 /   813.01 /   539.96 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0009   user+syst:        0.83s (syst:        0.83s, elaps:        1.66s)
[1,1]<stdout>:# Fin commande #0009   user+syst:        0.63s (syst:        0.90s, elaps:        1.53s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,17]<stdout>:# Mémoire (Mo) :  1378.30 /  1085.43 /   781.97 /   532.52 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  1402.71 /  1109.84 /   804.45 /   537.83 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0009   user+syst:        0.79s (syst:        0.90s, elaps:        1.69s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0009   user+syst:        0.87s (syst:        0.76s, elaps:        1.63s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Mémoire (Mo) :  1398.35 /  1105.48 /   798.28 /   536.56 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0009   user+syst:        0.64s (syst:        0.92s, elaps:        1.56s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Mémoire (Mo) :  1396.16 /  1103.29 /   797.33 /   536.33 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  1394.61 /  1101.73 /   796.23 /   535.87 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0009   user+syst:        0.65s (syst:        0.94s, elaps:        1.59s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Fin commande #0009   user+syst:        0.74s (syst:        0.89s, elaps:        1.62s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,20]<stdout>:# Fin commande #0009   user+syst:        0.76s (syst:        0.85s, elaps:        1.61s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Mémoire (Mo) :  1401.29 /  1108.42 /   802.32 /   537.30 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Mémoire (Mo) :  1394.02 /  1101.14 /   795.14 /   535.53 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Fin commande #0009   user+syst:        0.73s (syst:        0.83s, elaps:        1.56s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Fin commande #0009   user+syst:        0.69s (syst:        0.92s, elaps:        1.62s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,21]<stdout>:# Mémoire (Mo) :  1382.28 /  1089.41 /   786.20 /   533.61 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0009   user+syst:        0.73s (syst:        0.92s, elaps:        1.65s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Fin commande #0009   user+syst:        0.70s (syst:        0.92s, elaps:        1.62s)
[1,15]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,6]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,5]<stdout>:# Fin commande #0009   user+syst:        0.67s (syst:        0.93s, elaps:        1.61s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,18]<stdout>:# Fin commande #0009   user+syst:        0.69s (syst:        0.91s, elaps:        1.60s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Fin commande #0009   user+syst:        0.73s (syst:        0.92s, elaps:        1.65s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1437.98 /  1145.11 /   835.74 /   545.41 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,11]<stdout>:# Mémoire (Mo) :  1375.71 /  1082.84 /   781.40 /   532.54 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  1394.36 /  1101.49 /   796.21 /   535.99 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  1376.07 /  1083.20 /   782.09 /   532.71 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Mémoire (Mo) :  1422.26 /  1129.39 /   820.44 /   541.77 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0009   user+syst:        0.53s (syst:        0.97s, elaps:        1.50s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,11]<stdout>:# Fin commande #0009   user+syst:        0.79s (syst:        0.87s, elaps:        1.66s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Fin commande #0009   user+syst:        0.79s (syst:        0.87s, elaps:        1.66s)
[1,15]<stdout>:# Fin commande #0009   user+syst:        0.64s (syst:        0.98s, elaps:        1.62s)
[1,16]<stdout>:# Fin commande #0009   user+syst:        0.63s (syst:        0.92s, elaps:        1.55s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Mémoire (Mo) :  1414.46 /  1121.59 /   814.13 /   540.29 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0009   user+syst:        0.74s (syst:        0.84s, elaps:        1.56s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Mémoire (Mo) :  1413.79 /  1120.91 /   814.03 /   540.29 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0009   user+syst:        0.63s (syst:        0.95s, elaps:        1.56s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt197
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt197
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt197
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt197
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt197
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt197
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt197
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt197
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt197
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt197
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt197
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt197
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt197
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt197
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0010 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 197
[1,3]<stdout>:# Commande #0010 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 197
[1,12]<stdout>:# Commande #0010 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 197
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt197
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0010 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 197
[1,19]<stdout>:# Commande #0010 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 197
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt197
[1,2]<stdout>:# Commande #0010 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 197
[1,1]<stdout>:# Commande #0010 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 197
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0010 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 197
[1,8]<stdout>:# Commande #0010 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 197
[1,20]<stdout>:# Commande #0010 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 197
[1,22]<stdout>:# Commande #0010 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 197
[1,17]<stdout>:# Commande #0010 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 197
[1,18]<stdout>:# Commande #0010 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 197
[1,5]<stdout>:# Commande #0010 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 197
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt197
[1,23]<stdout>:# Commande #0010 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 197
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt197
[1,21]<stdout>:# Commande #0010 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 197
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt197
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,12]<stdout>:                         INFO=1,
[1,12]<stdout>:                         MATR_ELEM=stiff_elem,
[1,12]<stdout>:                         NUME_DDL=dofNum)
[1,12]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt197
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt197
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,10]<stdout>:                         INFO=1,
[1,10]<stdout>:                         MATR_ELEM=stiff_elem,
[1,10]<stdout>:                         NUME_DDL=dofNum)
[1,10]<stdout>:
[1,3]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:                         INFO=1,
[1,3]<stdout>:                         MATR_ELEM=stiff_elem,
[1,3]<stdout>:                         NUME_DDL=dofNum)
[1,3]<stdout>:
[1,19]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,19]<stdout>:                         INFO=1,
[1,19]<stdout>:                         MATR_ELEM=stiff_elem,
[1,19]<stdout>:                         NUME_DDL=dofNum)
[1,19]<stdout>:
[1,1]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:                         INFO=1,
[1,1]<stdout>:                         MATR_ELEM=stiff_elem,
[1,1]<stdout>:                         NUME_DDL=dofNum)
[1,1]<stdout>:
[1,2]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:                         INFO=1,
[1,2]<stdout>:                         MATR_ELEM=stiff_elem,
[1,2]<stdout>:                         NUME_DDL=dofNum)
[1,2]<stdout>:
[1,4]<stdout>:# Commande #0010 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 197
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,9]<stdout>:                         INFO=1,
[1,9]<stdout>:                         MATR_ELEM=stiff_elem,
[1,9]<stdout>:                         NUME_DDL=dofNum)
[1,9]<stdout>:
[1,14]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,14]<stdout>:                         INFO=1,
[1,14]<stdout>:                         MATR_ELEM=stiff_elem,
[1,14]<stdout>:                         NUME_DDL=dofNum)
[1,14]<stdout>:
[1,8]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,8]<stdout>:                         INFO=1,
[1,8]<stdout>:                         MATR_ELEM=stiff_elem,
[1,8]<stdout>:                         NUME_DDL=dofNum)
[1,8]<stdout>:
[1,20]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,20]<stdout>:                         INFO=1,
[1,20]<stdout>:                         MATR_ELEM=stiff_elem,
[1,20]<stdout>:                         NUME_DDL=dofNum)
[1,20]<stdout>:
[1,22]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,22]<stdout>:                         INFO=1,
[1,22]<stdout>:                         MATR_ELEM=stiff_elem,
[1,22]<stdout>:                         NUME_DDL=dofNum)
[1,22]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt197
[1,17]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,17]<stdout>:                         INFO=1,
[1,17]<stdout>:                         MATR_ELEM=stiff_elem,
[1,17]<stdout>:                         NUME_DDL=dofNum)
[1,17]<stdout>:
[1,11]<stdout>:# Commande #0010 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 197
[1,18]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,18]<stdout>:                         INFO=1,
[1,18]<stdout>:                         MATR_ELEM=stiff_elem,
[1,18]<stdout>:                         NUME_DDL=dofNum)
[1,18]<stdout>:
[1,6]<stdout>:# Commande #0010 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 197
[1,5]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:                         INFO=1,
[1,5]<stdout>:                         MATR_ELEM=stiff_elem,
[1,5]<stdout>:                         NUME_DDL=dofNum)
[1,5]<stdout>:
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,23]<stdout>:                         INFO=1,
[1,23]<stdout>:                         MATR_ELEM=stiff_elem,
[1,23]<stdout>:                         NUME_DDL=dofNum)
[1,23]<stdout>:
[1,15]<stdout>:# Commande #0010 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 197
[1,16]<stdout>:# Commande #0010 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 197
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt197
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,21]<stdout>:                         INFO=1,
[1,21]<stdout>:                         MATR_ELEM=stiff_elem,
[1,21]<stdout>:                         NUME_DDL=dofNum)
[1,21]<stdout>:
[1,0]<stdout>:# Résultat commande #0011 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,7]<stdout>:# Commande #0010 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 197
[1,4]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:                         INFO=1,
[1,4]<stdout>:                         MATR_ELEM=stiff_elem,
[1,4]<stdout>:                         NUME_DDL=dofNum)
[1,4]<stdout>:
[1,13]<stdout>:# Commande #0010 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 197
[1,11]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,11]<stdout>:                         INFO=1,
[1,11]<stdout>:                         MATR_ELEM=stiff_elem,
[1,11]<stdout>:                         NUME_DDL=dofNum)
[1,11]<stdout>:
[1,15]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,15]<stdout>:                         INFO=1,
[1,15]<stdout>:                         MATR_ELEM=stiff_elem,
[1,15]<stdout>:                         NUME_DDL=dofNum)
[1,15]<stdout>:
[1,6]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:                         INFO=1,
[1,6]<stdout>:                         MATR_ELEM=stiff_elem,
[1,6]<stdout>:                         NUME_DDL=dofNum)
[1,6]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1413.69 /  1120.82 /   804.16 /   537.90 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,16]<stdout>:                         INFO=1,
[1,16]<stdout>:                         MATR_ELEM=stiff_elem,
[1,16]<stdout>:                         NUME_DDL=dofNum)
[1,16]<stdout>:
[1,7]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:                         INFO=1,
[1,7]<stdout>:                         MATR_ELEM=stiff_elem,
[1,7]<stdout>:                         NUME_DDL=dofNum)
[1,7]<stdout>:
[1,0]<stdout>:# Fin commande #0011   user+syst:        0.83s (syst:        0.77s, elaps:        1.60s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,13]<stdout>:                         INFO=1,
[1,13]<stdout>:                         MATR_ELEM=stiff_elem,
[1,13]<stdout>:                         NUME_DDL=dofNum)
[1,13]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt197
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0012 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 197
[1,0]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:                         INFO=1,
[1,0]<stdout>:                         MATR_ELEM=stiff_elem,
[1,0]<stdout>:                         NUME_DDL=dofNum)
[1,0]<stdout>:
[1,23]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,23]<stdout>:<AssemblyMatrixDisplacementReal>
[1,21]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,21]<stdout>:<AssemblyMatrixDisplacementReal>
[1,5]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,5]<stdout>:<AssemblyMatrixDisplacementReal>
[1,23]<stdout>:# Mémoire (Mo) :  1394.02 /  1188.89 /   795.14 /   535.53 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,8]<stdout>:<AssemblyMatrixDisplacementReal>
[1,4]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,4]<stdout>:<AssemblyMatrixDisplacementReal>
[1,21]<stdout>:# Mémoire (Mo) :  1382.28 /  1174.61 /   786.20 /   533.61 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0010   user+syst:        0.45s (syst:        0.05s, elaps:        0.48s)
[1,5]<stdout>:# Mémoire (Mo) :  1394.61 /  1189.72 /   796.23 /   535.87 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Fin commande #0010   user+syst:        0.44s (syst:        0.04s, elaps:        0.48s)
[1,8]<stdout>:# Mémoire (Mo) :  1402.71 /  1200.34 /   804.45 /   537.83 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :  1437.98 /  1244.68 /   835.74 /   545.41 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0010   user+syst:        0.45s (syst:        0.03s, elaps:        0.48s)
[1,13]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,13]<stdout>:<AssemblyMatrixDisplacementReal>
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,16]<stdout>:<AssemblyMatrixDisplacementReal>
[1,8]<stdout>:# Fin commande #0010   user+syst:        0.43s (syst:        0.05s, elaps:        0.48s)
[1,4]<stdout>:# Fin commande #0010   user+syst:        0.44s (syst:        0.04s, elaps:        0.48s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Mémoire (Mo) :  1413.79 /  1214.16 /   814.03 /   540.29 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Mémoire (Mo) :  1422.26 /  1224.48 /   820.44 /   541.77 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0010   user+syst:        0.43s (syst:        0.05s, elaps:        0.48s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Fin commande #0010   user+syst:        0.44s (syst:        0.04s, elaps:        0.48s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,2]<stdout>:<AssemblyMatrixDisplacementReal>
[1,12]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,12]<stdout>:<AssemblyMatrixDisplacementReal>
[1,22]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,22]<stdout>:<AssemblyMatrixDisplacementReal>
[1,18]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,18]<stdout>:<AssemblyMatrixDisplacementReal>
[1,17]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,17]<stdout>:<AssemblyMatrixDisplacementReal>
[1,9]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,9]<stdout>:<AssemblyMatrixDisplacementReal>
[1,3]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,3]<stdout>:<AssemblyMatrixDisplacementReal>
[1,19]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,19]<stdout>:<AssemblyMatrixDisplacementReal>
[1,2]<stdout>:# Mémoire (Mo) :  1380.38 /  1174.02 /   783.59 /   532.86 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  1367.41 /  1158.01 /   773.53 /   530.52 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,14]<stdout>:<AssemblyMatrixDisplacementReal>
[1,10]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,10]<stdout>:<AssemblyMatrixDisplacementReal>
[1,22]<stdout>:# Mémoire (Mo) :  1396.16 /  1193.81 /   797.33 /   536.33 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Mémoire (Mo) :  1378.30 /  1171.39 /   781.97 /   532.52 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Mémoire (Mo) :  1401.29 /  1200.58 /   802.32 /   537.30 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0010   user+syst:        0.44s (syst:        0.04s, elaps:        0.49s)
[1,12]<stdout>:# Fin commande #0010   user+syst:        0.43s (syst:        0.05s, elaps:        0.49s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Mémoire (Mo) :  1393.22 /  1190.55 /   795.78 /   536.09 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,20]<stdout>:<AssemblyMatrixDisplacementReal>
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Mémoire (Mo) :  1390.21 /  1186.47 /   792.07 /   535.08 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  1377.57 /  1170.34 /   780.82 /   532.29 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,11]<stdout>:<AssemblyMatrixDisplacementReal>
[1,18]<stdout>:# Fin commande #0010   user+syst:        0.44s (syst:        0.06s, elaps:        0.49s)
[1,17]<stdout>:# Fin commande #0010   user+syst:        0.45s (syst:        0.04s, elaps:        0.49s)
[1,22]<stdout>:# Fin commande #0010   user+syst:        0.43s (syst:        0.05s, elaps:        0.49s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :  1411.62 /  1214.02 /   813.01 /   539.96 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :  1419.38 /  1223.29 /   818.08 /   541.18 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0010   user+syst:        0.43s (syst:        0.05s, elaps:        0.49s)
[1,3]<stdout>:# Fin commande #0010   user+syst:        0.45s (syst:        0.04s, elaps:        0.49s)
[1,19]<stdout>:# Fin commande #0010   user+syst:        0.43s (syst:        0.05s, elaps:        0.49s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Mémoire (Mo) :  1398.35 /  1196.42 /   798.28 /   536.56 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0010   user+syst:        0.44s (syst:        0.05s, elaps:        0.49s)
[1,11]<stdout>:# Mémoire (Mo) :  1375.71 /  1168.80 /   781.40 /   532.54 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0010   user+syst:        0.44s (syst:        0.03s, elaps:        0.49s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,6]<stdout>:<AssemblyMatrixDisplacementReal>
[1,20]<stdout>:# Fin commande #0010   user+syst:        0.43s (syst:        0.05s, elaps:        0.49s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0010   user+syst:        0.44s (syst:        0.04s, elaps:        0.49s)
[1,1]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,1]<stdout>:<AssemblyMatrixDisplacementReal>
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,7]<stdout>:<AssemblyMatrixDisplacementReal>
[1,15]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,15]<stdout>:<AssemblyMatrixDisplacementReal>
[1,6]<stdout>:# Mémoire (Mo) :  1376.07 /  1169.27 /   782.09 /   532.71 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1424.02 /  1230.02 /   825.44 /   542.70 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0010   user+syst:        0.43s (syst:        0.05s, elaps:        0.49s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0010   user+syst:        0.43s (syst:        0.05s, elaps:        0.49s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Mémoire (Mo) :  1414.46 /  1217.19 /   814.13 /   540.29 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Mémoire (Mo) :  1394.36 /  1191.80 /   796.21 /   535.99 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0010   user+syst:        0.43s (syst:        0.05s, elaps:        0.49s)
[1,15]<stdout>:# Fin commande #0010   user+syst:        0.45s (syst:        0.04s, elaps:        0.49s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt204
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt204
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt204
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt204
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt204
[1,21]<stdout>:# Commande #0011 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 204
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0011 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 204
[1,23]<stdout>:# Commande #0011 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 204
[1,4]<stdout>:# Commande #0011 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 204
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt204
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0011 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 204
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt204
[1,21]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,21]<stdout>:                         TOUT='OUI',
[1,21]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,21]<stdout>:                 INFO=1,
[1,21]<stdout>:                 MAILLAGE='<00000004>',
[1,21]<stdout>:                 OPERATION='AFFE',
[1,21]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,21]<stdout>:
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,23]<stdout>:                         TOUT='OUI',
[1,23]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,23]<stdout>:                 INFO=1,
[1,23]<stdout>:                 MAILLAGE='<00000004>',
[1,23]<stdout>:                 OPERATION='AFFE',
[1,23]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,23]<stdout>:
[1,5]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,5]<stdout>:                         TOUT='OUI',
[1,5]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,5]<stdout>:                 INFO=1,
[1,5]<stdout>:                 MAILLAGE='<00000004>',
[1,5]<stdout>:                 OPERATION='AFFE',
[1,5]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,5]<stdout>:
[1,13]<stdout>:# Commande #0011 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 204
[1,4]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,4]<stdout>:                         TOUT='OUI',
[1,4]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,4]<stdout>:                 INFO=1,
[1,4]<stdout>:                 MAILLAGE='<00000004>',
[1,4]<stdout>:                 OPERATION='AFFE',
[1,4]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,4]<stdout>:
[1,8]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,8]<stdout>:                         TOUT='OUI',
[1,8]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,8]<stdout>:                 INFO=1,
[1,8]<stdout>:                 MAILLAGE='<00000004>',
[1,8]<stdout>:                 OPERATION='AFFE',
[1,8]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,8]<stdout>:
[1,16]<stdout>:# Commande #0011 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 204
[1,13]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,13]<stdout>:                         TOUT='OUI',
[1,13]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,13]<stdout>:                 INFO=1,
[1,13]<stdout>:                 MAILLAGE='<00000004>',
[1,13]<stdout>:                 OPERATION='AFFE',
[1,13]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,13]<stdout>:
[1,16]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,16]<stdout>:                         TOUT='OUI',
[1,16]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,16]<stdout>:                 INFO=1,
[1,16]<stdout>:                 MAILLAGE='<00000004>',
[1,16]<stdout>:                 OPERATION='AFFE',
[1,16]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,16]<stdout>:
[1,0]<stdout>:# Résultat commande #0012 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,0]<stdout>:<AssemblyMatrixDisplacementReal>
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt204
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt204
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt204
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt204
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt204
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt204
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt204
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  1413.69 /  1213.32 /   804.16 /   537.90 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt204
[1,2]<stdout>:# Commande #0011 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 204
[1,12]<stdout>:# Commande #0011 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 204
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt204
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt204
[1,22]<stdout>:# Commande #0011 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 204
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0011 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 204
[1,17]<stdout>:# Commande #0011 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 204
[1,3]<stdout>:# Commande #0011 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 204
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt204
[1,9]<stdout>:# Commande #0011 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 204
[1,0]<stdout>:# Fin commande #0012   user+syst:        0.45s (syst:        0.04s, elaps:        0.49s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt204
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0011 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 204
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,2]<stdout>:                         TOUT='OUI',
[1,2]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,2]<stdout>:                 INFO=1,
[1,2]<stdout>:                 MAILLAGE='<00000004>',
[1,2]<stdout>:                 OPERATION='AFFE',
[1,2]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,2]<stdout>:
[1,10]<stdout>:# Commande #0011 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 204
[1,12]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,12]<stdout>:                         TOUT='OUI',
[1,12]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,12]<stdout>:                 INFO=1,
[1,12]<stdout>:                 MAILLAGE='<00000004>',
[1,12]<stdout>:                 OPERATION='AFFE',
[1,12]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,12]<stdout>:
[1,14]<stdout>:# Commande #0011 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 204
[1,22]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,22]<stdout>:                         TOUT='OUI',
[1,22]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,22]<stdout>:                 INFO=1,
[1,22]<stdout>:                 MAILLAGE='<00000004>',
[1,22]<stdout>:                 OPERATION='AFFE',
[1,22]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,22]<stdout>:
[1,18]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,18]<stdout>:                         TOUT='OUI',
[1,18]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,18]<stdout>:                 INFO=1,
[1,18]<stdout>:                 MAILLAGE='<00000004>',
[1,18]<stdout>:                 OPERATION='AFFE',
[1,18]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,18]<stdout>:
[1,11]<stdout>:# Commande #0011 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 204
[1,3]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,3]<stdout>:                         TOUT='OUI',
[1,3]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,3]<stdout>:                 INFO=1,
[1,3]<stdout>:                 MAILLAGE='<00000004>',
[1,3]<stdout>:                 OPERATION='AFFE',
[1,3]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,3]<stdout>:
[1,17]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,17]<stdout>:                         TOUT='OUI',
[1,17]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,17]<stdout>:                 INFO=1,
[1,17]<stdout>:                 MAILLAGE='<00000004>',
[1,17]<stdout>:                 OPERATION='AFFE',
[1,17]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,17]<stdout>:
[1,20]<stdout>:# Commande #0011 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 204
[1,9]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,9]<stdout>:                         TOUT='OUI',
[1,9]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,9]<stdout>:                 INFO=1,
[1,9]<stdout>:                 MAILLAGE='<00000004>',
[1,9]<stdout>:                 OPERATION='AFFE',
[1,9]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,9]<stdout>:
[1,19]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,19]<stdout>:                         TOUT='OUI',
[1,19]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,19]<stdout>:                 INFO=1,
[1,19]<stdout>:                 MAILLAGE='<00000004>',
[1,19]<stdout>:                 OPERATION='AFFE',
[1,19]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,19]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt204
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt204
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,10]<stdout>:                         TOUT='OUI',
[1,10]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,10]<stdout>:                 INFO=1,
[1,10]<stdout>:                 MAILLAGE='<00000004>',
[1,10]<stdout>:                 OPERATION='AFFE',
[1,10]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,10]<stdout>:
[1,14]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,14]<stdout>:                         TOUT='OUI',
[1,14]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,14]<stdout>:                 INFO=1,
[1,14]<stdout>:                 MAILLAGE='<00000004>',
[1,14]<stdout>:                 OPERATION='AFFE',
[1,14]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,14]<stdout>:
[1,20]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,20]<stdout>:                         TOUT='OUI',
[1,20]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,20]<stdout>:                 INFO=1,
[1,20]<stdout>:                 MAILLAGE='<00000004>',
[1,20]<stdout>:                 OPERATION='AFFE',
[1,20]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,20]<stdout>:
[1,11]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,11]<stdout>:                         TOUT='OUI',
[1,11]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,11]<stdout>:                 INFO=1,
[1,11]<stdout>:                 MAILLAGE='<00000004>',
[1,11]<stdout>:                 OPERATION='AFFE',
[1,11]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,11]<stdout>:
[1,6]<stdout>:# Commande #0011 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 204
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt204
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt204
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0011 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 204
[1,15]<stdout>:# Commande #0011 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 204
[1,6]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,6]<stdout>:                         TOUT='OUI',
[1,6]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,6]<stdout>:                 INFO=1,
[1,6]<stdout>:                 MAILLAGE='<00000004>',
[1,6]<stdout>:                 OPERATION='AFFE',
[1,6]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,6]<stdout>:
[1,7]<stdout>:# Commande #0011 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 204
[1,1]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,1]<stdout>:                         TOUT='OUI',
[1,1]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,1]<stdout>:                 INFO=1,
[1,1]<stdout>:                 MAILLAGE='<00000004>',
[1,1]<stdout>:                 OPERATION='AFFE',
[1,1]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,1]<stdout>:
[1,15]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,15]<stdout>:                         TOUT='OUI',
[1,15]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,15]<stdout>:                 INFO=1,
[1,15]<stdout>:                 MAILLAGE='<00000004>',
[1,15]<stdout>:                 OPERATION='AFFE',
[1,15]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,15]<stdout>:
[1,7]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,7]<stdout>:                         TOUT='OUI',
[1,7]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,7]<stdout>:                 INFO=1,
[1,7]<stdout>:                 MAILLAGE='<00000004>',
[1,7]<stdout>:                 OPERATION='AFFE',
[1,7]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,7]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt204
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0013 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 204
[1,0]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,0]<stdout>:                         TOUT='OUI',
[1,0]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,0]<stdout>:                 INFO=1,
[1,0]<stdout>:                 MAILLAGE='<00000004>',
[1,0]<stdout>:                 OPERATION='AFFE',
[1,0]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,0]<stdout>:
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.00
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,12]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,17]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,12]<stdout>:# Mémoire (Mo) :  1367.41 /  1174.68 /   773.53 /   530.52 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,12]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.02s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,21]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,3]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,3]<stdout>:# Mémoire (Mo) :  1377.57 /  1187.46 /   780.82 /   532.29 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0011   user+syst:        0.00s (syst:        0.02s, elaps:        0.02s)
[1,17]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.00
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,17]<stdout>:# Mémoire (Mo) :  1378.30 /  1188.55 /   781.97 /   532.52 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,11]<stdout>:# Mémoire (Mo) :  1375.71 /  1186.05 /   781.40 /   532.54 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.01s, elaps:        0.02s)
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,23]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt223
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  1380.38 /  1191.29 /   783.59 /   532.86 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0011   user+syst:        0.00s (syst:        0.02s, elaps:        0.02s)
[1,6]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0011   user+syst:        0.00s (syst:        0.02s, elaps:        0.02s)
[1,12]<stdout>:# Commande #0012 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 223
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,6]<stdout>:# Mémoire (Mo) :  1376.07 /  1186.54 /   782.09 /   532.71 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,20]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,19]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.00
[1,6]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.02s)
[1,21]<stdout>:# Mémoire (Mo) :  1382.28 /  1192.10 /   786.20 /   533.61 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,12]<stdout>:                             INFO=1,
[1,12]<stdout>:                             INST=0.0,
[1,12]<stdout>:                             NUME_DDL=dofNum)
[1,12]<stdout>:
[1,21]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.03s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,18]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt223
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,3]<stdout>:# Commande #0012 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 223
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,9]<stdout>:# Mémoire (Mo) :  1390.21 /  1204.34 /   792.07 /   535.08 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt223
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.02s)
[1,5]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt223
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,3]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:                             INFO=1,
[1,3]<stdout>:                             INST=0.0,
[1,3]<stdout>:                             NUME_DDL=dofNum)
[1,3]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt223
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,17]<stdout>:# Commande #0012 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 223
[1,11]<stdout>:# Commande #0012 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 223
[1,5]<stdout>:# Mémoire (Mo) :  1394.61 /  1207.71 /   796.23 /   535.87 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Mémoire (Mo) :  1394.02 /  1206.88 /   795.14 /   535.53 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Commande #0012 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 223
[1,16]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,22]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt223
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,23]<stdout>:# Fin commande #0011   user+syst:        0.00s (syst:        0.01s, elaps:        0.03s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt223
[1,19]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,17]<stdout>:                             INFO=1,
[1,17]<stdout>:                             INST=0.0,
[1,17]<stdout>:                             NUME_DDL=dofNum)
[1,17]<stdout>:
[1,6]<stdout>:# Commande #0012 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 223
[1,22]<stdout>:# Mémoire (Mo) :  1396.16 /  1211.99 /   797.33 /   536.33 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,11]<stdout>:                             INFO=1,
[1,11]<stdout>:                             INST=0.0,
[1,11]<stdout>:                             NUME_DDL=dofNum)
[1,11]<stdout>:
[1,20]<stdout>:# Mémoire (Mo) :  1398.35 /  1214.66 /   798.28 /   536.56 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:                             INFO=1,
[1,2]<stdout>:                             INST=0.0,
[1,2]<stdout>:                             NUME_DDL=dofNum)
[1,2]<stdout>:
[1,21]<stdout>:# Commande #0012 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 223
[1,15]<stdout>:# Mémoire (Mo) :  1394.36 /  1209.92 /   796.21 /   535.99 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.02s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Mémoire (Mo) :  1393.22 /  1208.68 /   795.78 /   536.09 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.02s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,15]<stdout>:# Fin commande #0011   user+syst:        0.00s (syst:        0.02s, elaps:        0.02s)
[1,18]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,19]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.02s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,0]<stdout>:# Résultat commande #0013 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:                             INFO=1,
[1,6]<stdout>:                             INST=0.0,
[1,6]<stdout>:                             NUME_DDL=dofNum)
[1,6]<stdout>:
[1,8]<stdout>:# Mémoire (Mo) :  1402.71 /  1218.91 /   804.45 /   537.83 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,21]<stdout>:                             INFO=1,
[1,21]<stdout>:                             INST=0.0,
[1,21]<stdout>:                             NUME_DDL=dofNum)
[1,21]<stdout>:
[1,18]<stdout>:# Mémoire (Mo) :  1401.29 /  1219.02 /   802.32 /   537.30 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.03s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  1413.69 /  1231.80 /   804.16 /   537.90 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0011   user+syst:        0.00s (syst:        0.01s, elaps:        0.02s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,0]<stdout>:# Fin commande #0013   user+syst:        0.00s (syst:        0.02s, elaps:        0.02s)
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt223
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,14]<stdout>:# Mémoire (Mo) :  1411.62 /  1233.10 /   813.01 /   539.96 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Commande #0012 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 223
[1,7]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,10]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,14]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.01s, elaps:        0.02s)
[1,13]<stdout>:# Mémoire (Mo) :  1413.79 /  1233.34 /   814.03 /   540.29 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt223
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Mémoire (Mo) :  1414.46 /  1236.31 /   814.13 /   540.29 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt223
[1,13]<stdout>:# Fin commande #0011   user+syst:        0.00s (syst:        0.01s, elaps:        0.03s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  1419.38 /  1242.68 /   818.08 /   541.18 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,1]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,10]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.03s, elaps:        0.02s)
[1,7]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.02s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,9]<stdout>:                             INFO=1,
[1,9]<stdout>:                             INST=0.0,
[1,9]<stdout>:                             NUME_DDL=dofNum)
[1,9]<stdout>:
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0012 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 223
[1,23]<stdout>:# Commande #0012 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 223
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt223
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt223
[1,16]<stdout>:# Mémoire (Mo) :  1422.26 /  1244.02 /   820.44 /   541.77 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :  1424.02 /  1249.70 /   825.44 /   542.70 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Commande #0012 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 223
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt223
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt223
[1,1]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.02s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Fin commande #0011   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Commande #0012 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 223
[1,5]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:                             INFO=1,
[1,5]<stdout>:                             INST=0.0,
[1,5]<stdout>:                             NUME_DDL=dofNum)
[1,5]<stdout>:
[1,23]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,23]<stdout>:                             INFO=1,
[1,23]<stdout>:                             INST=0.0,
[1,23]<stdout>:                             NUME_DDL=dofNum)
[1,23]<stdout>:
[1,4]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,19]<stdout>:# Commande #0012 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 223
[1,15]<stdout>:# Commande #0012 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 223
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt223
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt223
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  1437.98 /  1265.10 /   835.74 /   545.41 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,22]<stdout>:                             INFO=1,
[1,22]<stdout>:                             INST=0.0,
[1,22]<stdout>:                             NUME_DDL=dofNum)
[1,22]<stdout>:
[1,20]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,20]<stdout>:                             INFO=1,
[1,20]<stdout>:                             INST=0.0,
[1,20]<stdout>:                             NUME_DDL=dofNum)
[1,20]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt223
[1,8]<stdout>:# Commande #0012 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 223
[1,4]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.02s, elaps:        0.03s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0012 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 223
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,19]<stdout>:                             INFO=1,
[1,19]<stdout>:                             INST=0.0,
[1,19]<stdout>:                             NUME_DDL=dofNum)
[1,19]<stdout>:
[1,15]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,15]<stdout>:                             INFO=1,
[1,15]<stdout>:                             INST=0.0,
[1,15]<stdout>:                             NUME_DDL=dofNum)
[1,15]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt223
[1,0]<stdout>:# Commande #0014 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 223
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,8]<stdout>:                             INFO=1,
[1,8]<stdout>:                             INST=0.0,
[1,8]<stdout>:                             NUME_DDL=dofNum)
[1,8]<stdout>:
[1,18]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,18]<stdout>:                             INFO=1,
[1,18]<stdout>:                             INST=0.0,
[1,18]<stdout>:                             NUME_DDL=dofNum)
[1,18]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt223
[1,14]<stdout>:# Commande #0012 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 223
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt223
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt223
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:                             INFO=1,
[1,0]<stdout>:                             INST=0.0,
[1,0]<stdout>:                             NUME_DDL=dofNum)
[1,0]<stdout>:
[1,13]<stdout>:# Commande #0012 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 223
[1,10]<stdout>:# Commande #0012 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 223
[1,7]<stdout>:# Commande #0012 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 223
[1,14]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,14]<stdout>:                             INFO=1,
[1,14]<stdout>:                             INST=0.0,
[1,14]<stdout>:                             NUME_DDL=dofNum)
[1,14]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt223
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt223
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,13]<stdout>:                             INFO=1,
[1,13]<stdout>:                             INST=0.0,
[1,13]<stdout>:                             NUME_DDL=dofNum)
[1,13]<stdout>:
[1,1]<stdout>:# Commande #0012 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 223
[1,10]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,10]<stdout>:                             INFO=1,
[1,10]<stdout>:                             INST=0.0,
[1,10]<stdout>:                             NUME_DDL=dofNum)
[1,10]<stdout>:
[1,16]<stdout>:# Commande #0012 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 223
[1,7]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:                             INFO=1,
[1,7]<stdout>:                             INST=0.0,
[1,7]<stdout>:                             NUME_DDL=dofNum)
[1,7]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt223
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:                             INFO=1,
[1,1]<stdout>:                             INST=0.0,
[1,1]<stdout>:                             NUME_DDL=dofNum)
[1,1]<stdout>:
[1,16]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,16]<stdout>:                             INFO=1,
[1,16]<stdout>:                             INST=0.0,
[1,16]<stdout>:                             NUME_DDL=dofNum)
[1,16]<stdout>:
[1,4]<stdout>:# Commande #0012 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 223
[1,4]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:                             INFO=1,
[1,4]<stdout>:                             INST=0.0,
[1,4]<stdout>:                             NUME_DDL=dofNum)
[1,4]<stdout>:
[1,12]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,12]<stdout>:# Mémoire (Mo) :  1367.41 /  1176.77 /   773.53 /   530.52 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.01s, elaps:        0.04s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,3]<stdout>:# Mémoire (Mo) :  1377.57 /  1189.60 /   780.82 /   532.29 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,17]<stdout>:# Mémoire (Mo) :  1378.30 /  1190.70 /   781.97 /   532.52 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,2]<stdout>:# Mémoire (Mo) :  1380.38 /  1193.45 /   783.59 /   532.86 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,6]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,11]<stdout>:# Mémoire (Mo) :  1375.71 /  1188.21 /   781.40 /   532.54 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,11]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :  1376.07 /  1188.70 /   782.09 /   532.71 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Mémoire (Mo) :  1382.28 /  1194.29 /   786.20 /   533.61 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.04s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.04s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,9]<stdout>:# Mémoire (Mo) :  1390.21 /  1206.57 /   792.07 /   535.08 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.04s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,23]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,22]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,22]<stdout>:# Mémoire (Mo) :  1396.16 /  1214.26 /   797.33 /   536.33 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  1394.61 /  1209.96 /   796.23 /   535.87 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Mémoire (Mo) :  1394.02 /  1209.13 /   795.14 /   535.53 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.04s)
[1,22]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.04s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,18]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,19]<stdout>:# Mémoire (Mo) :  1393.22 /  1210.94 /   795.78 /   536.09 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Mémoire (Mo) :  1401.29 /  1221.32 /   802.32 /   537.30 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,19]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.04s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Mémoire (Mo) :  1398.35 /  1216.95 /   798.28 /   536.56 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,20]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Mémoire (Mo) :  1402.71 /  1221.23 /   804.45 /   537.83 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,8]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.04s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Mémoire (Mo) :  1394.36 /  1212.19 /   796.21 /   535.99 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0012   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,10]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,1]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,14]<stdout>:# Mémoire (Mo) :  1411.62 /  1235.48 /   813.01 /   539.96 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,10]<stdout>:# Mémoire (Mo) :  1419.38 /  1245.11 /   818.08 /   541.18 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :  1424.02 /  1252.16 /   825.44 /   542.70 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,16]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,7]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,13]<stdout>:# Mémoire (Mo) :  1413.79 /  1235.73 /   814.03 /   540.29 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.04s)
[1,16]<stdout>:# Mémoire (Mo) :  1422.26 /  1246.46 /   820.44 /   541.77 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  1414.46 /  1238.70 /   814.13 /   540.29 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.04s)
[1,16]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,4]<stdout>:# Mémoire (Mo) :  1437.98 /  1267.66 /   835.74 /   545.41 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.01s, elaps:        0.04s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0014 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,0]<stdout>:# Mémoire (Mo) :  1413.69 /  1234.12 /   804.16 /   537.90 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0014   user+syst:        0.02s (syst:        0.02s, elaps:        0.04s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:  0 KSP unpreconditioned resid norm 2.792302114902e+02 true resid norm 2.792302114902e+02 ||r(i)||/||b|| 1.000000000000e+00
[1,0]<stdout>:  1 KSP unpreconditioned resid norm 4.024610848479e+01 true resid norm 4.024610848479e+01 ||r(i)||/||b|| 1.441323568464e-01
[1,0]<stdout>:  2 KSP unpreconditioned resid norm 6.019847165096e+00 true resid norm 6.019847165096e+00 ||r(i)||/||b|| 2.155872436929e-02
[1,0]<stdout>:  3 KSP unpreconditioned resid norm 2.194803749217e+00 true resid norm 2.194803749217e+00 ||r(i)||/||b|| 7.860194416299e-03
[1,0]<stdout>:  4 KSP unpreconditioned resid norm 1.100981273524e+00 true resid norm 1.100981273524e+00 ||r(i)||/||b|| 3.942916017748e-03
[1,0]<stdout>:  5 KSP unpreconditioned resid norm 5.636666555952e-01 true resid norm 5.636666555954e-01 ||r(i)||/||b|| 2.018644947433e-03
[1,0]<stdout>:  6 KSP unpreconditioned resid norm 2.972013593123e-01 true resid norm 2.972013593124e-01 ||r(i)||/||b|| 1.064359611112e-03
[1,0]<stdout>:  7 KSP unpreconditioned resid norm 1.654495021958e-01 true resid norm 1.654495021959e-01 ||r(i)||/||b|| 5.925200618979e-04
[1,0]<stdout>:  8 KSP unpreconditioned resid norm 9.230846238908e-02 true resid norm 9.230846238914e-02 ||r(i)||/||b|| 3.305819305744e-04
[1,0]<stdout>:  9 KSP unpreconditioned resid norm 4.916599939022e-02 true resid norm 4.916599939030e-02 ||r(i)||/||b|| 1.760769335378e-04
[1,0]<stdout>: 10 KSP unpreconditioned resid norm 2.661466261431e-02 true resid norm 2.661466261436e-02 ||r(i)||/||b|| 9.531440911183e-05
[1,0]<stdout>: 11 KSP unpreconditioned resid norm 1.444740910014e-02 true resid norm 1.444740910018e-02 ||r(i)||/||b|| 5.174013593686e-05
[1,0]<stdout>: 12 KSP unpreconditioned resid norm 7.775801842384e-03 true resid norm 7.775801842397e-03 ||r(i)||/||b|| 2.784727985163e-05
[1,0]<stdout>: 13 KSP unpreconditioned resid norm 4.308163192998e-03 true resid norm 4.308163193037e-03 ||r(i)||/||b|| 1.542871442902e-05
[1,0]<stdout>: 14 KSP unpreconditioned resid norm 2.377193015037e-03 true resid norm 2.377193015056e-03 ||r(i)||/||b|| 8.513380419582e-06
[1,0]<stdout>: 15 KSP unpreconditioned resid norm 1.314842618537e-03 true resid norm 1.314842618548e-03 ||r(i)||/||b|| 4.708812171617e-06
[1,0]<stdout>: 16 KSP unpreconditioned resid norm 7.328967893705e-04 true resid norm 7.328967893718e-04 ||r(i)||/||b|| 2.624704488316e-06
[1,0]<stdout>: 17 KSP unpreconditioned resid norm 4.004527322877e-04 true resid norm 4.004527322905e-04 ||r(i)||/||b|| 1.434131106922e-06
[1,0]<stdout>: 18 KSP unpreconditioned resid norm 2.194029013977e-04 true resid norm 2.194029013818e-04 ||r(i)||/||b|| 7.857419876269e-07
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt72
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt72
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt72
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt72
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt72
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt72
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt72
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt72
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt72
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt72
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt72
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt72
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt72
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt72
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt72
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt72
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt72
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt72
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt72
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt72
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt72
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt72
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt72
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,12]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,9]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,15]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,20]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,19]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,8]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,18]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,2]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,13]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,6]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,11]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,23]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,5]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,14]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,7]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,21]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,10]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,17]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,3]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,1]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,16]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,22]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,13]<stdout>:FIN(INFO_RESU='NON',
[1,13]<stdout>:    RETASSAGE='NON')
[1,13]<stdout>:
[1,0]<stdout>:| Refinement       |           7 |
[1,0]<stdout>:| :--------------- | ----------: |
[1,0]<stdout>:| Number of cells  |   2 097 152 |
[1,0]<stdout>:| Number of nodes  |   2 146 689 |
[1,0]<stdout>:| Number of DOFs   |   6 440 067 |
[1,0]<stdout>:| Number of procs  |          24 |
[1,0]<stdout>:| Nb of DOFs/proc  |     268 336 |
[1,0]<stdout>:| Build mesh       |        7.43 |
[1,0]<stdout>:| Model            |        0.38 |
[1,0]<stdout>:| Material         |        0.06 |
[1,0]<stdout>:| Boundary conditions |        0.11 |
[1,0]<stdout>:| Create matrix    |        0.89 |
[1,0]<stdout>:| Numbering        |        1.61 |
[1,0]<stdout>:| Assembly         |        0.48 |
[1,0]<stdout>:| Build RHS        |        0.07 |
[1,0]<stdout>:| Factorize        |        5.36 |
[1,0]<stdout>:| Solve            |        2.71 |
[1,0]<stdout>:| Total            |       19.09 |
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt72
[1,6]<stdout>:FIN(INFO_RESU='NON',
[1,6]<stdout>:    RETASSAGE='NON')
[1,6]<stdout>:
[1,11]<stdout>:FIN(INFO_RESU='NON',
[1,11]<stdout>:    RETASSAGE='NON')
[1,11]<stdout>:
[1,23]<stdout>:FIN(INFO_RESU='NON',
[1,23]<stdout>:    RETASSAGE='NON')
[1,23]<stdout>:
[1,5]<stdout>:FIN(INFO_RESU='NON',
[1,5]<stdout>:    RETASSAGE='NON')
[1,5]<stdout>:
[1,14]<stdout>:FIN(INFO_RESU='NON',
[1,14]<stdout>:    RETASSAGE='NON')
[1,14]<stdout>:
[1,7]<stdout>:FIN(INFO_RESU='NON',
[1,7]<stdout>:    RETASSAGE='NON')
[1,7]<stdout>:
[1,21]<stdout>:FIN(INFO_RESU='NON',
[1,21]<stdout>:    RETASSAGE='NON')
[1,21]<stdout>:
[1,10]<stdout>:FIN(INFO_RESU='NON',
[1,10]<stdout>:    RETASSAGE='NON')
[1,10]<stdout>:
[1,17]<stdout>:FIN(INFO_RESU='NON',
[1,17]<stdout>:    RETASSAGE='NON')
[1,17]<stdout>:
[1,3]<stdout>:FIN(INFO_RESU='NON',
[1,3]<stdout>:    RETASSAGE='NON')
[1,3]<stdout>:
[1,1]<stdout>:FIN(INFO_RESU='NON',
[1,1]<stdout>:    RETASSAGE='NON')
[1,1]<stdout>:
[1,22]<stdout>:FIN(INFO_RESU='NON',
[1,22]<stdout>:    RETASSAGE='NON')
[1,22]<stdout>:
[1,4]<stdout>:FIN(INFO_RESU='NON',
[1,4]<stdout>:    RETASSAGE='NON')
[1,4]<stdout>:
[1,12]<stdout>:FIN(INFO_RESU='NON',
[1,12]<stdout>:    RETASSAGE='NON')
[1,12]<stdout>:
[1,9]<stdout>:FIN(INFO_RESU='NON',
[1,9]<stdout>:    RETASSAGE='NON')
[1,9]<stdout>:
[1,15]<stdout>:FIN(INFO_RESU='NON',
[1,15]<stdout>:    RETASSAGE='NON')
[1,15]<stdout>:
[1,20]<stdout>:FIN(INFO_RESU='NON',
[1,20]<stdout>:    RETASSAGE='NON')
[1,20]<stdout>:
[1,19]<stdout>:FIN(INFO_RESU='NON',
[1,19]<stdout>:    RETASSAGE='NON')
[1,19]<stdout>:
[1,8]<stdout>:FIN(INFO_RESU='NON',
[1,8]<stdout>:    RETASSAGE='NON')
[1,8]<stdout>:
[1,18]<stdout>:FIN(INFO_RESU='NON',
[1,18]<stdout>:    RETASSAGE='NON')
[1,18]<stdout>:
[1,2]<stdout>:FIN(INFO_RESU='NON',
[1,2]<stdout>:    RETASSAGE='NON')
[1,2]<stdout>:
[1,16]<stdout>:FIN(INFO_RESU='NON',
[1,16]<stdout>:    RETASSAGE='NON')
[1,16]<stdout>:
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0015 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,0]<stdout>:FIN(INFO_RESU='NON',
[1,0]<stdout>:    RETASSAGE='NON')
[1,0]<stdout>:
[1,2]<stdout>:No database in results, objects not saved on processor #2
[1,18]<stdout>:No database in results, objects not saved on processor #18
[1,19]<stdout>:No database in results, objects not saved on processor #19
[1,23]<stdout>:No database in results, objects not saved on processor #23
[1,22]<stdout>:No database in results, objects not saved on processor #22
[1,1]<stdout>:No database in results, objects not saved on processor #1
[1,5]<stdout>:No database in results, objects not saved on processor #5
[1,9]<stdout>:No database in results, objects not saved on processor #9
[1,3]<stdout>:No database in results, objects not saved on processor #3
[1,20]<stdout>:No database in results, objects not saved on processor #20
[1,12]<stdout>:No database in results, objects not saved on processor #12
[1,10]<stdout>:No database in results, objects not saved on processor #10
[1,4]<stdout>:No database in results, objects not saved on processor #4
[1,14]<stdout>:No database in results, objects not saved on processor #14
[1,16]<stdout>:No database in results, objects not saved on processor #16
[1,17]<stdout>:No database in results, objects not saved on processor #17
[1,15]<stdout>:No database in results, objects not saved on processor #15
[1,11]<stdout>:No database in results, objects not saved on processor #11
[1,8]<stdout>:No database in results, objects not saved on processor #8
[1,13]<stdout>:No database in results, objects not saved on processor #13
[1,6]<stdout>:No database in results, objects not saved on processor #6
[1,21]<stdout>:No database in results, objects not saved on processor #21
[1,7]<stdout>:No database in results, objects not saved on processor #7
[1,0]<stdout>:No database in results, objects not saved on processor #0
[1,0]<stdout>:****************************************************************************************************************************************************************
[1,0]<stdout>:***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
[1,0]<stdout>:****************************************************************************************************************************************************************
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------------ PETSc Performance Summary: ------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:petsc_aster on a  named 8b87b9d0b29a with 24 processors, by Unknown Thu Jan 23 16:33:13 2025
[1,0]<stdout>:Using 1 OpenMP threads
[1,0]<stdout>:Using Petsc Release Version 3.20.5, unknown 
[1,0]<stdout>:
[1,0]<stdout>:                         Max       Max/Min     Avg       Total
[1,0]<stdout>:Time (sec):           1.912e+01     1.000   1.912e+01
[1,0]<stdout>:Objects:              0.000e+00     0.000   0.000e+00
[1,0]<stdout>:Flops:                9.879e+09     1.205   8.915e+09  2.140e+11
[1,0]<stdout>:Flops/sec:            5.166e+08     1.205   4.663e+08  1.119e+10
[1,0]<stdout>:MPI Msg Count:        9.962e+03     2.958   6.304e+03  1.513e+05
[1,0]<stdout>:MPI Msg Len (bytes):  1.291e+08     2.276   1.455e+04  2.201e+09
[1,0]<stdout>:MPI Reductions:       1.182e+03     1.000
[1,0]<stdout>:
[1,0]<stdout>:Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
[1,0]<stdout>:                            e.g., VecAXPY() for real vectors of length N --> 2N flops
[1,0]<stdout>:                            and VecAXPY() for complex vectors of length N --> 8N flops
[1,0]<stdout>:
[1,0]<stdout>:Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
[1,0]<stdout>:                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
[1,0]<stdout>: 0:      Main Stage: 1.9121e+01 100.0%  2.1396e+11 100.0%  1.513e+05 100.0%  1.455e+04      100.0%  1.164e+03  98.5%
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:See the 'Profiling' chapter of the users' manual for details on interpreting output.
[1,0]<stdout>:Phase summary info:
[1,0]<stdout>:   Count: number of times phase was executed
[1,0]<stdout>:   Time and Flop: Max - maximum over all processors
[1,0]<stdout>:                  Ratio - ratio of maximum to minimum over all processors
[1,0]<stdout>:   Mess: number of messages sent
[1,0]<stdout>:   AvgLen: average message length (bytes)
[1,0]<stdout>:   Reduct: number of global reductions
[1,0]<stdout>:   Global: entire computation
[1,0]<stdout>:   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
[1,0]<stdout>:      %T - percent time in this phase         %F - percent flop in this phase
[1,0]<stdout>:      %M - percent messages in this phase     %L - percent message lengths in this phase
[1,0]<stdout>:      %R - percent reductions in this phase
[1,0]<stdout>:   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
[1,0]<stdout>:                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:--- Event Stage 0: Main Stage
[1,0]<stdout>:
[1,0]<stdout>:BuildTwoSided        244 1.0 5.1838e-01 17.8 0.00e+00 0.0 1.1e+04 4.0e+00 2.4e+02  2  0  7  0 21   2  0  7  0 21     0
[1,0]<stdout>:BuildTwoSidedF       184 1.0 5.1111e-01 17.8 0.00e+00 0.0 5.2e+03 1.0e+05 1.8e+02  2  0  3 24 16   2  0  3 24 16     0
[1,0]<stdout>:MatMult              366 1.0 2.3271e+00 1.1 6.01e+09 1.2 7.6e+04 1.1e+04 0.0e+00 12 61 50 39  0  12 61 50 39  0 56475
[1,0]<stdout>:MatMultAdd            72 1.0 1.1494e-01 1.1 2.48e+08 1.2 1.1e+04 1.3e+03 0.0e+00  1  3  7  1  0   1  3  7  1  0 47268
[1,0]<stdout>:MatMultTranspose      72 1.0 1.5781e-01 1.4 2.48e+08 1.2 1.1e+04 1.3e+03 0.0e+00  1  3  7  1  0   1  3  7  1  0 34439
[1,0]<stdout>:MatSolve              18 0.0 4.5839e-05 0.0 3.19e+04 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0   695
[1,0]<stdout>:MatLUFactorSym         1 1.0 1.2634e-05 3.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatLUFactorNum         1 1.0 1.0974e-05 18.8 1.76e+04 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0  1600
[1,0]<stdout>:MatConvert             1 1.0 2.0527e-02 1.1 0.00e+00 0.0 3.7e+02 2.7e+03 1.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatScale               8 1.0 1.9255e-02 1.2 1.38e+07 1.2 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 15676
[1,0]<stdout>:MatResidual           72 1.0 3.6985e-01 1.0 9.35e+08 1.2 1.5e+04 9.2e+03 0.0e+00  2 10 10  6  0   2 10 10  6  0 55304
[1,0]<stdout>:MatAssemblyBegin     102 1.0 5.3637e-01 4.3 0.00e+00 0.0 5.2e+03 1.0e+05 5.3e+01  2  0  3 24  4   2  0  3 24  5     0
[1,0]<stdout>:MatAssemblyEnd       102 1.0 3.1412e-01 1.0 1.70e+06 3.0 1.3e+04 7.0e+02 2.2e+02  2  0  8  0 19   2  0  8  0 19    80
[1,0]<stdout>:MatGetRowIJ            1 0.0 1.8960e-06 0.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatCreateSubMat        4 1.0 6.2062e-03 1.0 0.00e+00 0.0 7.7e+02 2.9e+03 6.0e+01  0  0  1  0  5   0  0  1  0  5     0
[1,0]<stdout>:MatGetOrdering         1 0.0 1.9305e-05 0.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatCoarsen             4 1.0 1.4896e-01 1.0 6.87e+06 1.2 1.5e+04 1.2e+03 1.8e+02  1  0 10  1 15   1  0 10  1 15  1011
[1,0]<stdout>:MatZeroEntries         5 1.0 1.0362e-02 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatAXPY                8 1.0 1.4699e-01 1.1 4.47e+06 1.2 1.7e+03 6.8e+02 2.8e+01  1  0  1  0  2   1  0  1  0  2   669
[1,0]<stdout>:MatTranspose          18 1.0 1.1882e-01 1.1 0.00e+00 0.0 7.8e+03 5.8e+03 7.2e+01  1  0  5  2  6   1  0  5  2  6     0
[1,0]<stdout>:MatMatMultSym         15 1.0 7.3211e-01 1.1 0.00e+00 0.0 4.5e+03 1.6e+04 5.0e+01  4  0  3  3  4   4  0  3  3  4     0
[1,0]<stdout>:MatMatMultNum         15 1.0 6.4795e-01 1.2 1.33e+09 1.3 9.3e+02 5.0e+04 5.0e+00  3 13  1  2  0   3 13  1  2  0 43070
[1,0]<stdout>:MatPtAPSymbolic        5 1.0 1.5854e+00 1.0 0.00e+00 0.0 5.6e+03 1.0e+05 3.5e+01  8  0  4 26  3   8  0  4 26  3     0
[1,0]<stdout>:MatPtAPNumeric         5 1.0 1.3977e+00 1.0 2.47e+09 1.3 4.3e+03 1.1e+05 3.0e+01  7 24  3 21  3   7 24  3 21  3 36998
[1,0]<stdout>:MatGetLocalMat        15 1.0 7.7103e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatGetBrAoCol         15 1.0 4.3322e-02 1.3 0.00e+00 0.0 6.8e+03 8.4e+04 0.0e+00  0  0  4 26  0   0  0  4 26  0     0
[1,0]<stdout>:VecMDot               61 1.0 1.3751e-01 4.5 1.40e+08 1.1 0.0e+00 0.0e+00 6.1e+01  0  1  0  0  5   0  1  0  0  5 22441
[1,0]<stdout>:VecNorm               87 1.0 4.9419e-02 4.8 3.16e+07 1.1 0.0e+00 0.0e+00 8.7e+01  0  0  0  0  7   0  0  0  0  7 14156
[1,0]<stdout>:VecScale              66 1.0 4.6105e-03 1.2 9.70e+06 1.1 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 46535
[1,0]<stdout>:VecCopy              240 1.0 1.2660e-02 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecSet               254 1.0 2.8155e-03 1.7 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecAXPY               23 1.0 5.3277e-03 1.3 1.17e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 48421
[1,0]<stdout>:VecAYPX              452 1.0 4.1436e-02 1.6 4.89e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  1  0  0  0   0  1  0  0  0 26130
[1,0]<stdout>:VecAXPBYCZ           144 1.0 1.7217e-02 1.6 5.38e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  1  0  0  0   0  1  0  0  0 69255
[1,0]<stdout>:VecMAXPY              84 1.0 1.0005e-01 1.3 2.56e+08 1.1 0.0e+00 0.0e+00 0.0e+00  0  3  0  0  0   0  3  0  0  0 56499
[1,0]<stdout>:VecAssemblyBegin     133 1.0 1.3902e-02 10.4 0.00e+00 0.0 0.0e+00 0.0e+00 1.3e+02  0  0  0  0 11   0  0  0  0 11     0
[1,0]<stdout>:VecAssemblyEnd       133 1.0 5.6350e-05 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecPointwiseMult     332 1.0 2.5588e-02 1.3 2.48e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 21488
[1,0]<stdout>:VecScatterBegin      642 1.0 2.1012e-02 2.3 0.00e+00 0.0 1.1e+05 8.5e+03 0.0e+00  0  0 70 41  0   0  0 70 41  0     0
[1,0]<stdout>:VecScatterEnd        642 1.0 3.2545e-01 8.2 1.05e+05 2.2 0.0e+00 0.0e+00 0.0e+00  1  0  0  0  0   1  0  0  0  0     6
[1,0]<stdout>:VecNormalize          47 1.0 1.0239e-02 1.8 1.25e+07 1.1 0.0e+00 0.0e+00 4.7e+01  0  0  0  0  4   0  0  0  0  4 27010
[1,0]<stdout>:SFSetGraph            60 1.0 9.6699e-04 2.3 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFSetUp               60 1.0 9.6048e-03 2.3 0.00e+00 0.0 1.7e+04 7.1e+02 6.0e+01  0  0 11  1  5   0  0 11  1  5     0
[1,0]<stdout>:SFBcastBegin          33 1.0 2.7550e-04 1.9 0.00e+00 0.0 7.1e+03 1.0e+03 0.0e+00  0  0  5  0  0   0  0  5  0  0     0
[1,0]<stdout>:SFBcastEnd            33 1.0 1.3068e-03 3.6 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFReduceBegin          8 1.0 7.7653e-05 2.2 0.00e+00 0.0 1.1e+03 1.0e+03 0.0e+00  0  0  1  0  0   0  0  1  0  0     0
[1,0]<stdout>:SFReduceEnd            8 1.0 1.2074e-04 1.6 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFPack               683 1.0 1.3066e-02 2.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFUnpack             683 1.0 2.9081e-04 1.6 1.05e+05 2.2 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0  6194
[1,0]<stdout>:KSPSetUp              11 1.0 2.6755e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:KSPSolve               1 1.0 2.6551e+00 1.0 6.42e+09 1.2 8.9e+04 9.0e+03 7.5e+01 14 66 59 37  6  14 66 59 37  6 52891
[1,0]<stdout>:KSPGMRESOrthog        58 1.0 1.7425e-01 2.8 2.65e+08 1.1 0.0e+00 0.0e+00 5.8e+01  1  3  0  0  5   1  3  0  0  5 33644
[1,0]<stdout>:PCSetUp_GAMG+          1 1.0 4.6079e+00 1.0 3.40e+09 1.3 5.7e+04 2.3e+04 7.5e+02 24 34 38 60 64  24 34 38 60 65 15653
[1,0]<stdout>: PCGAMGCreateG         4 1.0 3.6299e-01 1.0 2.68e+06 1.2 9.2e+03 4.9e+03 1.0e+02  2  0  6  2  8   2  0  6  2  9   161
[1,0]<stdout>: GAMG Coarsen          4 1.0 1.6825e-01 1.0 6.87e+06 1.2 1.5e+04 1.2e+03 1.8e+02  1  0 10  1 15   1  0 10  1 15   895
[1,0]<stdout>:  GAMG MIS/Agg         4 1.0 1.4898e-01 1.0 6.87e+06 1.2 1.5e+04 1.2e+03 1.8e+02  1  0 10  1 15   1  0 10  1 15  1011
[1,0]<stdout>: PCGAMGProl            4 1.0 1.4043e-01 1.0 0.00e+00 0.0 9.6e+03 4.1e+03 1.7e+02  1  0  6  2 14   1  0  6  2 15     0
[1,0]<stdout>:  GAMG Prol-col        4 1.0 6.0879e-02 1.0 0.00e+00 0.0 8.5e+03 1.6e+03 1.3e+02  0  0  6  1 11   0  0  6  1 11     0
[1,0]<stdout>:  GAMG Prol-lift       4 1.0 6.7353e-02 1.0 0.00e+00 0.0 1.1e+03 2.4e+04 2.4e+01  0  0  1  1  2   0  0  1  1  2     0
[1,0]<stdout>: PCGAMGOptProl         4 1.0 9.7846e-01 1.0 9.29e+08 1.2 1.3e+04 1.5e+04 1.3e+02  5 10  9  9 11   5 10  9  9 11 20799
[1,0]<stdout>:  GAMG smooth          4 1.0 6.9546e-01 1.0 3.27e+08 1.2 4.9e+03 2.5e+04 4.9e+01  4  3  3  5  4   4  3  3  5  4 10295
[1,0]<stdout>: PCGAMGCreateL         4 1.0 2.9452e+00 1.0 2.46e+09 1.3 9.4e+03 1.1e+05 1.6e+02 15 24  6 46 14  15 24  6 46 14 17509
[1,0]<stdout>:  GAMG PtAP            4 1.0 2.9328e+00 1.0 2.46e+09 1.3 8.5e+03 1.2e+05 5.3e+01 15 24  6 46  4  15 24  6 46  5 17583
[1,0]<stdout>:  GAMG Reduce          2 1.0 1.2494e-02 1.0 0.00e+00 0.0 9.1e+02 2.6e+03 1.1e+02  0  0  1  0  9   0  0  1  0  9     0
[1,0]<stdout>:PCGAMG Gal l00         1 1.0 2.0028e+00 1.0 1.69e+09 1.2 1.9e+03 2.3e+05 1.4e+01 10 17  1 20  1  10 17  1 20  1 18369
[1,0]<stdout>:PCGAMG Opt l00         1 1.0 5.1816e-01 1.0 2.82e+08 1.2 1.1e+03 8.3e+04 1.2e+01  3  3  1  4  1   3  3  1  4  1 11894
[1,0]<stdout>:PCGAMG Gal l01         1 1.0 6.6625e-01 1.0 5.43e+08 1.5 2.3e+03 1.8e+05 1.3e+01  3  5  2 19  1   3  5  2 19  1 15795
[1,0]<stdout>:PCGAMG Opt l01         1 1.0 3.9687e-02 1.0 2.09e+07 1.3 1.2e+03 1.3e+04 1.1e+01  0  0  1  1  1   0  0  1  1  1 11084
[1,0]<stdout>:PCGAMG Gal l02         1 1.0 2.6099e-01 1.0 2.80e+08 2.8 3.6e+03 4.3e+04 1.3e+01  1  2  2  7  1   1  2  2  7  1 16223
[1,0]<stdout>:PCGAMG Opt l02         1 1.0 2.0138e-02 1.0 1.19e+07 1.9 1.9e+03 5.9e+03 1.1e+01  0  0  1  1  1   0  0  1  1  1 10453
[1,0]<stdout>:PCGAMG Gal l03         1 1.0 2.8538e-03 1.0 2.50e+06 0.0 7.0e+02 3.3e+03 1.3e+01  0  0  0  0  1   0  0  0  0  1  7074
[1,0]<stdout>:PCGAMG Opt l03         1 1.0 1.1842e-03 1.0 5.61e+05 0.0 6.3e+02 1.4e+03 1.1e+01  0  0  0  0  1   0  0  0  0  1  3771
[1,0]<stdout>:PCSetUp                2 1.0 4.6080e+00 1.0 3.40e+09 1.3 5.7e+04 2.3e+04 7.5e+02 24 34 38 60 64  24 34 38 60 65 15653
[1,0]<stdout>:PCSetUpOnBlocks       18 1.0 1.0055e-04 1.5 1.76e+04 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0   175
[1,0]<stdout>:PCApply               18 1.0 1.7696e+00 1.0 4.33e+09 1.2 8.2e+04 7.1e+03 1.8e+01  9 44 54 27  2   9 44 54 27  2 53589
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Object Type          Creations   Destructions. Reports information only for process 0.
[1,0]<stdout>:
[1,0]<stdout>:--- Event Stage 0: Main Stage
[1,0]<stdout>:
[1,0]<stdout>:           Container    32             24
[1,0]<stdout>:              Matrix   188            142
[1,0]<stdout>:      Matrix Coarsen     4              4
[1,0]<stdout>:   Matrix Null Space     1              0
[1,0]<stdout>:              Vector   438            343
[1,0]<stdout>:           Index Set   121            110
[1,0]<stdout>:   Star Forest Graph    76             59
[1,0]<stdout>:       Krylov Solver    11              4
[1,0]<stdout>:      Preconditioner    11              4
[1,0]<stdout>:         PetscRandom     4              4
[1,0]<stdout>:    Distributed Mesh     8              4
[1,0]<stdout>:     Discrete System     8              4
[1,0]<stdout>:           Weak Form     8              4
[1,0]<stdout>:              Viewer     1              0
[1,0]<stdout>:========================================================================================================================
[1,0]<stdout>:Average time to get PetscTime(): 3.37e-08
[1,0]<stdout>:Average time for MPI_Barrier(): 5.1564e-06
[1,0]<stdout>:Average time for zero size MPI_Send(): 1.07654e-06
[1,0]<stdout>:#PETSc Option Table entries:
[1,0]<stdout>:-ksp_monitor_true_residual # (source: command line)
[1,0]<stdout>:-log_view # (source: command line)
[1,0]<stdout>:-pc_gamg_verbose 2 # (source: code)
[1,0]<stdout>:#End of PETSc Option Table entries
[1,0]<stdout>:Compiled without FORTRAN kernels
[1,0]<stdout>:Compiled with full precision matrices (default)
[1,0]<stdout>:sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
[1,0]<stdout>:Configure options: --with-debugging=0 --with-mpi=1 --with-ssl=0 --with-x=0 --with-64-bit-indices=0 --with-mumps-lib="-L/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/lib -lzmumps -ldmumps -lmumps_common -lpord -L/opt/aster/20240327/gcc13-openblas-ompi4/scotch-7.0.4/lib -lesmumps -lptscotch -lptscotcherr -lptscotcherrexit -lscotch -lscotcherr -lscotcherrexit -L/opt/aster/20240327/gcc13-openblas-ompi4/parmetis-4.0.3_aster3/lib -lparmetis" --with-mumps-include=/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/include --with-blaslapack-lib=-lopenblas --with-scalapack-lib="-L/opt/aster/20240327/gcc13-openblas-ompi4/scalapack-2.2.0/lib -lscalapack " --with-python=1 --with-petsc4py=1 --download-ml=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/pkg-trilinos-ml-v13.2.0.tar.gz --download-sowing=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/sowing_v1.1.26-p8.tar.gz --download-hypre=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/hypre_v2.29.0.tar.gz --download-superlu=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/SuperLU_v6.0.1.tar.gz --download-slepc=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/slepc-v3.20.1.tar.gz --download-slepc-configure-arguments="--with-slepc4py --download-arpack=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/arpack_3.9.0.tar.gz" --download-hpddm=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/hpddm_201eecd26177f88d7bb6287251877d8013fb64d2.tar.gz --with-openmp=1 --prefix=/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5 CC=mpicc CXX=mpicxx FC=mpif90 FCFLAGS=" -fallow-argument-mismatch" LIBS="-lgomp -lz"
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:Libraries compiled on 2025-01-23 15:23:23 on buildkitsandbox 
[1,0]<stdout>:Machine characteristics: Linux-5.10.230-223.885.amzn2.aarch64-aarch64-with-glibc2.40
[1,0]<stdout>:Using PETSc directory: /opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5
[1,0]<stdout>:Using PETSc arch: 
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using C compiler: mpicc  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -Wno-lto-type-mismatch -Wno-stringop-overflow -fstack-protector -fvisibility=hidden -g -O  -fopenmp 
[1,0]<stdout>:Using Fortran compiler: mpif90  -fPIC -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O   -fopenmp   -fopenmp
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using include paths: -I/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/include -I/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/include
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using C linker: mpicc
[1,0]<stdout>:Using Fortran linker: mpif90
[1,0]<stdout>:Using libraries: -Wl,-rpath,/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -lpetsc -Wl,-rpath,/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/scotch-7.0.4/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/parmetis-4.0.3_aster3/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/scalapack-2.2.0/lib -Wl,-rpath,/usr/lib/aarch64-linux-gnu/openmpi/lib/fortran/gfortran -L/usr/lib/aarch64-linux-gnu/openmpi/lib/fortran/gfortran -Wl,-rpath,/usr/lib/gcc/aarch64-linux-gnu/13 -L/usr/lib/gcc/aarch64-linux-gnu/13 -Wl,-rpath,/usr/lib/aarch64-linux-gnu -L/usr/lib/aarch64-linux-gnu -Wl,-rpath,/lib/aarch64-linux-gnu -L/lib/aarch64-linux-gnu -lHYPRE -lzmumps -ldmumps -lmumps_common -lpord -lesmumps -lptscotch -lptscotcherr -lptscotcherrexit -lscotch -lscotcherr -lscotcherrexit -lparmetis -lscalapack -lsuperlu -lml -lopenblas -lm -lgomp -lz -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lopen-rte -lopen-pal -lhwloc -levent_core -levent_pthreads -lgfortran -lm -lgfortran -lm -lgfortran -lgcc_s -lstdc++ -lgomp -lz
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:WARNING! There are options you set that were not used!
[1,0]<stdout>:WARNING! could be spelling mistake, etc!
[1,0]<stdout>:There is one unused database option. It is:
[1,0]<stdout>:Option left: name:-pc_gamg_verbose value: 2 source: code
[1,10]<stdout>:
[1,10]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,10]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,10]<stdout>: ║                                                                                                ║
[1,10]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,10]<stdout>: ║                                                                                                ║
[1,10]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,10]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,10]<stdout>: ║            aucune alarme                                                                       ║
[1,10]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,10]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,3]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,3]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,3]<stdout>: ║            aucune alarme                                                                       ║
[1,3]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,3]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,2]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,2]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,2]<stdout>: ║            aucune alarme                                                                       ║
[1,2]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,2]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,6]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,6]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,6]<stdout>: ║            aucune alarme                                                                       ║
[1,6]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,6]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,12]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,12]<stdout>: ║                                                                                                ║
[1,12]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,12]<stdout>: ║                                                                                                ║
[1,12]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,12]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,12]<stdout>: ║            aucune alarme                                                                       ║
[1,12]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,12]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,16]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,16]<stdout>: ║                                                                                                ║
[1,16]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,16]<stdout>: ║                                                                                                ║
[1,16]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,16]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,16]<stdout>: ║            aucune alarme                                                                       ║
[1,16]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,16]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,9]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,9]<stdout>: ║                                                                                                ║
[1,9]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,9]<stdout>: ║                                                                                                ║
[1,9]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,9]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,9]<stdout>: ║            aucune alarme                                                                       ║
[1,9]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,9]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,7]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,7]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,7]<stdout>: ║            aucune alarme                                                                       ║
[1,7]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,7]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,5]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,5]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,5]<stdout>: ║            aucune alarme                                                                       ║
[1,5]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,5]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,8]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,8]<stdout>: ║                                                                                                ║
[1,8]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,8]<stdout>: ║                                                                                                ║
[1,8]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,8]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,8]<stdout>: ║            aucune alarme                                                                       ║
[1,8]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,8]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,14]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,14]<stdout>: ║                                                                                                ║
[1,14]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,14]<stdout>: ║                                                                                                ║
[1,14]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,14]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,14]<stdout>: ║            aucune alarme                                                                       ║
[1,14]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,14]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,13]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,13]<stdout>: ║                                                                                                ║
[1,13]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,13]<stdout>: ║                                                                                                ║
[1,13]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,13]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,13]<stdout>: ║            aucune alarme                                                                       ║
[1,13]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,13]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,1]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,1]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,1]<stdout>: ║            aucune alarme                                                                       ║
[1,1]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,1]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,4]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,4]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,4]<stdout>: ║            aucune alarme                                                                       ║
[1,4]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,4]<stdout>:
[1,4]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,15]<stdout>:
[1,15]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,15]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,15]<stdout>: ║                                                                                                ║
[1,15]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,15]<stdout>: ║                                                                                                ║
[1,15]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,15]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,15]<stdout>: ║            aucune alarme                                                                       ║
[1,15]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,15]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,19]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,19]<stdout>: ║                                                                                                ║
[1,19]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,19]<stdout>: ║                                                                                                ║
[1,19]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,19]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,19]<stdout>: ║            aucune alarme                                                                       ║
[1,19]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,19]<stdout>:
[1,13]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,1]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,21]<stdout>:
[1,21]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,21]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,21]<stdout>: ║                                                                                                ║
[1,21]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,21]<stdout>: ║                                                                                                ║
[1,21]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,21]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,21]<stdout>: ║            aucune alarme                                                                       ║
[1,21]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,21]<stdout>:
[1,2]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,2]<stdout>:  
[1,6]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,12]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,9]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,23]<stdout>:
[1,23]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,23]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,23]<stdout>: ║                                                                                                ║
[1,23]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,23]<stdout>: ║                                                                                                ║
[1,23]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,23]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,23]<stdout>: ║            aucune alarme                                                                       ║
[1,23]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,23]<stdout>:
[1,23]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,0]<stdout>:
[1,0]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,0]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,0]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,0]<stdout>: ║            aucune alarme                                                                       ║
[1,0]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,0]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,20]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,20]<stdout>: ║                                                                                                ║
[1,20]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,20]<stdout>: ║                                                                                                ║
[1,20]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,20]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,20]<stdout>: ║            aucune alarme                                                                       ║
[1,20]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,20]<stdout>:
[1,20]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,7]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,7]<stdout>:  
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     540.29 Mo
[1,17]<stdout>:
[1,17]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,17]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,17]<stdout>: ║                                                                                                ║
[1,17]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,17]<stdout>: ║                                                                                                ║
[1,17]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,17]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,17]<stdout>: ║            aucune alarme                                                                       ║
[1,17]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,17]<stdout>:
[1,17]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,10]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,10]<stdout>:  
[1,10]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     541.18 Mo
[1,10]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     818.08 Mo
[1,10]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2191.60 Mo
[1,10]<stdout>:  
[1,10]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,10]<stdout>:  
[1,10]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,10]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  818  Mo.
[1,10]<stdout>:     TAILLE CUMULEE LIBEREE            :                  326  Mo.
[1,10]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1540880
[1,10]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1540342
[1,10]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,10]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,10]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,10]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,10]<stdout>:  
[1,10]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     541.18 Mo
[1,10]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,10]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,10]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     818.08 Mo
[1,10]<stdout>:     - LIMITE LES ACCES DISQUE
[1,10]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,10]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2191.60 Mo
[1,10]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,10]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,10]<stdout>:  
[1,18]<stdout>:
[1,18]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,18]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,18]<stdout>: ║                                                                                                ║
[1,18]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,18]<stdout>: ║                                                                                                ║
[1,18]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,18]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,18]<stdout>: ║            aucune alarme                                                                       ║
[1,18]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,18]<stdout>:
[1,18]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,11]<stdout>:
[1,11]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,11]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,11]<stdout>: ║                                                                                                ║
[1,11]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,11]<stdout>: ║                                                                                                ║
[1,11]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,11]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,11]<stdout>: ║            aucune alarme                                                                       ║
[1,11]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,11]<stdout>:
[1,11]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,3]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,3]<stdout>:  
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     532.29 Mo
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     780.82 Mo
[1,3]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2069.58 Mo
[1,3]<stdout>:  
[1,3]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,3]<stdout>:  
[1,3]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,3]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  781  Mo.
[1,3]<stdout>:     TAILLE CUMULEE LIBEREE            :                  314  Mo.
[1,3]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1434897
[1,3]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1434362
[1,3]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,3]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,3]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,3]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,3]<stdout>:  
[1,3]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     532.29 Mo
[1,3]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,3]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,3]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     780.82 Mo
[1,3]<stdout>:     - LIMITE LES ACCES DISQUE
[1,3]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,3]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2069.58 Mo
[1,3]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,3]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,3]<stdout>:  
[1,22]<stdout>:
[1,22]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,22]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,22]<stdout>: ║                                                                                                ║
[1,22]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,22]<stdout>: ║                                                                                                ║
[1,22]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,22]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,22]<stdout>: ║            aucune alarme                                                                       ║
[1,22]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,22]<stdout>:
[1,22]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,22]<stdout>:  
[1,5]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,5]<stdout>:  
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     535.87 Mo
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     796.23 Mo
[1,5]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2100.26 Mo
[1,5]<stdout>:  
[1,5]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,5]<stdout>:  
[1,5]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,5]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  796  Mo.
[1,5]<stdout>:     TAILLE CUMULEE LIBEREE            :                  318  Mo.
[1,5]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1469809
[1,5]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1469277
[1,5]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,5]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,5]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,5]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,5]<stdout>:  
[1,5]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     535.87 Mo
[1,5]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,5]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,5]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     796.23 Mo
[1,5]<stdout>:     - LIMITE LES ACCES DISQUE
[1,5]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,5]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2100.26 Mo
[1,5]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,5]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,5]<stdout>:  
[1,8]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,8]<stdout>:  
[1,8]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     537.83 Mo
[1,8]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     804.45 Mo
[1,8]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2134.48 Mo
[1,8]<stdout>:  
[1,8]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,8]<stdout>:  
[1,8]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,8]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  804  Mo.
[1,8]<stdout>:     TAILLE CUMULEE LIBEREE            :                  317  Mo.
[1,8]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1458097
[1,8]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1457557
[1,8]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,8]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,8]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,8]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,8]<stdout>:  
[1,8]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     537.83 Mo
[1,8]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,8]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,8]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     804.45 Mo
[1,8]<stdout>:     - LIMITE LES ACCES DISQUE
[1,8]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,8]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2134.48 Mo
[1,8]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,8]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,8]<stdout>:  
[1,14]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,14]<stdout>:  
[1,14]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     539.96 Mo
[1,14]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     813.01 Mo
[1,14]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2175.72 Mo
[1,14]<stdout>:  
[1,14]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,14]<stdout>:  
[1,14]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,14]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  813  Mo.
[1,14]<stdout>:     TAILLE CUMULEE LIBEREE            :                  325  Mo.
[1,14]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1528121
[1,14]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1527580
[1,14]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,14]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,14]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,14]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,14]<stdout>:  
[1,14]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     539.96 Mo
[1,14]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,14]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,14]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     813.01 Mo
[1,14]<stdout>:     - LIMITE LES ACCES DISQUE
[1,14]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,14]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2175.72 Mo
[1,14]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,14]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,14]<stdout>:  
[1,14]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,19]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,19]<stdout>:  
[1,19]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     536.09 Mo
[1,19]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     795.78 Mo
[1,19]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2111.90 Mo
[1,19]<stdout>:  
[1,19]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,19]<stdout>:  
[1,19]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,19]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  796  Mo.
[1,19]<stdout>:     TAILLE CUMULEE LIBEREE            :                  321  Mo.
[1,19]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1498748
[1,19]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1498216
[1,19]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,19]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,19]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,19]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,19]<stdout>:  
[1,19]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     536.09 Mo
[1,19]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,19]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,19]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     795.78 Mo
[1,19]<stdout>:     - LIMITE LES ACCES DISQUE
[1,19]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,19]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2111.90 Mo
[1,19]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,19]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,19]<stdout>:  
[1,13]<stdout>:  
[1,13]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     540.29 Mo
[1,13]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     814.03 Mo
[1,13]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2182.75 Mo
[1,13]<stdout>:  
[1,13]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,13]<stdout>:  
[1,13]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,13]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  814  Mo.
[1,13]<stdout>:     TAILLE CUMULEE LIBEREE            :                  324  Mo.
[1,13]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1515270
[1,13]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1514733
[1,13]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,13]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,13]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,13]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,13]<stdout>:  
[1,13]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     540.29 Mo
[1,13]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,13]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,13]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     814.03 Mo
[1,13]<stdout>:     - LIMITE LES ACCES DISQUE
[1,13]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,13]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2182.75 Mo
[1,13]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,13]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,13]<stdout>:  
[1,13]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,1]<stdout>:  
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     542.70 Mo
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     825.44 Mo
[1,1]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2226.22 Mo
[1,1]<stdout>:  
[1,1]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,1]<stdout>:  
[1,1]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,1]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  825  Mo.
[1,1]<stdout>:     TAILLE CUMULEE LIBEREE            :                  326  Mo.
[1,1]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1535303
[1,1]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1534752
[1,1]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,1]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,1]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,1]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,1]<stdout>:  
[1,1]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     542.70 Mo
[1,1]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,1]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,1]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     825.44 Mo
[1,1]<stdout>:     - LIMITE LES ACCES DISQUE
[1,1]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,1]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2226.22 Mo
[1,1]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,1]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,1]<stdout>:  
[1,1]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,21]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,21]<stdout>:  
[1,21]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     533.61 Mo
[1,21]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     786.20 Mo
[1,21]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2070.03 Mo
[1,21]<stdout>:  
[1,21]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,21]<stdout>:  
[1,21]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,21]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  786  Mo.
[1,21]<stdout>:     TAILLE CUMULEE LIBEREE            :                  313  Mo.
[1,21]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1423218
[1,21]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1422693
[1,21]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,21]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,21]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,21]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,21]<stdout>:  
[1,21]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     533.61 Mo
[1,21]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,21]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,21]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     786.20 Mo
[1,21]<stdout>:     - LIMITE LES ACCES DISQUE
[1,21]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,21]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2070.03 Mo
[1,21]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,21]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,21]<stdout>:  
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     532.86 Mo
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     783.59 Mo
[1,2]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2069.00 Mo
[1,2]<stdout>:  
[1,2]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,2]<stdout>:  
[1,2]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,2]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  784  Mo.
[1,2]<stdout>:     TAILLE CUMULEE LIBEREE            :                  312  Mo.
[1,2]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1419540
[1,2]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1419020
[1,2]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,2]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,2]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,2]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,2]<stdout>:  
[1,2]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     532.86 Mo
[1,2]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,2]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,2]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     783.59 Mo
[1,2]<stdout>:     - LIMITE LES ACCES DISQUE
[1,2]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,2]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2069.00 Mo
[1,2]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,2]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,2]<stdout>:  
[1,2]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,6]<stdout>:  
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     532.71 Mo
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     782.09 Mo
[1,6]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2068.65 Mo
[1,6]<stdout>:  
[1,6]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,6]<stdout>:  
[1,6]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,6]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  782  Mo.
[1,6]<stdout>:     TAILLE CUMULEE LIBEREE            :                  314  Mo.
[1,6]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1437767
[1,6]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1437244
[1,6]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,6]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,6]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,6]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,6]<stdout>:  
[1,6]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     532.71 Mo
[1,6]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,6]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,6]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     782.09 Mo
[1,6]<stdout>:     - LIMITE LES ACCES DISQUE
[1,6]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,6]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2068.65 Mo
[1,6]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,6]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,6]<stdout>:  
[1,6]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,16]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,16]<stdout>:  
[1,16]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     541.77 Mo
[1,16]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     820.44 Mo
[1,16]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2219.50 Mo
[1,16]<stdout>:  
[1,16]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,16]<stdout>:  
[1,16]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,16]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  820  Mo.
[1,16]<stdout>:     TAILLE CUMULEE LIBEREE            :                  327  Mo.
[1,16]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1541516
[1,16]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1540973
[1,16]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,16]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,16]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,16]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,16]<stdout>:  
[1,16]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     541.77 Mo
[1,16]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,16]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,16]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     820.44 Mo
[1,16]<stdout>:     - LIMITE LES ACCES DISQUE
[1,16]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,16]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2219.50 Mo
[1,16]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,16]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,16]<stdout>:  
[1,12]<stdout>:  
[1,12]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     530.52 Mo
[1,12]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     773.53 Mo
[1,12]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2031.24 Mo
[1,12]<stdout>:  
[1,12]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,12]<stdout>:  
[1,12]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,12]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  774  Mo.
[1,12]<stdout>:     TAILLE CUMULEE LIBEREE            :                  310  Mo.
[1,12]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1403531
[1,12]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1403010
[1,12]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,12]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,12]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,12]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,12]<stdout>:  
[1,12]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     530.52 Mo
[1,12]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,12]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,12]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     773.53 Mo
[1,12]<stdout>:     - LIMITE LES ACCES DISQUE
[1,12]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,12]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2031.24 Mo
[1,12]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,12]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,12]<stdout>:  
[1,12]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,9]<stdout>:  
[1,9]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     535.08 Mo
[1,9]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     792.07 Mo
[1,9]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2108.23 Mo
[1,9]<stdout>:  
[1,9]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,9]<stdout>:  
[1,9]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,9]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  792  Mo.
[1,9]<stdout>:     TAILLE CUMULEE LIBEREE            :                  316  Mo.
[1,9]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1448975
[1,9]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1448440
[1,9]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,9]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,9]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,9]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,9]<stdout>:  
[1,9]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     535.08 Mo
[1,9]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,9]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,9]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     792.07 Mo
[1,9]<stdout>:     - LIMITE LES ACCES DISQUE
[1,9]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,9]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2108.23 Mo
[1,9]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,9]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,9]<stdout>:  
[1,9]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,9]<stdout>:INFO './glob.1' deleted
[1,9]<stdout>:Deleting './glob.2': No such file or directory
[1,23]<stdout>:  
[1,23]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     535.53 Mo
[1,23]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     795.14 Mo
[1,23]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2103.80 Mo
[1,23]<stdout>:  
[1,23]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,23]<stdout>:  
[1,23]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,23]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  795  Mo.
[1,23]<stdout>:     TAILLE CUMULEE LIBEREE            :                  315  Mo.
[1,23]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1437831
[1,23]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1437293
[1,23]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,23]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,23]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,23]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,23]<stdout>:  
[1,23]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     535.53 Mo
[1,23]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,23]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,23]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     795.14 Mo
[1,23]<stdout>:     - LIMITE LES ACCES DISQUE
[1,23]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,23]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2103.80 Mo
[1,23]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,23]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,23]<stdout>:  
[1,23]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,0]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,0]<stdout>:  
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     537.90 Mo
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     804.16 Mo
[1,0]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2185.11 Mo
[1,0]<stdout>:  
[1,0]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,0]<stdout>:  
[1,0]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,0]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  804  Mo.
[1,0]<stdout>:     TAILLE CUMULEE LIBEREE            :                  635  Mo.
[1,0]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              4401452
[1,0]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              4400918
[1,0]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,0]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,0]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,0]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,0]<stdout>:  
[1,0]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     537.90 Mo
[1,0]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,0]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,0]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     804.16 Mo
[1,0]<stdout>:     - LIMITE LES ACCES DISQUE
[1,0]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,0]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2185.11 Mo
[1,0]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,0]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,0]<stdout>:  
[1,0]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,20]<stdout>:  
[1,20]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     536.56 Mo
[1,20]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     798.28 Mo
[1,20]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2113.24 Mo
[1,20]<stdout>:  
[1,20]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,20]<stdout>:  
[1,20]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,20]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  798  Mo.
[1,20]<stdout>:     TAILLE CUMULEE LIBEREE            :                  321  Mo.
[1,20]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1494400
[1,20]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1493874
[1,20]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,20]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,20]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,20]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,20]<stdout>:  
[1,20]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     536.56 Mo
[1,20]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,20]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,20]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     798.28 Mo
[1,20]<stdout>:     - LIMITE LES ACCES DISQUE
[1,20]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,20]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2113.24 Mo
[1,20]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,20]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,20]<stdout>:  
[1,20]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     814.13 Mo
[1,7]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2184.30 Mo
[1,7]<stdout>:  
[1,7]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,7]<stdout>:  
[1,7]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,7]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  814  Mo.
[1,7]<stdout>:     TAILLE CUMULEE LIBEREE            :                  326  Mo.
[1,7]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1540351
[1,7]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1539816
[1,7]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,7]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,7]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,7]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,7]<stdout>:  
[1,7]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     540.29 Mo
[1,7]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,7]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,7]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     814.13 Mo
[1,7]<stdout>:     - LIMITE LES ACCES DISQUE
[1,7]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,7]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2184.30 Mo
[1,7]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,7]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,7]<stdout>:  
[1,7]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,7]<stdout>:INFO './glob.1' deleted
[1,7]<stdout>:Deleting './glob.2': No such file or directory
[1,7]<stdout>:INFO './vola.1' deleted
[1,7]<stdout>:Deleting './vola.2': No such file or directory
[1,17]<stdout>:  
[1,17]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     532.52 Mo
[1,17]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     781.97 Mo
[1,17]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2100.34 Mo
[1,17]<stdout>:  
[1,17]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,17]<stdout>:  
[1,17]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,17]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  782  Mo.
[1,17]<stdout>:     TAILLE CUMULEE LIBEREE            :                  315  Mo.
[1,17]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1447282
[1,17]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1446758
[1,17]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,17]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,17]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,17]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,17]<stdout>:  
[1,17]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     532.52 Mo
[1,17]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,17]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,17]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     781.97 Mo
[1,17]<stdout>:     - LIMITE LES ACCES DISQUE
[1,17]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,17]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2100.34 Mo
[1,17]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,17]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,17]<stdout>:  
[1,17]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,10]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,10]<stdout>:INFO './glob.1' deleted
[1,10]<stdout>:Deleting './glob.2': No such file or directory
[1,10]<stdout>:INFO './vola.1' deleted
[1,10]<stdout>:Deleting './vola.2': No such file or directory
[1,18]<stdout>:  
[1,18]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     537.30 Mo
[1,18]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     802.32 Mo
[1,18]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2124.95 Mo
[1,18]<stdout>:  
[1,18]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,18]<stdout>:  
[1,18]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,18]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  802  Mo.
[1,18]<stdout>:     TAILLE CUMULEE LIBEREE            :                  316  Mo.
[1,18]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1447684
[1,18]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1447132
[1,18]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,18]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,18]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,18]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,18]<stdout>:  
[1,18]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     537.30 Mo
[1,18]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,18]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,18]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     802.32 Mo
[1,18]<stdout>:     - LIMITE LES ACCES DISQUE
[1,18]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,18]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2124.95 Mo
[1,18]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,18]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,18]<stdout>:  
[1,18]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,18]<stdout>:INFO './glob.1' deleted
[1,18]<stdout>:Deleting './glob.2': [1,11]<stdout>:  
[1,11]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     532.54 Mo
[1,11]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     781.40 Mo
[1,11]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2042.24 Mo
[1,11]<stdout>:  
[1,11]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,11]<stdout>:  
[1,11]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,11]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  781  Mo.
[1,11]<stdout>:     TAILLE CUMULEE LIBEREE            :                  315  Mo.
[1,11]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1444125
[1,11]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1443612
[1,11]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,11]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,11]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,11]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,11]<stdout>:  
[1,11]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     532.54 Mo
[1,11]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,11]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,11]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     781.40 Mo
[1,11]<stdout>:     - LIMITE LES ACCES DISQUE
[1,11]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,11]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2042.24 Mo
[1,11]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,11]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,11]<stdout>:  
[1,11]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,11]<stdout>:INFO './glob.1' deleted
[1,11]<stdout>:Deleting './glob.2': No such file or directory
[1,3]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,3]<stdout>:INFO './glob.1' deleted
[1,3]<stdout>:Deleting './glob.2': No such file or directory
[1,3]<stdout>:INFO './vola.1' deleted
[1,3]<stdout>:Deleting './vola.2': No such file or directory
[1,22]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     536.33 Mo
[1,22]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     797.33 Mo
[1,22]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2143.05 Mo
[1,22]<stdout>:  
[1,22]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,22]<stdout>:  
[1,22]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,22]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  797  Mo.
[1,22]<stdout>:     TAILLE CUMULEE LIBEREE            :                  322  Mo.
[1,22]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1510824
[1,22]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1510284
[1,22]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,22]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,22]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,22]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,22]<stdout>:  
[1,22]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     536.33 Mo
[1,22]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,22]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,22]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     797.33 Mo
[1,22]<stdout>:     - LIMITE LES ACCES DISQUE
[1,22]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,22]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2143.05 Mo
[1,22]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,22]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,22]<stdout>:  
[1,22]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,22]<stdout>:INFO './glob.1' deleted
[1,22]<stdout>:Deleting './glob.2': No such file or directory
[1,22]<stdout>:INFO './vola.1' deleted
[1,5]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,5]<stdout>:INFO './glob.1' deleted
[1,5]<stdout>:Deleting './glob.2': No such file or directory
[1,5]<stdout>:INFO './vola.1' deleted
[1,5]<stdout>:Deleting './vola.2': No such file or directory
[1,8]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,8]<stdout>:INFO './glob.1' deleted
[1,8]<stdout>:Deleting './glob.2': No such file or directory
[1,8]<stdout>:INFO './vola.1' deleted
[1,8]<stdout>:Deleting './vola.2': No such file or directory
[1,4]<stdout>:  
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     545.41 Mo
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     835.74 Mo
[1,4]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2263.09 Mo
[1,4]<stdout>:  
[1,4]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,4]<stdout>:  
[1,4]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,4]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  836  Mo.
[1,4]<stdout>:     TAILLE CUMULEE LIBEREE            :                  331  Mo.
[1,4]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1581563
[1,4]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1581001
[1,4]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,4]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,4]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,4]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,4]<stdout>:  
[1,4]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     545.41 Mo
[1,4]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,4]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,4]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     835.74 Mo
[1,4]<stdout>:     - LIMITE LES ACCES DISQUE
[1,4]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,4]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2263.09 Mo
[1,4]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,4]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,4]<stdout>:  
[1,4]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,4]<stdout>:INFO './glob.1' deleted
[1,4]<stdout>:Deleting './glob.2': No such file or directory
[1,4]<stdout>:INFO './vola.1' deleted
[1,4]<stdout>:Deleting './vola.2': No such file or directory
[1,15]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,15]<stdout>:  
[1,15]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     535.99 Mo
[1,15]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     796.21 Mo
[1,15]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    2128.61 Mo
[1,15]<stdout>:  
[1,15]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,15]<stdout>:  
[1,15]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,15]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  796  Mo.
[1,15]<stdout>:     TAILLE CUMULEE LIBEREE            :                  317  Mo.
[1,15]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1457050
[1,15]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1456518
[1,15]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,15]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,15]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,15]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,15]<stdout>:  
[1,15]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     535.99 Mo
[1,15]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,15]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,15]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     796.21 Mo
[1,15]<stdout>:     - LIMITE LES ACCES DISQUE
[1,15]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,15]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    2128.61 Mo
[1,15]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,15]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,15]<stdout>:  
[1,15]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,15]<stdout>:INFO './glob.1' deleted
[1,15]<stdout>:Deleting './glob.2': No such file or directory
[1,19]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,19]<stdout>:INFO './glob.1' deleted
[1,19]<stdout>:Deleting './glob.2': No such file or directory
[1,19]<stdout>:INFO './vola.1' deleted
[1,19]<stdout>:Deleting './vola.2': No such file or directory
[1,13]<stdout>:INFO './glob.1' deleted
[1,13]<stdout>:Deleting './glob.2': No such file or directory
[1,13]<stdout>:INFO './vola.1' deleted
[1,13]<stdout>:Deleting './vola.2': No such file or directory
[1,1]<stdout>:INFO './glob.1' deleted
[1,1]<stdout>:Deleting './glob.2': No such file or directory
[1,1]<stdout>:INFO './vola.1' deleted
[1,1]<stdout>:Deleting './vola.2': No such file or directory
[1,21]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,21]<stdout>:INFO './glob.1' deleted
[1,21]<stdout>:Deleting './glob.2': No such file or directory
[1,21]<stdout>:INFO './vola.1' deleted
[1,21]<stdout>:Deleting './vola.2': No such file or directory
[1,2]<stdout>:INFO './glob.1' deleted
[1,2]<stdout>:Deleting './glob.2': No such file or directory
[1,2]<stdout>:INFO './vola.1' deleted
[1,2]<stdout>:Deleting './vola.2': No such file or directory
[1,6]<stdout>:INFO './glob.1' deleted
[1,6]<stdout>:Deleting './glob.2': No such file or directory
[1,6]<stdout>:INFO './vola.1' deleted
[1,6]<stdout>:Deleting './vola.2': No such file or directory
[1,15]<stdout>:INFO './vola.1' deleted
[1,15]<stdout>:Deleting './vola.2': No such file or directory
[1,16]<stdout>: <I>       FIN D'EXECUTION LE : JE-23-JANV-2025 16:33:13
[1,16]<stdout>:INFO './glob.1' deleted
[1,16]<stdout>:Deleting './glob.2': No such file or directory
[1,16]<stdout>:INFO './vola.1' deleted
[1,16]<stdout>:Deleting './vola.2': No such file or directory
[1,12]<stdout>:INFO './glob.1' deleted
[1,12]<stdout>:Deleting './glob.2': No such file or directory
[1,12]<stdout>:INFO './vola.1' deleted
[1,12]<stdout>:Deleting './vola.2': No such file or directory
[1,9]<stdout>:INFO './vola.1' deleted
[1,9]<stdout>:Deleting './vola.2': No such file or directory
[1,23]<stdout>:INFO './glob.1' deleted
[1,23]<stdout>:Deleting './glob.2': No such file or directory
[1,23]<stdout>:INFO './vola.1' deleted
[1,23]<stdout>:Deleting './vola.2': No such file or directory
[1,0]<stdout>:INFO './glob.1' deleted
[1,0]<stdout>:Deleting './glob.2': No such file or directory
[1,0]<stdout>:INFO './vola.1' deleted
[1,0]<stdout>:Deleting './vola.2': No such file or directory
[1,20]<stdout>:INFO './glob.1' deleted
[1,20]<stdout>:Deleting './glob.2': No such file or directory
[1,20]<stdout>:INFO './vola.1' deleted
[1,20]<stdout>:Deleting './vola.2': No such file or directory
[1,17]<stdout>:INFO './glob.1' deleted
[1,17]<stdout>:Deleting './glob.2': No such file or directory
[1,17]<stdout>:INFO './vola.1' deleted
[1,17]<stdout>:Deleting './vola.2': No such file or directory
[1,18]<stdout>:No such file or directory
[1,18]<stdout>:INFO './vola.1' deleted
[1,18]<stdout>:Deleting './vola.2': No such file or directory
[1,11]<stdout>:INFO './vola.1' deleted
[1,11]<stdout>:Deleting './vola.2': No such file or directory
[1,22]<stdout>:Deleting './vola.2': No such file or directory
[1,14]<stdout>:INFO './glob.1' deleted
[1,14]<stdout>:Deleting './glob.2': No such file or directory
[1,14]<stdout>:INFO './vola.1' deleted
[1,14]<stdout>:Deleting './vola.2': No such file or directory
[1,6]<stdout>:
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * DEBUT                    :       0.01 :       0.20 :       0.21 :       0.22 *
[1,6]<stdout>: * CREA_MAILLAGE            :       1.66 :       0.61 :       2.27 :       2.27 *
[1,6]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,6]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.01 :       0.03 :       0.02 *
[1,6]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,6]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,6]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,6]<stdout>: * CALC_MATR_ELEM           :       0.81 :       0.03 :       0.84 :       0.84 *
[1,6]<stdout>: * NUME_DDL                 :       0.79 :       0.87 :       1.66 :       1.66 *
[1,6]<stdout>: * ASSE_MATRICE             :       0.43 :       0.05 :       0.48 :       0.49 *
[1,6]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.02 *
[1,6]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.04 *
[1,6]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,6]<stdout>: *  . check syntax          :       0.01 :       0.01 :       0.02 :       0.01 *
[1,6]<stdout>: *  . fortran               :       2.07 :       0.83 :       2.90 :       2.90 *
[1,6]<stdout>: *  . cleanup               :       0.13 :       0.01 :       0.14 :       0.13 *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * TOTAL_JOB                :      16.19 :       3.17 :      19.36 :      19.37 *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>: * DEBUT                    :       0.04 :       0.18 :       0.22 :       0.22 *
[1,13]<stdout>: * CREA_MAILLAGE            :       1.42 :       0.84 :       2.26 :       2.28 *
[1,13]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,13]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,13]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,13]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,13]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.05 *
[1,13]<stdout>: * CALC_MATR_ELEM           :       0.89 :       0.03 :       0.92 :       0.94 *
[1,13]<stdout>: * NUME_DDL                 :       0.63 :       0.95 :       1.58 :       1.56 *
[1,13]<stdout>: * ASSE_MATRICE             :       0.43 :       0.05 :       0.48 :       0.48 *
[1,13]<stdout>: * CREA_CHAMP               :       0.00 :       0.01 :       0.01 :       0.03 *
[1,13]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.04 *
[1,13]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,13]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,13]<stdout>: *  . fortran               :       1.84 :       1.03 :       2.87 :       2.90 *
[1,13]<stdout>: *  . cleanup               :       0.13 :       0.02 :       0.15 :       0.12 *
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>: * TOTAL_JOB                :      15.97 :       3.39 :      19.36 :      19.37 *
[1,13]<stdout>: ********************************************************************************
[1,13]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * DEBUT                    :       0.03 :       0.18 :       0.21 :       0.22 *
[1,1]<stdout>: * CREA_MAILLAGE            :       1.38 :       0.90 :       2.28 :       2.28 *
[1,1]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,1]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,1]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,1]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.06 *
[1,1]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.05 *
[1,1]<stdout>: * CALC_MATR_ELEM           :       0.92 :       0.04 :       0.96 :       0.96 *
[1,1]<stdout>: * NUME_DDL                 :       0.63 :       0.90 :       1.53 :       1.53 *
[1,1]<stdout>: * ASSE_MATRICE             :       0.43 :       0.05 :       0.48 :       0.49 *
[1,1]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.02 *
[1,1]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,1]<stdout>: * FIN                      :       0.06 :       0.00 :       0.06 :       0.05 *
[1,1]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,1]<stdout>: *  . fortran               :       1.83 :       1.09 :       2.92 :       2.90 *
[1,1]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.13 *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * TOTAL_JOB                :      15.85 :       3.52 :      19.37 :      19.38 *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>: * DEBUT                    :       0.03 :       0.19 :       0.22 :       0.22 *
[1,14]<stdout>: * CREA_MAILLAGE            :       1.33 :       0.94 :       2.27 :       2.28 *
[1,14]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,14]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,14]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,14]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,14]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,14]<stdout>: * CALC_MATR_ELEM           :       0.88 :       0.06 :       0.94 :       0.94 *
[1,14]<stdout>: * NUME_DDL                 :       0.73 :       0.83 :       1.56 :       1.56 *
[1,14]<stdout>: * ASSE_MATRICE             :       0.44 :       0.05 :       0.49 :       0.49 *
[1,14]<stdout>: * CREA_CHAMP               :       0.01 :       0.01 :       0.02 :       0.02 *
[1,14]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,14]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,14]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,14]<stdout>: *  . fortran               :       1.76 :       1.14 :       2.90 :       2.90 *
[1,14]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.14 *
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>: * TOTAL_JOB                :      16.00 :       3.36 :      19.36 :      19.37 *
[1,14]<stdout>: ********************************************************************************
[1,14]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>: * DEBUT                    :       0.02 :       0.20 :       0.22 :       0.22 *
[1,10]<stdout>: * CREA_MAILLAGE            :       1.37 :       0.90 :       2.27 :       2.28 *
[1,10]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,10]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,10]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,10]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,10]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.05 *
[1,10]<stdout>: * CALC_MATR_ELEM           :       0.92 :       0.02 :       0.94 :       0.94 *
[1,10]<stdout>: * NUME_DDL                 :       0.64 :       0.92 :       1.56 :       1.56 *
[1,10]<stdout>: * ASSE_MATRICE             :       0.44 :       0.03 :       0.47 :       0.49 *
[1,10]<stdout>: * CREA_CHAMP               :       0.01 :       0.03 :       0.04 :       0.02 *
[1,10]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,10]<stdout>: * FIN                      :       0.06 :       0.01 :       0.07 :       0.05 *
[1,10]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.02 *
[1,10]<stdout>: *  . fortran               :       1.80 :       1.14 :       2.94 :       2.90 *
[1,10]<stdout>: *  . cleanup               :       0.16 :       0.03 :       0.19 :       0.14 *
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>: * TOTAL_JOB                :      15.98 :       3.41 :      19.39 :      19.38 *
[1,10]<stdout>: ********************************************************************************
[1,10]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * DEBUT                    :       0.02 :       0.20 :       0.22 :       0.22 *
[1,3]<stdout>: * CREA_MAILLAGE            :       1.57 :       0.69 :       2.26 :       2.27 *
[1,3]<stdout>: * AFFE_MODELE              :       0.37 :       0.00 :       0.37 :       0.38 *
[1,3]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,3]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,3]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,3]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,3]<stdout>: * CALC_MATR_ELEM           :       0.82 :       0.02 :       0.84 :       0.84 *
[1,3]<stdout>: * NUME_DDL                 :       0.83 :       0.83 :       1.66 :       1.66 *
[1,3]<stdout>: * ASSE_MATRICE             :       0.45 :       0.04 :       0.49 :       0.49 *
[1,3]<stdout>: * CREA_CHAMP               :       0.00 :       0.02 :       0.02 :       0.02 *
[1,3]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,3]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,3]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.02 *
[1,3]<stdout>: *  . fortran               :       1.98 :       0.91 :       2.89 :       2.90 *
[1,3]<stdout>: *  . cleanup               :       0.13 :       0.00 :       0.13 :       0.14 *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * TOTAL_JOB                :      16.27 :       3.10 :      19.37 :      19.37 *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * DEBUT                    :       0.01 :       0.20 :       0.21 :       0.21 *
[1,5]<stdout>: * CREA_MAILLAGE            :       1.44 :       0.83 :       2.27 :       2.28 *
[1,5]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,5]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,5]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,5]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.05 *
[1,5]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.06 *
[1,5]<stdout>: * CALC_MATR_ELEM           :       0.84 :       0.05 :       0.89 :       0.89 *
[1,5]<stdout>: * NUME_DDL                 :       0.67 :       0.93 :       1.60 :       1.61 *
[1,5]<stdout>: * ASSE_MATRICE             :       0.45 :       0.03 :       0.48 :       0.48 *
[1,5]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.03 *
[1,5]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.04 *
[1,5]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,5]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.02 *
[1,5]<stdout>: *  . fortran               :       1.83 :       1.05 :       2.88 :       2.89 *
[1,5]<stdout>: *  . cleanup               :       0.12 :       0.00 :       0.12 :       0.14 *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * TOTAL_JOB                :      15.94 :       3.42 :      19.36 :      19.37 *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>: * DEBUT                    :       0.03 :       0.18 :       0.21 :       0.22 *
[1,8]<stdout>: * CREA_MAILLAGE            :       1.36 :       0.89 :       2.25 :       2.27 *
[1,8]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,8]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,8]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,8]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.05 *
[1,8]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.06 *
[1,8]<stdout>: * CALC_MATR_ELEM           :       0.87 :       0.03 :       0.90 :       0.91 *
[1,8]<stdout>: * NUME_DDL                 :       0.65 :       0.94 :       1.59 :       1.59 *
[1,8]<stdout>: * ASSE_MATRICE             :       0.43 :       0.05 :       0.48 :       0.48 *
[1,8]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.03 *
[1,8]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.04 *
[1,8]<stdout>: * FIN                      :       0.06 :       0.01 :       0.07 :       0.05 *
[1,8]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.03 *
[1,8]<stdout>: *  . fortran               :       1.79 :       1.09 :       2.88 :       2.89 *
[1,8]<stdout>: *  . cleanup               :       0.14 :       0.03 :       0.17 :       0.12 *
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>: * TOTAL_JOB                :      15.92 :       3.46 :      19.38 :      19.37 *
[1,8]<stdout>: ********************************************************************************
[1,8]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * DEBUT                    :       0.00 :       0.21 :       0.21 :       0.22 *
[1,4]<stdout>: * CREA_MAILLAGE            :       1.38 :       0.90 :       2.28 :       2.29 *
[1,4]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,4]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,4]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,4]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,4]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.06 *
[1,4]<stdout>: * CALC_MATR_ELEM           :       0.94 :       0.06 :       1.00 :       0.99 *
[1,4]<stdout>: * NUME_DDL                 :       0.53 :       0.97 :       1.50 :       1.50 *
[1,4]<stdout>: * ASSE_MATRICE             :       0.44 :       0.04 :       0.48 :       0.48 *
[1,4]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.03 *
[1,4]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,4]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,4]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.02 *
[1,4]<stdout>: *  . fortran               :       1.78 :       1.13 :       2.91 :       2.90 *
[1,4]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.12 *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * TOTAL_JOB                :      15.87 :       3.49 :      19.36 :      19.37 *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>: ********************************************************************************
[1,22]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,22]<stdout>: ********************************************************************************
[1,22]<stdout>: * DEBUT                    :       0.05 :       0.17 :       0.22 :       0.22 *
[1,22]<stdout>: * CREA_MAILLAGE            :       1.41 :       0.86 :       2.27 :       2.28 *
[1,22]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,22]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.01 :       0.03 :       0.02 *
[1,22]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,22]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,22]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,22]<stdout>: * CALC_MATR_ELEM           :       0.84 :       0.04 :       0.88 :       0.88 *
[1,22]<stdout>: * NUME_DDL                 :       0.69 :       0.92 :       1.61 :       1.62 *
[1,22]<stdout>: * ASSE_MATRICE             :       0.43 :       0.05 :       0.48 :       0.49 *
[1,22]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.02 *
[1,22]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,22]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,22]<stdout>: *  . check syntax          :       0.02 :       0.00 :       0.02 :       0.01 *
[1,22]<stdout>: *  . fortran               :       1.83 :       1.05 :       2.88 :       2.90 *
[1,22]<stdout>: *  . cleanup               :       0.12 :       0.01 :       0.13 :       0.13 *
[1,22]<stdout>: ********************************************************************************
[1,22]<stdout>: * TOTAL_JOB                :      16.08 :       3.29 :      19.37 :      19.38 *
[1,22]<stdout>: ********************************************************************************
[1,22]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>: ********************************************************************************
[1,19]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,19]<stdout>: ********************************************************************************
[1,19]<stdout>: * DEBUT                    :       0.03 :       0.18 :       0.21 :       0.22 *
[1,19]<stdout>: * CREA_MAILLAGE            :       1.43 :       0.84 :       2.27 :       2.27 *
[1,19]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,19]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,19]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,19]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.05 *
[1,19]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.06 *
[1,19]<stdout>: * CALC_MATR_ELEM           :       0.85 :       0.03 :       0.88 :       0.88 *
[1,19]<stdout>: * NUME_DDL                 :       0.74 :       0.89 :       1.63 :       1.62 *
[1,19]<stdout>: * ASSE_MATRICE             :       0.43 :       0.05 :       0.48 :       0.49 *
[1,19]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.02 *
[1,19]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,19]<stdout>: * FIN                      :       0.06 :       0.00 :       0.06 :       0.05 *
[1,19]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,19]<stdout>: *  . fortran               :       1.87 :       1.04 :       2.91 :       2.89 *
[1,19]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.14 *
[1,19]<stdout>: ********************************************************************************
[1,19]<stdout>: * TOTAL_JOB                :      16.19 :       3.18 :      19.37 :      19.37 *
[1,19]<stdout>: ********************************************************************************
[1,19]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>: ********************************************************************************
[1,21]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,21]<stdout>: ********************************************************************************
[1,21]<stdout>: * DEBUT                    :       0.02 :       0.20 :       0.22 :       0.21 *
[1,21]<stdout>: * CREA_MAILLAGE            :       1.47 :       0.79 :       2.26 :       2.27 *
[1,21]<stdout>: * AFFE_MODELE              :       0.37 :       0.01 :       0.38 :       0.38 *
[1,21]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,21]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,21]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.05 *
[1,21]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.06 *
[1,21]<stdout>: * CALC_MATR_ELEM           :       0.84 :       0.02 :       0.86 :       0.85 *
[1,21]<stdout>: * NUME_DDL                 :       0.73 :       0.92 :       1.65 :       1.65 *
[1,21]<stdout>: * ASSE_MATRICE             :       0.44 :       0.04 :       0.48 :       0.48 *
[1,21]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.03 *
[1,21]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.04 *
[1,21]<stdout>: * FIN                      :       0.06 :       0.01 :       0.07 :       0.05 *
[1,21]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.03 *
[1,21]<stdout>: *  . fortran               :       1.87 :       1.02 :       2.89 :       2.89 *
[1,21]<stdout>: *  . cleanup               :       0.14 :       0.03 :       0.17 :       0.13 *
[1,21]<stdout>: ********************************************************************************
[1,21]<stdout>: * TOTAL_JOB                :      16.12 :       3.26 :      19.38 :      19.38 *
[1,21]<stdout>: ********************************************************************************
[1,21]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * DEBUT                    :       0.04 :       0.19 :       0.23 :       0.21 *
[1,2]<stdout>: * CREA_MAILLAGE            :       1.48 :       0.78 :       2.26 :       2.27 *
[1,2]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,2]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,2]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,2]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,2]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,2]<stdout>: * CALC_MATR_ELEM           :       0.82 :       0.03 :       0.85 :       0.85 *
[1,2]<stdout>: * NUME_DDL                 :       0.71 :       0.95 :       1.66 :       1.65 *
[1,2]<stdout>: * ASSE_MATRICE             :       0.44 :       0.04 :       0.48 :       0.49 *
[1,2]<stdout>: * CREA_CHAMP               :       0.00 :       0.02 :       0.02 :       0.02 *
[1,2]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,2]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,2]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.02 *
[1,2]<stdout>: *  . fortran               :       1.91 :       0.98 :       2.89 :       2.89 *
[1,2]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.13 *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * TOTAL_JOB                :      16.16 :       3.20 :      19.36 :      19.37 *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>: * DEBUT                    :       0.02 :       0.20 :       0.22 :       0.22 *
[1,15]<stdout>: * CREA_MAILLAGE            :       1.36 :       0.89 :       2.25 :       2.27 *
[1,15]<stdout>: * AFFE_MODELE              :       0.38 :       0.01 :       0.39 :       0.38 *
[1,15]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,15]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,15]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,15]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,15]<stdout>: * CALC_MATR_ELEM           :       0.85 :       0.02 :       0.87 :       0.88 *
[1,15]<stdout>: * NUME_DDL                 :       0.64 :       0.98 :       1.62 :       1.62 *
[1,15]<stdout>: * ASSE_MATRICE             :       0.45 :       0.04 :       0.49 :       0.49 *
[1,15]<stdout>: * CREA_CHAMP               :       0.00 :       0.02 :       0.02 :       0.02 *
[1,15]<stdout>: * CALC_CHAR_CINE           :       0.04 :       0.00 :       0.04 :       0.04 *
[1,15]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,15]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,15]<stdout>: *  . fortran               :       1.76 :       1.11 :       2.87 :       2.90 *
[1,15]<stdout>: *  . cleanup               :       0.13 :       0.00 :       0.13 :       0.14 *
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>: * TOTAL_JOB                :      15.91 :       3.45 :      19.36 :      19.37 *
[1,15]<stdout>: ********************************************************************************
[1,15]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>: ********************************************************************************
[1,16]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,16]<stdout>: ********************************************************************************
[1,16]<stdout>: * DEBUT                    :       0.02 :       0.19 :       0.21 :       0.22 *
[1,16]<stdout>: * CREA_MAILLAGE            :       1.44 :       0.84 :       2.28 :       2.28 *
[1,16]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,16]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,16]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,16]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.06 *
[1,16]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.05 *
[1,16]<stdout>: * CALC_MATR_ELEM           :       0.90 :       0.05 :       0.95 :       0.95 *
[1,16]<stdout>: * NUME_DDL                 :       0.63 :       0.92 :       1.55 :       1.55 *
[1,16]<stdout>: * ASSE_MATRICE             :       0.44 :       0.04 :       0.48 :       0.48 *
[1,16]<stdout>: * CREA_CHAMP               :       0.02 :       0.01 :       0.03 :       0.03 *
[1,16]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,16]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,16]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.03 *
[1,16]<stdout>: *  . fortran               :       1.86 :       1.04 :       2.90 :       2.90 *
[1,16]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.12 *
[1,16]<stdout>: ********************************************************************************
[1,16]<stdout>: * TOTAL_JOB                :      16.04 :       3.32 :      19.36 :      19.37 *
[1,16]<stdout>: ********************************************************************************
[1,16]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>: * DEBUT                    :       0.00 :       0.21 :       0.21 :       0.22 *
[1,12]<stdout>: * CREA_MAILLAGE            :       1.69 :       0.57 :       2.26 :       2.26 *
[1,12]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,12]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,12]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,12]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,12]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.06 *
[1,12]<stdout>: * CALC_MATR_ELEM           :       0.77 :       0.05 :       0.82 :       0.81 *
[1,12]<stdout>: * NUME_DDL                 :       0.79 :       0.90 :       1.69 :       1.69 *
[1,12]<stdout>: * ASSE_MATRICE             :       0.43 :       0.05 :       0.48 :       0.49 *
[1,12]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.02 *
[1,12]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.01 :       0.03 :       0.04 *
[1,12]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,12]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,12]<stdout>: *  . fortran               :       2.08 :       0.80 :       2.88 :       2.90 *
[1,12]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.14 *
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>: * TOTAL_JOB                :      16.35 :       3.02 :      19.37 :      19.37 *
[1,12]<stdout>: ********************************************************************************
[1,12]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>: * DEBUT                    :       0.03 :       0.17 :       0.20 :       0.22 *
[1,9]<stdout>: * CREA_MAILLAGE            :       1.45 :       0.82 :       2.27 :       2.27 *
[1,9]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,9]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,9]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,9]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.05 *
[1,9]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.06 *
[1,9]<stdout>: * CALC_MATR_ELEM           :       0.84 :       0.03 :       0.87 :       0.87 *
[1,9]<stdout>: * NUME_DDL                 :       0.87 :       0.76 :       1.63 :       1.63 *
[1,9]<stdout>: * ASSE_MATRICE             :       0.43 :       0.05 :       0.48 :       0.49 *
[1,9]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.02 *
[1,9]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.04 *
[1,9]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,9]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,9]<stdout>: *  . fortran               :       1.87 :       1.01 :       2.88 :       2.90 *
[1,9]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.13 *
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>: * TOTAL_JOB                :      16.28 :       3.09 :      19.37 :      19.37 *
[1,9]<stdout>: ********************************************************************************
[1,9]<stdout>:
[1,9]<stdout>:# Mémoire (Mo) :  2108.23 /  2065.62 /   792.07 /   535.08 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:
[1,23]<stdout>: ********************************************************************************
[1,23]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,23]<stdout>: ********************************************************************************
[1,23]<stdout>: * DEBUT                    :       0.03 :       0.19 :       0.22 :       0.22 *
[1,23]<stdout>: * CREA_MAILLAGE            :       1.38 :       0.88 :       2.26 :       2.27 *
[1,23]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,23]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,23]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,23]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,23]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,23]<stdout>: * CALC_MATR_ELEM           :       0.86 :       0.01 :       0.87 :       0.88 *
[1,23]<stdout>: * NUME_DDL                 :       0.70 :       0.92 :       1.62 :       1.62 *
[1,23]<stdout>: * ASSE_MATRICE             :       0.45 :       0.05 :       0.50 :       0.48 *
[1,23]<stdout>: * CREA_CHAMP               :       0.00 :       0.01 :       0.01 :       0.03 *
[1,23]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.04 *
[1,23]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,23]<stdout>: *  . check syntax          :       0.03 :       0.00 :       0.03 :       0.03 *
[1,23]<stdout>: *  . fortran               :       1.79 :       1.08 :       2.87 :       2.90 *
[1,23]<stdout>: *  . cleanup               :       0.13 :       0.01 :       0.14 :       0.13 *
[1,23]<stdout>: ********************************************************************************
[1,23]<stdout>: * TOTAL_JOB                :      16.15 :       3.21 :      19.36 :      19.38 *
[1,23]<stdout>: ********************************************************************************
[1,23]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * DEBUT                    :       0.02 :       0.20 :       0.22 :       0.21 *
[1,0]<stdout>: * DEFI_FICHIER             :       0.00 :       0.00 :       0.00 :       0.00 *
[1,0]<stdout>: * DEFI_FICHIER             :       0.00 :       0.00 :       0.00 :       0.00 *
[1,0]<stdout>: * CREA_MAILLAGE            :       1.49 :       0.78 :       2.27 :       2.28 *
[1,0]<stdout>: * AFFE_MODELE              :       0.35 :       0.00 :       0.35 :       0.35 *
[1,0]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,0]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,0]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,0]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,0]<stdout>: * CALC_MATR_ELEM           :       0.85 :       0.04 :       0.89 :       0.90 *
[1,0]<stdout>: * NUME_DDL                 :       0.83 :       0.77 :       1.60 :       1.60 *
[1,0]<stdout>: * ASSE_MATRICE             :       0.45 :       0.04 :       0.49 :       0.49 *
[1,0]<stdout>: * CREA_CHAMP               :       0.00 :       0.02 :       0.02 :       0.02 *
[1,0]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.04 *
[1,0]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,0]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,0]<stdout>: *  . fortran               :       1.87 :       1.00 :       2.87 :       2.85 *
[1,0]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.14 *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * TOTAL_JOB                :      15.96 :       3.39 :      19.35 :      19.37 *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * DEBUT                    :       0.02 :       0.20 :       0.22 :       0.22 *
[1,7]<stdout>: * CREA_MAILLAGE            :       1.41 :       0.87 :       2.28 :       2.28 *
[1,7]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,7]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,7]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,7]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.06 *
[1,7]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.05 *
[1,7]<stdout>: * CALC_MATR_ELEM           :       0.88 :       0.04 :       0.92 :       0.94 *
[1,7]<stdout>: * NUME_DDL                 :       0.74 :       0.84 :       1.58 :       1.56 *
[1,7]<stdout>: * ASSE_MATRICE             :       0.43 :       0.05 :       0.48 :       0.49 *
[1,7]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.02 *
[1,7]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.04 *
[1,7]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,7]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.01 *
[1,7]<stdout>: *  . fortran               :       1.82 :       1.09 :       2.91 :       2.90 *
[1,7]<stdout>: *  . cleanup               :       0.14 :       0.02 :       0.16 :       0.13 *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * TOTAL_JOB                :      15.95 :       3.43 :      19.38 :      19.37 *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>: ********************************************************************************
[1,17]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,17]<stdout>: ********************************************************************************
[1,17]<stdout>: * DEBUT                    :       0.02 :       0.20 :       0.22 :       0.22 *
[1,17]<stdout>: * CREA_MAILLAGE            :       1.45 :       0.81 :       2.26 :       2.27 *
[1,17]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,17]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,17]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,17]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,17]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,17]<stdout>: * CALC_MATR_ELEM           :       0.83 :       0.02 :       0.85 :       0.85 *
[1,17]<stdout>: * NUME_DDL                 :       0.73 :       0.92 :       1.65 :       1.65 *
[1,17]<stdout>: * ASSE_MATRICE             :       0.45 :       0.04 :       0.49 :       0.49 *
[1,17]<stdout>: * CREA_CHAMP               :       0.01 :       0.01 :       0.02 :       0.02 *
[1,17]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,17]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,17]<stdout>: *  . check syntax          :       0.02 :       0.01 :       0.03 :       0.02 *
[1,17]<stdout>: *  . fortran               :       1.86 :       1.01 :       2.87 :       2.90 *
[1,17]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.15 *
[1,17]<stdout>: ********************************************************************************
[1,17]<stdout>: * TOTAL_JOB                :      16.04 :       3.32 :      19.36 :      19.37 *
[1,17]<stdout>: ********************************************************************************
[1,17]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>: ********************************************************************************
[1,18]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,18]<stdout>: ********************************************************************************
[1,18]<stdout>: * DEBUT                    :       0.02 :       0.20 :       0.22 :       0.22 *
[1,18]<stdout>: * CREA_MAILLAGE            :       1.40 :       0.86 :       2.26 :       2.27 *
[1,18]<stdout>: * AFFE_MODELE              :       0.37 :       0.01 :       0.38 :       0.38 *
[1,18]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,18]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,18]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.05 *
[1,18]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.06 *
[1,18]<stdout>: * CALC_MATR_ELEM           :       0.87 :       0.02 :       0.89 :       0.90 *
[1,18]<stdout>: * NUME_DDL                 :       0.69 :       0.91 :       1.60 :       1.60 *
[1,18]<stdout>: * ASSE_MATRICE             :       0.44 :       0.06 :       0.50 :       0.49 *
[1,18]<stdout>: * CREA_CHAMP               :       0.00 :       0.01 :       0.01 :       0.02 *
[1,18]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.04 *
[1,18]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,18]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.03 *
[1,18]<stdout>: *  . fortran               :       1.79 :       1.08 :       2.87 :       2.88 *
[1,18]<stdout>: *  . cleanup               :       0.13 :       0.01 :       0.14 :       0.13 *
[1,18]<stdout>: ********************************************************************************
[1,18]<stdout>: * TOTAL_JOB                :      16.06 :       3.30 :      19.36 :      19.37 *
[1,18]<stdout>: ********************************************************************************
[1,18]<stdout>:
[1,18]<stdout>:# Mémoire (Mo) :  2124.95 /  2116.34 /   802.32 /   537.30 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>: * DEBUT                    :       0.02 :       0.20 :       0.22 :       0.22 *
[1,11]<stdout>: * CREA_MAILLAGE            :       1.38 :       0.87 :       2.25 :       2.27 *
[1,11]<stdout>: * AFFE_MODELE              :       0.38 :       0.01 :       0.39 :       0.38 *
[1,11]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,11]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,11]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,11]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,11]<stdout>: * CALC_MATR_ELEM           :       0.82 :       0.01 :       0.83 :       0.84 *
[1,11]<stdout>: * NUME_DDL                 :       0.79 :       0.87 :       1.66 :       1.66 *
[1,11]<stdout>: * ASSE_MATRICE             :       0.44 :       0.04 :       0.48 :       0.49 *
[1,11]<stdout>: * CREA_CHAMP               :       0.00 :       0.02 :       0.02 :       0.02 *
[1,11]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,11]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,11]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.02 *
[1,11]<stdout>: *  . fortran               :       1.79 :       1.09 :       2.88 :       2.90 *
[1,11]<stdout>: *  . cleanup               :       0.13 :       0.00 :       0.13 :       0.14 *
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>: * TOTAL_JOB                :      16.05 :       3.30 :      19.35 :      19.37 *
[1,11]<stdout>: ********************************************************************************
[1,11]<stdout>:
[1,13]<stdout>:# Mémoire (Mo) :  2182.75 /  2154.00 /   814.03 /   540.29 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :  2069.00 /  2030.27 /   783.59 /   532.86 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Mémoire (Mo) :  2219.50 /  2189.78 /   820.44 /   541.77 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Mémoire (Mo) :  2031.24 /  1987.77 /   773.53 /   530.52 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:
[1,20]<stdout>: ********************************************************************************
[1,20]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,20]<stdout>: ********************************************************************************
[1,20]<stdout>: * DEBUT                    :       0.01 :       0.21 :       0.22 :       0.22 *
[1,20]<stdout>: * CREA_MAILLAGE            :       1.38 :       0.87 :       2.25 :       2.27 *
[1,20]<stdout>: * AFFE_MODELE              :       0.38 :       0.00 :       0.38 :       0.38 *
[1,20]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,20]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,20]<stdout>: * AFFE_CHAR_CINE           :       0.05 :       0.00 :       0.05 :       0.05 *
[1,20]<stdout>: * AFFE_CHAR_CINE           :       0.06 :       0.00 :       0.06 :       0.06 *
[1,20]<stdout>: * CALC_MATR_ELEM           :       0.85 :       0.04 :       0.89 :       0.89 *
[1,20]<stdout>: * NUME_DDL                 :       0.76 :       0.85 :       1.61 :       1.61 *
[1,20]<stdout>: * ASSE_MATRICE             :       0.43 :       0.05 :       0.48 :       0.49 *
[1,20]<stdout>: * CREA_CHAMP               :       0.01 :       0.02 :       0.03 :       0.02 *
[1,20]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.01 :       0.04 :       0.04 *
[1,20]<stdout>: * FIN                      :       0.05 :       0.00 :       0.05 :       0.05 *
[1,20]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,20]<stdout>: *  . fortran               :       1.79 :       1.10 :       2.89 :       2.90 *
[1,20]<stdout>: *  . cleanup               :       0.13 :       0.00 :       0.13 :       0.13 *
[1,20]<stdout>: ********************************************************************************
[1,20]<stdout>: * TOTAL_JOB                :      15.87 :       3.49 :      19.36 :      19.37 *
[1,20]<stdout>: ********************************************************************************
[1,20]<stdout>:
[1,14]<stdout>:# Mémoire (Mo) :  2175.72 /  2162.04 /   813.01 /   539.96 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  2184.30 /  2157.06 /   814.13 /   540.29 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :  2191.60 /  2180.55 /   818.08 /   541.18 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.01s, elaps:        0.05s)
[1,3]<stdout>:# Mémoire (Mo) :  2069.58 /  2021.16 /   780.82 /   532.29 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  2100.26 /  2091.67 /   796.23 /   535.87 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  2134.48 /  2125.94 /   804.45 /   537.83 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.01s, elaps:        0.05s)
[1,4]<stdout>:# Mémoire (Mo) :  2263.09 /  2245.18 /   835.74 /   545.41 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,1]<stdout>:# Mémoire (Mo) :  2226.22 /  2200.02 /   825.44 /   542.70 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,22]<stdout>:# Mémoire (Mo) :  2143.05 /  2093.01 /   797.33 /   536.33 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  2068.65 /  2019.23 /   782.09 /   532.71 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Mémoire (Mo) :  2042.24 /  2031.10 /   781.40 /   532.54 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Mémoire (Mo) :  2111.90 /  2079.49 /   795.78 /   536.09 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Mémoire (Mo) :  2070.03 /  2031.38 /   786.20 /   533.61 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.01s, elaps:        0.05s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Mémoire (Mo) :  2128.61 /  2082.78 /   796.21 /   535.99 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Mémoire (Mo) :  2103.80 /  2095.36 /   795.14 /   535.53 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  2185.11 /  2119.70 /   804.16 /   537.90 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Mémoire (Mo) :  2113.24 /  2100.46 /   798.28 /   536.56 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,14]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Mémoire (Mo) :  2100.34 /  2028.98 /   781.97 /   532.52 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Fin commande #0013   user+syst:        0.06s (syst:        0.00s, elaps:        0.05s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0015   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0013   user+syst:        0.05s (syst:        0.00s, elaps:        0.05s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:End of the Code_Aster execution
[1,17]<stdout>:Code_Aster MPI exits normally
[1,17]<stdout>:Exited
[1,10]<stdout>:End of the Code_Aster execution
[1,10]<stdout>:Code_Aster MPI exits normally
[1,10]<stdout>:Exited
[1,3]<stdout>:End of the Code_Aster execution
[1,3]<stdout>:Code_Aster MPI exits normally
[1,3]<stdout>:Exited
[1,4]<stdout>:End of the Code_Aster execution
[1,4]<stdout>:Code_Aster MPI exits normally
[1,4]<stdout>:Exited
[1,1]<stdout>:End of the Code_Aster execution
[1,1]<stdout>:Code_Aster MPI exits normally
[1,1]<stdout>:Exited
[1,9]<stdout>:End of the Code_Aster execution
[1,9]<stdout>:Code_Aster MPI exits normally
[1,9]<stdout>:Exited
[1,23]<stdout>:End of the Code_Aster execution
[1,23]<stdout>:Code_Aster MPI exits normally
[1,23]<stdout>:Exited
[1,12]<stdout>:End of the Code_Aster execution
[1,12]<stdout>:Code_Aster MPI exits normally
[1,12]<stdout>:Exited
[1,11]<stdout>:End of the Code_Aster execution
[1,11]<stdout>:Code_Aster MPI exits normally
[1,11]<stdout>:Exited
[1,14]<stdout>:End of the Code_Aster execution
[1,14]<stdout>:Code_Aster MPI exits normally
[1,14]<stdout>:Exited
[1,0]<stdout>:End of the Code_Aster execution
[1,0]<stdout>:Code_Aster MPI exits normally
[1,0]<stdout>:Exited
[1,7]<stdout>:End of the Code_Aster execution
[1,7]<stdout>:Code_Aster MPI exits normally
[1,7]<stdout>:Exited
[1,20]<stdout>:End of the Code_Aster execution
[1,20]<stdout>:Code_Aster MPI exits normally
[1,20]<stdout>:Exited
[1,5]<stdout>:End of the Code_Aster execution
[1,5]<stdout>:Code_Aster MPI exits normally
[1,5]<stdout>:Exited
[1,8]<stdout>:End of the Code_Aster execution
[1,8]<stdout>:Code_Aster MPI exits normally
[1,8]<stdout>:Exited
[1,22]<stdout>:End of the Code_Aster execution
[1,22]<stdout>:Code_Aster MPI exits normally
[1,22]<stdout>:Exited
[1,21]<stdout>:End of the Code_Aster execution
[1,21]<stdout>:Code_Aster MPI exits normally
[1,21]<stdout>:Exited
[1,18]<stdout>:End of the Code_Aster execution
[1,18]<stdout>:Code_Aster MPI exits normally
[1,18]<stdout>:Exited
[1,13]<stdout>:End of the Code_Aster execution
[1,13]<stdout>:Code_Aster MPI exits normally
[1,13]<stdout>:Exited
[1,15]<stdout>:End of the Code_Aster execution
[1,15]<stdout>:Code_Aster MPI exits normally
[1,15]<stdout>:Exited
[1,2]<stdout>:End of the Code_Aster execution
[1,2]<stdout>:Code_Aster MPI exits normally
[1,2]<stdout>:Exited
[1,16]<stdout>:End of the Code_Aster execution
[1,16]<stdout>:Code_Aster MPI exits normally
[1,16]<stdout>:Exited
[1,19]<stdout>:End of the Code_Aster execution
[1,19]<stdout>:Code_Aster MPI exits normally
[1,19]<stdout>:Exited
[1,6]<stdout>:End of the Code_Aster execution
[1,6]<stdout>:Code_Aster MPI exits normally
[1,6]<stdout>:Exited
[1,12]<stdout>:
[1,12]<stdout>:EXECUTION_CODE_ASTER_EXIT_1315=0
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:execution ended (command file #1): OK
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Content of /tmp/run_aster_f89dw791/proc.12 after execution:
[1,12]<stdout>:.:
[1,12]<stdout>:total 28
[1,12]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1315.export
[1,12]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,12]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,12]<stdout>:-rw-r--r-- 1 aster aster 22317 Jan 23 16:33 fort.6
[1,12]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,12]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,12]<stdout>:
[1,12]<stdout>:REPE_OUT:
[1,12]<stdout>:total 0
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Execution summary
[1,12]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,12]<stdout>:Execution of code_aster             16.74       3.81      20.55      34.45
[1,12]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:Total                               16.74       3.81      20.55      34.45
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:EXECUTION_CODE_ASTER_EXIT_1270=0
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:execution ended (command file #1): OK
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Content of /tmp/run_aster_f89dw791/proc.3 after execution:
[1,3]<stdout>:.:
[1,3]<stdout>:total 28
[1,3]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1270.export
[1,3]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,3]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,3]<stdout>:-rw-r--r-- 1 aster aster 22316 Jan 23 16:33 fort.6
[1,3]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,3]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,3]<stdout>:
[1,3]<stdout>:REPE_OUT:
[1,3]<stdout>:total 0
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution summary
[1,3]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,3]<stdout>:Execution of code_aster             16.64       3.91      20.55      35.20
[1,3]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:Total                               16.64       3.91      20.55      35.20
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:EXECUTION_CODE_ASTER_EXIT_1310=0
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:execution ended (command file #1): OK
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Content of /tmp/run_aster_f89dw791/proc.11 after execution:
[1,11]<stdout>:.:
[1,11]<stdout>:total 28
[1,11]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1310.export
[1,11]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,11]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,11]<stdout>:-rw-r--r-- 1 aster aster 22271 Jan 23 16:33 fort.6
[1,11]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,11]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,11]<stdout>:
[1,11]<stdout>:REPE_OUT:
[1,11]<stdout>:total 0
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Execution summary
[1,11]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,11]<stdout>:Execution of code_aster             16.42       4.14      20.56      35.37
[1,11]<stdout>:Copying results                      0.01       0.00       0.01       0.00
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:Total                               16.43       4.14      20.57      35.37
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:EXECUTION_CODE_ASTER_EXIT_1340=0
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:execution ended (command file #1): OK
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Content of /tmp/run_aster_f89dw791/proc.17 after execution:
[1,17]<stdout>:.:
[1,17]<stdout>:total 28
[1,17]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1340.export
[1,17]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,17]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,17]<stdout>:-rw-r--r-- 1 aster aster 22317 Jan 23 16:33 fort.6
[1,17]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,17]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,17]<stdout>:
[1,17]<stdout>:REPE_OUT:
[1,17]<stdout>:total 0
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Execution summary
[1,17]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,17]<stdout>:Execution of code_aster             16.35       4.20      20.55      35.39
[1,17]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:Total                               16.35       4.20      20.55      35.39
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:EXECUTION_CODE_ASTER_EXIT_1285=0
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:execution ended (command file #1): OK
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Content of /tmp/run_aster_f89dw791/proc.6 after execution:
[1,6]<stdout>:.:
[1,6]<stdout>:total 28
[1,6]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1285.export
[1,6]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,6]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,6]<stdout>:-rw-r--r-- 1 aster aster 22316 Jan 23 16:33 fort.6
[1,6]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,6]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,6]<stdout>:
[1,6]<stdout>:REPE_OUT:
[1,6]<stdout>:total 0
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution summary
[1,6]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,6]<stdout>:Execution of code_aster             16.56       4.00      20.56      35.42
[1,6]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:Total                               16.56       4.00      20.56      35.42
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:EXECUTION_CODE_ASTER_EXIT_1264=0
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:execution ended (command file #1): OK
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Content of /tmp/run_aster_f89dw791/proc.2 after execution:
[1,2]<stdout>:.:
[1,2]<stdout>:total 28
[1,2]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1264.export
[1,2]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,2]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,2]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:33 fort.6
[1,2]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,2]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,2]<stdout>:
[1,2]<stdout>:REPE_OUT:
[1,2]<stdout>:total 0
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution summary
[1,2]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,2]<stdout>:Execution of code_aster             16.54       4.01      20.55      35.43
[1,2]<stdout>:Copying results                      0.00       0.00       0.00       0.01
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:Total                               16.54       4.01      20.55      35.44
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:EXECUTION_CODE_ASTER_EXIT_1358=0
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:execution ended (command file #1): OK
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Content of /tmp/run_aster_f89dw791/proc.21 after execution:
[1,21]<stdout>:.:
[1,21]<stdout>:total 28
[1,21]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1358.export
[1,21]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,21]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,21]<stdout>:-rw-r--r-- 1 aster aster 22270 Jan 23 16:33 fort.6
[1,21]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,21]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,21]<stdout>:
[1,21]<stdout>:REPE_OUT:
[1,21]<stdout>:total 0
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Execution summary
[1,21]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,21]<stdout>:Execution of code_aster             16.53       4.03      20.56      35.43
[1,21]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:Total                               16.53       4.03      20.56      35.43
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:EXECUTION_CODE_ASTER_EXIT_1300=0
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:execution ended (command file #1): OK
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Content of /tmp/run_aster_f89dw791/proc.9 after execution:
[1,9]<stdout>:.:
[1,9]<stdout>:total 28
[1,9]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1300.export
[1,9]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,9]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,9]<stdout>:-rw-r--r-- 1 aster aster 22315 Jan 23 16:33 fort.6
[1,9]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,9]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,9]<stdout>:
[1,9]<stdout>:REPE_OUT:
[1,9]<stdout>:total 0
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Execution summary
[1,9]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,9]<stdout>:Execution of code_aster             16.65       3.91      20.56      35.53
[1,9]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:Total                               16.65       3.91      20.56      35.53
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:EXECUTION_CODE_ASTER_EXIT_1362=0
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:execution ended (command file #1): OK
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Content of /tmp/run_aster_f89dw791/proc.23 after execution:
[1,23]<stdout>:.:
[1,23]<stdout>:total 28
[1,23]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1362.export
[1,23]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,23]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,23]<stdout>:-rw-r--r-- 1 aster aster 22147 Jan 23 16:33 fort.6
[1,23]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,23]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,23]<stdout>:
[1,23]<stdout>:REPE_OUT:
[1,23]<stdout>:total 0
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Execution summary
[1,23]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,23]<stdout>:Execution of code_aster             16.54       4.02      20.56      35.52
[1,23]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:Total                               16.54       4.02      20.56      35.52
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:EXECUTION_CODE_ASTER_EXIT_1350=0
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:execution ended (command file #1): OK
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Content of /tmp/run_aster_f89dw791/proc.19 after execution:
[1,19]<stdout>:.:
[1,19]<stdout>:total 28
[1,19]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1350.export
[1,19]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,19]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,19]<stdout>:-rw-r--r-- 1 aster aster 22317 Jan 23 16:33 fort.6
[1,19]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,19]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,19]<stdout>:
[1,19]<stdout>:REPE_OUT:
[1,19]<stdout>:total 0
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Execution summary
[1,19]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,19]<stdout>:Execution of code_aster             16.57       3.99      20.56      35.53
[1,19]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:Total                               16.57       3.99      20.56      35.53
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:EXECUTION_CODE_ASTER_EXIT_1361=0
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:execution ended (command file #1): OK
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Content of /tmp/run_aster_f89dw791/proc.22 after execution:
[1,22]<stdout>:.:
[1,22]<stdout>:total 28
[1,22]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1361.export
[1,22]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,22]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,22]<stdout>:-rw-r--r-- 1 aster aster 22317 Jan 23 16:33 fort.6
[1,22]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,22]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,22]<stdout>:
[1,22]<stdout>:REPE_OUT:
[1,22]<stdout>:total 0
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Execution summary
[1,22]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,22]<stdout>:Execution of code_aster             16.47       4.09      20.56      35.52
[1,22]<stdout>:Copying results                      0.00       0.00       0.00       0.01
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:Total                               16.47       4.09      20.56      35.53
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:EXECUTION_CODE_ASTER_EXIT_1330=0
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:execution ended (command file #1): OK
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Content of /tmp/run_aster_f89dw791/proc.15 after execution:
[1,15]<stdout>:.:
[1,15]<stdout>:total 28
[1,15]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1330.export
[1,15]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,15]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,15]<stdout>:-rw-r--r-- 1 aster aster 22270 Jan 23 16:33 fort.6
[1,15]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,15]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,15]<stdout>:
[1,15]<stdout>:REPE_OUT:
[1,15]<stdout>:total 0
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Execution summary
[1,15]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,15]<stdout>:Execution of code_aster             16.30       4.26      20.56      35.54
[1,15]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:Total                               16.30       4.26      20.56      35.54
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:EXECUTION_CODE_ASTER_EXIT_1354=0
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:execution ended (command file #1): OK
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Content of /tmp/run_aster_f89dw791/proc.20 after execution:
[1,18]<stdout>:
[1,18]<stdout>:EXECUTION_CODE_ASTER_EXIT_1345=0
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:execution ended (command file #1): OK
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Content of /tmp/run_aster_f89dw791/proc.18 after execution:
[1,20]<stdout>:.:
[1,20]<stdout>:total 28
[1,20]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1354.export
[1,20]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,20]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,20]<stdout>:-rw-r--r-- 1 aster aster 22270 Jan 23 16:33 fort.6
[1,20]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,20]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,20]<stdout>:
[1,20]<stdout>:REPE_OUT:
[1,20]<stdout>:total 0
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Execution summary
[1,20]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,20]<stdout>:Execution of code_aster             16.21       4.35      20.56      35.55
[1,20]<stdout>:Copying results                      0.01       0.01       0.02       0.00
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:Total                               16.22       4.36      20.58      35.55
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:.:
[1,18]<stdout>:total 28
[1,18]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1345.export
[1,18]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,18]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,18]<stdout>:-rw-r--r-- 1 aster aster 22147 Jan 23 16:33 fort.6
[1,18]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,18]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,18]<stdout>:
[1,18]<stdout>:REPE_OUT:
[1,18]<stdout>:total 0
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Execution summary
[1,18]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,18]<stdout>:Execution of code_aster             16.39       4.17      20.56      35.55
[1,18]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:Total                               16.39       4.17      20.56      35.55
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:EXECUTION_CODE_ASTER_EXIT_1254=0
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:execution ended (command file #1): OK
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Content of /tmp/run_aster_f89dw791/proc.0 after execution:
[1,0]<stdout>:.:
[1,0]<stdout>:total 68
[1,0]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1254.export
[1,0]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,0]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,0]<stdout>:-rw-r--r-- 1 aster aster 15367 Jan 23 16:33 asrun.log
[1,0]<stdout>:-rw-r--r-- 1 aster aster 45431 Jan 23 16:33 fort.6
[1,0]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,0]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,0]<stdout>:
[1,0]<stdout>:REPE_OUT:
[1,0]<stdout>:total 0
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution summary
[1,0]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,0]<stdout>:Execution of code_aster             16.36       4.21      20.57      35.58
[1,0]<stdout>:Copying results                      0.01       0.00       0.01       0.00
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:Total                               16.37       4.21      20.58      35.58
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------
[1,0]<stdout>:--- DIAGNOSTIC JOB : OK
[1,0]<stdout>:------------------------------------------------------------
[1,0]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:EXECUTION_CODE_ASTER_EXIT_1305=0
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:execution ended (command file #1): OK
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Content of /tmp/run_aster_f89dw791/proc.10 after execution:
[1,10]<stdout>:.:
[1,10]<stdout>:total 28
[1,10]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1305.export
[1,10]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,10]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,10]<stdout>:-rw-r--r-- 1 aster aster 22273 Jan 23 16:33 fort.6
[1,10]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,10]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,10]<stdout>:
[1,10]<stdout>:REPE_OUT:
[1,10]<stdout>:total 0
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Execution summary
[1,10]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,10]<stdout>:Execution of code_aster             16.35       4.21      20.56      35.58
[1,10]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:Total                               16.35       4.21      20.56      35.58
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:EXECUTION_CODE_ASTER_EXIT_1295=0
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:execution ended (command file #1): OK
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Content of /tmp/run_aster_f89dw791/proc.8 after execution:
[1,5]<stdout>:
[1,5]<stdout>:EXECUTION_CODE_ASTER_EXIT_1280=0
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:execution ended (command file #1): OK
[1,8]<stdout>:.:
[1,8]<stdout>:total 28
[1,8]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1295.export
[1,8]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,8]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,8]<stdout>:-rw-r--r-- 1 aster aster 22146 Jan 23 16:33 fort.6
[1,8]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,8]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,8]<stdout>:
[1,8]<stdout>:REPE_OUT:
[1,8]<stdout>:total 0
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Execution summary
[1,8]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,8]<stdout>:Execution of code_aster             16.26       4.30      20.56      35.59
[1,8]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:Total                               16.26       4.30      20.56      35.59
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Content of /tmp/run_aster_f89dw791/proc.5 after execution:
[1,5]<stdout>:.:
[1,5]<stdout>:total 28
[1,5]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1280.export
[1,5]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,5]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,5]<stdout>:-rw-r--r-- 1 aster aster 22269 Jan 23 16:33 fort.6
[1,5]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,5]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,5]<stdout>:
[1,5]<stdout>:REPE_OUT:
[1,5]<stdout>:total 0
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution summary
[1,5]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,5]<stdout>:Execution of code_aster             16.31       4.25      20.56      35.59
[1,5]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:Total                               16.31       4.25      20.56      35.59
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:EXECUTION_CODE_ASTER_EXIT_1289=0
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:execution ended (command file #1): OK
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Content of /tmp/run_aster_f89dw791/proc.7 after execution:
[1,16]<stdout>:
[1,16]<stdout>:EXECUTION_CODE_ASTER_EXIT_1335=0
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:execution ended (command file #1): OK
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Content of /tmp/run_aster_f89dw791/proc.16 after execution:
[1,7]<stdout>:.:
[1,7]<stdout>:total 28
[1,7]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1289.export
[1,7]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,7]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,7]<stdout>:-rw-r--r-- 1 aster aster 22272 Jan 23 16:33 fort.6
[1,7]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,7]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,7]<stdout>:
[1,7]<stdout>:REPE_OUT:
[1,7]<stdout>:total 0
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution summary
[1,7]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,7]<stdout>:Execution of code_aster             16.34       4.23      20.57      35.59
[1,7]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:Total                               16.34       4.23      20.57      35.59
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:.:
[1,16]<stdout>:total 28
[1,16]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1335.export
[1,16]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,16]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,16]<stdout>:-rw-r--r-- 1 aster aster 22273 Jan 23 16:33 fort.6
[1,16]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,16]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,16]<stdout>:
[1,16]<stdout>:REPE_OUT:
[1,16]<stdout>:total 0
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Execution summary
[1,16]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,16]<stdout>:Execution of code_aster             16.44       4.13      20.57      35.58
[1,16]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:Total                               16.44       4.13      20.57      35.58
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:EXECUTION_CODE_ASTER_EXIT_1320=0
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:execution ended (command file #1): OK
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Content of /tmp/run_aster_f89dw791/proc.13 after execution:
[1,1]<stdout>:
[1,1]<stdout>:EXECUTION_CODE_ASTER_EXIT_1259=0
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:execution ended (command file #1): OK
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Content of /tmp/run_aster_f89dw791/proc.1 after execution:
[1,13]<stdout>:.:
[1,13]<stdout>:total 28
[1,13]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1320.export
[1,13]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,13]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,13]<stdout>:-rw-r--r-- 1 aster aster 22273 Jan 23 16:33 fort.6
[1,13]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,13]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,13]<stdout>:
[1,13]<stdout>:REPE_OUT:
[1,13]<stdout>:total 0
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Execution summary
[1,13]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,13]<stdout>:Execution of code_aster             16.38       4.18      20.56      35.60
[1,13]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:Total                               16.38       4.18      20.56      35.60
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:.:
[1,1]<stdout>:total 28
[1,1]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1259.export
[1,1]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,1]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,1]<stdout>:-rw-r--r-- 1 aster aster 22150 Jan 23 16:33 fort.6
[1,1]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,1]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,1]<stdout>:
[1,1]<stdout>:REPE_OUT:
[1,1]<stdout>:total 0
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution summary
[1,1]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,1]<stdout>:Execution of code_aster             16.22       4.35      20.57      35.61
[1,1]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:Total                               16.22       4.35      20.57      35.61
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:EXECUTION_CODE_ASTER_EXIT_1275=0
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:execution ended (command file #1): OK
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Content of /tmp/run_aster_f89dw791/proc.4 after execution:
[1,4]<stdout>:.:
[1,4]<stdout>:total 28
[1,4]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1275.export
[1,4]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,4]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,4]<stdout>:-rw-r--r-- 1 aster aster 22150 Jan 23 16:33 fort.6
[1,4]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,4]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,4]<stdout>:
[1,4]<stdout>:REPE_OUT:
[1,4]<stdout>:total 0
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution summary
[1,4]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,4]<stdout>:Execution of code_aster             16.21       4.37      20.58      35.62
[1,4]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:Total                               16.21       4.37      20.58      35.62
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:EXECUTION_CODE_ASTER_EXIT_1325=0
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:execution ended (command file #1): OK
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Content of /tmp/run_aster_f89dw791/proc.14 after execution:
[1,14]<stdout>:.:
[1,14]<stdout>:total 28
[1,14]<stdout>:-rw-r--r-- 1 aster aster   202 Jan 23 16:32 1325.export
[1,14]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_IN
[1,14]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 23 16:32 REPE_OUT
[1,14]<stdout>:-rw-r--r-- 1 aster aster 22270 Jan 23 16:33 fort.6
[1,14]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.8
[1,14]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 23 16:32 fort.9
[1,14]<stdout>:
[1,14]<stdout>:REPE_OUT:
[1,14]<stdout>:total 0
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Execution summary
[1,14]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,14]<stdout>:Execution of code_aster             16.35       4.21      20.56      35.60
[1,14]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:Total                               16.35       4.21      20.56      35.60
[1,14]<stdout>:--------------------------------------------------------------------------------
