WARNING: If MPI_Abort is called during execution, result files could not be copied.
Running: mpiexec -n 24 --tag-output /opt/aster/install/mpi/bin/run_aster -n 24 --wrkdir /tmp/run_aster__jlsw51j --status-file /home/aster/.tmp_run_aster/run_aster_4tiorcw8/__status__ --no-mpi /home/aster/.tmp_run_aster/run_aster_4tiorcw8/Cube_perf.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution of code_aster
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command file #1 / 1
[1,0]<stdout>:
[1,0]<stdout>:Content of the file to execute:
[1,0]<stdout>:# coding=utf-8
[1,0]<stdout>:#!/usr/bin/python
[1,0]<stdout>:
[1,0]<stdout>:import os
[1,0]<stdout>:from statistics import mean
[1,0]<stdout>:from datetime import datetime
[1,0]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,0]<stdout>:
[1,0]<stdout>:from code_aster.Commands import *
[1,0]<stdout>:from code_aster import CA
[1,0]<stdout>:from code_aster.Utilities import petscInitialize
[1,0]<stdout>:
[1,0]<stdout>:CA.init()
[1,0]<stdout>:
[1,0]<stdout>:params = {}
[1,0]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,0]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,0]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,0]<stdout>:
[1,0]<stdout>:# General parameters
[1,0]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,0]<stdout>:rank = comm.Get_rank()
[1,0]<stdout>:size = comm.Get_size()
[1,0]<stdout>:
[1,0]<stdout>:nbHexa = 8 ** params["refinements"]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def memory_peak(mess=None):
[1,0]<stdout>:    """Return memory peak in MB"""
[1,0]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMgGen:
[1,0]<stdout>:    stats = {}
[1,0]<stdout>:
[1,0]<stdout>:    def __init__(self, what):
[1,0]<stdout>:        self._what = what
[1,0]<stdout>:
[1,0]<stdout>:    def __enter__(self):
[1,0]<stdout>:        self.start = datetime.now()
[1,0]<stdout>:
[1,0]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,0]<stdout>:        self.stop = datetime.now()
[1,0]<stdout>:        delta = self.stop - self.start
[1,0]<stdout>:        mem = memory_peak(self._what)
[1,0]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,0]<stdout>:    pass
[1,0]<stdout>:    # def __init__(self, what):
[1,0]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def write_stats(nume_ddl):
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB PROC")
[1,0]<stdout>:        print(size)
[1,0]<stdout>:        print()
[1,0]<stdout>:        print(
[1,0]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    for key, values in stats.items():
[1,0]<stdout>:        time = comm.gather(values[0], root=0)
[1,0]<stdout>:        mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(
[1,0]<stdout>:                key
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(mem))
[1,0]<stdout>:            )
[1,0]<stdout>:
[1,0]<stdout>:    mesh = nume_ddl.getMesh()
[1,0]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,0]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,0]<stdout>:
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,0]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,0]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,0]<stdout>:
[1,0]<stdout>:    def show(*args, **kwargs):
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(*args, **kwargs)
[1,0]<stdout>:
[1,0]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,0]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,0]<stdout>:    separ = "| :--------------- | ----------: |"
[1,0]<stdout>:    show(fmti.format("Refinement", refine))
[1,0]<stdout>:    show(separ)
[1,0]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,0]<stdout>:    for key, values in data.items():
[1,0]<stdout>:        times = comm.gather(values[0], root=0)
[1,0]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            show(fmtt.format(key, mean(times)))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,0]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,0]<stdout>:
[1,0]<stdout>:with ChronoCtxMg("Total"):
[1,0]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,0]<stdout>:        if params["parallel"] == "HPC":
[1,0]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:        else:
[1,0]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Model"):
[1,0]<stdout>:        model = AFFE_MODELE(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                PHENOMENE="MECANIQUE",
[1,0]<stdout>:                MODELISATION="3D",
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Material"):
[1,0]<stdout>:        steel = DEFI_MATERIAU(
[1,0]<stdout>:            ELAS=_F(
[1,0]<stdout>:                E=200000.0,
[1,0]<stdout>:                NU=0.3,
[1,0]<stdout>:            ),
[1,0]<stdout>:            ECRO_LINE=_F(
[1,0]<stdout>:   [1,0]<stdout>:             D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                SY=200.0,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        mater = AFFE_MATERIAU(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                MATER=steel,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,0]<stdout>:        block = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="LEFT",
[1,0]<stdout>:                    DX=0,
[1,0]<stdout>:                    DY=0.0,
[1,0]<stdout>:                    DZ=0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="RIGHT",
[1,0]<stdout>:                    DY=0.001,
[1,0]<stdout>:                    DZ=0.001,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,0]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            OPTION="RIGI_MECA",
[1,0]<stdout>:            CHAM_MATER=mater,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Numbering"):
[1,0]<stdout>:        dofNum = NUME_DDL(
[1,0]<stdout>:            MATR_RIGI=stiff_elem,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Assembly"):
[1,0]<stdout>:        stiffness = ASSE_MATRICE(
[1,0]<stdout>:            MATR_ELEM=stiff_elem,
[1,0]<stdout>:            NUME_DDL=dofNum,
[1,0]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,0]<stdout>:        rhs = CREA_CHAMP(
[1,0]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,0]<stdout>:            OPERATION="AFFE",
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                NOM_CMP=(
[1,0]<stdout>:                    "DX",
[1,0]<stdout>:                    "DY",
[1,0]<stdout>:                    "DZ",
[1,0]<stdout>:                ),
[1,0]<stdout>:                VALE=(
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,0]<stdout>:
[1,0]<stdout>:    if params["solver"] == "PETSC":
[1,0]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,0]<stdout>:    elif params["solver"] == "MUMPS":
[1,0]<stdout>:        solver = CA.MumpsSolver(
[1,0]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,0]<stdout>:            RENUM="PARMETIS",
[1,0]<stdout>:            ACCELERATION="FR+",
[1,0]<stdout>:            POSTTRAITEMENTS="MINI",
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Factorize"):
[1,0]<stdout>:        solver.factorize(stiffness)
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Solve"):
[1,0]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,0]<stdout>:
[1,0]<stdout>:# write_stats(dofNum)
[1,0]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,0]<stdout>:if params["parallel"] == "HPC":
[1,0]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,0]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,0]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,0]<stdout>:
[1,0]<stdout>:CA.close()
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command line #1:
[1,0]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution of code_aster
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.1
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command file #1 / 1
[1,1]<stdout>:
[1,1]<stdout>:Content of the file to execute:
[1,1]<stdout>:# coding=utf-8
[1,1]<stdout>:#!/usr/bin/python
[1,1]<stdout>:
[1,1]<stdout>:import os
[1,1]<stdout>:from statistics import mean
[1,1]<stdout>:from datetime import datetime
[1,1]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,1]<stdout>:
[1,1]<stdout>:from code_aster.Commands import *
[1,1]<stdout>:from code_aster import CA
[1,1]<stdout>:from code_aster.Utilities import petscInitialize
[1,1]<stdout>:
[1,1]<stdout>:CA.init()
[1,1]<stdout>:
[1,1]<stdout>:params = {}
[1,1]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,1]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,1]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,1]<stdout>:
[1,1]<stdout>:# General parameters
[1,1]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,1]<stdout>:rank = comm.Get_rank()
[1,1]<stdout>:size = comm.Get_size()
[1,1]<stdout>:
[1,1]<stdout>:nbHexa = 8 ** params["refinements"]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def memory_peak(mess=None):
[1,1]<stdout>:    """Return memory peak in MB"""
[1,1]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMgGen:
[1,1]<stdout>:    stats = {}
[1,1]<stdout>:
[1,1]<stdout>:    def __init__(self, what):
[1,1]<stdout>:        self._what = what
[1,1]<stdout>:
[1,1]<stdout>:    def __enter__(self):
[1,1]<stdout>:        self.start = datetime.now()
[1,1]<stdout>:
[1,1]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,1]<stdout>:        self.stop = datetime.now()
[1,1]<stdout>:        delta = self.stop - self.start
[1,1]<stdout>:        mem = memory_peak(self._what)
[1,1]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,1]<stdout>:    pass
[1,1]<stdout>:    # def __init__(self, what):
[1,1]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def write_stats(nume_ddl):
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB PROC")
[1,1]<stdout>:        print(size)
[1,1]<stdout>:        print()
[1,1]<stdout>:        print(
[1,1]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    for key, values in stats.items():
[1,1]<stdout>:        time = comm.gather(values[0], root=0)
[1,1]<stdout>:        mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(
[1,1]<stdout>:                key
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(mem))
[1,1]<stdout>:            )
[1,1]<stdout>:
[1,1]<stdout>:    mesh = nume_ddl.getMesh()
[1,1]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,1]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,1]<stdout>:
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,1]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,1]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,1]<stdout>:
[1,1]<stdout>:    def show(*args, **kwargs):
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(*args, **kwargs)
[1,1]<stdout>:
[1,1]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,1]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,1]<stdout>:    separ = "| :--------------- | ----------: |"
[1,1]<stdout>:    show(fmti.format("Refinement", refine))
[1,1]<stdout>:    show(separ)
[1,1]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,1]<stdout>:    for key, values in data.items():
[1,1]<stdout>:        times = comm.gather(values[0], root=0)
[1,1]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            show(fmtt.format(key, mean(times)))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,1]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,1]<stdout>:
[1,1]<stdout>:with ChronoCtxMg("Total"):
[1,1]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,1]<stdout>:        if params["parallel"] == "HPC":
[1,1]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:        else:
[1,1]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Model"):
[1,1]<stdout>:        model = AFFE_MODELE(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                PHENOMENE="MECANIQUE",
[1,1]<stdout>:                MODELISATION="3D",
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Material"):
[1,1]<stdout>:        steel = DEFI_MATERIAU(
[1,1]<stdout>:            ELAS=_F(
[1,1]<stdout>:                E=200000.0,
[1,1]<stdout>:                NU=0.3,
[1,1]<stdout>:            ),
[1,1]<stdout>:            ECRO_LINE=_F(
[1,1]<stdout>:   [1,1]<stdout>:             D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                SY=200.0,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        mater = AFFE_MATERIAU(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                MATER=steel,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,1]<stdout>:        block = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="LEFT",
[1,1]<stdout>:                    DX=0,
[1,1]<stdout>:                    DY=0.0,
[1,1]<stdout>:                    DZ=0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="RIGHT",
[1,1]<stdout>:                    DY=0.001,
[1,1]<stdout>:                    DZ=0.001,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,1]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            OPTION="RIGI_MECA",
[1,1]<stdout>:            CHAM_MATER=mater,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Numbering"):
[1,1]<stdout>:        dofNum = NUME_DDL(
[1,1]<stdout>:            MATR_RIGI=stiff_elem,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Assembly"):
[1,1]<stdout>:        stiffness = ASSE_MATRICE(
[1,1]<stdout>:            MATR_ELEM=stiff_elem,
[1,1]<stdout>:            NUME_DDL=dofNum,
[1,1]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,1]<stdout>:        rhs = CREA_CHAMP(
[1,1]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,1]<stdout>:            OPERATION="AFFE",
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                NOM_CMP=(
[1,1]<stdout>:                    "DX",
[1,1]<stdout>:                    "DY",
[1,1]<stdout>:                    "DZ",
[1,1]<stdout>:                ),
[1,1]<stdout>:                VALE=(
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,1]<stdout>:
[1,1]<stdout>:    if params["solver"] == "PETSC":
[1,1]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,1]<stdout>:    elif params["solver"] == "MUMPS":
[1,1]<stdout>:        solver = CA.MumpsSolver(
[1,1]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,1]<stdout>:            RENUM="PARMETIS",
[1,1]<stdout>:            ACCELERATION="FR+",
[1,1]<stdout>:            POSTTRAITEMENTS="MINI",
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Factorize"):
[1,1]<stdout>:        solver.factorize(stiffness)
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Solve"):
[1,1]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,1]<stdout>:
[1,1]<stdout>:# write_stats(dofNum)
[1,1]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,1]<stdout>:if params["parallel"] == "HPC":
[1,1]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,1]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,1]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,1]<stdout>:
[1,1]<stdout>:CA.close()
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command line #1:
[1,1]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution of code_aster
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.2
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command file #1 / 1
[1,2]<stdout>:
[1,2]<stdout>:Content of the file to execute:
[1,2]<stdout>:# coding=utf-8
[1,2]<stdout>:#!/usr/bin/python
[1,2]<stdout>:
[1,2]<stdout>:import os
[1,2]<stdout>:from statistics import mean
[1,2]<stdout>:from datetime import datetime
[1,2]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,2]<stdout>:
[1,2]<stdout>:from code_aster.Commands import *
[1,2]<stdout>:from code_aster import CA
[1,2]<stdout>:from code_aster.Utilities import petscInitialize
[1,2]<stdout>:
[1,2]<stdout>:CA.init()
[1,2]<stdout>:
[1,2]<stdout>:params = {}
[1,2]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,2]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,2]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,2]<stdout>:
[1,2]<stdout>:# General parameters
[1,2]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,2]<stdout>:rank = comm.Get_rank()
[1,2]<stdout>:size = comm.Get_size()
[1,2]<stdout>:
[1,2]<stdout>:nbHexa = 8 ** params["refinements"]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def memory_peak(mess=None):
[1,2]<stdout>:    """Return memory peak in MB"""
[1,2]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMgGen:
[1,2]<stdout>:    stats = {}
[1,2]<stdout>:
[1,2]<stdout>:    def __init__(self, what):
[1,2]<stdout>:        self._what = what
[1,2]<stdout>:
[1,2]<stdout>:    def __enter__(self):
[1,2]<stdout>:        self.start = datetime.now()
[1,2]<stdout>:
[1,2]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,2]<stdout>:        self.stop = datetime.now()
[1,2]<stdout>:        delta = self.stop - self.start
[1,2]<stdout>:        mem = memory_peak(self._what)
[1,2]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,2]<stdout>:    pass
[1,2]<stdout>:    # def __init__(self, what):
[1,2]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def write_stats(nume_ddl):
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB PROC")
[1,2]<stdout>:        print(size)
[1,2]<stdout>:        print()
[1,2]<stdout>:        print(
[1,2]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    for key, values in stats.items():
[1,2]<stdout>:        time = comm.gather(values[0], root=0)
[1,2]<stdout>:        mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(
[1,2]<stdout>:                key
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(mem))
[1,2]<stdout>:            )
[1,2]<stdout>:
[1,2]<stdout>:    mesh = nume_ddl.getMesh()
[1,2]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,2]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,2]<stdout>:
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,2]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,2]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,2]<stdout>:
[1,2]<stdout>:    def show(*args, **kwargs):
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(*args, **kwargs)
[1,2]<stdout>:
[1,2]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,2]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,2]<stdout>:    separ = "| :--------------- | ----------: |"
[1,2]<stdout>:    show(fmti.format("Refinement", refine))
[1,2]<stdout>:    show(separ)
[1,2]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,2]<stdout>:    for key, values in data.items():
[1,2]<stdout>:        times = comm.gather(values[0], root=0)
[1,2]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            show(fmtt.format(key, mean(times)))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,2]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,2]<stdout>:
[1,2]<stdout>:with ChronoCtxMg("Total"):
[1,2]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,2]<stdout>:        if params["parallel"] == "HPC":
[1,2]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:        else:
[1,2]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Model"):
[1,2]<stdout>:        model = AFFE_MODELE(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                PHENOMENE="MECANIQUE",
[1,2]<stdout>:                MODELISATION="3D",
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Material"):
[1,2]<stdout>:        steel = DEFI_MATERIAU(
[1,2]<stdout>:            ELAS=_F(
[1,2]<stdout>:                E=200000.0,
[1,2]<stdout>:                NU=0.3,
[1,2]<stdout>:            ),
[1,2]<stdout>:            ECRO_LINE=_F(
[1,2]<stdout>:    [1,2]<stdout>:            D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                SY=200.0,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        mater = AFFE_MATERIAU(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                MATER=steel,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,2]<stdout>:        block = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="LEFT",
[1,2]<stdout>:                    DX=0,
[1,2]<stdout>:                    DY=0.0,
[1,2]<stdout>:                    DZ=0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="RIGHT",
[1,2]<stdout>:                    DY=0.001,
[1,2]<stdout>:                    DZ=0.001,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,2]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            OPTION="RIGI_MECA",
[1,2]<stdout>:            CHAM_MATER=mater,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Numbering"):
[1,2]<stdout>:        dofNum = NUME_DDL(
[1,2]<stdout>:            MATR_RIGI=stiff_elem,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Assembly"):
[1,2]<stdout>:        stiffness = ASSE_MATRICE(
[1,2]<stdout>:            MATR_ELEM=stiff_elem,
[1,2]<stdout>:            NUME_DDL=dofNum,
[1,2]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,2]<stdout>:        rhs = CREA_CHAMP(
[1,2]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,2]<stdout>:            OPERATION="AFFE",
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                NOM_CMP=(
[1,2]<stdout>:                    "DX",
[1,2]<stdout>:                    "DY",
[1,2]<stdout>:                    "DZ",
[1,2]<stdout>:                ),
[1,2]<stdout>:                VALE=(
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,2]<stdout>:
[1,2]<stdout>:    if params["solver"] == "PETSC":
[1,2]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,2]<stdout>:    elif params["solver"] == "MUMPS":
[1,2]<stdout>:        solver = CA.MumpsSolver(
[1,2]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,2]<stdout>:            RENUM="PARMETIS",
[1,2]<stdout>:            ACCELERATION="FR+",
[1,2]<stdout>:            POSTTRAITEMENTS="MINI",
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Factorize"):
[1,2]<stdout>:        solver.factorize(stiffness)
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Solve"):
[1,2]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,2]<stdout>:
[1,2]<stdout>:# write_stats(dofNum)
[1,2]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,2]<stdout>:if params["parallel"] == "HPC":
[1,2]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,2]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,2]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,2]<stdout>:
[1,2]<stdout>:CA.close()
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command line #1:
[1,2]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution of code_aster
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.3
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command file #1 / 1
[1,3]<stdout>:
[1,3]<stdout>:Content of the file to execute:
[1,3]<stdout>:# coding=utf-8
[1,3]<stdout>:#!/usr/bin/python
[1,3]<stdout>:
[1,3]<stdout>:import os
[1,3]<stdout>:from statistics import mean
[1,3]<stdout>:from datetime import datetime
[1,3]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,3]<stdout>:
[1,3]<stdout>:from code_aster.Commands import *
[1,3]<stdout>:from code_aster import CA
[1,3]<stdout>:from code_aster.Utilities import petscInitialize
[1,3]<stdout>:
[1,3]<stdout>:CA.init()
[1,3]<stdout>:
[1,3]<stdout>:params = {}
[1,3]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,3]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,3]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,3]<stdout>:
[1,3]<stdout>:# General parameters
[1,3]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,3]<stdout>:rank = comm.Get_rank()
[1,3]<stdout>:size = comm.Get_size()
[1,3]<stdout>:
[1,3]<stdout>:nbHexa = 8 ** params["refinements"]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def memory_peak(mess=None):
[1,3]<stdout>:    """Return memory peak in MB"""
[1,3]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMgGen:
[1,3]<stdout>:    stats = {}
[1,3]<stdout>:
[1,3]<stdout>:    def __init__(self, what):
[1,3]<stdout>:        self._what = what
[1,3]<stdout>:
[1,3]<stdout>:    def __enter__(self):
[1,3]<stdout>:        self.start = datetime.now()
[1,3]<stdout>:
[1,3]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,3]<stdout>:        self.stop = datetime.now()
[1,3]<stdout>:        delta = self.stop - self.start
[1,3]<stdout>:        mem = memory_peak(self._what)
[1,3]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,3]<stdout>:    pass
[1,3]<stdout>:    # def __init__(self, what):
[1,3]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def write_stats(nume_ddl):
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB PROC")
[1,3]<stdout>:        print(size)
[1,3]<stdout>:        print()
[1,3]<stdout>:        print(
[1,3]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    for key, values in stats.items():
[1,3]<stdout>:        time = comm.gather(values[0], root=0)
[1,3]<stdout>:        mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(
[1,3]<stdout>:                key
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(mem))
[1,3]<stdout>:            )
[1,3]<stdout>:
[1,3]<stdout>:    mesh = nume_ddl.getMesh()
[1,3]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,3]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,3]<stdout>:
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,3]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,3]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,3]<stdout>:
[1,3]<stdout>:    def show(*args, **kwargs):
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(*args, **kwargs)
[1,3]<stdout>:
[1,3]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,3]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,3]<stdout>:    separ = "| :--------------- | ----------: |"
[1,3]<stdout>:    show(fmti.format("Refinement", refine))
[1,3]<stdout>:    show(separ)
[1,3]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,3]<stdout>:    for key, values in data.items():
[1,3]<stdout>:        times = comm.gather(values[0], root=0)
[1,3]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            show(fmtt.format(key, mean(times)))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,3]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,3]<stdout>:
[1,3]<stdout>:with ChronoCtxMg("Total"):
[1,3]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,3]<stdout>:        if params["parallel"] == "HPC":
[1,3]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:        else:
[1,3]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Model"):
[1,3]<stdout>:        model = AFFE_MODELE(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                PHENOMENE="MECANIQUE",
[1,3]<stdout>:                MODELISATION="3D",
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Material"):
[1,3]<stdout>:        steel = DEFI_MATERIAU(
[1,3]<stdout>:            ELAS=_F(
[1,3]<stdout>:                E=200000.0,
[1,3]<stdout>:                NU=0.3,
[1,3]<stdout>:            ),
[1,3]<stdout>:            ECRO_LINE=_F(
[1,3]<stdout>:   [1,3]<stdout>:             D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                SY=200.0,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        mater = AFFE_MATERIAU(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                MATER=steel,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,3]<stdout>:        block = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="LEFT",
[1,3]<stdout>:                    DX=0,
[1,3]<stdout>:                    DY=0.0,
[1,3]<stdout>:                    DZ=0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="RIGHT",
[1,3]<stdout>:                    DY=0.001,
[1,3]<stdout>:                    DZ=0.001,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,3]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            OPTION="RIGI_MECA",
[1,3]<stdout>:            CHAM_MATER=mater,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Numbering"):
[1,3]<stdout>:        dofNum = NUME_DDL(
[1,3]<stdout>:            MATR_RIGI=stiff_elem,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Assembly"):
[1,3]<stdout>:        stiffness = ASSE_MATRICE(
[1,3]<stdout>:            MATR_ELEM=stiff_elem,
[1,3]<stdout>:            NUME_DDL=dofNum,
[1,3]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,3]<stdout>:        rhs = CREA_CHAMP(
[1,3]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,3]<stdout>:            OPERATION="AFFE",
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                NOM_CMP=(
[1,3]<stdout>:                    "DX",
[1,3]<stdout>:                    "DY",
[1,3]<stdout>:                    "DZ",
[1,3]<stdout>:                ),
[1,3]<stdout>:                VALE=(
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,3]<stdout>:
[1,3]<stdout>:    if params["solver"] == "PETSC":
[1,3]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,3]<stdout>:    elif params["solver"] == "MUMPS":
[1,3]<stdout>:        solver = CA.MumpsSolver(
[1,3]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,3]<stdout>:            RENUM="PARMETIS",
[1,3]<stdout>:            ACCELERATION="FR+",
[1,3]<stdout>:            POSTTRAITEMENTS="MINI",
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Factorize"):
[1,3]<stdout>:        solver.factorize(stiffness)
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Solve"):
[1,3]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,3]<stdout>:
[1,3]<stdout>:# write_stats(dofNum)
[1,3]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,3]<stdout>:if params["parallel"] == "HPC":
[1,3]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,3]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,3]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,3]<stdout>:
[1,3]<stdout>:CA.close()
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command line #1:
[1,3]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution of code_aster
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.4
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command file #1 / 1
[1,4]<stdout>:
[1,4]<stdout>:Content of the file to execute:
[1,4]<stdout>:# coding=utf-8
[1,4]<stdout>:#!/usr/bin/python
[1,4]<stdout>:
[1,4]<stdout>:import os
[1,4]<stdout>:from statistics import mean
[1,4]<stdout>:from datetime import datetime
[1,4]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,4]<stdout>:
[1,4]<stdout>:from code_aster.Commands import *
[1,4]<stdout>:from code_aster import CA
[1,4]<stdout>:from code_aster.Utilities import petscInitialize
[1,4]<stdout>:
[1,4]<stdout>:CA.init()
[1,4]<stdout>:
[1,4]<stdout>:params = {}
[1,4]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,4]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,4]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,4]<stdout>:
[1,4]<stdout>:# General parameters
[1,4]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,4]<stdout>:rank = comm.Get_rank()
[1,4]<stdout>:size = comm.Get_size()
[1,4]<stdout>:
[1,4]<stdout>:nbHexa = 8 ** params["refinements"]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def memory_peak(mess=None):
[1,4]<stdout>:    """Return memory peak in MB"""
[1,4]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMgGen:
[1,4]<stdout>:    stats = {}
[1,4]<stdout>:
[1,4]<stdout>:    def __init__(self, what):
[1,4]<stdout>:        self._what = what
[1,4]<stdout>:
[1,4]<stdout>:    def __enter__(self):
[1,4]<stdout>:        self.start = datetime.now()
[1,4]<stdout>:
[1,4]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,4]<stdout>:        self.stop = datetime.now()
[1,4]<stdout>:        delta = self.stop - self.start
[1,4]<stdout>:        mem = memory_peak(self._what)
[1,4]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,4]<stdout>:    pass
[1,4]<stdout>:    # def __init__(self, what):
[1,4]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def write_stats(nume_ddl):
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB PROC")
[1,4]<stdout>:        print(size)
[1,4]<stdout>:        print()
[1,4]<stdout>:        print(
[1,4]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    for key, values in stats.items():
[1,4]<stdout>:        time = comm.gather(values[0], root=0)
[1,4]<stdout>:        mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(
[1,4]<stdout>:                key
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(mem))
[1,4]<stdout>:            )
[1,4]<stdout>:
[1,4]<stdout>:    mesh = nume_ddl.getMesh()
[1,4]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,4]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,4]<stdout>:
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,4]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,4]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,4]<stdout>:
[1,4]<stdout>:    def show(*args, **kwargs):
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(*args, **kwargs)
[1,4]<stdout>:
[1,4]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,4]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,4]<stdout>:    separ = "| :--------------- | ----------: |"
[1,4]<stdout>:    show(fmti.format("Refinement", refine))
[1,4]<stdout>:    show(separ)
[1,4]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,4]<stdout>:    for key, values in data.items():
[1,4]<stdout>:        times = comm.gather(values[0], root=0)
[1,4]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            show(fmtt.format(key, mean(times)))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,4]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,4]<stdout>:
[1,4]<stdout>:with ChronoCtxMg("Total"):
[1,4]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,4]<stdout>:        if params["parallel"] == "HPC":
[1,4]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:        else:
[1,4]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Model"):
[1,4]<stdout>:        model = AFFE_MODELE(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                PHENOMENE="MECANIQUE",
[1,4]<stdout>:                MODELISATION="3D",
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Material"):
[1,4]<stdout>:        steel = DEFI_MATERIAU(
[1,4]<stdout>:            ELAS=_F(
[1,4]<stdout>:                E=200000.0,
[1,4]<stdout>:                NU=0.3,
[1,4]<stdout>:            ),
[1,4]<stdout>:            ECRO_LINE=_F(
[1,4]<stdout>:   [1,4]<stdout>:             D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                SY=200.0,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        mater = AFFE_MATERIAU(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                MATER=steel,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,4]<stdout>:        block = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="LEFT",
[1,4]<stdout>:                    DX=0,
[1,4]<stdout>:                    DY=0.0,
[1,4]<stdout>:                    DZ=0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="RIGHT",
[1,4]<stdout>:                    DY=0.001,
[1,4]<stdout>:                    DZ=0.001,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,4]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            OPTION="RIGI_MECA",
[1,4]<stdout>:            CHAM_MATER=mater,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Numbering"):
[1,4]<stdout>:        dofNum = NUME_DDL(
[1,4]<stdout>:            MATR_RIGI=stiff_elem,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Assembly"):
[1,4]<stdout>:        stiffness = ASSE_MATRICE(
[1,4]<stdout>:            MATR_ELEM=stiff_elem,
[1,4]<stdout>:            NUME_DDL=dofNum,
[1,4]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,4]<stdout>:        rhs = CREA_CHAMP(
[1,4]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,4]<stdout>:            OPERATION="AFFE",
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                NOM_CMP=(
[1,4]<stdout>:                    "DX",
[1,4]<stdout>:                    "DY",
[1,4]<stdout>:                    "DZ",
[1,4]<stdout>:                ),
[1,4]<stdout>:                VALE=(
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,4]<stdout>:
[1,4]<stdout>:    if params["solver"] == "PETSC":
[1,4]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,4]<stdout>:    elif params["solver"] == "MUMPS":
[1,4]<stdout>:        solver = CA.MumpsSolver(
[1,4]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,4]<stdout>:            RENUM="PARMETIS",
[1,4]<stdout>:            ACCELERATION="FR+",
[1,4]<stdout>:            POSTTRAITEMENTS="MINI",
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Factorize"):
[1,4]<stdout>:        solver.factorize(stiffness)
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Solve"):
[1,4]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,4]<stdout>:
[1,4]<stdout>:# write_stats(dofNum)
[1,4]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,4]<stdout>:if params["parallel"] == "HPC":
[1,4]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,4]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,4]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,4]<stdout>:
[1,4]<stdout>:CA.close()
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command line #1:
[1,4]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution of code_aster
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.5
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command file #1 / 1
[1,5]<stdout>:
[1,5]<stdout>:Content of the file to execute:
[1,5]<stdout>:# coding=utf-8
[1,5]<stdout>:#!/usr/bin/python
[1,5]<stdout>:
[1,5]<stdout>:import os
[1,5]<stdout>:from statistics import mean
[1,5]<stdout>:from datetime import datetime
[1,5]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,5]<stdout>:
[1,5]<stdout>:from code_aster.Commands import *
[1,5]<stdout>:from code_aster import CA
[1,5]<stdout>:from code_aster.Utilities import petscInitialize
[1,5]<stdout>:
[1,5]<stdout>:CA.init()
[1,5]<stdout>:
[1,5]<stdout>:params = {}
[1,5]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,5]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,5]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,5]<stdout>:
[1,5]<stdout>:# General parameters
[1,5]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,5]<stdout>:rank = comm.Get_rank()
[1,5]<stdout>:size = comm.Get_size()
[1,5]<stdout>:
[1,5]<stdout>:nbHexa = 8 ** params["refinements"]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def memory_peak(mess=None):
[1,5]<stdout>:    """Return memory peak in MB"""
[1,5]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMgGen:
[1,5]<stdout>:    stats = {}
[1,5]<stdout>:
[1,5]<stdout>:    def __init__(self, what):
[1,5]<stdout>:        self._what = what
[1,5]<stdout>:
[1,5]<stdout>:    def __enter__(self):
[1,5]<stdout>:        self.start = datetime.now()
[1,5]<stdout>:
[1,5]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,5]<stdout>:        self.stop = datetime.now()
[1,5]<stdout>:        delta = self.stop - self.start
[1,5]<stdout>:        mem = memory_peak(self._what)
[1,5]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,5]<stdout>:    pass
[1,5]<stdout>:    # def __init__(self, what):
[1,5]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def write_stats(nume_ddl):
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB PROC")
[1,5]<stdout>:        print(size)
[1,5]<stdout>:        print()
[1,5]<stdout>:        print(
[1,5]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    for key, values in stats.items():
[1,5]<stdout>:        time = comm.gather(values[0], root=0)
[1,5]<stdout>:        mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(
[1,5]<stdout>:                key
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(mem))
[1,5]<stdout>:            )
[1,5]<stdout>:
[1,5]<stdout>:    mesh = nume_ddl.getMesh()
[1,5]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,5]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,5]<stdout>:
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,5]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,5]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,5]<stdout>:
[1,5]<stdout>:    def show(*args, **kwargs):
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(*args, **kwargs)
[1,5]<stdout>:
[1,5]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,5]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,5]<stdout>:    separ = "| :--------------- | ----------: |"
[1,5]<stdout>:    show(fmti.format("Refinement", refine))
[1,5]<stdout>:    show(separ)
[1,5]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,5]<stdout>:    for key, values in data.items():
[1,5]<stdout>:        times = comm.gather(values[0], root=0)
[1,5]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            show(fmtt.format(key, mean(times)))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,5]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,5]<stdout>:
[1,5]<stdout>:with ChronoCtxMg("Total"):
[1,5]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,5]<stdout>:        if params["parallel"] == "HPC":
[1,5]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:        else:
[1,5]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Model"):
[1,5]<stdout>:        model = AFFE_MODELE(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                PHENOMENE="MECANIQUE",
[1,5]<stdout>:                MODELISATION="3D",
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Material"):
[1,5]<stdout>:        steel = DEFI_MATERIAU(
[1,5]<stdout>:            ELAS=_F(
[1,5]<stdout>:                E=200000.0,
[1,5]<stdout>:                NU=0.3,
[1,5]<stdout>:            ),
[1,5]<stdout>:            ECRO_LINE=_F(
[1,5]<stdout>:   [1,5]<stdout>:             D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                SY=200.0,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        mater = AFFE_MATERIAU(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                MATER=steel,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,5]<stdout>:        block = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="LEFT",
[1,5]<stdout>:                    DX=0,
[1,5]<stdout>:                    DY=0.0,
[1,5]<stdout>:                    DZ=0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="RIGHT",
[1,5]<stdout>:                    DY=0.001,
[1,5]<stdout>:                    DZ=0.001,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,5]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            OPTION="RIGI_MECA",
[1,5]<stdout>:            CHAM_MATER=mater,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Numbering"):
[1,5]<stdout>:        dofNum = NUME_DDL(
[1,5]<stdout>:            MATR_RIGI=stiff_elem,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Assembly"):
[1,5]<stdout>:        stiffness = ASSE_MATRICE(
[1,5]<stdout>:            MATR_ELEM=stiff_elem,
[1,5]<stdout>:            NUME_DDL=dofNum,
[1,5]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,5]<stdout>:        rhs = CREA_CHAMP(
[1,5]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,5]<stdout>:            OPERATION="AFFE",
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                NOM_CMP=(
[1,5]<stdout>:                    "DX",
[1,5]<stdout>:                    "DY",
[1,5]<stdout>:                    "DZ",
[1,5]<stdout>:                ),
[1,5]<stdout>:                VALE=(
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,5]<stdout>:
[1,5]<stdout>:    if params["solver"] == "PETSC":
[1,5]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,5]<stdout>:    elif params["solver"] == "MUMPS":
[1,5]<stdout>:        solver = CA.MumpsSolver(
[1,5]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,5]<stdout>:            RENUM="PARMETIS",
[1,5]<stdout>:            ACCELERATION="FR+",
[1,5]<stdout>:            POSTTRAITEMENTS="MINI",
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Factorize"):
[1,5]<stdout>:        solver.factorize(stiffness)
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Solve"):
[1,5]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,5]<stdout>:
[1,5]<stdout>:# write_stats(dofNum)
[1,5]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,5]<stdout>:if params["parallel"] == "HPC":
[1,5]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,5]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,5]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,5]<stdout>:
[1,5]<stdout>:CA.close()
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command line #1:
[1,5]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution of code_aster
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.6
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command file #1 / 1
[1,6]<stdout>:
[1,6]<stdout>:Content of the file to execute:
[1,6]<stdout>:# coding=utf-8
[1,6]<stdout>:#!/usr/bin/python
[1,6]<stdout>:
[1,6]<stdout>:import os
[1,6]<stdout>:from statistics import mean
[1,6]<stdout>:from datetime import datetime
[1,6]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,6]<stdout>:
[1,6]<stdout>:from code_aster.Commands import *
[1,6]<stdout>:from code_aster import CA
[1,6]<stdout>:from code_aster.Utilities import petscInitialize
[1,6]<stdout>:
[1,6]<stdout>:CA.init()
[1,6]<stdout>:
[1,6]<stdout>:params = {}
[1,6]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,6]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,6]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,6]<stdout>:
[1,6]<stdout>:# General parameters
[1,6]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,6]<stdout>:rank = comm.Get_rank()
[1,6]<stdout>:size = comm.Get_size()
[1,6]<stdout>:
[1,6]<stdout>:nbHexa = 8 ** params["refinements"]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def memory_peak(mess=None):
[1,6]<stdout>:    """Return memory peak in MB"""
[1,6]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMgGen:
[1,6]<stdout>:    stats = {}
[1,6]<stdout>:
[1,6]<stdout>:    def __init__(self, what):
[1,6]<stdout>:        self._what = what
[1,6]<stdout>:
[1,6]<stdout>:    def __enter__(self):
[1,6]<stdout>:        self.start = datetime.now()
[1,6]<stdout>:
[1,6]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,6]<stdout>:        self.stop = datetime.now()
[1,6]<stdout>:        delta = self.stop - self.start
[1,6]<stdout>:        mem = memory_peak(self._what)
[1,6]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,6]<stdout>:    pass
[1,6]<stdout>:    # def __init__(self, what):
[1,6]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def write_stats(nume_ddl):
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB PROC")
[1,6]<stdout>:        print(size)
[1,6]<stdout>:        print()
[1,6]<stdout>:        print(
[1,6]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    for key, values in stats.items():
[1,6]<stdout>:        time = comm.gather(values[0], root=0)
[1,6]<stdout>:        mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(
[1,6]<stdout>:                key
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(mem))
[1,6]<stdout>:            )
[1,6]<stdout>:
[1,6]<stdout>:    mesh = nume_ddl.getMesh()
[1,6]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,6]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,6]<stdout>:
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,6]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,6]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,6]<stdout>:
[1,6]<stdout>:    def show(*args, **kwargs):
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(*args, **kwargs)
[1,6]<stdout>:
[1,6]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,6]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,6]<stdout>:    separ = "| :--------------- | ----------: |"
[1,6]<stdout>:    show(fmti.format("Refinement", refine))
[1,6]<stdout>:    show(separ)
[1,6]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,6]<stdout>:    for key, values in data.items():
[1,6]<stdout>:        times = comm.gather(values[0], root=0)
[1,6]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            show(fmtt.format(key, mean(times)))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,6]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,6]<stdout>:
[1,6]<stdout>:with ChronoCtxMg("Total"):
[1,6]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,6]<stdout>:        if params["parallel"] == "HPC":
[1,6]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:        else:
[1,6]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Model"):
[1,6]<stdout>:        model = AFFE_MODELE(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                PHENOMENE="MECANIQUE",
[1,6]<stdout>:                MODELISATION="3D",
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Material"):
[1,6]<stdout>:        steel = DEFI_MATERIAU(
[1,6]<stdout>:            ELAS=_F(
[1,6]<stdout>:                E=200000.0,
[1,6]<stdout>:                NU=0.3,
[1,6]<stdout>:            ),
[1,6]<stdout>:            ECRO_LINE=_F(
[1,6]<stdout>:   [1,6]<stdout>:             D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                SY=200.0,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        mater = AFFE_MATERIAU(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                MATER=steel,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,6]<stdout>:        block = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="LEFT",
[1,6]<stdout>:                    DX=0,
[1,6]<stdout>:                    DY=0.0,
[1,6]<stdout>:                    DZ=0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="RIGHT",
[1,6]<stdout>:                    DY=0.001,
[1,6]<stdout>:                    DZ=0.001,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,6]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            OPTION="RIGI_MECA",
[1,6]<stdout>:            CHAM_MATER=mater,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Numbering"):
[1,6]<stdout>:        dofNum = NUME_DDL(
[1,6]<stdout>:            MATR_RIGI=stiff_elem,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Assembly"):
[1,6]<stdout>:        stiffness = ASSE_MATRICE(
[1,6]<stdout>:            MATR_ELEM=stiff_elem,
[1,6]<stdout>:            NUME_DDL=dofNum,
[1,6]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,6]<stdout>:        rhs = CREA_CHAMP(
[1,6]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,6]<stdout>:            OPERATION="AFFE",
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                NOM_CMP=(
[1,6]<stdout>:                    "DX",
[1,6]<stdout>:                    "DY",
[1,6]<stdout>:                    "DZ",
[1,6]<stdout>:                ),
[1,6]<stdout>:                VALE=(
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,6]<stdout>:
[1,6]<stdout>:    if params["solver"] == "PETSC":
[1,6]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,6]<stdout>:    elif params["solver"] == "MUMPS":
[1,6]<stdout>:        solver = CA.MumpsSolver(
[1,6]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,6]<stdout>:            RENUM="PARMETIS",
[1,6]<stdout>:            ACCELERATION="FR+",
[1,6]<stdout>:            POSTTRAITEMENTS="MINI",
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Factorize"):
[1,6]<stdout>:        solver.factorize(stiffness)
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Solve"):
[1,6]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,6]<stdout>:
[1,6]<stdout>:# write_stats(dofNum)
[1,6]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,6]<stdout>:if params["parallel"] == "HPC":
[1,6]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,6]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,6]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,6]<stdout>:
[1,6]<stdout>:CA.close()
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command line #1:
[1,6]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution of code_aster
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.7
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command file #1 / 1
[1,7]<stdout>:
[1,7]<stdout>:Content of the file to execute:
[1,7]<stdout>:# coding=utf-8
[1,7]<stdout>:#!/usr/bin/python
[1,7]<stdout>:
[1,7]<stdout>:import os
[1,7]<stdout>:from statistics import mean
[1,7]<stdout>:from datetime import datetime
[1,7]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,7]<stdout>:
[1,7]<stdout>:from code_aster.Commands import *
[1,7]<stdout>:from code_aster import CA
[1,7]<stdout>:from code_aster.Utilities import petscInitialize
[1,7]<stdout>:
[1,7]<stdout>:CA.init()
[1,7]<stdout>:
[1,7]<stdout>:params = {}
[1,7]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,7]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,7]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,7]<stdout>:
[1,7]<stdout>:# General parameters
[1,7]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,7]<stdout>:rank = comm.Get_rank()
[1,7]<stdout>:size = comm.Get_size()
[1,7]<stdout>:
[1,7]<stdout>:nbHexa = 8 ** params["refinements"]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def memory_peak(mess=None):
[1,7]<stdout>:    """Return memory peak in MB"""
[1,7]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMgGen:
[1,7]<stdout>:    stats = {}
[1,7]<stdout>:
[1,7]<stdout>:    def __init__(self, what):
[1,7]<stdout>:        self._what = what
[1,7]<stdout>:
[1,7]<stdout>:    def __enter__(self):
[1,7]<stdout>:        self.start = datetime.now()
[1,7]<stdout>:
[1,7]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,7]<stdout>:        self.stop = datetime.now()
[1,7]<stdout>:        delta = self.stop - self.start
[1,7]<stdout>:        mem = memory_peak(self._what)
[1,7]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,7]<stdout>:    pass
[1,7]<stdout>:    # def __init__(self, what):
[1,7]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def write_stats(nume_ddl):
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB PROC")
[1,7]<stdout>:        print(size)
[1,7]<stdout>:        print()
[1,7]<stdout>:        print(
[1,7]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    for key, values in stats.items():
[1,7]<stdout>:        time = comm.gather(values[0], root=0)
[1,7]<stdout>:        mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(
[1,7]<stdout>:                key
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(mem))
[1,7]<stdout>:            )
[1,7]<stdout>:
[1,7]<stdout>:    mesh = nume_ddl.getMesh()
[1,7]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,7]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,7]<stdout>:
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,7]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,7]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,7]<stdout>:
[1,7]<stdout>:    def show(*args, **kwargs):
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(*args, **kwargs)
[1,7]<stdout>:
[1,7]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,7]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,7]<stdout>:    separ = "| :--------------- | ----------: |"
[1,7]<stdout>:    show(fmti.format("Refinement", refine))
[1,7]<stdout>:    show(separ)
[1,7]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,7]<stdout>:    for key, values in data.items():
[1,7]<stdout>:        times = comm.gather(values[0], root=0)
[1,7]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            show(fmtt.format(key, mean(times)))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,7]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,7]<stdout>:
[1,7]<stdout>:with ChronoCtxMg("Total"):
[1,7]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,7]<stdout>:        if params["parallel"] == "HPC":
[1,7]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:        else:
[1,7]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Model"):
[1,7]<stdout>:        model = AFFE_MODELE(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                PHENOMENE="MECANIQUE",
[1,7]<stdout>:                MODELISATION="3D",
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Material"):
[1,7]<stdout>:        steel = DEFI_MATERIAU(
[1,7]<stdout>:            ELAS=_F(
[1,7]<stdout>:                E=200000.0,
[1,7]<stdout>:                NU=0.3,
[1,7]<stdout>:            ),
[1,7]<stdout>:            ECRO_LINE=_F(
[1,7]<stdout>:   [1,7]<stdout>:             D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                SY=200.0,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        mater = AFFE_MATERIAU(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                MATER=steel,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,7]<stdout>:        block = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="LEFT",
[1,7]<stdout>:                    DX=0,
[1,7]<stdout>:                    DY=0.0,
[1,7]<stdout>:                    DZ=0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="RIGHT",
[1,7]<stdout>:                    DY=0.001,
[1,7]<stdout>:                    DZ=0.001,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,7]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            OPTION="RIGI_MECA",
[1,7]<stdout>:            CHAM_MATER=mater,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Numbering"):
[1,7]<stdout>:        dofNum = NUME_DDL(
[1,7]<stdout>:            MATR_RIGI=stiff_elem,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Assembly"):
[1,7]<stdout>:        stiffness = ASSE_MATRICE(
[1,7]<stdout>:            MATR_ELEM=stiff_elem,
[1,7]<stdout>:            NUME_DDL=dofNum,
[1,7]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,7]<stdout>:        rhs = CREA_CHAMP(
[1,7]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,7]<stdout>:            OPERATION="AFFE",
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                NOM_CMP=(
[1,7]<stdout>:                    "DX",
[1,7]<stdout>:                    "DY",
[1,7]<stdout>:                    "DZ",
[1,7]<stdout>:                ),
[1,7]<stdout>:                VALE=(
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,7]<stdout>:
[1,7]<stdout>:    if params["solver"] == "PETSC":
[1,7]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,7]<stdout>:    elif params["solver"] == "MUMPS":
[1,7]<stdout>:        solver = CA.MumpsSolver(
[1,7]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,7]<stdout>:            RENUM="PARMETIS",
[1,7]<stdout>:            ACCELERATION="FR+",
[1,7]<stdout>:            POSTTRAITEMENTS="MINI",
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Factorize"):
[1,7]<stdout>:        solver.factorize(stiffness)
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Solve"):
[1,7]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,7]<stdout>:
[1,7]<stdout>:# write_stats(dofNum)
[1,7]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,7]<stdout>:if params["parallel"] == "HPC":
[1,7]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,7]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,7]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,7]<stdout>:
[1,7]<stdout>:CA.close()
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command line #1:
[1,7]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Execution of code_aster
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.8
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Command file #1 / 1
[1,8]<stdout>:
[1,8]<stdout>:Content of the file to execute:
[1,8]<stdout>:# coding=utf-8
[1,8]<stdout>:#!/usr/bin/python
[1,8]<stdout>:
[1,8]<stdout>:import os
[1,8]<stdout>:from statistics import mean
[1,8]<stdout>:from datetime import datetime
[1,8]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,8]<stdout>:
[1,8]<stdout>:from code_aster.Commands import *
[1,8]<stdout>:from code_aster import CA
[1,8]<stdout>:from code_aster.Utilities import petscInitialize
[1,8]<stdout>:
[1,8]<stdout>:CA.init()
[1,8]<stdout>:
[1,8]<stdout>:params = {}
[1,8]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,8]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,8]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,8]<stdout>:
[1,8]<stdout>:# General parameters
[1,8]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,8]<stdout>:rank = comm.Get_rank()
[1,8]<stdout>:size = comm.Get_size()
[1,8]<stdout>:
[1,8]<stdout>:nbHexa = 8 ** params["refinements"]
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def memory_peak(mess=None):
[1,8]<stdout>:    """Return memory peak in MB"""
[1,8]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:class ChronoCtxMgGen:
[1,8]<stdout>:    stats = {}
[1,8]<stdout>:
[1,8]<stdout>:    def __init__(self, what):
[1,8]<stdout>:        self._what = what
[1,8]<stdout>:
[1,8]<stdout>:    def __enter__(self):
[1,8]<stdout>:        self.start = datetime.now()
[1,8]<stdout>:
[1,8]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,8]<stdout>:        self.stop = datetime.now()
[1,8]<stdout>:        delta = self.stop - self.start
[1,8]<stdout>:        mem = memory_peak(self._what)
[1,8]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,8]<stdout>:    pass
[1,8]<stdout>:    # def __init__(self, what):
[1,8]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def write_stats(nume_ddl):
[1,8]<stdout>:    if rank == 0:
[1,8]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,8]<stdout>:        print()
[1,8]<stdout>:        print("NB PROC")
[1,8]<stdout>:        print(size)
[1,8]<stdout>:        print()
[1,8]<stdout>:        print(
[1,8]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    for key, values in stats.items():
[1,8]<stdout>:        time = comm.gather(values[0], root=0)
[1,8]<stdout>:        mem = comm.gather(values[1], root=0)
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            print(
[1,8]<stdout>:                key
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(min(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(max(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(mean(time))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(min(mem))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(max(mem))
[1,8]<stdout>:                + ", "
[1,8]<stdout>:                + str(mean(mem))
[1,8]<stdout>:            )
[1,8]<stdout>:
[1,8]<stdout>:    mesh = nume_ddl.getMesh()
[1,8]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,8]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,8]<stdout>:
[1,8]<stdout>:    if rank == 0:
[1,8]<stdout>:        print()
[1,8]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,8]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,8]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,8]<stdout>:
[1,8]<stdout>:    def show(*args, **kwargs):
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            print(*args, **kwargs)
[1,8]<stdout>:
[1,8]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,8]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,8]<stdout>:    separ = "| :--------------- | ----------: |"
[1,8]<stdout>:    show(fmti.format("Refinement", refine))
[1,8]<stdout>:    show(separ)
[1,8]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,8]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,8]<stdout>:    for key, values in data.items():
[1,8]<stdout>:        times = comm.gather(values[0], root=0)
[1,8]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,8]<stdout>:        if rank == 0:
[1,8]<stdout>:            show(fmtt.format(key, mean(times)))
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,8]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,8]<stdout>:
[1,8]<stdout>:with ChronoCtxMg("Total"):
[1,8]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,8]<stdout>:        if params["parallel"] == "HPC":
[1,8]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,8]<stdout>:        else:
[1,8]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Model"):
[1,8]<stdout>:        model = AFFE_MODELE(
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                PHENOMENE="MECANIQUE",
[1,8]<stdout>:                MODELISATION="3D",
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Material"):
[1,8]<stdout>:        steel = DEFI_MATERIAU(
[1,8]<stdout>:            ELAS=_F(
[1,8]<stdout>:                E=200000.0,
[1,8]<stdout>:                NU=0.3,
[1,8]<stdout>:            ),
[1,8]<stdout>:            ECRO_LINE=_F(
[1,8]<stdout>:   [1,8]<stdout>:             D_SIGM_EPSI=2000.0,
[1,8]<stdout>:                SY=200.0,
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        mater = AFFE_MATERIAU(
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                MATER=steel,
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,8]<stdout>:        block = AFFE_CHAR_CINE(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            MECA_IMPO=(
[1,8]<stdout>:                _F(
[1,8]<stdout>:                    GROUP_MA="LEFT",
[1,8]<stdout>:                    DX=0,
[1,8]<stdout>:                    DY=0.0,
[1,8]<stdout>:                    DZ=0.0,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            MECA_IMPO=(
[1,8]<stdout>:                _F(
[1,8]<stdout>:                    GROUP_MA="RIGHT",
[1,8]<stdout>:                    DY=0.001,
[1,8]<stdout>:                    DZ=0.001,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,8]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,8]<stdout>:            MODELE=model,
[1,8]<stdout>:            OPTION="RIGI_MECA",
[1,8]<stdout>:            CHAM_MATER=mater,
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Numbering"):
[1,8]<stdout>:        dofNum = NUME_DDL(
[1,8]<stdout>:            MATR_RIGI=stiff_elem,
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Assembly"):
[1,8]<stdout>:        stiffness = ASSE_MATRICE(
[1,8]<stdout>:            MATR_ELEM=stiff_elem,
[1,8]<stdout>:            NUME_DDL=dofNum,
[1,8]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,8]<stdout>:        rhs = CREA_CHAMP(
[1,8]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,8]<stdout>:            OPERATION="AFFE",
[1,8]<stdout>:            MAILLAGE=mesh,
[1,8]<stdout>:            AFFE=_F(
[1,8]<stdout>:                TOUT="OUI",
[1,8]<stdout>:                NOM_CMP=(
[1,8]<stdout>:                    "DX",
[1,8]<stdout>:                    "DY",
[1,8]<stdout>:                    "DZ",
[1,8]<stdout>:                ),
[1,8]<stdout>:                VALE=(
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                    0.0,
[1,8]<stdout>:                ),
[1,8]<stdout>:            ),
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,8]<stdout>:
[1,8]<stdout>:    if params["solver"] == "PETSC":
[1,8]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,8]<stdout>:    elif params["solver"] == "MUMPS":
[1,8]<stdout>:        solver = CA.MumpsSolver(
[1,8]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,8]<stdout>:            RENUM="PARMETIS",
[1,8]<stdout>:            ACCELERATION="FR+",
[1,8]<stdout>:            POSTTRAITEMENTS="MINI",
[1,8]<stdout>:        )
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Factorize"):
[1,8]<stdout>:        solver.factorize(stiffness)
[1,8]<stdout>:
[1,8]<stdout>:    with ChronoCtxMg("Solve"):
[1,8]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,8]<stdout>:
[1,8]<stdout>:# write_stats(dofNum)
[1,8]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,8]<stdout>:if params["parallel"] == "HPC":
[1,8]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,8]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,8]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,8]<stdout>:
[1,8]<stdout>:CA.close()
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:# ------------------------------------------------------------------------------
[1,8]<stdout>:Command line #1:
[1,8]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Execution of code_aster
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.9
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Command file #1 / 1
[1,9]<stdout>:
[1,9]<stdout>:Content of the file to execute:
[1,9]<stdout>:# coding=utf-8
[1,9]<stdout>:#!/usr/bin/python
[1,9]<stdout>:
[1,9]<stdout>:import os
[1,9]<stdout>:from statistics import mean
[1,9]<stdout>:from datetime import datetime
[1,9]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,9]<stdout>:
[1,9]<stdout>:from code_aster.Commands import *
[1,9]<stdout>:from code_aster import CA
[1,9]<stdout>:from code_aster.Utilities import petscInitialize
[1,9]<stdout>:
[1,9]<stdout>:CA.init()
[1,9]<stdout>:
[1,9]<stdout>:params = {}
[1,9]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,9]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,9]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,9]<stdout>:
[1,9]<stdout>:# General parameters
[1,9]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,9]<stdout>:rank = comm.Get_rank()
[1,9]<stdout>:size = comm.Get_size()
[1,9]<stdout>:
[1,9]<stdout>:nbHexa = 8 ** params["refinements"]
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def memory_peak(mess=None):
[1,9]<stdout>:    """Return memory peak in MB"""
[1,9]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:class ChronoCtxMgGen:
[1,9]<stdout>:    stats = {}
[1,9]<stdout>:
[1,9]<stdout>:    def __init__(self, what):
[1,9]<stdout>:        self._what = what
[1,9]<stdout>:
[1,9]<stdout>:    def __enter__(self):
[1,9]<stdout>:        self.start = datetime.now()
[1,9]<stdout>:
[1,9]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,9]<stdout>:        self.stop = datetime.now()
[1,9]<stdout>:        delta = self.stop - self.start
[1,9]<stdout>:        mem = memory_peak(self._what)
[1,9]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,9]<stdout>:    pass
[1,9]<stdout>:    # def __init__(self, what):
[1,9]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def write_stats(nume_ddl):
[1,9]<stdout>:    if rank == 0:
[1,9]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,9]<stdout>:        print()
[1,9]<stdout>:        print("NB PROC")
[1,9]<stdout>:        print(size)
[1,9]<stdout>:        print()
[1,9]<stdout>:        print(
[1,9]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    for key, values in stats.items():
[1,9]<stdout>:        time = comm.gather(values[0], root=0)
[1,9]<stdout>:        mem = comm.gather(values[1], root=0)
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            print(
[1,9]<stdout>:                key
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(min(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(max(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(mean(time))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(min(mem))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(max(mem))
[1,9]<stdout>:                + ", "
[1,9]<stdout>:                + str(mean(mem))
[1,9]<stdout>:            )
[1,9]<stdout>:
[1,9]<stdout>:    mesh = nume_ddl.getMesh()
[1,9]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,9]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,9]<stdout>:
[1,9]<stdout>:    if rank == 0:
[1,9]<stdout>:        print()
[1,9]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,9]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,9]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,9]<stdout>:
[1,9]<stdout>:    def show(*args, **kwargs):
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            print(*args, **kwargs)
[1,9]<stdout>:
[1,9]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,9]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,9]<stdout>:    separ = "| :--------------- | ----------: |"
[1,9]<stdout>:    show(fmti.format("Refinement", refine))
[1,9]<stdout>:    show(separ)
[1,9]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,9]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,9]<stdout>:    for key, values in data.items():
[1,9]<stdout>:        times = comm.gather(values[0], root=0)
[1,9]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,9]<stdout>:        if rank == 0:
[1,9]<stdout>:            show(fmtt.format(key, mean(times)))
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,9]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,9]<stdout>:
[1,9]<stdout>:with ChronoCtxMg("Total"):
[1,9]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,9]<stdout>:        if params["parallel"] == "HPC":
[1,9]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,9]<stdout>:        else:
[1,9]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Model"):
[1,9]<stdout>:        model = AFFE_MODELE(
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                PHENOMENE="MECANIQUE",
[1,9]<stdout>:                MODELISATION="3D",
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Material"):
[1,9]<stdout>:        steel = DEFI_MATERIAU(
[1,9]<stdout>:            ELAS=_F(
[1,9]<stdout>:                E=200000.0,
[1,9]<stdout>:                NU=0.3,
[1,9]<stdout>:            ),
[1,9]<stdout>:            ECRO_LINE=_F(
[1,9]<stdout>:    [1,9]<stdout>:            D_SIGM_EPSI=2000.0,
[1,9]<stdout>:                SY=200.0,
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        mater = AFFE_MATERIAU(
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                MATER=steel,
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,9]<stdout>:        block = AFFE_CHAR_CINE(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            MECA_IMPO=(
[1,9]<stdout>:                _F(
[1,9]<stdout>:                    GROUP_MA="LEFT",
[1,9]<stdout>:                    DX=0,
[1,9]<stdout>:                    DY=0.0,
[1,9]<stdout>:                    DZ=0.0,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            MECA_IMPO=(
[1,9]<stdout>:                _F(
[1,9]<stdout>:                    GROUP_MA="RIGHT",
[1,9]<stdout>:                    DY=0.001,
[1,9]<stdout>:                    DZ=0.001,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,9]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,9]<stdout>:            MODELE=model,
[1,9]<stdout>:            OPTION="RIGI_MECA",
[1,9]<stdout>:            CHAM_MATER=mater,
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Numbering"):
[1,9]<stdout>:        dofNum = NUME_DDL(
[1,9]<stdout>:            MATR_RIGI=stiff_elem,
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Assembly"):
[1,9]<stdout>:        stiffness = ASSE_MATRICE(
[1,9]<stdout>:            MATR_ELEM=stiff_elem,
[1,9]<stdout>:            NUME_DDL=dofNum,
[1,9]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,9]<stdout>:        rhs = CREA_CHAMP(
[1,9]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,9]<stdout>:            OPERATION="AFFE",
[1,9]<stdout>:            MAILLAGE=mesh,
[1,9]<stdout>:            AFFE=_F(
[1,9]<stdout>:                TOUT="OUI",
[1,9]<stdout>:                NOM_CMP=(
[1,9]<stdout>:                    "DX",
[1,9]<stdout>:                    "DY",
[1,9]<stdout>:                    "DZ",
[1,9]<stdout>:                ),
[1,9]<stdout>:                VALE=(
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                    0.0,
[1,9]<stdout>:                ),
[1,9]<stdout>:            ),
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,9]<stdout>:
[1,9]<stdout>:    if params["solver"] == "PETSC":
[1,9]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,9]<stdout>:    elif params["solver"] == "MUMPS":
[1,9]<stdout>:        solver = CA.MumpsSolver(
[1,9]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,9]<stdout>:            RENUM="PARMETIS",
[1,9]<stdout>:            ACCELERATION="FR+",
[1,9]<stdout>:            POSTTRAITEMENTS="MINI",
[1,9]<stdout>:        )
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Factorize"):
[1,9]<stdout>:        solver.factorize(stiffness)
[1,9]<stdout>:
[1,9]<stdout>:    with ChronoCtxMg("Solve"):
[1,9]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,9]<stdout>:
[1,9]<stdout>:# write_stats(dofNum)
[1,9]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,9]<stdout>:if params["parallel"] == "HPC":
[1,9]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,9]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,9]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,9]<stdout>:
[1,9]<stdout>:CA.close()
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:# ------------------------------------------------------------------------------
[1,9]<stdout>:Command line #1:
[1,9]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Execution of code_aster
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.10
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Command file #1 / 1
[1,10]<stdout>:
[1,10]<stdout>:Content of the file to execute:
[1,10]<stdout>:# coding=utf-8
[1,10]<stdout>:#!/usr/bin/python
[1,10]<stdout>:
[1,10]<stdout>:import os
[1,10]<stdout>:from statistics import mean
[1,10]<stdout>:from datetime import datetime
[1,10]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,10]<stdout>:
[1,10]<stdout>:from code_aster.Commands import *
[1,10]<stdout>:from code_aster import CA
[1,10]<stdout>:from code_aster.Utilities import petscInitialize
[1,10]<stdout>:
[1,10]<stdout>:CA.init()
[1,10]<stdout>:
[1,10]<stdout>:params = {}
[1,10]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,10]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,10]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,10]<stdout>:
[1,10]<stdout>:# General parameters
[1,10]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,10]<stdout>:rank = comm.Get_rank()
[1,10]<stdout>:size = comm.Get_size()
[1,10]<stdout>:
[1,10]<stdout>:nbHexa = 8 ** params["refinements"]
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def memory_peak(mess=None):
[1,10]<stdout>:    """Return memory peak in MB"""
[1,10]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:class ChronoCtxMgGen:
[1,10]<stdout>:    stats = {}
[1,10]<stdout>:
[1,10]<stdout>:    def __init__(self, what):
[1,10]<stdout>:        self._what = what
[1,10]<stdout>:
[1,10]<stdout>:    def __enter__(self):
[1,10]<stdout>:        self.start = datetime.now()
[1,10]<stdout>:
[1,10]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,10]<stdout>:        self.stop = datetime.now()
[1,10]<stdout>:        delta = self.stop - self.start
[1,10]<stdout>:        mem = memory_peak(self._what)
[1,10]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,10]<stdout>:    pass
[1,10]<stdout>:    # def __init__(self, what):
[1,10]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def write_stats(nume_ddl):
[1,10]<stdout>:    if rank == 0:
[1,10]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,10]<stdout>:        print()
[1,10]<stdout>:        print("NB PROC")
[1,10]<stdout>:        print(size)
[1,10]<stdout>:        print()
[1,10]<stdout>:        print(
[1,10]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    for key, values in stats.items():
[1,10]<stdout>:        time = comm.gather(values[0], root=0)
[1,10]<stdout>:        mem = comm.gather(values[1], root=0)
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            print(
[1,10]<stdout>:                key
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(min(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(max(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(mean(time))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(min(mem))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(max(mem))
[1,10]<stdout>:                + ", "
[1,10]<stdout>:                + str(mean(mem))
[1,10]<stdout>:            )
[1,10]<stdout>:
[1,10]<stdout>:    mesh = nume_ddl.getMesh()
[1,10]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,10]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,10]<stdout>:
[1,10]<stdout>:    if rank == 0:
[1,10]<stdout>:        print()
[1,10]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,10]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,10]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,10]<stdout>:
[1,10]<stdout>:    def show(*args, **kwargs):
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            print(*args, **kwargs)
[1,10]<stdout>:
[1,10]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,10]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,10]<stdout>:    separ = "| :--------------- | ----------: |"
[1,10]<stdout>:    show(fmti.format("Refinement", refine))
[1,10]<stdout>:    show(separ)
[1,10]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,10]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,10]<stdout>:    for key, values in data.items():
[1,10]<stdout>:        times = comm.gather(values[0], root=0)
[1,10]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,10]<stdout>:        if rank == 0:
[1,10]<stdout>:            show(fmtt.format(key, mean(times)))
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,10]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,10]<stdout>:
[1,10]<stdout>:with ChronoCtxMg("Total"):
[1,10]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,10]<stdout>:        if params["parallel"] == "HPC":
[1,10]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,10]<stdout>:        else:
[1,10]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Model"):
[1,10]<stdout>:        model = AFFE_MODELE(
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                PHENOMENE="MECANIQUE",
[1,10]<stdout>:                MODELISATION="3D",
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Material"):
[1,10]<stdout>:        steel = DEFI_MATERIAU(
[1,10]<stdout>:            ELAS=_F(
[1,10]<stdout>:                E=200000.0,
[1,10]<stdout>:                NU=0.3,
[1,10]<stdout>:            ),
[1,10]<stdout>:            ECRO_LINE=_F(
[1,10]<stdout>:   [1,10]<stdout>:             D_SIGM_EPSI=2000.0,
[1,10]<stdout>:                SY=200.0,
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        mater = AFFE_MATERIAU(
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                MATER=steel,
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,10]<stdout>:        block = AFFE_CHAR_CINE(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            MECA_IMPO=(
[1,10]<stdout>:                _F(
[1,10]<stdout>:                    GROUP_MA="LEFT",
[1,10]<stdout>:                    DX=0,
[1,10]<stdout>:                    DY=0.0,
[1,10]<stdout>:                    DZ=0.0,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            MECA_IMPO=(
[1,10]<stdout>:                _F(
[1,10]<stdout>:                    GROUP_MA="RIGHT",
[1,10]<stdout>:                    DY=0.001,
[1,10]<stdout>:                    DZ=0.001,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,10]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,10]<stdout>:            MODELE=model,
[1,10]<stdout>:            OPTION="RIGI_MECA",
[1,10]<stdout>:            CHAM_MATER=mater,
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Numbering"):
[1,10]<stdout>:        dofNum = NUME_DDL(
[1,10]<stdout>:            MATR_RIGI=stiff_elem,
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Assembly"):
[1,10]<stdout>:        stiffness = ASSE_MATRICE(
[1,10]<stdout>:            MATR_ELEM=stiff_elem,
[1,10]<stdout>:            NUME_DDL=dofNum,
[1,10]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,10]<stdout>:        rhs = CREA_CHAMP(
[1,10]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,10]<stdout>:            OPERATION="AFFE",
[1,10]<stdout>:            MAILLAGE=mesh,
[1,10]<stdout>:            AFFE=_F(
[1,10]<stdout>:                TOUT="OUI",
[1,10]<stdout>:                NOM_CMP=(
[1,10]<stdout>:                    "DX",
[1,10]<stdout>:                    "DY",
[1,10]<stdout>:                    "DZ",
[1,10]<stdout>:                ),
[1,10]<stdout>:                VALE=(
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                    0.0,
[1,10]<stdout>:                ),
[1,10]<stdout>:            ),
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,10]<stdout>:
[1,10]<stdout>:    if params["solver"] == "PETSC":
[1,10]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,10]<stdout>:    elif params["solver"] == "MUMPS":
[1,10]<stdout>:        solver = CA.MumpsSolver(
[1,10]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,10]<stdout>:            RENUM="PARMETIS",
[1,10]<stdout>:            ACCELERATION="FR+",
[1,10]<stdout>:            POSTTRAITEMENTS="MINI",
[1,10]<stdout>:        )
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Factorize"):
[1,10]<stdout>:        solver.factorize(stiffness)
[1,10]<stdout>:
[1,10]<stdout>:    with ChronoCtxMg("Solve"):
[1,10]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,10]<stdout>:
[1,10]<stdout>:# write_stats(dofNum)
[1,10]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,10]<stdout>:if params["parallel"] == "HPC":
[1,10]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,10]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,10]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,10]<stdout>:
[1,10]<stdout>:CA.close()
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:# ------------------------------------------------------------------------------
[1,10]<stdout>:Command line #1:
[1,10]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Execution of code_aster
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.11
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Command file #1 / 1
[1,11]<stdout>:
[1,11]<stdout>:Content of the file to execute:
[1,11]<stdout>:# coding=utf-8
[1,11]<stdout>:#!/usr/bin/python
[1,11]<stdout>:
[1,11]<stdout>:import os
[1,11]<stdout>:from statistics import mean
[1,11]<stdout>:from datetime import datetime
[1,11]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,11]<stdout>:
[1,11]<stdout>:from code_aster.Commands import *
[1,11]<stdout>:from code_aster import CA
[1,11]<stdout>:from code_aster.Utilities import petscInitialize
[1,11]<stdout>:
[1,11]<stdout>:CA.init()
[1,11]<stdout>:
[1,11]<stdout>:params = {}
[1,11]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,11]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,11]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,11]<stdout>:
[1,11]<stdout>:# General parameters
[1,11]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,11]<stdout>:rank = comm.Get_rank()
[1,11]<stdout>:size = comm.Get_size()
[1,11]<stdout>:
[1,11]<stdout>:nbHexa = 8 ** params["refinements"]
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def memory_peak(mess=None):
[1,11]<stdout>:    """Return memory peak in MB"""
[1,11]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:class ChronoCtxMgGen:
[1,11]<stdout>:    stats = {}
[1,11]<stdout>:
[1,11]<stdout>:    def __init__(self, what):
[1,11]<stdout>:        self._what = what
[1,11]<stdout>:
[1,11]<stdout>:    def __enter__(self):
[1,11]<stdout>:        self.start = datetime.now()
[1,11]<stdout>:
[1,11]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,11]<stdout>:        self.stop = datetime.now()
[1,11]<stdout>:        delta = self.stop - self.start
[1,11]<stdout>:        mem = memory_peak(self._what)
[1,11]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,11]<stdout>:    pass
[1,11]<stdout>:    # def __init__(self, what):
[1,11]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def write_stats(nume_ddl):
[1,11]<stdout>:    if rank == 0:
[1,11]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,11]<stdout>:        print()
[1,11]<stdout>:        print("NB PROC")
[1,11]<stdout>:        print(size)
[1,11]<stdout>:        print()
[1,11]<stdout>:        print(
[1,11]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    for key, values in stats.items():
[1,11]<stdout>:        time = comm.gather(values[0], root=0)
[1,11]<stdout>:        mem = comm.gather(values[1], root=0)
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            print(
[1,11]<stdout>:                key
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(min(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(max(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(mean(time))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(min(mem))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(max(mem))
[1,11]<stdout>:                + ", "
[1,11]<stdout>:                + str(mean(mem))
[1,11]<stdout>:            )
[1,11]<stdout>:
[1,11]<stdout>:    mesh = nume_ddl.getMesh()
[1,11]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,11]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,11]<stdout>:
[1,11]<stdout>:    if rank == 0:
[1,11]<stdout>:        print()
[1,11]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,11]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,11]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,11]<stdout>:
[1,11]<stdout>:    def show(*args, **kwargs):
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            print(*args, **kwargs)
[1,11]<stdout>:
[1,11]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,11]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,11]<stdout>:    separ = "| :--------------- | ----------: |"
[1,11]<stdout>:    show(fmti.format("Refinement", refine))
[1,11]<stdout>:    show(separ)
[1,11]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,11]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,11]<stdout>:    for key, values in data.items():
[1,11]<stdout>:        times = comm.gather(values[0], root=0)
[1,11]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,11]<stdout>:        if rank == 0:
[1,11]<stdout>:            show(fmtt.format(key, mean(times)))
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,11]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,11]<stdout>:
[1,11]<stdout>:with ChronoCtxMg("Total"):
[1,11]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,11]<stdout>:        if params["parallel"] == "HPC":
[1,11]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,11]<stdout>:        else:
[1,11]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Model"):
[1,11]<stdout>:        model = AFFE_MODELE(
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                PHENOMENE="MECANIQUE",
[1,11]<stdout>:                MODELISATION="3D",
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Material"):
[1,11]<stdout>:        steel = DEFI_MATERIAU(
[1,11]<stdout>:            ELAS=_F(
[1,11]<stdout>:                E=200000.0,
[1,11]<stdout>:                NU=0.3,
[1,11]<stdout>:            ),
[1,11]<stdout>:            ECRO_LINE=_F(
[1,11]<stdout>:   [1,11]<stdout>:             D_SIGM_EPSI=2000.0,
[1,11]<stdout>:                SY=200.0,
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        mater = AFFE_MATERIAU(
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                MATER=steel,
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,11]<stdout>:        block = AFFE_CHAR_CINE(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            MECA_IMPO=(
[1,11]<stdout>:                _F(
[1,11]<stdout>:                    GROUP_MA="LEFT",
[1,11]<stdout>:                    DX=0,
[1,11]<stdout>:                    DY=0.0,
[1,11]<stdout>:                    DZ=0.0,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            MECA_IMPO=(
[1,11]<stdout>:                _F(
[1,11]<stdout>:                    GROUP_MA="RIGHT",
[1,11]<stdout>:                    DY=0.001,
[1,11]<stdout>:                    DZ=0.001,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,11]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,11]<stdout>:            MODELE=model,
[1,11]<stdout>:            OPTION="RIGI_MECA",
[1,11]<stdout>:            CHAM_MATER=mater,
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Numbering"):
[1,11]<stdout>:        dofNum = NUME_DDL(
[1,11]<stdout>:            MATR_RIGI=stiff_elem,
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Assembly"):
[1,11]<stdout>:        stiffness = ASSE_MATRICE(
[1,11]<stdout>:            MATR_ELEM=stiff_elem,
[1,11]<stdout>:            NUME_DDL=dofNum,
[1,11]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,11]<stdout>:        rhs = CREA_CHAMP(
[1,11]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,11]<stdout>:            OPERATION="AFFE",
[1,11]<stdout>:            MAILLAGE=mesh,
[1,11]<stdout>:            AFFE=_F(
[1,11]<stdout>:                TOUT="OUI",
[1,11]<stdout>:                NOM_CMP=(
[1,11]<stdout>:                    "DX",
[1,11]<stdout>:                    "DY",
[1,11]<stdout>:                    "DZ",
[1,11]<stdout>:                ),
[1,11]<stdout>:                VALE=(
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                    0.0,
[1,11]<stdout>:                ),
[1,11]<stdout>:            ),
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,11]<stdout>:
[1,11]<stdout>:    if params["solver"] == "PETSC":
[1,11]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,11]<stdout>:    elif params["solver"] == "MUMPS":
[1,11]<stdout>:        solver = CA.MumpsSolver(
[1,11]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,11]<stdout>:            RENUM="PARMETIS",
[1,11]<stdout>:            ACCELERATION="FR+",
[1,11]<stdout>:            POSTTRAITEMENTS="MINI",
[1,11]<stdout>:        )
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Factorize"):
[1,11]<stdout>:        solver.factorize(stiffness)
[1,11]<stdout>:
[1,11]<stdout>:    with ChronoCtxMg("Solve"):
[1,11]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,11]<stdout>:
[1,11]<stdout>:# write_stats(dofNum)
[1,11]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,11]<stdout>:if params["parallel"] == "HPC":
[1,11]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,11]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,11]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,11]<stdout>:
[1,11]<stdout>:CA.close()
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:# ------------------------------------------------------------------------------
[1,11]<stdout>:Command line #1:
[1,11]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Execution of code_aster
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.12
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Command file #1 / 1
[1,12]<stdout>:
[1,12]<stdout>:Content of the file to execute:
[1,12]<stdout>:# coding=utf-8
[1,12]<stdout>:#!/usr/bin/python
[1,12]<stdout>:
[1,12]<stdout>:import os
[1,12]<stdout>:from statistics import mean
[1,12]<stdout>:from datetime import datetime
[1,12]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,12]<stdout>:
[1,12]<stdout>:from code_aster.Commands import *
[1,12]<stdout>:from code_aster import CA
[1,12]<stdout>:from code_aster.Utilities import petscInitialize
[1,12]<stdout>:
[1,12]<stdout>:CA.init()
[1,12]<stdout>:
[1,12]<stdout>:params = {}
[1,12]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,12]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,12]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,12]<stdout>:
[1,12]<stdout>:# General parameters
[1,12]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,12]<stdout>:rank = comm.Get_rank()
[1,12]<stdout>:size = comm.Get_size()
[1,12]<stdout>:
[1,12]<stdout>:nbHexa = 8 ** params["refinements"]
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def memory_peak(mess=None):
[1,12]<stdout>:    """Return memory peak in MB"""
[1,12]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:class ChronoCtxMgGen:
[1,12]<stdout>:    stats = {}
[1,12]<stdout>:
[1,12]<stdout>:    def __init__(self, what):
[1,12]<stdout>:        self._what = what
[1,12]<stdout>:
[1,12]<stdout>:    def __enter__(self):
[1,12]<stdout>:        self.start = datetime.now()
[1,12]<stdout>:
[1,12]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,12]<stdout>:        self.stop = datetime.now()
[1,12]<stdout>:        delta = self.stop - self.start
[1,12]<stdout>:        mem = memory_peak(self._what)
[1,12]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,12]<stdout>:    pass
[1,12]<stdout>:    # def __init__(self, what):
[1,12]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def write_stats(nume_ddl):
[1,12]<stdout>:    if rank == 0:
[1,12]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,12]<stdout>:        print()
[1,12]<stdout>:        print("NB PROC")
[1,12]<stdout>:        print(size)
[1,12]<stdout>:        print()
[1,12]<stdout>:        print(
[1,12]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    for key, values in stats.items():
[1,12]<stdout>:        time = comm.gather(values[0], root=0)
[1,12]<stdout>:        mem = comm.gather(values[1], root=0)
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            print(
[1,12]<stdout>:                key
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(min(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(max(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(mean(time))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(min(mem))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(max(mem))
[1,12]<stdout>:                + ", "
[1,12]<stdout>:                + str(mean(mem))
[1,12]<stdout>:            )
[1,12]<stdout>:
[1,12]<stdout>:    mesh = nume_ddl.getMesh()
[1,12]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,12]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,12]<stdout>:
[1,12]<stdout>:    if rank == 0:
[1,12]<stdout>:        print()
[1,12]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,12]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,12]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,12]<stdout>:
[1,12]<stdout>:    def show(*args, **kwargs):
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            print(*args, **kwargs)
[1,12]<stdout>:
[1,12]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,12]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,12]<stdout>:    separ = "| :--------------- | ----------: |"
[1,12]<stdout>:    show(fmti.format("Refinement", refine))
[1,12]<stdout>:    show(separ)
[1,12]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,12]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,12]<stdout>:    for key, values in data.items():
[1,12]<stdout>:        times = comm.gather(values[0], root=0)
[1,12]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,12]<stdout>:        if rank == 0:
[1,12]<stdout>:            show(fmtt.format(key, mean(times)))
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,12]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,12]<stdout>:
[1,12]<stdout>:with ChronoCtxMg("Total"):
[1,12]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,12]<stdout>:        if params["parallel"] == "HPC":
[1,12]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,12]<stdout>:        else:
[1,12]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Model"):
[1,12]<stdout>:        model = AFFE_MODELE(
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                PHENOMENE="MECANIQUE",
[1,12]<stdout>:                MODELISATION="3D",
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Material"):
[1,12]<stdout>:        steel = DEFI_MATERIAU(
[1,12]<stdout>:            ELAS=_F(
[1,12]<stdout>:                E=200000.0,
[1,12]<stdout>:                NU=0.3,
[1,12]<stdout>:            ),
[1,12]<stdout>:            ECRO_LINE=_F(
[1,12]<stdout>:    [1,12]<stdout>:            D_SIGM_EPSI=2000.0,
[1,12]<stdout>:                SY=200.0,
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        mater = AFFE_MATERIAU(
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                MATER=steel,
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,12]<stdout>:        block = AFFE_CHAR_CINE(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            MECA_IMPO=(
[1,12]<stdout>:                _F(
[1,12]<stdout>:                    GROUP_MA="LEFT",
[1,12]<stdout>:                    DX=0,
[1,12]<stdout>:                    DY=0.0,
[1,12]<stdout>:                    DZ=0.0,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            MECA_IMPO=(
[1,12]<stdout>:                _F(
[1,12]<stdout>:                    GROUP_MA="RIGHT",
[1,12]<stdout>:                    DY=0.001,
[1,12]<stdout>:                    DZ=0.001,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,12]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,12]<stdout>:            MODELE=model,
[1,12]<stdout>:            OPTION="RIGI_MECA",
[1,12]<stdout>:            CHAM_MATER=mater,
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Numbering"):
[1,12]<stdout>:        dofNum = NUME_DDL(
[1,12]<stdout>:            MATR_RIGI=stiff_elem,
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Assembly"):
[1,12]<stdout>:        stiffness = ASSE_MATRICE(
[1,12]<stdout>:            MATR_ELEM=stiff_elem,
[1,12]<stdout>:            NUME_DDL=dofNum,
[1,12]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,12]<stdout>:        rhs = CREA_CHAMP(
[1,12]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,12]<stdout>:            OPERATION="AFFE",
[1,12]<stdout>:            MAILLAGE=mesh,
[1,12]<stdout>:            AFFE=_F(
[1,12]<stdout>:                TOUT="OUI",
[1,12]<stdout>:                NOM_CMP=(
[1,12]<stdout>:                    "DX",
[1,12]<stdout>:                    "DY",
[1,12]<stdout>:                    "DZ",
[1,12]<stdout>:                ),
[1,12]<stdout>:                VALE=(
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                    0.0,
[1,12]<stdout>:                ),
[1,12]<stdout>:            ),
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,12]<stdout>:
[1,12]<stdout>:    if params["solver"] == "PETSC":
[1,12]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,12]<stdout>:    elif params["solver"] == "MUMPS":
[1,12]<stdout>:        solver = CA.MumpsSolver(
[1,12]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,12]<stdout>:            RENUM="PARMETIS",
[1,12]<stdout>:            ACCELERATION="FR+",
[1,12]<stdout>:            POSTTRAITEMENTS="MINI",
[1,12]<stdout>:        )
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Factorize"):
[1,12]<stdout>:        solver.factorize(stiffness)
[1,12]<stdout>:
[1,12]<stdout>:    with ChronoCtxMg("Solve"):
[1,12]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,12]<stdout>:
[1,12]<stdout>:# write_stats(dofNum)
[1,12]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,12]<stdout>:if params["parallel"] == "HPC":
[1,12]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,12]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,12]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,12]<stdout>:
[1,12]<stdout>:CA.close()
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:# ------------------------------------------------------------------------------
[1,12]<stdout>:Command line #1:
[1,12]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Execution of code_aster
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.13
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Command file #1 / 1
[1,13]<stdout>:
[1,13]<stdout>:Content of the file to execute:
[1,13]<stdout>:# coding=utf-8
[1,13]<stdout>:#!/usr/bin/python
[1,13]<stdout>:
[1,13]<stdout>:import os
[1,13]<stdout>:from statistics import mean
[1,13]<stdout>:from datetime import datetime
[1,13]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,13]<stdout>:
[1,13]<stdout>:from code_aster.Commands import *
[1,13]<stdout>:from code_aster import CA
[1,13]<stdout>:from code_aster.Utilities import petscInitialize
[1,13]<stdout>:
[1,13]<stdout>:CA.init()
[1,13]<stdout>:
[1,13]<stdout>:params = {}
[1,13]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,13]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,13]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,13]<stdout>:
[1,13]<stdout>:# General parameters
[1,13]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,13]<stdout>:rank = comm.Get_rank()
[1,13]<stdout>:size = comm.Get_size()
[1,13]<stdout>:
[1,13]<stdout>:nbHexa = 8 ** params["refinements"]
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def memory_peak(mess=None):
[1,13]<stdout>:    """Return memory peak in MB"""
[1,13]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:class ChronoCtxMgGen:
[1,13]<stdout>:    stats = {}
[1,13]<stdout>:
[1,13]<stdout>:    def __init__(self, what):
[1,13]<stdout>:        self._what = what
[1,13]<stdout>:
[1,13]<stdout>:    def __enter__(self):
[1,13]<stdout>:        self.start = datetime.now()
[1,13]<stdout>:
[1,13]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,13]<stdout>:        self.stop = datetime.now()
[1,13]<stdout>:        delta = self.stop - self.start
[1,13]<stdout>:        mem = memory_peak(self._what)
[1,13]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,13]<stdout>:    pass
[1,13]<stdout>:    # def __init__(self, what):
[1,13]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def write_stats(nume_ddl):
[1,13]<stdout>:    if rank == 0:
[1,13]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,13]<stdout>:        print()
[1,13]<stdout>:        print("NB PROC")
[1,13]<stdout>:        print(size)
[1,13]<stdout>:        print()
[1,13]<stdout>:        print(
[1,13]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    for key, values in stats.items():
[1,13]<stdout>:        time = comm.gather(values[0], root=0)
[1,13]<stdout>:        mem = comm.gather(values[1], root=0)
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            print(
[1,13]<stdout>:                key
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(min(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(max(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(mean(time))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(min(mem))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(max(mem))
[1,13]<stdout>:                + ", "
[1,13]<stdout>:                + str(mean(mem))
[1,13]<stdout>:            )
[1,13]<stdout>:
[1,13]<stdout>:    mesh = nume_ddl.getMesh()
[1,13]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,13]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,13]<stdout>:
[1,13]<stdout>:    if rank == 0:
[1,13]<stdout>:        print()
[1,13]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,13]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,13]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,13]<stdout>:
[1,13]<stdout>:    def show(*args, **kwargs):
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            print(*args, **kwargs)
[1,13]<stdout>:
[1,13]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,13]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,13]<stdout>:    separ = "| :--------------- | ----------: |"
[1,13]<stdout>:    show(fmti.format("Refinement", refine))
[1,13]<stdout>:    show(separ)
[1,13]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,13]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,13]<stdout>:    for key, values in data.items():
[1,13]<stdout>:        times = comm.gather(values[0], root=0)
[1,13]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,13]<stdout>:        if rank == 0:
[1,13]<stdout>:            show(fmtt.format(key, mean(times)))
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,13]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,13]<stdout>:
[1,13]<stdout>:with ChronoCtxMg("Total"):
[1,13]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,13]<stdout>:        if params["parallel"] == "HPC":
[1,13]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,13]<stdout>:        else:
[1,13]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Model"):
[1,13]<stdout>:        model = AFFE_MODELE(
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                PHENOMENE="MECANIQUE",
[1,13]<stdout>:                MODELISATION="3D",
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Material"):
[1,13]<stdout>:        steel = DEFI_MATERIAU(
[1,13]<stdout>:            ELAS=_F(
[1,13]<stdout>:                E=200000.0,
[1,13]<stdout>:                NU=0.3,
[1,13]<stdout>:            ),
[1,13]<stdout>:            ECRO_LINE=_F(
[1,13]<stdout>:   [1,13]<stdout>:             D_SIGM_EPSI=2000.0,
[1,13]<stdout>:                SY=200.0,
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        mater = AFFE_MATERIAU(
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                MATER=steel,
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,13]<stdout>:        block = AFFE_CHAR_CINE(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            MECA_IMPO=(
[1,13]<stdout>:                _F(
[1,13]<stdout>:                    GROUP_MA="LEFT",
[1,13]<stdout>:                    DX=0,
[1,13]<stdout>:                    DY=0.0,
[1,13]<stdout>:                    DZ=0.0,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            MECA_IMPO=(
[1,13]<stdout>:                _F(
[1,13]<stdout>:                    GROUP_MA="RIGHT",
[1,13]<stdout>:                    DY=0.001,
[1,13]<stdout>:                    DZ=0.001,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,13]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,13]<stdout>:            MODELE=model,
[1,13]<stdout>:            OPTION="RIGI_MECA",
[1,13]<stdout>:            CHAM_MATER=mater,
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Numbering"):
[1,13]<stdout>:        dofNum = NUME_DDL(
[1,13]<stdout>:            MATR_RIGI=stiff_elem,
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Assembly"):
[1,13]<stdout>:        stiffness = ASSE_MATRICE(
[1,13]<stdout>:            MATR_ELEM=stiff_elem,
[1,13]<stdout>:            NUME_DDL=dofNum,
[1,13]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,13]<stdout>:        rhs = CREA_CHAMP(
[1,13]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,13]<stdout>:            OPERATION="AFFE",
[1,13]<stdout>:            MAILLAGE=mesh,
[1,13]<stdout>:            AFFE=_F(
[1,13]<stdout>:                TOUT="OUI",
[1,13]<stdout>:                NOM_CMP=(
[1,13]<stdout>:                    "DX",
[1,13]<stdout>:                    "DY",
[1,13]<stdout>:                    "DZ",
[1,13]<stdout>:                ),
[1,13]<stdout>:                VALE=(
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                    0.0,
[1,13]<stdout>:                ),
[1,13]<stdout>:            ),
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,13]<stdout>:
[1,13]<stdout>:    if params["solver"] == "PETSC":
[1,13]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,13]<stdout>:    elif params["solver"] == "MUMPS":
[1,13]<stdout>:        solver = CA.MumpsSolver(
[1,13]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,13]<stdout>:            RENUM="PARMETIS",
[1,13]<stdout>:            ACCELERATION="FR+",
[1,13]<stdout>:            POSTTRAITEMENTS="MINI",
[1,13]<stdout>:        )
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Factorize"):
[1,13]<stdout>:        solver.factorize(stiffness)
[1,13]<stdout>:
[1,13]<stdout>:    with ChronoCtxMg("Solve"):
[1,13]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,13]<stdout>:
[1,13]<stdout>:# write_stats(dofNum)
[1,13]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,13]<stdout>:if params["parallel"] == "HPC":
[1,13]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,13]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,13]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,13]<stdout>:
[1,13]<stdout>:CA.close()
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:# ------------------------------------------------------------------------------
[1,13]<stdout>:Command line #1:
[1,13]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Execution of code_aster
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.14
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Command file #1 / 1
[1,14]<stdout>:
[1,14]<stdout>:Content of the file to execute:
[1,14]<stdout>:# coding=utf-8
[1,14]<stdout>:#!/usr/bin/python
[1,14]<stdout>:
[1,14]<stdout>:import os
[1,14]<stdout>:from statistics import mean
[1,14]<stdout>:from datetime import datetime
[1,14]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,14]<stdout>:
[1,14]<stdout>:from code_aster.Commands import *
[1,14]<stdout>:from code_aster import CA
[1,14]<stdout>:from code_aster.Utilities import petscInitialize
[1,14]<stdout>:
[1,14]<stdout>:CA.init()
[1,14]<stdout>:
[1,14]<stdout>:params = {}
[1,14]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,14]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,14]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,14]<stdout>:
[1,14]<stdout>:# General parameters
[1,14]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,14]<stdout>:rank = comm.Get_rank()
[1,14]<stdout>:size = comm.Get_size()
[1,14]<stdout>:
[1,14]<stdout>:nbHexa = 8 ** params["refinements"]
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def memory_peak(mess=None):
[1,14]<stdout>:    """Return memory peak in MB"""
[1,14]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:class ChronoCtxMgGen:
[1,14]<stdout>:    stats = {}
[1,14]<stdout>:
[1,14]<stdout>:    def __init__(self, what):
[1,14]<stdout>:        self._what = what
[1,14]<stdout>:
[1,14]<stdout>:    def __enter__(self):
[1,14]<stdout>:        self.start = datetime.now()
[1,14]<stdout>:
[1,14]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,14]<stdout>:        self.stop = datetime.now()
[1,14]<stdout>:        delta = self.stop - self.start
[1,14]<stdout>:        mem = memory_peak(self._what)
[1,14]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,14]<stdout>:    pass
[1,14]<stdout>:    # def __init__(self, what):
[1,14]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def write_stats(nume_ddl):
[1,14]<stdout>:    if rank == 0:
[1,14]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,14]<stdout>:        print()
[1,14]<stdout>:        print("NB PROC")
[1,14]<stdout>:        print(size)
[1,14]<stdout>:        print()
[1,14]<stdout>:        print(
[1,14]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    for key, values in stats.items():
[1,14]<stdout>:        time = comm.gather(values[0], root=0)
[1,14]<stdout>:        mem = comm.gather(values[1], root=0)
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            print(
[1,14]<stdout>:                key
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(min(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(max(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(mean(time))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(min(mem))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(max(mem))
[1,14]<stdout>:                + ", "
[1,14]<stdout>:                + str(mean(mem))
[1,14]<stdout>:            )
[1,14]<stdout>:
[1,14]<stdout>:    mesh = nume_ddl.getMesh()
[1,14]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,14]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,14]<stdout>:
[1,14]<stdout>:    if rank == 0:
[1,14]<stdout>:        print()
[1,14]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,14]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,14]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,14]<stdout>:
[1,14]<stdout>:    def show(*args, **kwargs):
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            print(*args, **kwargs)
[1,14]<stdout>:
[1,14]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,14]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,14]<stdout>:    separ = "| :--------------- | ----------: |"
[1,14]<stdout>:    show(fmti.format("Refinement", refine))
[1,14]<stdout>:    show(separ)
[1,14]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,14]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,14]<stdout>:    for key, values in data.items():
[1,14]<stdout>:        times = comm.gather(values[0], root=0)
[1,14]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,14]<stdout>:        if rank == 0:
[1,14]<stdout>:            show(fmtt.format(key, mean(times)))
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,14]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,14]<stdout>:
[1,14]<stdout>:with ChronoCtxMg("Total"):
[1,14]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,14]<stdout>:        if params["parallel"] == "HPC":
[1,14]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,14]<stdout>:        else:
[1,14]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Model"):
[1,14]<stdout>:        model = AFFE_MODELE(
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                PHENOMENE="MECANIQUE",
[1,14]<stdout>:                MODELISATION="3D",
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Material"):
[1,14]<stdout>:        steel = DEFI_MATERIAU(
[1,14]<stdout>:            ELAS=_F(
[1,14]<stdout>:                E=200000.0,
[1,14]<stdout>:                NU=0.3,
[1,14]<stdout>:            ),
[1,14]<stdout>:            ECRO_LINE=_F(
[1,14]<stdout>:    [1,14]<stdout>:            D_SIGM_EPSI=2000.0,
[1,14]<stdout>:                SY=200.0,
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        mater = AFFE_MATERIAU(
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                MATER=steel,
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,14]<stdout>:        block = AFFE_CHAR_CINE(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            MECA_IMPO=(
[1,14]<stdout>:                _F(
[1,14]<stdout>:                    GROUP_MA="LEFT",
[1,14]<stdout>:                    DX=0,
[1,14]<stdout>:                    DY=0.0,
[1,14]<stdout>:                    DZ=0.0,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            MECA_IMPO=(
[1,14]<stdout>:                _F(
[1,14]<stdout>:                    GROUP_MA="RIGHT",
[1,14]<stdout>:                    DY=0.001,
[1,14]<stdout>:                    DZ=0.001,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,14]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,14]<stdout>:            MODELE=model,
[1,14]<stdout>:            OPTION="RIGI_MECA",
[1,14]<stdout>:            CHAM_MATER=mater,
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Numbering"):
[1,14]<stdout>:        dofNum = NUME_DDL(
[1,14]<stdout>:            MATR_RIGI=stiff_elem,
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Assembly"):
[1,14]<stdout>:        stiffness = ASSE_MATRICE(
[1,14]<stdout>:            MATR_ELEM=stiff_elem,
[1,14]<stdout>:            NUME_DDL=dofNum,
[1,14]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,14]<stdout>:        rhs = CREA_CHAMP(
[1,14]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,14]<stdout>:            OPERATION="AFFE",
[1,14]<stdout>:            MAILLAGE=mesh,
[1,14]<stdout>:            AFFE=_F(
[1,14]<stdout>:                TOUT="OUI",
[1,14]<stdout>:                NOM_CMP=(
[1,14]<stdout>:                    "DX",
[1,14]<stdout>:                    "DY",
[1,14]<stdout>:                    "DZ",
[1,14]<stdout>:                ),
[1,14]<stdout>:                VALE=(
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                    0.0,
[1,14]<stdout>:                ),
[1,14]<stdout>:            ),
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,14]<stdout>:
[1,14]<stdout>:    if params["solver"] == "PETSC":
[1,14]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,14]<stdout>:    elif params["solver"] == "MUMPS":
[1,14]<stdout>:        solver = CA.MumpsSolver(
[1,14]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,14]<stdout>:            RENUM="PARMETIS",
[1,14]<stdout>:            ACCELERATION="FR+",
[1,14]<stdout>:            POSTTRAITEMENTS="MINI",
[1,14]<stdout>:        )
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Factorize"):
[1,14]<stdout>:        solver.factorize(stiffness)
[1,14]<stdout>:
[1,14]<stdout>:    with ChronoCtxMg("Solve"):
[1,14]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,14]<stdout>:
[1,14]<stdout>:# write_stats(dofNum)
[1,14]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,14]<stdout>:if params["parallel"] == "HPC":
[1,14]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,14]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,14]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,14]<stdout>:
[1,14]<stdout>:CA.close()
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:# ------------------------------------------------------------------------------
[1,14]<stdout>:Command line #1:
[1,14]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Execution of code_aster
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.15
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Command file #1 / 1
[1,15]<stdout>:
[1,15]<stdout>:Content of the file to execute:
[1,15]<stdout>:# coding=utf-8
[1,15]<stdout>:#!/usr/bin/python
[1,15]<stdout>:
[1,15]<stdout>:import os
[1,15]<stdout>:from statistics import mean
[1,15]<stdout>:from datetime import datetime
[1,15]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,15]<stdout>:
[1,15]<stdout>:from code_aster.Commands import *
[1,15]<stdout>:from code_aster import CA
[1,15]<stdout>:from code_aster.Utilities import petscInitialize
[1,15]<stdout>:
[1,15]<stdout>:CA.init()
[1,15]<stdout>:
[1,15]<stdout>:params = {}
[1,15]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,15]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,15]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,15]<stdout>:
[1,15]<stdout>:# General parameters
[1,15]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,15]<stdout>:rank = comm.Get_rank()
[1,15]<stdout>:size = comm.Get_size()
[1,15]<stdout>:
[1,15]<stdout>:nbHexa = 8 ** params["refinements"]
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def memory_peak(mess=None):
[1,15]<stdout>:    """Return memory peak in MB"""
[1,15]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:class ChronoCtxMgGen:
[1,15]<stdout>:    stats = {}
[1,15]<stdout>:
[1,15]<stdout>:    def __init__(self, what):
[1,15]<stdout>:        self._what = what
[1,15]<stdout>:
[1,15]<stdout>:    def __enter__(self):
[1,15]<stdout>:        self.start = datetime.now()
[1,15]<stdout>:
[1,15]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,15]<stdout>:        self.stop = datetime.now()
[1,15]<stdout>:        delta = self.stop - self.start
[1,15]<stdout>:        mem = memory_peak(self._what)
[1,15]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,15]<stdout>:    pass
[1,15]<stdout>:    # def __init__(self, what):
[1,15]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def write_stats(nume_ddl):
[1,15]<stdout>:    if rank == 0:
[1,15]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,15]<stdout>:        print()
[1,15]<stdout>:        print("NB PROC")
[1,15]<stdout>:        print(size)
[1,15]<stdout>:        print()
[1,15]<stdout>:        print(
[1,15]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    for key, values in stats.items():
[1,15]<stdout>:        time = comm.gather(values[0], root=0)
[1,15]<stdout>:        mem = comm.gather(values[1], root=0)
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            print(
[1,15]<stdout>:                key
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(min(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(max(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(mean(time))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(min(mem))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(max(mem))
[1,15]<stdout>:                + ", "
[1,15]<stdout>:                + str(mean(mem))
[1,15]<stdout>:            )
[1,15]<stdout>:
[1,15]<stdout>:    mesh = nume_ddl.getMesh()
[1,15]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,15]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,15]<stdout>:
[1,15]<stdout>:    if rank == 0:
[1,15]<stdout>:        print()
[1,15]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,15]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,15]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,15]<stdout>:
[1,15]<stdout>:    def show(*args, **kwargs):
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            print(*args, **kwargs)
[1,15]<stdout>:
[1,15]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,15]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,15]<stdout>:    separ = "| :--------------- | ----------: |"
[1,15]<stdout>:    show(fmti.format("Refinement", refine))
[1,15]<stdout>:    show(separ)
[1,15]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,15]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,15]<stdout>:    for key, values in data.items():
[1,15]<stdout>:        times = comm.gather(values[0], root=0)
[1,15]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,15]<stdout>:        if rank == 0:
[1,15]<stdout>:            show(fmtt.format(key, mean(times)))
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,15]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,15]<stdout>:
[1,15]<stdout>:with ChronoCtxMg("Total"):
[1,15]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,15]<stdout>:        if params["parallel"] == "HPC":
[1,15]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,15]<stdout>:        else:
[1,15]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Model"):
[1,15]<stdout>:        model = AFFE_MODELE(
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                PHENOMENE="MECANIQUE",
[1,15]<stdout>:                MODELISATION="3D",
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Material"):
[1,15]<stdout>:        steel = DEFI_MATERIAU(
[1,15]<stdout>:            ELAS=_F(
[1,15]<stdout>:                E=200000.0,
[1,15]<stdout>:                NU=0.3,
[1,15]<stdout>:            ),
[1,15]<stdout>:            ECRO_LINE=_F(
[1,15]<stdout>:    [1,15]<stdout>:            D_SIGM_EPSI=2000.0,
[1,15]<stdout>:                SY=200.0,
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        mater = AFFE_MATERIAU(
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                MATER=steel,
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,15]<stdout>:        block = AFFE_CHAR_CINE(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            MECA_IMPO=(
[1,15]<stdout>:                _F(
[1,15]<stdout>:                    GROUP_MA="LEFT",
[1,15]<stdout>:                    DX=0,
[1,15]<stdout>:                    DY=0.0,
[1,15]<stdout>:                    DZ=0.0,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            MECA_IMPO=(
[1,15]<stdout>:                _F(
[1,15]<stdout>:                    GROUP_MA="RIGHT",
[1,15]<stdout>:                    DY=0.001,
[1,15]<stdout>:                    DZ=0.001,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,15]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,15]<stdout>:            MODELE=model,
[1,15]<stdout>:            OPTION="RIGI_MECA",
[1,15]<stdout>:            CHAM_MATER=mater,
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Numbering"):
[1,15]<stdout>:        dofNum = NUME_DDL(
[1,15]<stdout>:            MATR_RIGI=stiff_elem,
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Assembly"):
[1,15]<stdout>:        stiffness = ASSE_MATRICE(
[1,15]<stdout>:            MATR_ELEM=stiff_elem,
[1,15]<stdout>:            NUME_DDL=dofNum,
[1,15]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,15]<stdout>:        rhs = CREA_CHAMP(
[1,15]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,15]<stdout>:            OPERATION="AFFE",
[1,15]<stdout>:            MAILLAGE=mesh,
[1,15]<stdout>:            AFFE=_F(
[1,15]<stdout>:                TOUT="OUI",
[1,15]<stdout>:                NOM_CMP=(
[1,15]<stdout>:                    "DX",
[1,15]<stdout>:                    "DY",
[1,15]<stdout>:                    "DZ",
[1,15]<stdout>:                ),
[1,15]<stdout>:                VALE=(
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                    0.0,
[1,15]<stdout>:                ),
[1,15]<stdout>:            ),
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,15]<stdout>:
[1,15]<stdout>:    if params["solver"] == "PETSC":
[1,15]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,15]<stdout>:    elif params["solver"] == "MUMPS":
[1,15]<stdout>:        solver = CA.MumpsSolver(
[1,15]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,15]<stdout>:            RENUM="PARMETIS",
[1,15]<stdout>:            ACCELERATION="FR+",
[1,15]<stdout>:            POSTTRAITEMENTS="MINI",
[1,15]<stdout>:        )
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Factorize"):
[1,15]<stdout>:        solver.factorize(stiffness)
[1,15]<stdout>:
[1,15]<stdout>:    with ChronoCtxMg("Solve"):
[1,15]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,15]<stdout>:
[1,15]<stdout>:# write_stats(dofNum)
[1,15]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,15]<stdout>:if params["parallel"] == "HPC":
[1,15]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,15]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,15]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,15]<stdout>:
[1,15]<stdout>:CA.close()
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:# ------------------------------------------------------------------------------
[1,15]<stdout>:Command line #1:
[1,15]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Execution of code_aster
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.16
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Command file #1 / 1
[1,16]<stdout>:
[1,16]<stdout>:Content of the file to execute:
[1,16]<stdout>:# coding=utf-8
[1,16]<stdout>:#!/usr/bin/python
[1,16]<stdout>:
[1,16]<stdout>:import os
[1,16]<stdout>:from statistics import mean
[1,16]<stdout>:from datetime import datetime
[1,16]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,16]<stdout>:
[1,16]<stdout>:from code_aster.Commands import *
[1,16]<stdout>:from code_aster import CA
[1,16]<stdout>:from code_aster.Utilities import petscInitialize
[1,16]<stdout>:
[1,16]<stdout>:CA.init()
[1,16]<stdout>:
[1,16]<stdout>:params = {}
[1,16]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,16]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,16]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,16]<stdout>:
[1,16]<stdout>:# General parameters
[1,16]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,16]<stdout>:rank = comm.Get_rank()
[1,16]<stdout>:size = comm.Get_size()
[1,16]<stdout>:
[1,16]<stdout>:nbHexa = 8 ** params["refinements"]
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:def memory_peak(mess=None):
[1,16]<stdout>:    """Return memory peak in MB"""
[1,16]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:class ChronoCtxMgGen:
[1,16]<stdout>:    stats = {}
[1,16]<stdout>:
[1,16]<stdout>:    def __init__(self, what):
[1,16]<stdout>:        self._what = what
[1,16]<stdout>:
[1,16]<stdout>:    def __enter__(self):
[1,16]<stdout>:        self.start = datetime.now()
[1,16]<stdout>:
[1,16]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,16]<stdout>:        self.stop = datetime.now()
[1,16]<stdout>:        delta = self.stop - self.start
[1,16]<stdout>:        mem = memory_peak(self._what)
[1,16]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,16]<stdout>:    pass
[1,16]<stdout>:    # def __init__(self, what):
[1,16]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:def write_stats(nume_ddl):
[1,16]<stdout>:    if rank == 0:
[1,16]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,16]<stdout>:        print()
[1,16]<stdout>:        print("NB PROC")
[1,16]<stdout>:        print(size)
[1,16]<stdout>:        print()
[1,16]<stdout>:        print(
[1,16]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    for key, values in stats.items():
[1,16]<stdout>:        time = comm.gather(values[0], root=0)
[1,16]<stdout>:        mem = comm.gather(values[1], root=0)
[1,16]<stdout>:        if rank == 0:
[1,16]<stdout>:            print(
[1,16]<stdout>:                key
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(min(time))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(max(time))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(mean(time))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(min(mem))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(max(mem))
[1,16]<stdout>:                + ", "
[1,16]<stdout>:                + str(mean(mem))
[1,16]<stdout>:            )
[1,16]<stdout>:
[1,16]<stdout>:    mesh = nume_ddl.getMesh()
[1,16]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,16]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,16]<stdout>:
[1,16]<stdout>:    if rank == 0:
[1,16]<stdout>:        print()
[1,16]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,16]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,16]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,16]<stdout>:
[1,16]<stdout>:    def show(*args, **kwargs):
[1,16]<stdout>:        if rank == 0:
[1,16]<stdout>:            print(*args, **kwargs)
[1,16]<stdout>:
[1,16]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,16]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,16]<stdout>:    separ = "| :--------------- | ----------: |"
[1,16]<stdout>:    show(fmti.format("Refinement", refine))
[1,16]<stdout>:    show(separ)
[1,16]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,16]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,16]<stdout>:    for key, values in data.items():
[1,16]<stdout>:        times = comm.gather(values[0], root=0)
[1,16]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,16]<stdout>:        if rank == 0:
[1,16]<stdout>:            show(fmtt.format(key, mean(times)))
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,16]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,16]<stdout>:
[1,16]<stdout>:with ChronoCtxMg("Total"):
[1,16]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,16]<stdout>:        if params["parallel"] == "HPC":
[1,16]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,16]<stdout>:        else:
[1,16]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Model"):
[1,16]<stdout>:        model = AFFE_MODELE(
[1,16]<stdout>:            MAILLAGE=mesh,
[1,16]<stdout>:            AFFE=_F(
[1,16]<stdout>:                TOUT="OUI",
[1,16]<stdout>:                PHENOMENE="MECANIQUE",
[1,16]<stdout>:                MODELISATION="3D",
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Material"):
[1,16]<stdout>:        steel = DEFI_MATERIAU(
[1,16]<stdout>:            ELAS=_F(
[1,16]<stdout>:                E=200000.0,
[1,16]<stdout>:                NU=0.3,
[1,16]<stdout>:            ),
[1,16]<stdout>:            ECRO_LINE=_F(
[1,16]<stdout>:    [1,16]<stdout>:            D_SIGM_EPSI=2000.0,
[1,16]<stdout>:                SY=200.0,
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:        mater = AFFE_MATERIAU(
[1,16]<stdout>:            MAILLAGE=mesh,
[1,16]<stdout>:            AFFE=_F(
[1,16]<stdout>:                TOUT="OUI",
[1,16]<stdout>:                MATER=steel,
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,16]<stdout>:        block = AFFE_CHAR_CINE(
[1,16]<stdout>:            MODELE=model,
[1,16]<stdout>:            MECA_IMPO=(
[1,16]<stdout>:                _F(
[1,16]<stdout>:                    GROUP_MA="LEFT",
[1,16]<stdout>:                    DX=0,
[1,16]<stdout>:                    DY=0.0,
[1,16]<stdout>:                    DZ=0.0,
[1,16]<stdout>:                ),
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,16]<stdout>:            MODELE=model,
[1,16]<stdout>:            MECA_IMPO=(
[1,16]<stdout>:                _F(
[1,16]<stdout>:                    GROUP_MA="RIGHT",
[1,16]<stdout>:                    DY=0.001,
[1,16]<stdout>:                    DZ=0.001,
[1,16]<stdout>:                ),
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,16]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,16]<stdout>:            MODELE=model,
[1,16]<stdout>:            OPTION="RIGI_MECA",
[1,16]<stdout>:            CHAM_MATER=mater,
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Numbering"):
[1,16]<stdout>:        dofNum = NUME_DDL(
[1,16]<stdout>:            MATR_RIGI=stiff_elem,
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Assembly"):
[1,16]<stdout>:        stiffness = ASSE_MATRICE(
[1,16]<stdout>:            MATR_ELEM=stiff_elem,
[1,16]<stdout>:            NUME_DDL=dofNum,
[1,16]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,16]<stdout>:        rhs = CREA_CHAMP(
[1,16]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,16]<stdout>:            OPERATION="AFFE",
[1,16]<stdout>:            MAILLAGE=mesh,
[1,16]<stdout>:            AFFE=_F(
[1,16]<stdout>:                TOUT="OUI",
[1,16]<stdout>:                NOM_CMP=(
[1,16]<stdout>:                    "DX",
[1,16]<stdout>:                    "DY",
[1,16]<stdout>:                    "DZ",
[1,16]<stdout>:                ),
[1,16]<stdout>:                VALE=(
[1,16]<stdout>:                    0.0,
[1,16]<stdout>:                    0.0,
[1,16]<stdout>:                    0.0,
[1,16]<stdout>:                ),
[1,16]<stdout>:            ),
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,16]<stdout>:
[1,16]<stdout>:    if params["solver"] == "PETSC":
[1,16]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,16]<stdout>:    elif params["solver"] == "MUMPS":
[1,16]<stdout>:        solver = CA.MumpsSolver(
[1,16]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,16]<stdout>:            RENUM="PARMETIS",
[1,16]<stdout>:            ACCELERATION="FR+",
[1,16]<stdout>:            POSTTRAITEMENTS="MINI",
[1,16]<stdout>:        )
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Factorize"):
[1,16]<stdout>:        solver.factorize(stiffness)
[1,16]<stdout>:
[1,16]<stdout>:    with ChronoCtxMg("Solve"):
[1,16]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,16]<stdout>:
[1,16]<stdout>:# write_stats(dofNum)
[1,16]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,16]<stdout>:if params["parallel"] == "HPC":
[1,16]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,16]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,16]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,16]<stdout>:
[1,16]<stdout>:CA.close()
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:# ------------------------------------------------------------------------------
[1,16]<stdout>:Command line #1:
[1,16]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Execution of code_aster
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.17
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Command file #1 / 1
[1,17]<stdout>:
[1,17]<stdout>:Content of the file to execute:
[1,17]<stdout>:# coding=utf-8
[1,17]<stdout>:#!/usr/bin/python
[1,17]<stdout>:
[1,17]<stdout>:import os
[1,17]<stdout>:from statistics import mean
[1,17]<stdout>:from datetime import datetime
[1,17]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,17]<stdout>:
[1,17]<stdout>:from code_aster.Commands import *
[1,17]<stdout>:from code_aster import CA
[1,17]<stdout>:from code_aster.Utilities import petscInitialize
[1,17]<stdout>:
[1,17]<stdout>:CA.init()
[1,17]<stdout>:
[1,17]<stdout>:params = {}
[1,17]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,17]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,17]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,17]<stdout>:
[1,17]<stdout>:# General parameters
[1,17]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,17]<stdout>:rank = comm.Get_rank()
[1,17]<stdout>:size = comm.Get_size()
[1,17]<stdout>:
[1,17]<stdout>:nbHexa = 8 ** params["refinements"]
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:def memory_peak(mess=None):
[1,17]<stdout>:    """Return memory peak in MB"""
[1,17]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:class ChronoCtxMgGen:
[1,17]<stdout>:    stats = {}
[1,17]<stdout>:
[1,17]<stdout>:    def __init__(self, what):
[1,17]<stdout>:        self._what = what
[1,17]<stdout>:
[1,17]<stdout>:    def __enter__(self):
[1,17]<stdout>:        self.start = datetime.now()
[1,17]<stdout>:
[1,17]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,17]<stdout>:        self.stop = datetime.now()
[1,17]<stdout>:        delta = self.stop - self.start
[1,17]<stdout>:        mem = memory_peak(self._what)
[1,17]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,17]<stdout>:    pass
[1,17]<stdout>:    # def __init__(self, what):
[1,17]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:def write_stats(nume_ddl):
[1,17]<stdout>:    if rank == 0:
[1,17]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,17]<stdout>:        print()
[1,17]<stdout>:        print("NB PROC")
[1,17]<stdout>:        print(size)
[1,17]<stdout>:        print()
[1,17]<stdout>:        print(
[1,17]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    for key, values in stats.items():
[1,17]<stdout>:        time = comm.gather(values[0], root=0)
[1,17]<stdout>:        mem = comm.gather(values[1], root=0)
[1,17]<stdout>:        if rank == 0:
[1,17]<stdout>:            print(
[1,17]<stdout>:                key
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(min(time))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(max(time))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(mean(time))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(min(mem))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(max(mem))
[1,17]<stdout>:                + ", "
[1,17]<stdout>:                + str(mean(mem))
[1,17]<stdout>:            )
[1,17]<stdout>:
[1,17]<stdout>:    mesh = nume_ddl.getMesh()
[1,17]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,17]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,17]<stdout>:
[1,17]<stdout>:    if rank == 0:
[1,17]<stdout>:        print()
[1,17]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,17]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,17]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,17]<stdout>:
[1,17]<stdout>:    def show(*args, **kwargs):
[1,17]<stdout>:        if rank == 0:
[1,17]<stdout>:            print(*args, **kwargs)
[1,17]<stdout>:
[1,17]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,17]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,17]<stdout>:    separ = "| :--------------- | ----------: |"
[1,17]<stdout>:    show(fmti.format("Refinement", refine))
[1,17]<stdout>:    show(separ)
[1,17]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,17]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,17]<stdout>:    for key, values in data.items():
[1,17]<stdout>:        times = comm.gather(values[0], root=0)
[1,17]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,17]<stdout>:        if rank == 0:
[1,17]<stdout>:            show(fmtt.format(key, mean(times)))
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,17]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,17]<stdout>:
[1,17]<stdout>:with ChronoCtxMg("Total"):
[1,17]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,17]<stdout>:        if params["parallel"] == "HPC":
[1,17]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,17]<stdout>:        else:
[1,17]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Model"):
[1,17]<stdout>:        model = AFFE_MODELE(
[1,17]<stdout>:            MAILLAGE=mesh,
[1,17]<stdout>:            AFFE=_F(
[1,17]<stdout>:                TOUT="OUI",
[1,17]<stdout>:                PHENOMENE="MECANIQUE",
[1,17]<stdout>:                MODELISATION="3D",
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Material"):
[1,17]<stdout>:        steel = DEFI_MATERIAU(
[1,17]<stdout>:            ELAS=_F(
[1,17]<stdout>:                E=200000.0,
[1,17]<stdout>:                NU=0.3,
[1,17]<stdout>:            ),
[1,17]<stdout>:            ECRO_LINE=_F(
[1,17]<stdout>:   [1,17]<stdout>:             D_SIGM_EPSI=2000.0,
[1,17]<stdout>:                SY=200.0,
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:        mater = AFFE_MATERIAU(
[1,17]<stdout>:            MAILLAGE=mesh,
[1,17]<stdout>:            AFFE=_F(
[1,17]<stdout>:                TOUT="OUI",
[1,17]<stdout>:                MATER=steel,
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,17]<stdout>:        block = AFFE_CHAR_CINE(
[1,17]<stdout>:            MODELE=model,
[1,17]<stdout>:            MECA_IMPO=(
[1,17]<stdout>:                _F(
[1,17]<stdout>:                    GROUP_MA="LEFT",
[1,17]<stdout>:                    DX=0,
[1,17]<stdout>:                    DY=0.0,
[1,17]<stdout>:                    DZ=0.0,
[1,17]<stdout>:                ),
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,17]<stdout>:            MODELE=model,
[1,17]<stdout>:            MECA_IMPO=(
[1,17]<stdout>:                _F(
[1,17]<stdout>:                    GROUP_MA="RIGHT",
[1,17]<stdout>:                    DY=0.001,
[1,17]<stdout>:                    DZ=0.001,
[1,17]<stdout>:                ),
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,17]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,17]<stdout>:            MODELE=model,
[1,17]<stdout>:            OPTION="RIGI_MECA",
[1,17]<stdout>:            CHAM_MATER=mater,
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Numbering"):
[1,17]<stdout>:        dofNum = NUME_DDL(
[1,17]<stdout>:            MATR_RIGI=stiff_elem,
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Assembly"):
[1,17]<stdout>:        stiffness = ASSE_MATRICE(
[1,17]<stdout>:            MATR_ELEM=stiff_elem,
[1,17]<stdout>:            NUME_DDL=dofNum,
[1,17]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,17]<stdout>:        rhs = CREA_CHAMP(
[1,17]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,17]<stdout>:            OPERATION="AFFE",
[1,17]<stdout>:            MAILLAGE=mesh,
[1,17]<stdout>:            AFFE=_F(
[1,17]<stdout>:                TOUT="OUI",
[1,17]<stdout>:                NOM_CMP=(
[1,17]<stdout>:                    "DX",
[1,17]<stdout>:                    "DY",
[1,17]<stdout>:                    "DZ",
[1,17]<stdout>:                ),
[1,17]<stdout>:                VALE=(
[1,17]<stdout>:                    0.0,
[1,17]<stdout>:                    0.0,
[1,17]<stdout>:                    0.0,
[1,17]<stdout>:                ),
[1,17]<stdout>:            ),
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,17]<stdout>:
[1,17]<stdout>:    if params["solver"] == "PETSC":
[1,17]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,17]<stdout>:    elif params["solver"] == "MUMPS":
[1,17]<stdout>:        solver = CA.MumpsSolver(
[1,17]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,17]<stdout>:            RENUM="PARMETIS",
[1,17]<stdout>:            ACCELERATION="FR+",
[1,17]<stdout>:            POSTTRAITEMENTS="MINI",
[1,17]<stdout>:        )
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Factorize"):
[1,17]<stdout>:        solver.factorize(stiffness)
[1,17]<stdout>:
[1,17]<stdout>:    with ChronoCtxMg("Solve"):
[1,17]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,17]<stdout>:
[1,17]<stdout>:# write_stats(dofNum)
[1,17]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,17]<stdout>:if params["parallel"] == "HPC":
[1,17]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,17]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,17]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,17]<stdout>:
[1,17]<stdout>:CA.close()
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:# ------------------------------------------------------------------------------
[1,17]<stdout>:Command line #1:
[1,17]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Execution of code_aster
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.18
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Command file #1 / 1
[1,18]<stdout>:
[1,18]<stdout>:Content of the file to execute:
[1,18]<stdout>:# coding=utf-8
[1,18]<stdout>:#!/usr/bin/python
[1,18]<stdout>:
[1,18]<stdout>:import os
[1,18]<stdout>:from statistics import mean
[1,18]<stdout>:from datetime import datetime
[1,18]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,18]<stdout>:
[1,18]<stdout>:from code_aster.Commands import *
[1,18]<stdout>:from code_aster import CA
[1,18]<stdout>:from code_aster.Utilities import petscInitialize
[1,18]<stdout>:
[1,18]<stdout>:CA.init()
[1,18]<stdout>:
[1,18]<stdout>:params = {}
[1,18]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,18]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,18]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,18]<stdout>:
[1,18]<stdout>:# General parameters
[1,18]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,18]<stdout>:rank = comm.Get_rank()
[1,18]<stdout>:size = comm.Get_size()
[1,18]<stdout>:
[1,18]<stdout>:nbHexa = 8 ** params["refinements"]
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:def memory_peak(mess=None):
[1,18]<stdout>:    """Return memory peak in MB"""
[1,18]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:class ChronoCtxMgGen:
[1,18]<stdout>:    stats = {}
[1,18]<stdout>:
[1,18]<stdout>:    def __init__(self, what):
[1,18]<stdout>:        self._what = what
[1,18]<stdout>:
[1,18]<stdout>:    def __enter__(self):
[1,18]<stdout>:        self.start = datetime.now()
[1,18]<stdout>:
[1,18]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,18]<stdout>:        self.stop = datetime.now()
[1,18]<stdout>:        delta = self.stop - self.start
[1,18]<stdout>:        mem = memory_peak(self._what)
[1,18]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,18]<stdout>:    pass
[1,18]<stdout>:    # def __init__(self, what):
[1,18]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:def write_stats(nume_ddl):
[1,18]<stdout>:    if rank == 0:
[1,18]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,18]<stdout>:        print()
[1,18]<stdout>:        print("NB PROC")
[1,18]<stdout>:        print(size)
[1,18]<stdout>:        print()
[1,18]<stdout>:        print(
[1,18]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    for key, values in stats.items():
[1,18]<stdout>:        time = comm.gather(values[0], root=0)
[1,18]<stdout>:        mem = comm.gather(values[1], root=0)
[1,18]<stdout>:        if rank == 0:
[1,18]<stdout>:            print(
[1,18]<stdout>:                key
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(min(time))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(max(time))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(mean(time))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(min(mem))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(max(mem))
[1,18]<stdout>:                + ", "
[1,18]<stdout>:                + str(mean(mem))
[1,18]<stdout>:            )
[1,18]<stdout>:
[1,18]<stdout>:    mesh = nume_ddl.getMesh()
[1,18]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,18]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,18]<stdout>:
[1,18]<stdout>:    if rank == 0:
[1,18]<stdout>:        print()
[1,18]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,18]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,18]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,18]<stdout>:
[1,18]<stdout>:    def show(*args, **kwargs):
[1,18]<stdout>:        if rank == 0:
[1,18]<stdout>:            print(*args, **kwargs)
[1,18]<stdout>:
[1,18]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,18]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,18]<stdout>:    separ = "| :--------------- | ----------: |"
[1,18]<stdout>:    show(fmti.format("Refinement", refine))
[1,18]<stdout>:    show(separ)
[1,18]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,18]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,18]<stdout>:    for key, values in data.items():
[1,18]<stdout>:        times = comm.gather(values[0], root=0)
[1,18]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,18]<stdout>:        if rank == 0:
[1,18]<stdout>:            show(fmtt.format(key, mean(times)))
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,18]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,18]<stdout>:
[1,18]<stdout>:with ChronoCtxMg("Total"):
[1,18]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,18]<stdout>:        if params["parallel"] == "HPC":
[1,18]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,18]<stdout>:        else:
[1,18]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Model"):
[1,18]<stdout>:        model = AFFE_MODELE(
[1,18]<stdout>:            MAILLAGE=mesh,
[1,18]<stdout>:            AFFE=_F(
[1,18]<stdout>:                TOUT="OUI",
[1,18]<stdout>:                PHENOMENE="MECANIQUE",
[1,18]<stdout>:                MODELISATION="3D",
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Material"):
[1,18]<stdout>:        steel = DEFI_MATERIAU(
[1,18]<stdout>:            ELAS=_F(
[1,18]<stdout>:                E=200000.0,
[1,18]<stdout>:                NU=0.3,
[1,18]<stdout>:            ),
[1,18]<stdout>:            ECRO_LINE=_F(
[1,18]<stdout>:   [1,18]<stdout>:             D_SIGM_EPSI=2000.0,
[1,18]<stdout>:                SY=200.0,
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:        mater = AFFE_MATERIAU(
[1,18]<stdout>:            MAILLAGE=mesh,
[1,18]<stdout>:            AFFE=_F(
[1,18]<stdout>:                TOUT="OUI",
[1,18]<stdout>:                MATER=steel,
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,18]<stdout>:        block = AFFE_CHAR_CINE(
[1,18]<stdout>:            MODELE=model,
[1,18]<stdout>:            MECA_IMPO=(
[1,18]<stdout>:                _F(
[1,18]<stdout>:                    GROUP_MA="LEFT",
[1,18]<stdout>:                    DX=0,
[1,18]<stdout>:                    DY=0.0,
[1,18]<stdout>:                    DZ=0.0,
[1,18]<stdout>:                ),
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,18]<stdout>:            MODELE=model,
[1,18]<stdout>:            MECA_IMPO=(
[1,18]<stdout>:                _F(
[1,18]<stdout>:                    GROUP_MA="RIGHT",
[1,18]<stdout>:                    DY=0.001,
[1,18]<stdout>:                    DZ=0.001,
[1,18]<stdout>:                ),
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,18]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,18]<stdout>:            MODELE=model,
[1,18]<stdout>:            OPTION="RIGI_MECA",
[1,18]<stdout>:            CHAM_MATER=mater,
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Numbering"):
[1,18]<stdout>:        dofNum = NUME_DDL(
[1,18]<stdout>:            MATR_RIGI=stiff_elem,
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Assembly"):
[1,18]<stdout>:        stiffness = ASSE_MATRICE(
[1,18]<stdout>:            MATR_ELEM=stiff_elem,
[1,18]<stdout>:            NUME_DDL=dofNum,
[1,18]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,18]<stdout>:        rhs = CREA_CHAMP(
[1,18]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,18]<stdout>:            OPERATION="AFFE",
[1,18]<stdout>:            MAILLAGE=mesh,
[1,18]<stdout>:            AFFE=_F(
[1,18]<stdout>:                TOUT="OUI",
[1,18]<stdout>:                NOM_CMP=(
[1,18]<stdout>:                    "DX",
[1,18]<stdout>:                    "DY",
[1,18]<stdout>:                    "DZ",
[1,18]<stdout>:                ),
[1,18]<stdout>:                VALE=(
[1,18]<stdout>:                    0.0,
[1,18]<stdout>:                    0.0,
[1,18]<stdout>:                    0.0,
[1,18]<stdout>:                ),
[1,18]<stdout>:            ),
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,18]<stdout>:
[1,18]<stdout>:    if params["solver"] == "PETSC":
[1,18]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,18]<stdout>:    elif params["solver"] == "MUMPS":
[1,18]<stdout>:        solver = CA.MumpsSolver(
[1,18]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,18]<stdout>:            RENUM="PARMETIS",
[1,18]<stdout>:            ACCELERATION="FR+",
[1,18]<stdout>:            POSTTRAITEMENTS="MINI",
[1,18]<stdout>:        )
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Factorize"):
[1,18]<stdout>:        solver.factorize(stiffness)
[1,18]<stdout>:
[1,18]<stdout>:    with ChronoCtxMg("Solve"):
[1,18]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,18]<stdout>:
[1,18]<stdout>:# write_stats(dofNum)
[1,18]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,18]<stdout>:if params["parallel"] == "HPC":
[1,18]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,18]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,18]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,18]<stdout>:
[1,18]<stdout>:CA.close()
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:# ------------------------------------------------------------------------------
[1,18]<stdout>:Command line #1:
[1,18]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Execution of code_aster
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.19
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Command file #1 / 1
[1,19]<stdout>:
[1,19]<stdout>:Content of the file to execute:
[1,19]<stdout>:# coding=utf-8
[1,19]<stdout>:#!/usr/bin/python
[1,19]<stdout>:
[1,19]<stdout>:import os
[1,19]<stdout>:from statistics import mean
[1,19]<stdout>:from datetime import datetime
[1,19]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,19]<stdout>:
[1,19]<stdout>:from code_aster.Commands import *
[1,19]<stdout>:from code_aster import CA
[1,19]<stdout>:from code_aster.Utilities import petscInitialize
[1,19]<stdout>:
[1,19]<stdout>:CA.init()
[1,19]<stdout>:
[1,19]<stdout>:params = {}
[1,19]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,19]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,19]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,19]<stdout>:
[1,19]<stdout>:# General parameters
[1,19]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,19]<stdout>:rank = comm.Get_rank()
[1,19]<stdout>:size = comm.Get_size()
[1,19]<stdout>:
[1,19]<stdout>:nbHexa = 8 ** params["refinements"]
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:def memory_peak(mess=None):
[1,19]<stdout>:    """Return memory peak in MB"""
[1,19]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:class ChronoCtxMgGen:
[1,19]<stdout>:    stats = {}
[1,19]<stdout>:
[1,19]<stdout>:    def __init__(self, what):
[1,19]<stdout>:        self._what = what
[1,19]<stdout>:
[1,19]<stdout>:    def __enter__(self):
[1,19]<stdout>:        self.start = datetime.now()
[1,19]<stdout>:
[1,19]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,19]<stdout>:        self.stop = datetime.now()
[1,19]<stdout>:        delta = self.stop - self.start
[1,19]<stdout>:        mem = memory_peak(self._what)
[1,19]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,19]<stdout>:    pass
[1,19]<stdout>:    # def __init__(self, what):
[1,19]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:def write_stats(nume_ddl):
[1,19]<stdout>:    if rank == 0:
[1,19]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,19]<stdout>:        print()
[1,19]<stdout>:        print("NB PROC")
[1,19]<stdout>:        print(size)
[1,19]<stdout>:        print()
[1,19]<stdout>:        print(
[1,19]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    for key, values in stats.items():
[1,19]<stdout>:        time = comm.gather(values[0], root=0)
[1,19]<stdout>:        mem = comm.gather(values[1], root=0)
[1,19]<stdout>:        if rank == 0:
[1,19]<stdout>:            print(
[1,19]<stdout>:                key
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(min(time))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(max(time))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(mean(time))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(min(mem))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(max(mem))
[1,19]<stdout>:                + ", "
[1,19]<stdout>:                + str(mean(mem))
[1,19]<stdout>:            )
[1,19]<stdout>:
[1,19]<stdout>:    mesh = nume_ddl.getMesh()
[1,19]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,19]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,19]<stdout>:
[1,19]<stdout>:    if rank == 0:
[1,19]<stdout>:        print()
[1,19]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,19]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,19]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,19]<stdout>:
[1,19]<stdout>:    def show(*args, **kwargs):
[1,19]<stdout>:        if rank == 0:
[1,19]<stdout>:            print(*args, **kwargs)
[1,19]<stdout>:
[1,19]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,19]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,19]<stdout>:    separ = "| :--------------- | ----------: |"
[1,19]<stdout>:    show(fmti.format("Refinement", refine))
[1,19]<stdout>:    show(separ)
[1,19]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,19]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,19]<stdout>:    for key, values in data.items():
[1,19]<stdout>:        times = comm.gather(values[0], root=0)
[1,19]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,19]<stdout>:        if rank == 0:
[1,19]<stdout>:            show(fmtt.format(key, mean(times)))
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,19]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,19]<stdout>:
[1,19]<stdout>:with ChronoCtxMg("Total"):
[1,19]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,19]<stdout>:        if params["parallel"] == "HPC":
[1,19]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,19]<stdout>:        else:
[1,19]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Model"):
[1,19]<stdout>:        model = AFFE_MODELE(
[1,19]<stdout>:            MAILLAGE=mesh,
[1,19]<stdout>:            AFFE=_F(
[1,19]<stdout>:                TOUT="OUI",
[1,19]<stdout>:                PHENOMENE="MECANIQUE",
[1,19]<stdout>:                MODELISATION="3D",
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Material"):
[1,19]<stdout>:        steel = DEFI_MATERIAU(
[1,19]<stdout>:            ELAS=_F(
[1,19]<stdout>:                E=200000.0,
[1,19]<stdout>:                NU=0.3,
[1,19]<stdout>:            ),
[1,19]<stdout>:            ECRO_LINE=_F(
[1,19]<stdout>:   [1,19]<stdout>:             D_SIGM_EPSI=2000.0,
[1,19]<stdout>:                SY=200.0,
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:        mater = AFFE_MATERIAU(
[1,19]<stdout>:            MAILLAGE=mesh,
[1,19]<stdout>:            AFFE=_F(
[1,19]<stdout>:                TOUT="OUI",
[1,19]<stdout>:                MATER=steel,
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,19]<stdout>:        block = AFFE_CHAR_CINE(
[1,19]<stdout>:            MODELE=model,
[1,19]<stdout>:            MECA_IMPO=(
[1,19]<stdout>:                _F(
[1,19]<stdout>:                    GROUP_MA="LEFT",
[1,19]<stdout>:                    DX=0,
[1,19]<stdout>:                    DY=0.0,
[1,19]<stdout>:                    DZ=0.0,
[1,19]<stdout>:                ),
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,19]<stdout>:            MODELE=model,
[1,19]<stdout>:            MECA_IMPO=(
[1,19]<stdout>:                _F(
[1,19]<stdout>:                    GROUP_MA="RIGHT",
[1,19]<stdout>:                    DY=0.001,
[1,19]<stdout>:                    DZ=0.001,
[1,19]<stdout>:                ),
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,19]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,19]<stdout>:            MODELE=model,
[1,19]<stdout>:            OPTION="RIGI_MECA",
[1,19]<stdout>:            CHAM_MATER=mater,
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Numbering"):
[1,19]<stdout>:        dofNum = NUME_DDL(
[1,19]<stdout>:            MATR_RIGI=stiff_elem,
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Assembly"):
[1,19]<stdout>:        stiffness = ASSE_MATRICE(
[1,19]<stdout>:            MATR_ELEM=stiff_elem,
[1,19]<stdout>:            NUME_DDL=dofNum,
[1,19]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,19]<stdout>:        rhs = CREA_CHAMP(
[1,19]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,19]<stdout>:            OPERATION="AFFE",
[1,19]<stdout>:            MAILLAGE=mesh,
[1,19]<stdout>:            AFFE=_F(
[1,19]<stdout>:                TOUT="OUI",
[1,19]<stdout>:                NOM_CMP=(
[1,19]<stdout>:                    "DX",
[1,19]<stdout>:                    "DY",
[1,19]<stdout>:                    "DZ",
[1,19]<stdout>:                ),
[1,19]<stdout>:                VALE=(
[1,19]<stdout>:                    0.0,
[1,19]<stdout>:                    0.0,
[1,19]<stdout>:                    0.0,
[1,19]<stdout>:                ),
[1,19]<stdout>:            ),
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,19]<stdout>:
[1,19]<stdout>:    if params["solver"] == "PETSC":
[1,19]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,19]<stdout>:    elif params["solver"] == "MUMPS":
[1,19]<stdout>:        solver = CA.MumpsSolver(
[1,19]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,19]<stdout>:            RENUM="PARMETIS",
[1,19]<stdout>:            ACCELERATION="FR+",
[1,19]<stdout>:            POSTTRAITEMENTS="MINI",
[1,19]<stdout>:        )
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Factorize"):
[1,19]<stdout>:        solver.factorize(stiffness)
[1,19]<stdout>:
[1,19]<stdout>:    with ChronoCtxMg("Solve"):
[1,19]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,19]<stdout>:
[1,19]<stdout>:# write_stats(dofNum)
[1,19]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,19]<stdout>:if params["parallel"] == "HPC":
[1,19]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,19]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,19]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,19]<stdout>:
[1,19]<stdout>:CA.close()
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:# ------------------------------------------------------------------------------
[1,19]<stdout>:Command line #1:
[1,19]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Execution of code_aster
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.20
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Command file #1 / 1
[1,20]<stdout>:
[1,20]<stdout>:Content of the file to execute:
[1,20]<stdout>:# coding=utf-8
[1,20]<stdout>:#!/usr/bin/python
[1,20]<stdout>:
[1,20]<stdout>:import os
[1,20]<stdout>:from statistics import mean
[1,20]<stdout>:from datetime import datetime
[1,20]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,20]<stdout>:
[1,20]<stdout>:from code_aster.Commands import *
[1,20]<stdout>:from code_aster import CA
[1,20]<stdout>:from code_aster.Utilities import petscInitialize
[1,20]<stdout>:
[1,20]<stdout>:CA.init()
[1,20]<stdout>:
[1,20]<stdout>:params = {}
[1,20]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,20]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,20]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,20]<stdout>:
[1,20]<stdout>:# General parameters
[1,20]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,20]<stdout>:rank = comm.Get_rank()
[1,20]<stdout>:size = comm.Get_size()
[1,20]<stdout>:
[1,20]<stdout>:nbHexa = 8 ** params["refinements"]
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:def memory_peak(mess=None):
[1,20]<stdout>:    """Return memory peak in MB"""
[1,20]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:class ChronoCtxMgGen:
[1,20]<stdout>:    stats = {}
[1,20]<stdout>:
[1,20]<stdout>:    def __init__(self, what):
[1,20]<stdout>:        self._what = what
[1,20]<stdout>:
[1,20]<stdout>:    def __enter__(self):
[1,20]<stdout>:        self.start = datetime.now()
[1,20]<stdout>:
[1,20]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,20]<stdout>:        self.stop = datetime.now()
[1,20]<stdout>:        delta = self.stop - self.start
[1,20]<stdout>:        mem = memory_peak(self._what)
[1,20]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,20]<stdout>:    pass
[1,20]<stdout>:    # def __init__(self, what):
[1,20]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:def write_stats(nume_ddl):
[1,20]<stdout>:    if rank == 0:
[1,20]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,20]<stdout>:        print()
[1,20]<stdout>:        print("NB PROC")
[1,20]<stdout>:        print(size)
[1,20]<stdout>:        print()
[1,20]<stdout>:        print(
[1,20]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    for key, values in stats.items():
[1,20]<stdout>:        time = comm.gather(values[0], root=0)
[1,20]<stdout>:        mem = comm.gather(values[1], root=0)
[1,20]<stdout>:        if rank == 0:
[1,20]<stdout>:            print(
[1,20]<stdout>:                key
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(min(time))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(max(time))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(mean(time))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(min(mem))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(max(mem))
[1,20]<stdout>:                + ", "
[1,20]<stdout>:                + str(mean(mem))
[1,20]<stdout>:            )
[1,20]<stdout>:
[1,20]<stdout>:    mesh = nume_ddl.getMesh()
[1,20]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,20]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,20]<stdout>:
[1,20]<stdout>:    if rank == 0:
[1,20]<stdout>:        print()
[1,20]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,20]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,20]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,20]<stdout>:
[1,20]<stdout>:    def show(*args, **kwargs):
[1,20]<stdout>:        if rank == 0:
[1,20]<stdout>:            print(*args, **kwargs)
[1,20]<stdout>:
[1,20]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,20]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,20]<stdout>:    separ = "| :--------------- | ----------: |"
[1,20]<stdout>:    show(fmti.format("Refinement", refine))
[1,20]<stdout>:    show(separ)
[1,20]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,20]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,20]<stdout>:    for key, values in data.items():
[1,20]<stdout>:        times = comm.gather(values[0], root=0)
[1,20]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,20]<stdout>:        if rank == 0:
[1,20]<stdout>:            show(fmtt.format(key, mean(times)))
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,20]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,20]<stdout>:
[1,20]<stdout>:with ChronoCtxMg("Total"):
[1,20]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,20]<stdout>:        if params["parallel"] == "HPC":
[1,20]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,20]<stdout>:        else:
[1,20]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Model"):
[1,20]<stdout>:        model = AFFE_MODELE(
[1,20]<stdout>:            MAILLAGE=mesh,
[1,20]<stdout>:            AFFE=_F(
[1,20]<stdout>:                TOUT="OUI",
[1,20]<stdout>:                PHENOMENE="MECANIQUE",
[1,20]<stdout>:                MODELISATION="3D",
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Material"):
[1,20]<stdout>:        steel = DEFI_MATERIAU(
[1,20]<stdout>:            ELAS=_F(
[1,20]<stdout>:                E=200000.0,
[1,20]<stdout>:                NU=0.3,
[1,20]<stdout>:            ),
[1,20]<stdout>:            ECRO_LINE=_F(
[1,20]<stdout>:   [1,20]<stdout>:             D_SIGM_EPSI=2000.0,
[1,20]<stdout>:                SY=200.0,
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:        mater = AFFE_MATERIAU(
[1,20]<stdout>:            MAILLAGE=mesh,
[1,20]<stdout>:            AFFE=_F(
[1,20]<stdout>:                TOUT="OUI",
[1,20]<stdout>:                MATER=steel,
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,20]<stdout>:        block = AFFE_CHAR_CINE(
[1,20]<stdout>:            MODELE=model,
[1,20]<stdout>:            MECA_IMPO=(
[1,20]<stdout>:                _F(
[1,20]<stdout>:                    GROUP_MA="LEFT",
[1,20]<stdout>:                    DX=0,
[1,20]<stdout>:                    DY=0.0,
[1,20]<stdout>:                    DZ=0.0,
[1,20]<stdout>:                ),
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,20]<stdout>:            MODELE=model,
[1,20]<stdout>:            MECA_IMPO=(
[1,20]<stdout>:                _F(
[1,20]<stdout>:                    GROUP_MA="RIGHT",
[1,20]<stdout>:                    DY=0.001,
[1,20]<stdout>:                    DZ=0.001,
[1,20]<stdout>:                ),
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,20]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,20]<stdout>:            MODELE=model,
[1,20]<stdout>:            OPTION="RIGI_MECA",
[1,20]<stdout>:            CHAM_MATER=mater,
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Numbering"):
[1,20]<stdout>:        dofNum = NUME_DDL(
[1,20]<stdout>:            MATR_RIGI=stiff_elem,
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Assembly"):
[1,20]<stdout>:        stiffness = ASSE_MATRICE(
[1,20]<stdout>:            MATR_ELEM=stiff_elem,
[1,20]<stdout>:            NUME_DDL=dofNum,
[1,20]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,20]<stdout>:        rhs = CREA_CHAMP(
[1,20]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,20]<stdout>:            OPERATION="AFFE",
[1,20]<stdout>:            MAILLAGE=mesh,
[1,20]<stdout>:            AFFE=_F(
[1,20]<stdout>:                TOUT="OUI",
[1,20]<stdout>:                NOM_CMP=(
[1,20]<stdout>:                    "DX",
[1,20]<stdout>:                    "DY",
[1,20]<stdout>:                    "DZ",
[1,20]<stdout>:                ),
[1,20]<stdout>:                VALE=(
[1,20]<stdout>:                    0.0,
[1,20]<stdout>:                    0.0,
[1,20]<stdout>:                    0.0,
[1,20]<stdout>:                ),
[1,20]<stdout>:            ),
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,20]<stdout>:
[1,20]<stdout>:    if params["solver"] == "PETSC":
[1,20]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,20]<stdout>:    elif params["solver"] == "MUMPS":
[1,20]<stdout>:        solver = CA.MumpsSolver(
[1,20]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,20]<stdout>:            RENUM="PARMETIS",
[1,20]<stdout>:            ACCELERATION="FR+",
[1,20]<stdout>:            POSTTRAITEMENTS="MINI",
[1,20]<stdout>:        )
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Factorize"):
[1,20]<stdout>:        solver.factorize(stiffness)
[1,20]<stdout>:
[1,20]<stdout>:    with ChronoCtxMg("Solve"):
[1,20]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,20]<stdout>:
[1,20]<stdout>:# write_stats(dofNum)
[1,20]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,20]<stdout>:if params["parallel"] == "HPC":
[1,20]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,20]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,20]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,20]<stdout>:
[1,20]<stdout>:CA.close()
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:# ------------------------------------------------------------------------------
[1,20]<stdout>:Command line #1:
[1,20]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Execution of code_aster
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.21
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Command file #1 / 1
[1,21]<stdout>:
[1,21]<stdout>:Content of the file to execute:
[1,21]<stdout>:# coding=utf-8
[1,21]<stdout>:#!/usr/bin/python
[1,21]<stdout>:
[1,21]<stdout>:import os
[1,21]<stdout>:from statistics import mean
[1,21]<stdout>:from datetime import datetime
[1,21]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,21]<stdout>:
[1,21]<stdout>:from code_aster.Commands import *
[1,21]<stdout>:from code_aster import CA
[1,21]<stdout>:from code_aster.Utilities import petscInitialize
[1,21]<stdout>:
[1,21]<stdout>:CA.init()
[1,21]<stdout>:
[1,21]<stdout>:params = {}
[1,21]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,21]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,21]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,21]<stdout>:
[1,21]<stdout>:# General parameters
[1,21]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,21]<stdout>:rank = comm.Get_rank()
[1,21]<stdout>:size = comm.Get_size()
[1,21]<stdout>:
[1,21]<stdout>:nbHexa = 8 ** params["refinements"]
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:def memory_peak(mess=None):
[1,21]<stdout>:    """Return memory peak in MB"""
[1,21]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:class ChronoCtxMgGen:
[1,21]<stdout>:    stats = {}
[1,21]<stdout>:
[1,21]<stdout>:    def __init__(self, what):
[1,21]<stdout>:        self._what = what
[1,21]<stdout>:
[1,21]<stdout>:    def __enter__(self):
[1,21]<stdout>:        self.start = datetime.now()
[1,21]<stdout>:
[1,21]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,21]<stdout>:        self.stop = datetime.now()
[1,21]<stdout>:        delta = self.stop - self.start
[1,21]<stdout>:        mem = memory_peak(self._what)
[1,21]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,21]<stdout>:    pass
[1,21]<stdout>:    # def __init__(self, what):
[1,21]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:def write_stats(nume_ddl):
[1,21]<stdout>:    if rank == 0:
[1,21]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,21]<stdout>:        print()
[1,21]<stdout>:        print("NB PROC")
[1,21]<stdout>:        print(size)
[1,21]<stdout>:        print()
[1,21]<stdout>:        print(
[1,21]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    for key, values in stats.items():
[1,21]<stdout>:        time = comm.gather(values[0], root=0)
[1,21]<stdout>:        mem = comm.gather(values[1], root=0)
[1,21]<stdout>:        if rank == 0:
[1,21]<stdout>:            print(
[1,21]<stdout>:                key
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(min(time))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(max(time))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(mean(time))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(min(mem))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(max(mem))
[1,21]<stdout>:                + ", "
[1,21]<stdout>:                + str(mean(mem))
[1,21]<stdout>:            )
[1,21]<stdout>:
[1,21]<stdout>:    mesh = nume_ddl.getMesh()
[1,21]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,21]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,21]<stdout>:
[1,21]<stdout>:    if rank == 0:
[1,21]<stdout>:        print()
[1,21]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,21]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,21]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,21]<stdout>:
[1,21]<stdout>:    def show(*args, **kwargs):
[1,21]<stdout>:        if rank == 0:
[1,21]<stdout>:            print(*args, **kwargs)
[1,21]<stdout>:
[1,21]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,21]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,21]<stdout>:    separ = "| :--------------- | ----------: |"
[1,21]<stdout>:    show(fmti.format("Refinement", refine))
[1,21]<stdout>:    show(separ)
[1,21]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,21]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,21]<stdout>:    for key, values in data.items():
[1,21]<stdout>:        times = comm.gather(values[0], root=0)
[1,21]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,21]<stdout>:        if rank == 0:
[1,21]<stdout>:            show(fmtt.format(key, mean(times)))
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,21]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,21]<stdout>:
[1,21]<stdout>:with ChronoCtxMg("Total"):
[1,21]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,21]<stdout>:        if params["parallel"] == "HPC":
[1,21]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,21]<stdout>:        else:
[1,21]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Model"):
[1,21]<stdout>:        model = AFFE_MODELE(
[1,21]<stdout>:            MAILLAGE=mesh,
[1,21]<stdout>:            AFFE=_F(
[1,21]<stdout>:                TOUT="OUI",
[1,21]<stdout>:                PHENOMENE="MECANIQUE",
[1,21]<stdout>:                MODELISATION="3D",
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Material"):
[1,21]<stdout>:        steel = DEFI_MATERIAU(
[1,21]<stdout>:            ELAS=_F(
[1,21]<stdout>:                E=200000.0,
[1,21]<stdout>:                NU=0.3,
[1,21]<stdout>:            ),
[1,21]<stdout>:            ECRO_LINE=_F(
[1,21]<stdout>:    [1,21]<stdout>:            D_SIGM_EPSI=2000.0,
[1,21]<stdout>:                SY=200.0,
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:        mater = AFFE_MATERIAU(
[1,21]<stdout>:            MAILLAGE=mesh,
[1,21]<stdout>:            AFFE=_F(
[1,21]<stdout>:                TOUT="OUI",
[1,21]<stdout>:                MATER=steel,
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,21]<stdout>:        block = AFFE_CHAR_CINE(
[1,21]<stdout>:            MODELE=model,
[1,21]<stdout>:            MECA_IMPO=(
[1,21]<stdout>:                _F(
[1,21]<stdout>:                    GROUP_MA="LEFT",
[1,21]<stdout>:                    DX=0,
[1,21]<stdout>:                    DY=0.0,
[1,21]<stdout>:                    DZ=0.0,
[1,21]<stdout>:                ),
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,21]<stdout>:            MODELE=model,
[1,21]<stdout>:            MECA_IMPO=(
[1,21]<stdout>:                _F(
[1,21]<stdout>:                    GROUP_MA="RIGHT",
[1,21]<stdout>:                    DY=0.001,
[1,21]<stdout>:                    DZ=0.001,
[1,21]<stdout>:                ),
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,21]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,21]<stdout>:            MODELE=model,
[1,21]<stdout>:            OPTION="RIGI_MECA",
[1,21]<stdout>:            CHAM_MATER=mater,
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Numbering"):
[1,21]<stdout>:        dofNum = NUME_DDL(
[1,21]<stdout>:            MATR_RIGI=stiff_elem,
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Assembly"):
[1,21]<stdout>:        stiffness = ASSE_MATRICE(
[1,21]<stdout>:            MATR_ELEM=stiff_elem,
[1,21]<stdout>:            NUME_DDL=dofNum,
[1,21]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,21]<stdout>:        rhs = CREA_CHAMP(
[1,21]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,21]<stdout>:            OPERATION="AFFE",
[1,21]<stdout>:            MAILLAGE=mesh,
[1,21]<stdout>:            AFFE=_F(
[1,21]<stdout>:                TOUT="OUI",
[1,21]<stdout>:                NOM_CMP=(
[1,21]<stdout>:                    "DX",
[1,21]<stdout>:                    "DY",
[1,21]<stdout>:                    "DZ",
[1,21]<stdout>:                ),
[1,21]<stdout>:                VALE=(
[1,21]<stdout>:                    0.0,
[1,21]<stdout>:                    0.0,
[1,21]<stdout>:                    0.0,
[1,21]<stdout>:                ),
[1,21]<stdout>:            ),
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,21]<stdout>:
[1,21]<stdout>:    if params["solver"] == "PETSC":
[1,21]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,21]<stdout>:    elif params["solver"] == "MUMPS":
[1,21]<stdout>:        solver = CA.MumpsSolver(
[1,21]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,21]<stdout>:            RENUM="PARMETIS",
[1,21]<stdout>:            ACCELERATION="FR+",
[1,21]<stdout>:            POSTTRAITEMENTS="MINI",
[1,21]<stdout>:        )
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Factorize"):
[1,21]<stdout>:        solver.factorize(stiffness)
[1,21]<stdout>:
[1,21]<stdout>:    with ChronoCtxMg("Solve"):
[1,21]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,21]<stdout>:
[1,21]<stdout>:# write_stats(dofNum)
[1,21]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,21]<stdout>:if params["parallel"] == "HPC":
[1,21]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,21]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,21]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,21]<stdout>:
[1,21]<stdout>:CA.close()
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:# ------------------------------------------------------------------------------
[1,21]<stdout>:Command line #1:
[1,21]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Execution of code_aster
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.22
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Command file #1 / 1
[1,22]<stdout>:
[1,22]<stdout>:Content of the file to execute:
[1,22]<stdout>:# coding=utf-8
[1,22]<stdout>:#!/usr/bin/python
[1,22]<stdout>:
[1,22]<stdout>:import os
[1,22]<stdout>:from statistics import mean
[1,22]<stdout>:from datetime import datetime
[1,22]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,22]<stdout>:
[1,22]<stdout>:from code_aster.Commands import *
[1,22]<stdout>:from code_aster import CA
[1,22]<stdout>:from code_aster.Utilities import petscInitialize
[1,22]<stdout>:
[1,22]<stdout>:CA.init()
[1,22]<stdout>:
[1,22]<stdout>:params = {}
[1,22]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,22]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,22]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,22]<stdout>:
[1,22]<stdout>:# General parameters
[1,22]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,22]<stdout>:rank = comm.Get_rank()
[1,22]<stdout>:size = comm.Get_size()
[1,22]<stdout>:
[1,22]<stdout>:nbHexa = 8 ** params["refinements"]
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:def memory_peak(mess=None):
[1,22]<stdout>:    """Return memory peak in MB"""
[1,22]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:class ChronoCtxMgGen:
[1,22]<stdout>:    stats = {}
[1,22]<stdout>:
[1,22]<stdout>:    def __init__(self, what):
[1,22]<stdout>:        self._what = what
[1,22]<stdout>:
[1,22]<stdout>:    def __enter__(self):
[1,22]<stdout>:        self.start = datetime.now()
[1,22]<stdout>:
[1,22]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,22]<stdout>:        self.stop = datetime.now()
[1,22]<stdout>:        delta = self.stop - self.start
[1,22]<stdout>:        mem = memory_peak(self._what)
[1,22]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,22]<stdout>:    pass
[1,22]<stdout>:    # def __init__(self, what):
[1,22]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:def write_stats(nume_ddl):
[1,22]<stdout>:    if rank == 0:
[1,22]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,22]<stdout>:        print()
[1,22]<stdout>:        print("NB PROC")
[1,22]<stdout>:        print(size)
[1,22]<stdout>:        print()
[1,22]<stdout>:        print(
[1,22]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    for key, values in stats.items():
[1,22]<stdout>:        time = comm.gather(values[0], root=0)
[1,22]<stdout>:        mem = comm.gather(values[1], root=0)
[1,22]<stdout>:        if rank == 0:
[1,22]<stdout>:            print(
[1,22]<stdout>:                key
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(min(time))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(max(time))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(mean(time))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(min(mem))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(max(mem))
[1,22]<stdout>:                + ", "
[1,22]<stdout>:                + str(mean(mem))
[1,22]<stdout>:            )
[1,22]<stdout>:
[1,22]<stdout>:    mesh = nume_ddl.getMesh()
[1,22]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,22]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,22]<stdout>:
[1,22]<stdout>:    if rank == 0:
[1,22]<stdout>:        print()
[1,22]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,22]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,22]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,22]<stdout>:
[1,22]<stdout>:    def show(*args, **kwargs):
[1,22]<stdout>:        if rank == 0:
[1,22]<stdout>:            print(*args, **kwargs)
[1,22]<stdout>:
[1,22]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,22]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,22]<stdout>:    separ = "| :--------------- | ----------: |"
[1,22]<stdout>:    show(fmti.format("Refinement", refine))
[1,22]<stdout>:    show(separ)
[1,22]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,22]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,22]<stdout>:    for key, values in data.items():
[1,22]<stdout>:        times = comm.gather(values[0], root=0)
[1,22]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,22]<stdout>:        if rank == 0:
[1,22]<stdout>:            show(fmtt.format(key, mean(times)))
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,22]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,22]<stdout>:
[1,22]<stdout>:with ChronoCtxMg("Total"):
[1,22]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,22]<stdout>:        if params["parallel"] == "HPC":
[1,22]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,22]<stdout>:        else:
[1,22]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Model"):
[1,22]<stdout>:        model = AFFE_MODELE(
[1,22]<stdout>:            MAILLAGE=mesh,
[1,22]<stdout>:            AFFE=_F(
[1,22]<stdout>:                TOUT="OUI",
[1,22]<stdout>:                PHENOMENE="MECANIQUE",
[1,22]<stdout>:                MODELISATION="3D",
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Material"):
[1,22]<stdout>:        steel = DEFI_MATERIAU(
[1,22]<stdout>:            ELAS=_F(
[1,22]<stdout>:                E=200000.0,
[1,22]<stdout>:                NU=0.3,
[1,22]<stdout>:            ),
[1,22]<stdout>:            ECRO_LINE=_F(
[1,22]<stdout>:   [1,22]<stdout>:             D_SIGM_EPSI=2000.0,
[1,22]<stdout>:                SY=200.0,
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:        mater = AFFE_MATERIAU(
[1,22]<stdout>:            MAILLAGE=mesh,
[1,22]<stdout>:            AFFE=_F(
[1,22]<stdout>:                TOUT="OUI",
[1,22]<stdout>:                MATER=steel,
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,22]<stdout>:        block = AFFE_CHAR_CINE(
[1,22]<stdout>:            MODELE=model,
[1,22]<stdout>:            MECA_IMPO=(
[1,22]<stdout>:                _F(
[1,22]<stdout>:                    GROUP_MA="LEFT",
[1,22]<stdout>:                    DX=0,
[1,22]<stdout>:                    DY=0.0,
[1,22]<stdout>:                    DZ=0.0,
[1,22]<stdout>:                ),
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,22]<stdout>:            MODELE=model,
[1,22]<stdout>:            MECA_IMPO=(
[1,22]<stdout>:                _F(
[1,22]<stdout>:                    GROUP_MA="RIGHT",
[1,22]<stdout>:                    DY=0.001,
[1,22]<stdout>:                    DZ=0.001,
[1,22]<stdout>:                ),
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,22]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,22]<stdout>:            MODELE=model,
[1,22]<stdout>:            OPTION="RIGI_MECA",
[1,22]<stdout>:            CHAM_MATER=mater,
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Numbering"):
[1,22]<stdout>:        dofNum = NUME_DDL(
[1,22]<stdout>:            MATR_RIGI=stiff_elem,
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Assembly"):
[1,22]<stdout>:        stiffness = ASSE_MATRICE(
[1,22]<stdout>:            MATR_ELEM=stiff_elem,
[1,22]<stdout>:            NUME_DDL=dofNum,
[1,22]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,22]<stdout>:        rhs = CREA_CHAMP(
[1,22]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,22]<stdout>:            OPERATION="AFFE",
[1,22]<stdout>:            MAILLAGE=mesh,
[1,22]<stdout>:            AFFE=_F(
[1,22]<stdout>:                TOUT="OUI",
[1,22]<stdout>:                NOM_CMP=(
[1,22]<stdout>:                    "DX",
[1,22]<stdout>:                    "DY",
[1,22]<stdout>:                    "DZ",
[1,22]<stdout>:                ),
[1,22]<stdout>:                VALE=(
[1,22]<stdout>:                    0.0,
[1,22]<stdout>:                    0.0,
[1,22]<stdout>:                    0.0,
[1,22]<stdout>:                ),
[1,22]<stdout>:            ),
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,22]<stdout>:
[1,22]<stdout>:    if params["solver"] == "PETSC":
[1,22]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,22]<stdout>:    elif params["solver"] == "MUMPS":
[1,22]<stdout>:        solver = CA.MumpsSolver(
[1,22]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,22]<stdout>:            RENUM="PARMETIS",
[1,22]<stdout>:            ACCELERATION="FR+",
[1,22]<stdout>:            POSTTRAITEMENTS="MINI",
[1,22]<stdout>:        )
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Factorize"):
[1,22]<stdout>:        solver.factorize(stiffness)
[1,22]<stdout>:
[1,22]<stdout>:    with ChronoCtxMg("Solve"):
[1,22]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,22]<stdout>:
[1,22]<stdout>:# write_stats(dofNum)
[1,22]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,22]<stdout>:if params["parallel"] == "HPC":
[1,22]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,22]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,22]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,22]<stdout>:
[1,22]<stdout>:CA.close()
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:# ------------------------------------------------------------------------------
[1,22]<stdout>:Command line #1:
[1,22]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Execution of code_aster
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Prepare environment in /tmp/run_aster__jlsw51j/proc.23
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Command file #1 / 1
[1,23]<stdout>:
[1,23]<stdout>:Content of the file to execute:
[1,23]<stdout>:# coding=utf-8
[1,23]<stdout>:#!/usr/bin/python
[1,23]<stdout>:
[1,23]<stdout>:import os
[1,23]<stdout>:from statistics import mean
[1,23]<stdout>:from datetime import datetime
[1,23]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,23]<stdout>:
[1,23]<stdout>:from code_aster.Commands import *
[1,23]<stdout>:from code_aster import CA
[1,23]<stdout>:from code_aster.Utilities import petscInitialize
[1,23]<stdout>:
[1,23]<stdout>:CA.init()
[1,23]<stdout>:
[1,23]<stdout>:params = {}
[1,23]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,23]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,23]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,23]<stdout>:
[1,23]<stdout>:# General parameters
[1,23]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,23]<stdout>:rank = comm.Get_rank()
[1,23]<stdout>:size = comm.Get_size()
[1,23]<stdout>:
[1,23]<stdout>:nbHexa = 8 ** params["refinements"]
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:def memory_peak(mess=None):
[1,23]<stdout>:    """Return memory peak in MB"""
[1,23]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:class ChronoCtxMgGen:
[1,23]<stdout>:    stats = {}
[1,23]<stdout>:
[1,23]<stdout>:    def __init__(self, what):
[1,23]<stdout>:        self._what = what
[1,23]<stdout>:
[1,23]<stdout>:    def __enter__(self):
[1,23]<stdout>:        self.start = datetime.now()
[1,23]<stdout>:
[1,23]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,23]<stdout>:        self.stop = datetime.now()
[1,23]<stdout>:        delta = self.stop - self.start
[1,23]<stdout>:        mem = memory_peak(self._what)
[1,23]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,23]<stdout>:    pass
[1,23]<stdout>:    # def __init__(self, what):
[1,23]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:def write_stats(nume_ddl):
[1,23]<stdout>:    if rank == 0:
[1,23]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,23]<stdout>:        print()
[1,23]<stdout>:        print("NB PROC")
[1,23]<stdout>:        print(size)
[1,23]<stdout>:        print()
[1,23]<stdout>:        print(
[1,23]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    for key, values in stats.items():
[1,23]<stdout>:        time = comm.gather(values[0], root=0)
[1,23]<stdout>:        mem = comm.gather(values[1], root=0)
[1,23]<stdout>:        if rank == 0:
[1,23]<stdout>:            print(
[1,23]<stdout>:                key
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(min(time))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(max(time))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(mean(time))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(min(mem))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(max(mem))
[1,23]<stdout>:                + ", "
[1,23]<stdout>:                + str(mean(mem))
[1,23]<stdout>:            )
[1,23]<stdout>:
[1,23]<stdout>:    mesh = nume_ddl.getMesh()
[1,23]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,23]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,23]<stdout>:
[1,23]<stdout>:    if rank == 0:
[1,23]<stdout>:        print()
[1,23]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,23]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,23]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,23]<stdout>:
[1,23]<stdout>:    def show(*args, **kwargs):
[1,23]<stdout>:        if rank == 0:
[1,23]<stdout>:            print(*args, **kwargs)
[1,23]<stdout>:
[1,23]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,23]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,23]<stdout>:    separ = "| :--------------- | ----------: |"
[1,23]<stdout>:    show(fmti.format("Refinement", refine))
[1,23]<stdout>:    show(separ)
[1,23]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,23]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,23]<stdout>:    for key, values in data.items():
[1,23]<stdout>:        times = comm.gather(values[0], root=0)
[1,23]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,23]<stdout>:        if rank == 0:
[1,23]<stdout>:            show(fmtt.format(key, mean(times)))
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,23]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,23]<stdout>:
[1,23]<stdout>:with ChronoCtxMg("Total"):
[1,23]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,23]<stdout>:        if params["parallel"] == "HPC":
[1,23]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,23]<stdout>:        else:
[1,23]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Model"):
[1,23]<stdout>:        model = AFFE_MODELE(
[1,23]<stdout>:            MAILLAGE=mesh,
[1,23]<stdout>:            AFFE=_F(
[1,23]<stdout>:                TOUT="OUI",
[1,23]<stdout>:                PHENOMENE="MECANIQUE",
[1,23]<stdout>:                MODELISATION="3D",
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Material"):
[1,23]<stdout>:        steel = DEFI_MATERIAU(
[1,23]<stdout>:            ELAS=_F(
[1,23]<stdout>:                E=200000.0,
[1,23]<stdout>:                NU=0.3,
[1,23]<stdout>:            ),
[1,23]<stdout>:            ECRO_LINE=_F(
[1,23]<stdout>:    [1,23]<stdout>:            D_SIGM_EPSI=2000.0,
[1,23]<stdout>:                SY=200.0,
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:        mater = AFFE_MATERIAU(
[1,23]<stdout>:            MAILLAGE=mesh,
[1,23]<stdout>:            AFFE=_F(
[1,23]<stdout>:                TOUT="OUI",
[1,23]<stdout>:                MATER=steel,
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,23]<stdout>:        block = AFFE_CHAR_CINE(
[1,23]<stdout>:            MODELE=model,
[1,23]<stdout>:            MECA_IMPO=(
[1,23]<stdout>:                _F(
[1,23]<stdout>:                    GROUP_MA="LEFT",
[1,23]<stdout>:                    DX=0,
[1,23]<stdout>:                    DY=0.0,
[1,23]<stdout>:                    DZ=0.0,
[1,23]<stdout>:                ),
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,23]<stdout>:            MODELE=model,
[1,23]<stdout>:            MECA_IMPO=(
[1,23]<stdout>:                _F(
[1,23]<stdout>:                    GROUP_MA="RIGHT",
[1,23]<stdout>:                    DY=0.001,
[1,23]<stdout>:                    DZ=0.001,
[1,23]<stdout>:                ),
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,23]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,23]<stdout>:            MODELE=model,
[1,23]<stdout>:            OPTION="RIGI_MECA",
[1,23]<stdout>:            CHAM_MATER=mater,
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Numbering"):
[1,23]<stdout>:        dofNum = NUME_DDL(
[1,23]<stdout>:            MATR_RIGI=stiff_elem,
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Assembly"):
[1,23]<stdout>:        stiffness = ASSE_MATRICE(
[1,23]<stdout>:            MATR_ELEM=stiff_elem,
[1,23]<stdout>:            NUME_DDL=dofNum,
[1,23]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,23]<stdout>:        rhs = CREA_CHAMP(
[1,23]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,23]<stdout>:            OPERATION="AFFE",
[1,23]<stdout>:            MAILLAGE=mesh,
[1,23]<stdout>:            AFFE=_F(
[1,23]<stdout>:                TOUT="OUI",
[1,23]<stdout>:                NOM_CMP=(
[1,23]<stdout>:                    "DX",
[1,23]<stdout>:                    "DY",
[1,23]<stdout>:                    "DZ",
[1,23]<stdout>:                ),
[1,23]<stdout>:                VALE=(
[1,23]<stdout>:                    0.0,
[1,23]<stdout>:                    0.0,
[1,23]<stdout>:                    0.0,
[1,23]<stdout>:                ),
[1,23]<stdout>:            ),
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,23]<stdout>:
[1,23]<stdout>:    if params["solver"] == "PETSC":
[1,23]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,23]<stdout>:    elif params["solver"] == "MUMPS":
[1,23]<stdout>:        solver = CA.MumpsSolver(
[1,23]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,23]<stdout>:            RENUM="PARMETIS",
[1,23]<stdout>:            ACCELERATION="FR+",
[1,23]<stdout>:            POSTTRAITEMENTS="MINI",
[1,23]<stdout>:        )
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Factorize"):
[1,23]<stdout>:        solver.factorize(stiffness)
[1,23]<stdout>:
[1,23]<stdout>:    with ChronoCtxMg("Solve"):
[1,23]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,23]<stdout>:
[1,23]<stdout>:# write_stats(dofNum)
[1,23]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,23]<stdout>:if params["parallel"] == "HPC":
[1,23]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,23]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,23]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,23]<stdout>:
[1,23]<stdout>:CA.close()
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:# ------------------------------------------------------------------------------
[1,23]<stdout>:Command line #1:
[1,23]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,7]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,21]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,18]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,17]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,7]<stdout>:checking MPI initialization...
[1,7]<stdout>:using COMM_WORLD.
[1,7]<stdout>:MPI is initialized.
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,7]<stdout>:<INFO> Démarrage de l'exécution.
[1,7]<stdout>:
[1,7]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,7]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,7]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,7]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,7]<stdout>:                                                                                                    
[1,7]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,7]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,7]<stdout>:                                        Architecture : 64bit                                        
[1,7]<stdout>:                                    Type de processeur : aarch64                                    
[1,7]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,7]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,7]<stdout>:                                     Version de Python : 3.11.2                                     
[1,7]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,7]<stdout>:                                      Parallélisme MPI : actif                                      
[1,7]<stdout>:                                   Rang du processeur courant : 7                                   
[1,7]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,7]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,7]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,22]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,7]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,7]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,7]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,7]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,7]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,7]<stdout>:
[1,21]<stdout>:checking MPI initialization...
[1,21]<stdout>:using COMM_WORLD.
[1,21]<stdout>:MPI is initialized.
[1,21]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,21]<stdout>:
[1,7]<stdout>:starting the execution...
[1,21]<stdout>:<INFO> Démarrage de l'exécution.
[1,21]<stdout>:
[1,21]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,18]<stdout>:checking MPI initialization...
[1,18]<stdout>:using COMM_WORLD.
[1,18]<stdout>:MPI is initialized.
[1,18]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,18]<stdout>:
[1,21]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,21]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,21]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,21]<stdout>:                                                                                                    
[1,21]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,21]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,21]<stdout>:                                        Architecture : 64bit                                        
[1,21]<stdout>:                                    Type de processeur : aarch64                                    
[1,21]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,21]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,21]<stdout>:                                     Version de Python : 3.11.2                                     
[1,21]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,21]<stdout>:                                      Parallélisme MPI : actif                                      
[1,21]<stdout>:                                  Rang du processeur courant : 21                                   
[1,21]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,18]<stdout>:<INFO> Démarrage de l'exécution.
[1,18]<stdout>:
[1,17]<stdout>:checking MPI initialization...
[1,17]<stdout>:using COMM_WORLD.
[1,17]<stdout>:MPI is initialized.
[1,17]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,17]<stdout>:
[1,21]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,21]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,7]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,7]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,7]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,7]<stdout>:
[1,10]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,20]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,18]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,18]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,18]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,18]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,18]<stdout>:                                                                                                    
[1,18]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,18]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,18]<stdout>:                                        Architecture : 64bit                                        
[1,18]<stdout>:                                    Type de processeur : aarch64                                    
[1,18]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,18]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,18]<stdout>:                                     Version de Python : 3.11.2                                     
[1,18]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,17]<stdout>:<INFO> Démarrage de l'exécution.
[1,17]<stdout>:
[1,18]<stdout>:                                      Parallélisme MPI : actif                                      
[1,18]<stdout>:                                  Rang du processeur courant : 18                                   
[1,18]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,17]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,18]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,18]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,21]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,17]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,17]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,21]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,11]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,21]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,17]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,17]<stdout>:                                                                                                    
[1,17]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,17]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,17]<stdout>:                                        Architecture : 64bit                                        
[1,17]<stdout>:                                    Type de processeur : aarch64                                    
[1,17]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,17]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,21]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,22]<stdout>:checking MPI initialization...
[1,22]<stdout>:using COMM_WORLD.
[1,22]<stdout>:MPI is initialized.
[1,22]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,22]<stdout>:
[1,17]<stdout>:                                     Version de Python : 3.11.2                                     
[1,17]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,21]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,5]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,21]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,17]<stdout>:                                      Parallélisme MPI : actif                                      
[1,17]<stdout>:                                  Rang du processeur courant : 17                                   
[1,17]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,17]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,17]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,21]<stdout>:
[1,18]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,18]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,22]<stdout>:<INFO> Démarrage de l'exécution.
[1,22]<stdout>:
[1,21]<stdout>:starting the execution...
[1,16]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,18]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,18]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,22]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,18]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,22]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,22]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,18]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,14]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,22]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,22]<stdout>:                                                                                                    
[1,22]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,22]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,22]<stdout>:                                        Architecture : 64bit                                        
[1,22]<stdout>:                                    Type de processeur : aarch64                                    
[1,22]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,22]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,17]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,22]<stdout>:                                     Version de Python : 3.11.2                                     
[1,22]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,17]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,18]<stdout>:
[1,13]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,17]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,22]<stdout>:                                      Parallélisme MPI : actif                                      
[1,22]<stdout>:                                  Rang du processeur courant : 22                                   
[1,22]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,17]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,22]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,22]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,18]<stdout>:starting the execution...
[1,17]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,3]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,17]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,23]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,17]<stdout>:
[1,17]<stdout>:starting the execution...
[1,21]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,21]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,21]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,21]<stdout>:
[1,22]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,22]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,22]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,22]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,22]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,22]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,18]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,18]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,18]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,18]<stdout>:
[1,22]<stdout>:
[1,1]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,10]<stdout>:checking MPI initialization...
[1,10]<stdout>:using COMM_WORLD.
[1,10]<stdout>:MPI is initialized.
[1,10]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,10]<stdout>:
[1,22]<stdout>:starting the execution...
[1,20]<stdout>:checking MPI initialization...
[1,20]<stdout>:using COMM_WORLD.
[1,20]<stdout>:MPI is initialized.
[1,20]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,20]<stdout>:
[1,17]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,17]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,17]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,17]<stdout>:
[1,10]<stdout>:<INFO> Démarrage de l'exécution.
[1,10]<stdout>:
[1,10]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,20]<stdout>:<INFO> Démarrage de l'exécution.
[1,20]<stdout>:
[1,10]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,10]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,20]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,10]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,10]<stdout>:                                                                                                    
[1,10]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,10]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,10]<stdout>:                                        Architecture : 64bit                                        
[1,10]<stdout>:                                    Type de processeur : aarch64                                    
[1,10]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,10]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,10]<stdout>:                                     Version de Python : 3.11.2                                     
[1,10]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,20]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,20]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,10]<stdout>:                                      Parallélisme MPI : actif                                      
[1,10]<stdout>:                                  Rang du processeur courant : 10                                   
[1,10]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,20]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,20]<stdout>:                                                                                                    
[1,20]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,20]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,20]<stdout>:                                        Architecture : 64bit                                        
[1,20]<stdout>:                                    Type de processeur : aarch64                                    
[1,20]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,20]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,22]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,22]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,22]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,22]<stdout>:
[1,10]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,10]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,20]<stdout>:                                     Version de Python : 3.11.2                                     
[1,20]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,20]<stdout>:                                      Parallélisme MPI : actif                                      
[1,20]<stdout>:                                  Rang du processeur courant : 20                                   
[1,20]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,20]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,20]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,11]<stdout>:checking MPI initialization...
[1,11]<stdout>:using COMM_WORLD.
[1,11]<stdout>:MPI is initialized.
[1,11]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,11]<stdout>:
[1,10]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,10]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,10]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,5]<stdout>:checking MPI initialization...
[1,5]<stdout>:using COMM_WORLD.
[1,5]<stdout>:MPI is initialized.
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,10]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,20]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,10]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,15]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,10]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,20]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,20]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,11]<stdout>:<INFO> Démarrage de l'exécution.
[1,11]<stdout>:
[1,20]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,10]<stdout>:
[1,20]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,0]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,20]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,11]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,5]<stdout>:<INFO> Démarrage de l'exécution.
[1,5]<stdout>:
[1,10]<stdout>:starting the execution...
[1,11]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,11]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,16]<stdout>:checking MPI initialization...
[1,16]<stdout>:using COMM_WORLD.
[1,16]<stdout>:MPI is initialized.
[1,16]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,16]<stdout>:
[1,5]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,20]<stdout>:
[1,11]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,11]<stdout>:                                                                                                    
[1,11]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,11]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,11]<stdout>:                                        Architecture : 64bit                                        
[1,11]<stdout>:                                    Type de processeur : aarch64                                    
[1,11]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,11]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,5]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,5]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,11]<stdout>:                                     Version de Python : 3.11.2                                     
[1,11]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,12]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,14]<stdout>:checking MPI initialization...
[1,14]<stdout>:using COMM_WORLD.
[1,14]<stdout>:MPI is initialized.
[1,14]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,14]<stdout>:
[1,4]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,8]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,20]<stdout>:starting the execution...
[1,11]<stdout>:                                      Parallélisme MPI : actif                                      
[1,11]<stdout>:                                  Rang du processeur courant : 11                                   
[1,11]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,5]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,5]<stdout>:                                                                                                    
[1,5]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,5]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,5]<stdout>:                                        Architecture : 64bit                                        
[1,5]<stdout>:                                    Type de processeur : aarch64                                    
[1,5]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,5]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,6]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,5]<stdout>:                                     Version de Python : 3.11.2                                     
[1,5]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,13]<stdout>:checking MPI initialization...
[1,13]<stdout>:using COMM_WORLD.
[1,13]<stdout>:MPI is initialized.
[1,13]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,13]<stdout>:
[1,11]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,11]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,9]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,3]<stdout>:checking MPI initialization...
[1,3]<stdout>:using COMM_WORLD.
[1,3]<stdout>:MPI is initialized.
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,5]<stdout>:                                      Parallélisme MPI : actif                                      
[1,5]<stdout>:                                   Rang du processeur courant : 5                                   
[1,5]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,16]<stdout>:<INFO> Démarrage de l'exécution.
[1,16]<stdout>:
[1,19]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,23]<stdout>:checking MPI initialization...
[1,23]<stdout>:using COMM_WORLD.
[1,23]<stdout>:MPI is initialized.
[1,23]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,23]<stdout>:
[1,5]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,5]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,16]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,14]<stdout>:<INFO> Démarrage de l'exécution.
[1,14]<stdout>:
[1,1]<stdout>:checking MPI initialization...
[1,1]<stdout>:using COMM_WORLD.
[1,1]<stdout>:MPI is initialized.
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,2]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,16]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,16]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,14]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,16]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,16]<stdout>:                                                                                                    
[1,16]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,16]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,16]<stdout>:                                        Architecture : 64bit                                        
[1,16]<stdout>:                                    Type de processeur : aarch64                                    
[1,16]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,16]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,13]<stdout>:<INFO> Démarrage de l'exécution.
[1,13]<stdout>:
[1,3]<stdout>:<INFO> Démarrage de l'exécution.
[1,3]<stdout>:
[1,14]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,14]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,16]<stdout>:                                     Version de Python : 3.11.2                                     
[1,16]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,23]<stdout>:<INFO> Démarrage de l'exécution.
[1,23]<stdout>:
[1,11]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,16]<stdout>:                                      Parallélisme MPI : actif                                      
[1,16]<stdout>:                                  Rang du processeur courant : 16                                   
[1,16]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,13]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,14]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,14]<stdout>:                                                                                                    
[1,14]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,14]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,14]<stdout>:                                        Architecture : 64bit                                        
[1,14]<stdout>:                                    Type de processeur : aarch64                                    
[1,14]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,14]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,3]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,11]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:                                     Version de Python : 3.11.2                                     
[1,14]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,10]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,10]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,10]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,10]<stdout>:
[1,16]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,16]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,13]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,13]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,23]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,3]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,3]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,11]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,1]<stdout>:<INFO> Démarrage de l'exécution.
[1,1]<stdout>:
[1,14]<stdout>:                                      Parallélisme MPI : actif                                      
[1,14]<stdout>:                                  Rang du processeur courant : 14                                   
[1,14]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,5]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,11]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,13]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,13]<stdout>:                                                                                                    
[1,13]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,13]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,13]<stdout>:                                        Architecture : 64bit                                        
[1,13]<stdout>:                                    Type de processeur : aarch64                                    
[1,13]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,13]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,23]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,23]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,3]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,3]<stdout>:                                                                                                    
[1,3]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,3]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,3]<stdout>:                                        Architecture : 64bit                                        
[1,3]<stdout>:                                    Type de processeur : aarch64                                    
[1,3]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,3]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,11]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,5]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,14]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,13]<stdout>:                                     Version de Python : 3.11.2                                     
[1,13]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,3]<stdout>:                                     Version de Python : 3.11.2                                     
[1,3]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,11]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,5]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,23]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,23]<stdout>:                                                                                                    
[1,23]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,23]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,23]<stdout>:                                        Architecture : 64bit                                        
[1,23]<stdout>:                                    Type de processeur : aarch64                                    
[1,23]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,23]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,1]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,20]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,20]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,20]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,20]<stdout>:
[1,13]<stdout>:                                      Parallélisme MPI : actif                                      
[1,13]<stdout>:                                  Rang du processeur courant : 13                                   
[1,13]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,5]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,3]<stdout>:                                      Parallélisme MPI : actif                                      
[1,3]<stdout>:                                   Rang du processeur courant : 3                                   
[1,3]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,23]<stdout>:                                     Version de Python : 3.11.2                                     
[1,23]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,1]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,1]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,13]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,13]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,5]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,23]<stdout>:                                      Parallélisme MPI : actif                                      
[1,23]<stdout>:                                  Rang du processeur courant : 23                                   
[1,23]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,3]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,3]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,5]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,1]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,1]<stdout>:                                                                                                    
[1,1]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,1]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,1]<stdout>:                                        Architecture : 64bit                                        
[1,1]<stdout>:                                    Type de processeur : aarch64                                    
[1,1]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,1]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,11]<stdout>:
[1,23]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,23]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,1]<stdout>:                                     Version de Python : 3.11.2                                     
[1,1]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,1]<stdout>:                                      Parallélisme MPI : actif                                      
[1,1]<stdout>:                                   Rang du processeur courant : 1                                   
[1,1]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,11]<stdout>:starting the execution...
[1,5]<stdout>:
[1,16]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,1]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,1]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,16]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,5]<stdout>:starting the execution...
[1,16]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,14]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,16]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,14]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,16]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,14]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,16]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,14]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,13]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,3]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,13]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,14]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,3]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,13]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,14]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,23]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,3]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,16]<stdout>:
[1,13]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,3]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,23]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,13]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,3]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,23]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,13]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,1]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,16]<stdout>:starting the execution...
[1,3]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,23]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,14]<stdout>:
[1,1]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,15]<stdout>:checking MPI initialization...
[1,15]<stdout>:using COMM_WORLD.
[1,15]<stdout>:MPI is initialized.
[1,15]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,15]<stdout>:
[1,23]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,1]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,23]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,1]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,14]<stdout>:starting the execution...
[1,13]<stdout>:
[1,1]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,3]<stdout>:
[1,1]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,11]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,11]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,11]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,11]<stdout>:
[1,13]<stdout>:starting the execution...
[1,23]<stdout>:
[1,3]<stdout>:starting the execution...
[1,23]<stdout>:starting the execution...
[1,15]<stdout>:<INFO> Démarrage de l'exécution.
[1,15]<stdout>:
[1,1]<stdout>:
[1,5]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,5]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,5]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,5]<stdout>:
[1,1]<stdout>:starting the execution...
[1,15]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,15]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,15]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,0]<stdout>:checking MPI initialization...
[1,0]<stdout>:using COMM_WORLD.
[1,0]<stdout>:MPI is initialized.
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,15]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,15]<stdout>:                                                                                                    
[1,15]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,15]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,15]<stdout>:                                        Architecture : 64bit                                        
[1,15]<stdout>:                                    Type de processeur : aarch64                                    
[1,15]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,15]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,15]<stdout>:                                     Version de Python : 3.11.2                                     
[1,15]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,15]<stdout>:                                      Parallélisme MPI : actif                                      
[1,15]<stdout>:                                  Rang du processeur courant : 15                                   
[1,15]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,16]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,16]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,16]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,16]<stdout>:
[1,15]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,15]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,14]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,14]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,14]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,14]<stdout>:
[1,0]<stdout>:<INFO> Démarrage de l'exécution.
[1,0]<stdout>:
[1,13]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,13]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,13]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,13]<stdout>:
[1,3]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,3]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,3]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,3]<stdout>:
[1,12]<stdout>:checking MPI initialization...
[1,12]<stdout>:using COMM_WORLD.
[1,12]<stdout>:MPI is initialized.
[1,12]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,12]<stdout>:
[1,0]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,23]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,23]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,23]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,23]<stdout>:
[1,0]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,0]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,6]<stdout>:checking MPI initialization...
[1,6]<stdout>:using COMM_WORLD.
[1,6]<stdout>:MPI is initialized.
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,8]<stdout>:checking MPI initialization...
[1,8]<stdout>:using COMM_WORLD.
[1,8]<stdout>:MPI is initialized.
[1,8]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,8]<stdout>:
[1,9]<stdout>:checking MPI initialization...
[1,9]<stdout>:using COMM_WORLD.
[1,9]<stdout>:MPI is initialized.
[1,9]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,9]<stdout>:
[1,4]<stdout>:checking MPI initialization...
[1,4]<stdout>:using COMM_WORLD.
[1,4]<stdout>:MPI is initialized.
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,0]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,0]<stdout>:                                                                                                    
[1,0]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,0]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,0]<stdout>:                                        Architecture : 64bit                                        
[1,0]<stdout>:                                    Type de processeur : aarch64                                    
[1,0]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,0]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,1]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,1]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,1]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,1]<stdout>:
[1,19]<stdout>:checking MPI initialization...
[1,19]<stdout>:using COMM_WORLD.
[1,19]<stdout>:MPI is initialized.
[1,19]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,19]<stdout>:
[1,0]<stdout>:                                     Version de Python : 3.11.2                                     
[1,0]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,2]<stdout>:checking MPI initialization...
[1,2]<stdout>:using COMM_WORLD.
[1,2]<stdout>:MPI is initialized.
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,15]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                                      Parallélisme MPI : actif                                      
[1,0]<stdout>:                                   Rang du processeur courant : 0                                   
[1,0]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,12]<stdout>:<INFO> Démarrage de l'exécution.
[1,12]<stdout>:
[1,15]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,0]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,0]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,15]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,15]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,8]<stdout>:<INFO> Démarrage de l'exécution.
[1,8]<stdout>:
[1,12]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,4]<stdout>:<INFO> Démarrage de l'exécution.
[1,4]<stdout>:
[1,15]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,9]<stdout>:<INFO> Démarrage de l'exécution.
[1,9]<stdout>:
[1,12]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,12]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,15]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,2]<stdout>:<INFO> Démarrage de l'exécution.
[1,2]<stdout>:
[1,8]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,6]<stdout>:<INFO> Démarrage de l'exécution.
[1,6]<stdout>:
[1,4]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,9]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,12]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,12]<stdout>:                                                                                                    
[1,12]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,12]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,12]<stdout>:                                        Architecture : 64bit                                        
[1,12]<stdout>:                                    Type de processeur : aarch64                                    
[1,12]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,12]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,8]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,8]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,19]<stdout>:<INFO> Démarrage de l'exécution.
[1,19]<stdout>:
[1,4]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,4]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,12]<stdout>:                                     Version de Python : 3.11.2                                     
[1,12]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,2]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,15]<stdout>:
[1,6]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,8]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,8]<stdout>:                                                                                                    
[1,8]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,8]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,8]<stdout>:                                        Architecture : 64bit                                        
[1,8]<stdout>:                                    Type de processeur : aarch64                                    
[1,8]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,8]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,12]<stdout>:                                      Parallélisme MPI : actif                                      
[1,12]<stdout>:                                  Rang du processeur courant : 12                                   
[1,12]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,4]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,4]<stdout>:                                                                                                    
[1,4]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,4]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,4]<stdout>:                                        Architecture : 64bit                                        
[1,4]<stdout>:                                    Type de processeur : aarch64                                    
[1,4]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,4]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,2]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,2]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,6]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,6]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,19]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,15]<stdout>:starting the execution...
[1,8]<stdout>:                                     Version de Python : 3.11.2                                     
[1,8]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,12]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,12]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,4]<stdout>:                                     Version de Python : 3.11.2                                     
[1,4]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,9]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,9]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,0]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,2]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,2]<stdout>:                                                                                                    
[1,2]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,2]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,2]<stdout>:                                        Architecture : 64bit                                        
[1,2]<stdout>:                                    Type de processeur : aarch64                                    
[1,2]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,2]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,19]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,19]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,6]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,6]<stdout>:                                                                                                    
[1,6]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,6]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,6]<stdout>:                                        Architecture : 64bit                                        
[1,6]<stdout>:                                    Type de processeur : aarch64                                    
[1,6]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,6]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,8]<stdout>:                                      Parallélisme MPI : actif                                      
[1,8]<stdout>:                                   Rang du processeur courant : 8                                   
[1,8]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,4]<stdout>:                                      Parallélisme MPI : actif                                      
[1,4]<stdout>:                                   Rang du processeur courant : 4                                   
[1,4]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,0]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,9]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,9]<stdout>:                                                                                                    
[1,9]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,9]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,9]<stdout>:                                        Architecture : 64bit                                        
[1,9]<stdout>:                                    Type de processeur : aarch64                                    
[1,9]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,9]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,6]<stdout>:                                     Version de Python : 3.11.2                                     
[1,6]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,2]<stdout>:                                     Version de Python : 3.11.2                                     
[1,2]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,8]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,8]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,19]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,19]<stdout>:                                                                                                    
[1,19]<stdout>:                              Exécution du : Thu Jan 23 17:06:40 2025                               
[1,19]<stdout>:                                  Nom de la machine : 8b87b9d0b29a                                  
[1,19]<stdout>:                                        Architecture : 64bit                                        
[1,19]<stdout>:                                    Type de processeur : aarch64                                    
[1,19]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,19]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,0]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,9]<stdout>:                                     Version de Python : 3.11.2                                     
[1,9]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,4]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,4]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,6]<stdout>:                                      Parallélisme MPI : actif                                      
[1,6]<stdout>:                                   Rang du processeur courant : 6                                   
[1,6]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,2]<stdout>:                                      Parallélisme MPI : actif                                      
[1,2]<stdout>:                                   Rang du processeur courant : 2                                   
[1,2]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,19]<stdout>:                                     Version de Python : 3.11.2                                     
[1,19]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,0]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,9]<stdout>:                                      Parallélisme MPI : actif                                      
[1,9]<stdout>:                                   Rang du processeur courant : 9                                   
[1,9]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,6]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,6]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,2]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,0]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,19]<stdout>:                                      Parallélisme MPI : actif                                      
[1,19]<stdout>:                                  Rang du processeur courant : 19                                   
[1,19]<stdout>:                              Nombre de processeurs MPI utilisés : 24                               
[1,0]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,9]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,9]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,19]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,19]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,0]<stdout>:
[1,0]<stdout>:starting the execution...
[1,12]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,12]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,12]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,6]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,8]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,12]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,4]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,6]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,8]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,9]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,12]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,19]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,6]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,8]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,9]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,15]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,15]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,15]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,15]<stdout>:
[1,4]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,12]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,4]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,19]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,6]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,2]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,9]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,8]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,4]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,19]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,6]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,8]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,2]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,9]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,2]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,8]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,6]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,4]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,19]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,12]<stdout>:
[1,9]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,19]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,4]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,2]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,9]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,19]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,2]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,12]<stdout>:starting the execution...
[1,6]<stdout>:
[1,2]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,8]<stdout>:
[1,4]<stdout>:
[1,9]<stdout>:
[1,19]<stdout>:
[1,6]<stdout>:starting the execution...
[1,8]<stdout>:starting the execution...
[1,2]<stdout>:
[1,4]<stdout>:starting the execution...
[1,9]<stdout>:starting the execution...
[1,19]<stdout>:starting the execution...
[1,2]<stdout>:starting the execution...
[1,0]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,0]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,0]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,0]<stdout>:
[1,12]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,12]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,12]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,12]<stdout>:
[1,8]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,8]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,8]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,8]<stdout>:
[1,6]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,6]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,6]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,6]<stdout>:
[1,9]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,9]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,9]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,9]<stdout>:
[1,4]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,4]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,4]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,4]<stdout>:
[1,19]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,19]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,19]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,19]<stdout>:
[1,2]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,2]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,2]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,2]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,7]<stdout>:
[1,21]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,21]<stdout>:
[1,18]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,18]<stdout>:
[1,17]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,17]<stdout>:
[1,22]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,22]<stdout>:
[1,10]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,10]<stdout>:
[1,20]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,20]<stdout>:
[1,11]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,11]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,5]<stdout>:
[1,16]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,16]<stdout>:
[1,14]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,14]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,3]<stdout>:
[1,13]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,13]<stdout>:
[1,23]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,23]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,1]<stdout>:
[1,15]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,15]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,0]<stdout>:
[1,12]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,12]<stdout>:
[1,8]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,8]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,4]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,2]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,6]<stdout>:
[1,9]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,9]<stdout>:
[1,19]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,19]<stdout>:
[1,11]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,11]<stdout>:
[1,8]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,8]<stdout>:
[1,18]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,18]<stdout>:
[1,11]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,11]<stdout>:
[1,11]<stdout>:Nom de la base                          :  ELEMBASE
[1,11]<stdout>:     Créée avec la version                   :  17.02.04
[1,11]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,11]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,11]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,11]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,11]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,11]<stdout>:     Taille maximum du répertoire            :  300
[1,11]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,11]<stdout>:
[1,11]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,11]<stdout>:
[1,16]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,16]<stdout>:
[1,11]<stdout>:Nom de la base                          :  ELEMBASE
[1,11]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,11]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,11]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,11]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,11]<stdout>:     Nombre total d'accès en lecture         :  63
[1,11]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,11]<stdout>:     Nombre total d'accès en écriture        :  0
[1,11]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,11]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,11]<stdout>:     Taille maximum du répertoire            :  300
[1,11]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,11]<stdout>:
[1,11]<stdout>:Relecture des catalogues des éléments faite.
[1,11]<stdout>:
[1,11]<stdout>:Fin de lecture (durée  0.015992  s.) 
[1,11]<stdout>:
[1,11]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,11]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,11]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,11]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,11]<stdout>:# Mémoire (Mo) :   677.59 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.20s, elaps:        9.61s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,8]<stdout>:
[1,8]<stdout>:Nom de la base                          :  ELEMBASE
[1,8]<stdout>:     Créée avec la version                   :  17.02.04
[1,8]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,8]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,8]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,8]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,8]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,8]<stdout>:     Taille maximum du répertoire            :  300
[1,8]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,8]<stdout>:
[1,8]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,8]<stdout>:
[1,18]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,18]<stdout>:
[1,18]<stdout>:Nom de la base                          :  ELEMBASE
[1,18]<stdout>:     Créée avec la version                   :  17.02.04
[1,18]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,18]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,18]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,18]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,18]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,18]<stdout>:     Taille maximum du répertoire            :  300
[1,18]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,18]<stdout>:
[1,18]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,18]<stdout>:
[1,8]<stdout>:Nom de la base                          :  ELEMBASE
[1,8]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,8]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,8]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,8]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,8]<stdout>:     Nombre total d'accès en lecture         :  63
[1,8]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,8]<stdout>:     Nombre total d'accès en écriture        :  0
[1,8]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,8]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,8]<stdout>:     Taille maximum du répertoire            :  300
[1,8]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,8]<stdout>:
[1,8]<stdout>:Relecture des catalogues des éléments faite.
[1,8]<stdout>:
[1,8]<stdout>:Fin de lecture (durée  0.015518  s.) 
[1,8]<stdout>:
[1,8]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,8]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,8]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,8]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,8]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.18s, elaps:        9.62s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:Nom de la base                          :  ELEMBASE
[1,18]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,18]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,18]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,18]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,18]<stdout>:     Nombre total d'accès en lecture         :  63
[1,18]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,18]<stdout>:     Nombre total d'accès en écriture        :  0
[1,18]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,18]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,18]<stdout>:     Taille maximum du répertoire            :  300
[1,18]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,18]<stdout>:
[1,18]<stdout>:Relecture des catalogues des éléments faite.
[1,18]<stdout>:
[1,18]<stdout>:Fin de lecture (durée  0.015421  s.) 
[1,18]<stdout>:
[1,18]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,18]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,18]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,18]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,18]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.19s, elaps:        9.65s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,14]<stdout>:
[1,16]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,16]<stdout>:
[1,16]<stdout>:Nom de la base                          :  ELEMBASE
[1,16]<stdout>:     Créée avec la version                   :  17.02.04
[1,16]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,16]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,16]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,16]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,16]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,16]<stdout>:     Taille maximum du répertoire            :  300
[1,16]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,16]<stdout>:
[1,16]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,16]<stdout>:
[1,21]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,21]<stdout>:
[1,16]<stdout>:Nom de la base                          :  ELEMBASE
[1,16]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,16]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,16]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,16]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,16]<stdout>:     Nombre total d'accès en lecture         :  63
[1,16]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,16]<stdout>:     Nombre total d'accès en écriture        :  0
[1,16]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,16]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,16]<stdout>:     Taille maximum du répertoire            :  300
[1,16]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,16]<stdout>:
[1,16]<stdout>:Relecture des catalogues des éléments faite.
[1,16]<stdout>:
[1,16]<stdout>:Fin de lecture (durée  0.015762  s.) 
[1,16]<stdout>:
[1,16]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,16]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,16]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,16]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,16]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.17s, elaps:        9.66s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,12]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,12]<stdout>:
[1,14]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,14]<stdout>:
[1,14]<stdout>:Nom de la base                          :  ELEMBASE
[1,14]<stdout>:     Créée avec la version                   :  17.02.04
[1,14]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,14]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,14]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,14]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,14]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,14]<stdout>:     Taille maximum du répertoire            :  300
[1,14]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,14]<stdout>:
[1,14]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,14]<stdout>:
[1,14]<stdout>:Nom de la base                          :  ELEMBASE
[1,14]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,14]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,14]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,14]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,14]<stdout>:     Nombre total d'accès en lecture         :  63
[1,14]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,14]<stdout>:     Nombre total d'accès en écriture        :  0
[1,14]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,14]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,14]<stdout>:     Taille maximum du répertoire            :  300
[1,14]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,14]<stdout>:
[1,14]<stdout>:Relecture des catalogues des éléments faite.
[1,14]<stdout>:
[1,14]<stdout>:Fin de lecture (durée  0.015936  s.) 
[1,14]<stdout>:
[1,14]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,14]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,14]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,14]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,14]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.18s, elaps:        9.70s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,21]<stdout>:
[1,21]<stdout>:Nom de la base                          :  ELEMBASE
[1,21]<stdout>:     Créée avec la version                   :  17.02.04
[1,21]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,21]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,21]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,21]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,21]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,21]<stdout>:     Taille maximum du répertoire            :  300
[1,21]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,21]<stdout>:
[1,21]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,21]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Créée avec la version                   :  17.02.04
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Créée avec la version                   :  17.02.04
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,21]<stdout>:Nom de la base                          :  ELEMBASE
[1,21]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,21]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,21]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,21]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,21]<stdout>:     Nombre total d'accès en lecture         :  63
[1,21]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,21]<stdout>:     Nombre total d'accès en écriture        :  0
[1,21]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,21]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,21]<stdout>:     Taille maximum du répertoire            :  300
[1,21]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,21]<stdout>:
[1,21]<stdout>:Relecture des catalogues des éléments faite.
[1,21]<stdout>:
[1,21]<stdout>:Fin de lecture (durée  0.016293  s.) 
[1,21]<stdout>:
[1,21]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,21]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,21]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,21]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,21]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.19s, elaps:        9.73s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre total d'accès en lecture         :  63
[1,1]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,1]<stdout>:     Nombre total d'accès en écriture        :  0
[1,1]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,13]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,13]<stdout>:
[1,1]<stdout>:Relecture des catalogues des éléments faite.
[1,1]<stdout>:
[1,1]<stdout>:Fin de lecture (durée  0.016254  s.) 
[1,1]<stdout>:
[1,1]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,1]<stdout>:                         ajouté à l'initialisation du processus : 677.57 Mo                         
[1,1]<stdout>:                               Limite cible du processus : 4875.97 Mo                               
[1,1]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,1]<stdout>:# Mémoire (Mo) :   677.57 /   668.70 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.19s, elaps:        9.72s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre total d'accès en lecture         :  63
[1,4]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,4]<stdout>:     Nombre total d'accès en écriture        :  0
[1,4]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,4]<stdout>:Relecture des catalogues des éléments faite.
[1,4]<stdout>:
[1,4]<stdout>:Fin de lecture (durée  0.016317  s.) 
[1,4]<stdout>:
[1,4]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,4]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,4]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,4]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,4]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0001   user+syst:        0.04s (syst:        0.16s, elaps:        9.72s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,12]<stdout>:
[1,12]<stdout>:Nom de la base                          :  ELEMBASE
[1,12]<stdout>:     Créée avec la version                   :  17.02.04
[1,12]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,12]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,12]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,12]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,12]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,12]<stdout>:     Taille maximum du répertoire            :  300
[1,12]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,12]<stdout>:
[1,12]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,12]<stdout>:
[1,12]<stdout>:Nom de la base                          :  ELEMBASE
[1,12]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,12]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,12]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,12]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,12]<stdout>:     Nombre total d'accès en lecture         :  63
[1,12]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,12]<stdout>:     Nombre total d'accès en écriture        :  0
[1,12]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,12]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,12]<stdout>:     Taille maximum du répertoire            :  300
[1,12]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,12]<stdout>:
[1,12]<stdout>:Relecture des catalogues des éléments faite.
[1,12]<stdout>:
[1,12]<stdout>:Fin de lecture (durée  0.015788  s.) 
[1,12]<stdout>:
[1,12]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,12]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,12]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,12]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,12]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.20s, elaps:        9.74s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,13]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,13]<stdout>:
[1,13]<stdout>:Nom de la base                          :  ELEMBASE
[1,13]<stdout>:     Créée avec la version                   :  17.02.04
[1,13]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,13]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,13]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,13]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,13]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,13]<stdout>:     Taille maximum du répertoire            :  300
[1,13]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,13]<stdout>:
[1,13]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,13]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Créée avec la version                   :  17.02.04
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,13]<stdout>:Nom de la base                          :  ELEMBASE
[1,13]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,13]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,13]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,13]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,13]<stdout>:     Nombre total d'accès en lecture         :  63
[1,13]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,13]<stdout>:     Nombre total d'accès en écriture        :  0
[1,13]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,13]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,13]<stdout>:     Taille maximum du répertoire            :  300
[1,13]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,13]<stdout>:
[1,13]<stdout>:Relecture des catalogues des éléments faite.
[1,13]<stdout>:
[1,13]<stdout>:Fin de lecture (durée  0.015928  s.) 
[1,13]<stdout>:
[1,13]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,13]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,13]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,13]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,13]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.18s, elaps:        9.78s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre total d'accès en lecture         :  63
[1,6]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,6]<stdout>:     Nombre total d'accès en écriture        :  0
[1,6]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,6]<stdout>:Relecture des catalogues des éléments faite.
[1,6]<stdout>:
[1,6]<stdout>:Fin de lecture (durée  0.015699  s.) 
[1,6]<stdout>:
[1,6]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,6]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,6]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,6]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,6]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.19s, elaps:        9.78s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Créée avec la version                   :  17.02.04
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre total d'accès en lecture         :  63
[1,2]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,2]<stdout>:     Nombre total d'accès en écriture        :  0
[1,2]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,2]<stdout>:Relecture des catalogues des éléments faite.
[1,2]<stdout>:
[1,2]<stdout>:Fin de lecture (durée  0.015516  s.) 
[1,2]<stdout>:
[1,2]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,2]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,2]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,2]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,2]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.18s, elaps:        9.80s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,15]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Créée avec la version                   :  17.02.04
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,17]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,17]<stdout>:
[1,22]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,22]<stdout>:
[1,10]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,10]<stdout>:
[1,20]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,20]<stdout>:
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre total d'accès en lecture         :  63
[1,0]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,0]<stdout>:     Nombre total d'accès en écriture        :  0
[1,0]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,0]<stdout>:Relecture des catalogues des éléments faite.
[1,0]<stdout>:
[1,0]<stdout>:Fin de lecture (durée  0.017202  s.) 
[1,0]<stdout>:
[1,0]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,0]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,0]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,0]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,0]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.18s, elaps:        9.82s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,19]<stdout>:
[1,15]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,15]<stdout>:
[1,15]<stdout>:Nom de la base                          :  ELEMBASE
[1,15]<stdout>:     Créée avec la version                   :  17.02.04
[1,15]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,15]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,15]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,15]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,15]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,15]<stdout>:     Taille maximum du répertoire            :  300
[1,15]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,15]<stdout>:
[1,15]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,15]<stdout>:
[1,15]<stdout>:Nom de la base                          :  ELEMBASE
[1,15]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,15]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,15]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,15]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,15]<stdout>:     Nombre total d'accès en lecture         :  63
[1,15]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,15]<stdout>:     Nombre total d'accès en écriture        :  0
[1,15]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,15]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,15]<stdout>:     Taille maximum du répertoire            :  300
[1,15]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,15]<stdout>:
[1,15]<stdout>:Relecture des catalogues des éléments faite.
[1,15]<stdout>:
[1,15]<stdout>:Fin de lecture (durée  0.016318  s.) 
[1,15]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,15]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,15]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,15]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Créée avec la version                   :  17.02.04
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,15]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,15]<stdout>:# Mémoire (Mo) :   677.59 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.19s, elaps:        9.86s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,17]<stdout>:
[1,22]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,22]<stdout>:
[1,17]<stdout>:Nom de la base                          :  ELEMBASE
[1,17]<stdout>:     Créée avec la version                   :  17.02.04
[1,17]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,17]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,17]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,17]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,17]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,17]<stdout>:     Taille maximum du répertoire            :  300
[1,17]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,17]<stdout>:
[1,17]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,17]<stdout>:
[1,22]<stdout>:Nom de la base                          :  ELEMBASE
[1,22]<stdout>:     Créée avec la version                   :  17.02.04
[1,22]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,22]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,22]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,22]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,22]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,22]<stdout>:     Taille maximum du répertoire            :  300
[1,22]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,22]<stdout>:
[1,22]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,22]<stdout>:
[1,10]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,10]<stdout>:
[1,10]<stdout>:Nom de la base                          :  ELEMBASE
[1,10]<stdout>:     Créée avec la version                   :  17.02.04
[1,10]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,10]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,10]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,10]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,10]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,10]<stdout>:     Taille maximum du répertoire            :  300
[1,10]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,10]<stdout>:
[1,10]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,10]<stdout>:
[1,20]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,20]<stdout>:
[1,20]<stdout>:Nom de la base                          :  ELEMBASE
[1,20]<stdout>:     Créée avec la version                   :  17.02.04
[1,20]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,20]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,20]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,20]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,20]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,20]<stdout>:     Taille maximum du répertoire            :  300
[1,20]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,20]<stdout>:
[1,20]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,20]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Créée avec la version                   :  17.02.04
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Créée avec la version                   :  17.02.04
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,19]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,19]<stdout>:
[1,19]<stdout>:Nom de la base                          :  ELEMBASE
[1,19]<stdout>:     Créée avec la version                   :  17.02.04
[1,19]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,19]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,19]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,19]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,19]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,19]<stdout>:     Taille maximum du répertoire            :  300
[1,19]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,19]<stdout>:
[1,19]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,19]<stdout>:
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre total d'accès en lecture         :  63
[1,7]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,7]<stdout>:     Nombre total d'accès en écriture        :  0
[1,7]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,7]<stdout>:Relecture des catalogues des éléments faite.
[1,7]<stdout>:
[1,7]<stdout>:Fin de lecture (durée  0.016129  s.) 
[1,7]<stdout>:
[1,7]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,7]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,7]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,7]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,7]<stdout>:# Mémoire (Mo) :   677.59 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0001   user+syst:        0.04s (syst:        0.18s, elaps:        9.89s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:Nom de la base                          :  ELEMBASE
[1,22]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,22]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,22]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,22]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,22]<stdout>:     Nombre total d'accès en lecture         :  63
[1,22]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,22]<stdout>:     Nombre total d'accès en écriture        :  0
[1,22]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,22]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,22]<stdout>:     Taille maximum du répertoire            :  300
[1,22]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,22]<stdout>:
[1,17]<stdout>:Nom de la base                          :  ELEMBASE
[1,17]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,17]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,17]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,17]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,17]<stdout>:     Nombre total d'accès en lecture         :  63
[1,17]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,17]<stdout>:     Nombre total d'accès en écriture        :  0
[1,17]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,17]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,17]<stdout>:     Taille maximum du répertoire            :  300
[1,17]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,17]<stdout>:
[1,22]<stdout>:Relecture des catalogues des éléments faite.
[1,22]<stdout>:
[1,17]<stdout>:Relecture des catalogues des éléments faite.
[1,17]<stdout>:
[1,22]<stdout>:Fin de lecture (durée  0.016461  s.) 
[1,22]<stdout>:
[1,17]<stdout>:Fin de lecture (durée  0.016573  s.) 
[1,17]<stdout>:
[1,22]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,22]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,22]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,17]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,17]<stdout>:                         ajouté à l'initialisation du processus : 677.57 Mo                         
[1,17]<stdout>:                               Limite cible du processus : 4875.97 Mo                               
[1,22]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,17]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,10]<stdout>:Nom de la base                          :  ELEMBASE
[1,10]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,10]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,10]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,10]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,10]<stdout>:     Nombre total d'accès en lecture         :  63
[1,10]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,10]<stdout>:     Nombre total d'accès en écriture        :  0
[1,10]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,10]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,10]<stdout>:     Taille maximum du répertoire            :  300
[1,10]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,10]<stdout>:
[1,10]<stdout>:Relecture des catalogues des éléments faite.
[1,10]<stdout>:
[1,10]<stdout>:Fin de lecture (durée  0.016028  s.) 
[1,10]<stdout>:
[1,22]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Mémoire (Mo) :   677.57 /   668.70 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0001   user+syst:        0.04s (syst:        0.17s, elaps:        9.89s)
[1,10]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,10]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,10]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.18s, elaps:        9.89s)
[1,10]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,20]<stdout>:Nom de la base                          :  ELEMBASE
[1,20]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,20]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,20]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,20]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,20]<stdout>:     Nombre total d'accès en lecture         :  63
[1,20]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,20]<stdout>:     Nombre total d'accès en écriture        :  0
[1,20]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,20]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,20]<stdout>:     Taille maximum du répertoire            :  300
[1,20]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,20]<stdout>:
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:Relecture des catalogues des éléments faite.
[1,20]<stdout>:
[1,20]<stdout>:Fin de lecture (durée  0.015947  s.) 
[1,20]<stdout>:
[1,20]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,20]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,20]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,10]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,10]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.18s, elaps:        9.88s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.18s, elaps:        9.88s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre total d'accès en lecture         :  63
[1,5]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,5]<stdout>:     Nombre total d'accès en écriture        :  0
[1,5]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre total d'accès en lecture         :  63
[1,3]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,3]<stdout>:     Nombre total d'accès en écriture        :  0
[1,3]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,5]<stdout>:Relecture des catalogues des éléments faite.
[1,5]<stdout>:
[1,3]<stdout>:Relecture des catalogues des éléments faite.
[1,3]<stdout>:
[1,3]<stdout>:Fin de lecture (durée  0.016323  s.) 
[1,3]<stdout>:
[1,5]<stdout>:Fin de lecture (durée  0.016337  s.) 
[1,5]<stdout>:
[1,5]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,5]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,5]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,3]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,3]<stdout>:                         ajouté à l'initialisation du processus : 677.59 Mo                         
[1,3]<stdout>:                               Limite cible du processus : 4875.99 Mo                               
[1,5]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,3]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,3]<stdout>:# Mémoire (Mo) :   677.59 /   668.71 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.21s, elaps:        9.88s)
[1,3]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.18s, elaps:        9.88s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:Nom de la base                          :  ELEMBASE
[1,19]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,19]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,19]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,19]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,19]<stdout>:     Nombre total d'accès en lecture         :  63
[1,19]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,19]<stdout>:     Nombre total d'accès en écriture        :  0
[1,19]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,19]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,19]<stdout>:     Taille maximum du répertoire            :  300
[1,19]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,19]<stdout>:
[1,19]<stdout>:Relecture des catalogues des éléments faite.
[1,19]<stdout>:
[1,19]<stdout>:Fin de lecture (durée  0.016112  s.) 
[1,19]<stdout>:
[1,19]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,19]<stdout>:                         ajouté à l'initialisation du processus : 677.57 Mo                         
[1,19]<stdout>:                               Limite cible du processus : 4875.97 Mo                               
[1,19]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,19]<stdout>:# Mémoire (Mo) :   677.57 /   668.70 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.19s, elaps:        9.89s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,9]<stdout>:
[1,23]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,23]<stdout>:
[1,9]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,9]<stdout>:
[1,9]<stdout>:Nom de la base                          :  ELEMBASE
[1,9]<stdout>:     Créée avec la version                   :  17.02.04
[1,9]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,9]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,9]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,9]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,9]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,9]<stdout>:     Taille maximum du répertoire            :  300
[1,9]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,9]<stdout>:
[1,9]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,9]<stdout>:
[1,9]<stdout>:Nom de la base                          :  ELEMBASE
[1,9]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,9]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,9]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,9]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,9]<stdout>:     Nombre total d'accès en lecture         :  63
[1,9]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,9]<stdout>:     Nombre total d'accès en écriture        :  0
[1,9]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,9]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,9]<stdout>:     Taille maximum du répertoire            :  300
[1,9]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,9]<stdout>:
[1,9]<stdout>:Relecture des catalogues des éléments faite.
[1,9]<stdout>:
[1,9]<stdout>:Fin de lecture (durée  0.014912  s.) 
[1,9]<stdout>:
[1,9]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,9]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,9]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,9]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,9]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.18s, elaps:        9.96s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,23]<stdout>:
[1,23]<stdout>:Nom de la base                          :  ELEMBASE
[1,23]<stdout>:     Créée avec la version                   :  17.02.04
[1,23]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,23]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,23]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,23]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,23]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,23]<stdout>:     Taille maximum du répertoire            :  300
[1,23]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,23]<stdout>:
[1,23]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,23]<stdout>:
[1,23]<stdout>:Nom de la base                          :  ELEMBASE
[1,23]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,23]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,23]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,23]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,23]<stdout>:     Nombre total d'accès en lecture         :  63
[1,23]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,23]<stdout>:     Nombre total d'accès en écriture        :  0
[1,23]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,23]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,23]<stdout>:     Taille maximum du répertoire            :  300
[1,23]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,23]<stdout>:
[1,23]<stdout>:Relecture des catalogues des éléments faite.
[1,23]<stdout>:
[1,23]<stdout>:Fin de lecture (durée  0.014202  s.) 
[1,23]<stdout>:
[1,23]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,23]<stdout>:                         ajouté à l'initialisation du processus : 677.58 Mo                         
[1,23]<stdout>:                               Limite cible du processus : 4875.98 Mo                               
[1,23]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,23]<stdout>:# Mémoire (Mo) :   677.58 /   668.58 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.18s, elaps:        9.97s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:PETSc initialized...
[1,20]<stdout>:PETSc initialized...
[1,8]<stdout>:PETSc initialized...
[1,0]<stdout>:PETSc initialized...
[1,14]<stdout>:PETSc initialized...
[1,23]<stdout>:PETSc initialized...
[1,11]<stdout>:PETSc initialized...
[1,10]<stdout>:PETSc initialized...
[1,12]<stdout>:PETSc initialized...
[1,21]<stdout>:PETSc initialized...
[1,19]<stdout>:PETSc initialized...
[1,16]<stdout>:PETSc initialized...
[1,9]<stdout>:PETSc initialized...
[1,13]<stdout>:PETSc initialized...
[1,17]<stdout>:PETSc initialized...
[1,1]<stdout>:PETSc initialized...
[1,3]<stdout>:PETSc initialized...
[1,7]<stdout>:PETSc initialized...
[1,22]<stdout>:PETSc initialized...
[1,15]<stdout>:PETSc initialized...
[1,6]<stdout>:PETSc initialized...
[1,5]<stdout>:PETSc initialized...
[1,2]<stdout>:PETSc initialized...
[1,4]<stdout>:PETSc initialized...
[1,0]<stdout>:Nom MED du maillage : PARALLEPIPED
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000001 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                      274625
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                     287488
[1,0]<stdout>:                              SEG2                  768
[1,0]<stdout>:                              QUAD4               24576
[1,0]<stdout>:                              HEXA8              262144
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                8
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES              19
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACCES='NEW',
[1,0]<stdout>:             ACTION='ASSOCIER',
[1,0]<stdout>:             FICHIER='/tmp/buildCubem9xrz547/buildCube.med',
[1,0]<stdout>:             TYPE='BINARY',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:Deleting '/tmp/buildCubem9xrz547/buildCube.med': No such file or directory
[1,0]<stdout>:# Mémoire (Mo) :  1199.24 /   868.76 /   249.04 /   213.86 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0002   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:Création du fichier au format MED 3.3.1.
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0003 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACTION='LIBERER',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1199.24 /   868.88 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0003   user+syst:        0.00s (syst:        0.00s, elaps:        0.01s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,7]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,22]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,15]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,6]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,5]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,14]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,18]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,20]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,8]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,4]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,2]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,23]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,11]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,10]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,12]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,21]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,19]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,16]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,9]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,13]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,17]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,1]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,3]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,0]<stdout>:
[1,0]<stdout>:Nom MED du maillage : 00000001
[1,0]<stdout>:
[1,5]<stdout>:Nom MED du maillage : 00000001
[1,5]<stdout>:
[1,20]<stdout>:Nom MED du maillage : 00000001
[1,20]<stdout>:
[1,8]<stdout>:Nom MED du maillage : 00000001
[1,8]<stdout>:
[1,12]<stdout>:Nom MED du maillage : 00000001
[1,12]<stdout>:
[1,13]<stdout>:Nom MED du maillage : 00000001
[1,13]<stdout>:
[1,18]<stdout>:Nom MED du maillage : 00000001
[1,18]<stdout>:
[1,10]<stdout>:Nom MED du maillage : 00000001
[1,10]<stdout>:
[1,22]<stdout>:Nom MED du maillage : 00000001
[1,22]<stdout>:
[1,15]<stdout>:Nom MED du maillage : 00000001
[1,15]<stdout>:
[1,11]<stdout>:Nom MED du maillage : 00000001
[1,11]<stdout>:
[1,21]<stdout>:Nom MED du maillage : 00000001
[1,21]<stdout>:
[1,19]<stdout>:Nom MED du maillage : 00000001
[1,19]<stdout>:
[1,3]<stdout>:Nom MED du maillage : 00000001
[1,3]<stdout>:
[1,2]<stdout>:Nom MED du maillage : 00000001
[1,2]<stdout>:
[1,7]<stdout>:Nom MED du maillage : 00000001
[1,7]<stdout>:
[1,23]<stdout>:Nom MED du maillage : 00000001
[1,23]<stdout>:
[1,17]<stdout>:Nom MED du maillage : 00000001
[1,17]<stdout>:
[1,16]<stdout>:Nom MED du maillage : 00000001
[1,16]<stdout>:
[1,6]<stdout>:Nom MED du maillage : 00000001
[1,6]<stdout>:
[1,9]<stdout>:Nom MED du maillage : 00000001
[1,9]<stdout>:
[1,14]<stdout>:Nom MED du maillage : 00000001
[1,14]<stdout>:
[1,1]<stdout>:Nom MED du maillage : 00000001
[1,1]<stdout>:
[1,4]<stdout>:Nom MED du maillage : 00000001
[1,4]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,13]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt282
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt282
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt282
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt282
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt282
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt282
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt282
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt282
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt282
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt282
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt282
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt282
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt282
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt282
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt282
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt282
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt282
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt282
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt282
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt282
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt282
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt282
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt282
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt282
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,5]<stdout>:ligne 282
[1,22]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,22]<stdout>:ligne 282
[1,10]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,10]<stdout>:ligne 282
[1,15]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,15]<stdout>:ligne 282
[1,20]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,20]<stdout>:ligne 282
[1,4]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,4]<stdout>:ligne 282
[1,18]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,18]<stdout>:ligne 282
[1,0]<stdout>:# Commande #0004 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,0]<stdout>:ligne 282
[1,1]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,1]<stdout>:ligne 282
[1,7]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,7]<stdout>:ligne 282
[1,6]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,6]<stdout>:ligne 282
[1,3]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,3]<stdout>:ligne 282
[1,2]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,2]<stdout>:ligne 282
[1,16]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,16]<stdout>:ligne 282
[1,11]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,11]<stdout>:ligne 282
[1,23]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,23]<stdout>:ligne 282
[1,17]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,17]<stdout>:ligne 282
[1,19]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,19]<stdout>:ligne 282
[1,14]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,14]<stdout>:ligne 282
[1,12]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,12]<stdout>:ligne 282
[1,8]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,8]<stdout>:ligne 282
[1,13]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,13]<stdout>:ligne 282
[1,9]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,9]<stdout>:ligne 282
[1,21]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,21]<stdout>:ligne 282
[1,10]<stdout>:CREA_MAILLAGE(INFO=1,
[1,10]<stdout>:              MAILLAGE='<00000002>',
[1,10]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,10]<stdout>:                             TOUT='OUI'))
[1,10]<stdout>:
[1,15]<stdout>:CREA_MAILLAGE(INFO=1,
[1,15]<stdout>:              MAILLAGE='<00000002>',
[1,15]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,15]<stdout>:                             TOUT='OUI'))
[1,15]<stdout>:
[1,5]<stdout>:CREA_MAILLAGE(INFO=1,
[1,5]<stdout>:              MAILLAGE='<00000002>',
[1,5]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,5]<stdout>:                             TOUT='OUI'))
[1,5]<stdout>:
[1,20]<stdout>:CREA_MAILLAGE(INFO=1,
[1,20]<stdout>:              MAILLAGE='<00000002>',
[1,20]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,20]<stdout>:                             TOUT='OUI'))
[1,20]<stdout>:
[1,22]<stdout>:CREA_MAILLAGE(INFO=1,
[1,22]<stdout>:              MAILLAGE='<00000002>',
[1,22]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,22]<stdout>:                             TOUT='OUI'))
[1,22]<stdout>:
[1,17]<stdout>:CREA_MAILLAGE(INFO=1,
[1,17]<stdout>:              MAILLAGE='<00000002>',
[1,17]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,17]<stdout>:                             TOUT='OUI'))
[1,17]<stdout>:
[1,19]<stdout>:CREA_MAILLAGE(INFO=1,
[1,19]<stdout>:              MAILLAGE='<00000002>',
[1,19]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,19]<stdout>:                             TOUT='OUI'))
[1,19]<stdout>:
[1,14]<stdout>:CREA_MAILLAGE(INFO=1,
[1,14]<stdout>:              MAILLAGE='<00000002>',
[1,14]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,14]<stdout>:                             TOUT='OUI'))
[1,14]<stdout>:
[1,12]<stdout>:CREA_MAILLAGE(INFO=1,
[1,12]<stdout>:              MAILLAGE='<00000002>',
[1,12]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,12]<stdout>:                             TOUT='OUI'))
[1,12]<stdout>:
[1,8]<stdout>:CREA_MAILLAGE(INFO=1,
[1,8]<stdout>:              MAILLAGE='<00000002>',
[1,8]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,8]<stdout>:                             TOUT='OUI'))
[1,8]<stdout>:
[1,13]<stdout>:CREA_MAILLAGE(INFO=1,
[1,13]<stdout>:              MAILLAGE='<00000002>',
[1,13]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,13]<stdout>:                             TOUT='OUI'))
[1,13]<stdout>:
[1,4]<stdout>:CREA_MAILLAGE(INFO=1,
[1,4]<stdout>:              MAILLAGE='<00000002>',
[1,4]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,4]<stdout>:                             TOUT='OUI'))
[1,4]<stdout>:
[1,18]<stdout>:CREA_MAILLAGE(INFO=1,
[1,18]<stdout>:              MAILLAGE='<00000002>',
[1,18]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,18]<stdout>:                             TOUT='OUI'))
[1,18]<stdout>:
[1,0]<stdout>:CREA_MAILLAGE(INFO=1,
[1,0]<stdout>:              MAILLAGE='<00000002>',
[1,0]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,0]<stdout>:                             TOUT='OUI'))
[1,0]<stdout>:
[1,1]<stdout>:CREA_MAILLAGE(INFO=1,
[1,1]<stdout>:              MAILLAGE='<00000002>',
[1,1]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,1]<stdout>:                             TOUT='OUI'))
[1,1]<stdout>:
[1,7]<stdout>:CREA_MAILLAGE(INFO=1,
[1,7]<stdout>:              MAILLAGE='<00000002>',
[1,7]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,7]<stdout>:                             TOUT='OUI'))
[1,7]<stdout>:
[1,6]<stdout>:CREA_MAILLAGE(INFO=1,
[1,6]<stdout>:              MAILLAGE='<00000002>',
[1,6]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,6]<stdout>:                             TOUT='OUI'))
[1,6]<stdout>:
[1,3]<stdout>:CREA_MAILLAGE(INFO=1,
[1,3]<stdout>:              MAILLAGE='<00000002>',
[1,3]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,3]<stdout>:                             TOUT='OUI'))
[1,3]<stdout>:
[1,2]<stdout>:CREA_MAILLAGE(INFO=1,
[1,2]<stdout>:              MAILLAGE='<00000002>',
[1,2]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,2]<stdout>:                             TOUT='OUI'))
[1,2]<stdout>:
[1,21]<stdout>:CREA_MAILLAGE(INFO=1,
[1,21]<stdout>:              MAILLAGE='<00000002>',
[1,21]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,21]<stdout>:                             TOUT='OUI'))
[1,21]<stdout>:
[1,16]<stdout>:CREA_MAILLAGE(INFO=1,
[1,16]<stdout>:              MAILLAGE='<00000002>',
[1,16]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,16]<stdout>:                             TOUT='OUI'))
[1,16]<stdout>:
[1,11]<stdout>:CREA_MAILLAGE(INFO=1,
[1,11]<stdout>:              MAILLAGE='<00000002>',
[1,11]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,11]<stdout>:                             TOUT='OUI'))
[1,11]<stdout>:
[1,23]<stdout>:CREA_MAILLAGE(INFO=1,
[1,23]<stdout>:              MAILLAGE='<00000002>',
[1,23]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,23]<stdout>:                             TOUT='OUI'))
[1,23]<stdout>:
[1,9]<stdout>:CREA_MAILLAGE(INFO=1,
[1,9]<stdout>:              MAILLAGE='<00000002>',
[1,9]<stdout>:              RAFFINEMENT=_F(NIVEAU=2,
[1,9]<stdout>:                             TOUT='OUI'))
[1,9]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,5]<stdout>:
[1,5]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:14 DE TYPE        
[1,5]<stdout>:MAILLAGE_P                                                                      
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE NOEUDS                      649580
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE MAILLES                     649527
[1,5]<stdout>:                              SEG2                  275
[1,5]<stdout>:                              QUAD4               23443
[1,5]<stdout>:                              HEXA8              625809
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      6.24      0.00      6.24
[1,23]<stdout>:
[1,23]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,23]<stdout>:
[1,23]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,23]<stdout>:MAILLAGE_P                                                                      
[1,23]<stdout>:
[1,23]<stdout>:NOMBRE DE NOEUDS                      680602
[1,23]<stdout>:
[1,23]<stdout>:NOMBRE DE MAILLES                     679471
[1,23]<stdout>:                              SEG2                  275
[1,23]<stdout>:                              QUAD4               23831
[1,23]<stdout>:                              HEXA8              655365
[1,23]<stdout>:
[1,23]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,23]<stdout>:
[1,23]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,23]<stdout>:
[1,23]<stdout>:--------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      2.34      0.02      2.31
[1,9]<stdout>:
[1,9]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,9]<stdout>:
[1,9]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,9]<stdout>:MAILLAGE_P                                                                      
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE NOEUDS                      718660
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE MAILLES                     707382
[1,9]<stdout>:                              SEG2                   93
[1,9]<stdout>:                              QUAD4               16777
[1,9]<stdout>:                              HEXA8              690512
[1,9]<stdout>:
[1,9]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,9]<stdout>:
[1,9]<stdout>:--------------------------------------------------------------------------------
[1,9]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,20]<stdout>:
[1,20]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,20]<stdout>:MAILLAGE_P                                                                      
[1,20]<stdout>:
[1,20]<stdout>:NOMBRE DE NOEUDS                      716722
[1,20]<stdout>:
[1,20]<stdout>:NOMBRE DE MAILLES                     708571
[1,20]<stdout>:                              SEG2                  235
[1,20]<stdout>:                              QUAD4               21505
[1,20]<stdout>:                              HEXA8              686831
[1,20]<stdout>:
[1,20]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,20]<stdout>:
[1,20]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,20]<stdout>:
[1,20]<stdout>:--------------------------------------------------------------------------------
[1,20]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,12]<stdout>:
[1,12]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:13 DE TYPE        
[1,12]<stdout>:MAILLAGE_P                                                                      
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE NOEUDS                      712481
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE MAILLES                     712480
[1,12]<stdout>:                              SEG2                  288
[1,12]<stdout>:                              QUAD4               25792
[1,12]<stdout>:                              HEXA8              686400
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,12]<stdout>:
[1,12]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,12]<stdout>:
[1,12]<stdout>:--------------------------------------------------------------------------------
[1,12]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,18]<stdout>:
[1,18]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,18]<stdout>:MAILLAGE_P                                                                      
[1,18]<stdout>:
[1,18]<stdout>:NOMBRE DE NOEUDS                      727464
[1,18]<stdout>:
[1,18]<stdout>:NOMBRE DE MAILLES                     711958
[1,18]<stdout>:                              SEG2                   73
[1,18]<stdout>:                              QUAD4               13773
[1,18]<stdout>:                              HEXA8              698112
[1,18]<stdout>:
[1,18]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,18]<stdout>:
[1,18]<stdout>:--------------------------------------------------------------------------------
[1,18]<stdout>:
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      1.67      0.01      1.65
[1,17]<stdout>:
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      7.15      0.00      7.14
[1,18]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      1.58      0.00      1.58
[1,21]<stdout>:
[1,21]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,21]<stdout>:
[1,21]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,21]<stdout>:MAILLAGE_P                                                                      
[1,21]<stdout>:
[1,17]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,17]<stdout>:
[1,17]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,17]<stdout>:MAILLAGE_P                                                                      
[1,17]<stdout>:
[1,17]<stdout>:NOMBRE DE NOEUDS                      748783
[1,17]<stdout>:
[1,17]<stdout>:NOMBRE DE MAILLES                     723092
[1,17]<stdout>:                              QUAD4                6226
[1,17]<stdout>:                              HEXA8              716866
[1,17]<stdout>:
[1,17]<stdout>:NOMBRE DE GROUPES DE MAILLES               3
[1,17]<stdout>:
[1,17]<stdout>:--------------------------------------------------------------------------------
[1,17]<stdout>:
[1,20]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.72      0.00      0.74
[1,17]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.38      0.00      0.38
[1,21]<stdout>:NOMBRE DE NOEUDS                      724016
[1,21]<stdout>:
[1,21]<stdout>:NOMBRE DE MAILLES                     707172
[1,21]<stdout>:                              SEG2                   53
[1,21]<stdout>:                              QUAD4               12102
[1,21]<stdout>:                              HEXA8              695017
[1,21]<stdout>:
[1,21]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,21]<stdout>:
[1,21]<stdout>:--------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      1.13      0.00      1.14
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:14 DE TYPE        
[1,0]<stdout>:MAILLAGE_P                                                                      
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                      736641
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                     736164
[1,0]<stdout>:                              SEG2                  308
[1,0]<stdout>:                              QUAD4               28336
[1,0]<stdout>:                              HEXA8              707520
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      6.00      0.00      6.00
[1,10]<stdout>:
[1,10]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,10]<stdout>:
[1,10]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:14 DE TYPE        
[1,10]<stdout>:MAILLAGE_P                                                                      
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE NOEUDS                      743508
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE MAILLES                     740427
[1,10]<stdout>:                              SEG2                  294
[1,10]<stdout>:                              QUAD4               26048
[1,10]<stdout>:                              HEXA8              714085
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,10]<stdout>:
[1,10]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,10]<stdout>:
[1,10]<stdout>:--------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      3.91      0.00      3.91
[1,16]<stdout>:
[1,16]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,16]<stdout>:
[1,16]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:15 DE TYPE        
[1,16]<stdout>:MAILLAGE_P                                                                      
[1,16]<stdout>:
[1,16]<stdout>:NOMBRE DE NOEUDS                      744365
[1,16]<stdout>:
[1,16]<stdout>:NOMBRE DE MAILLES                     740345
[1,16]<stdout>:                              SEG2                  302
[1,16]<stdout>:                              QUAD4               26947
[1,16]<stdout>:                              HEXA8              713096
[1,16]<stdout>:
[1,16]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,16]<stdout>:
[1,16]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,16]<stdout>:
[1,16]<stdout>:--------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      2.70      0.00      2.70
[1,22]<stdout>:
[1,22]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,22]<stdout>:
[1,22]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,22]<stdout>:MAILLAGE_P                                                                      
[1,22]<stdout>:
[1,22]<stdout>:NOMBRE DE NOEUDS                      767992
[1,22]<stdout>:
[1,22]<stdout>:NOMBRE DE MAILLES                     752907
[1,22]<stdout>:                              SEG2                   53
[1,22]<stdout>:                              QUAD4               12789
[1,22]<stdout>:                              HEXA8              740065
[1,22]<stdout>:
[1,22]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,22]<stdout>:
[1,22]<stdout>:--------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.20      0.02      0.17
[1,8]<stdout>:
[1,8]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,8]<stdout>:
[1,8]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:16 DE TYPE        
[1,8]<stdout>:MAILLAGE_P                                                                      
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE NOEUDS                      753412
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE MAILLES                     732914
[1,8]<stdout>:                              SEG2                   41
[1,8]<stdout>:                              QUAD4               10041
[1,8]<stdout>:                              HEXA8              722832
[1,8]<stdout>:
[1,8]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,8]<stdout>:
[1,8]<stdout>:--------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      1.34      0.00      1.35
[1,15]<stdout>:
[1,15]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,15]<stdout>:
[1,15]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:16 DE TYPE        
[1,15]<stdout>:MAILLAGE_P                                                                      
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE NOEUDS                      740250
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE MAILLES                     728341
[1,15]<stdout>:                              SEG2                   85
[1,15]<stdout>:                              QUAD4               16800
[1,15]<stdout>:                              HEXA8              711456
[1,15]<stdout>:
[1,15]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,15]<stdout>:
[1,15]<stdout>:--------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      2.21      0.00      2.20
[1,13]<stdout>:
[1,13]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,13]<stdout>:
[1,13]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:16 DE TYPE        
[1,13]<stdout>:MAILLAGE_P                                                                      
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE NOEUDS                      757321
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE MAILLES                     740545
[1,13]<stdout>:                              SEG2                   50
[1,13]<stdout>:                              QUAD4               13311
[1,13]<stdout>:                              HEXA8              727184
[1,13]<stdout>:
[1,13]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,13]<stdout>:
[1,13]<stdout>:--------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      1.59      0.00      1.58
[1,4]<stdout>:
[1,4]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,4]<stdout>:
[1,4]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,4]<stdout>:MAILLAGE_P                                                                      
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE NOEUDS                      776756
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE MAILLES                     764742
[1,4]<stdout>:                              SEG2                   76
[1,4]<stdout>:                              QUAD4               15459
[1,4]<stdout>:                              HEXA8              749207
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.68      0.00      0.68
[1,1]<stdout>:
[1,1]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,1]<stdout>:
[1,1]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:16 DE TYPE        
[1,1]<stdout>:MAILLAGE_P                                                                      
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE NOEUDS                      777670
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE MAILLES                     767389
[1,1]<stdout>:                              SEG2                   81
[1,1]<stdout>:                              QUAD4               16028
[1,1]<stdout>:                              HEXA8              751280
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      2.14      0.00      2.14
[1,7]<stdout>:
[1,7]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,7]<stdout>:
[1,7]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:15 DE TYPE        
[1,7]<stdout>:MAILLAGE_P                                                                      
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE NOEUDS                      775468
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE MAILLES                     765924
[1,7]<stdout>:                              SEG2                  238
[1,7]<stdout>:                              QUAD4               21844
[1,7]<stdout>:                              HEXA8              743842
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      2.44      0.00      2.45
[1,6]<stdout>:
[1,6]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,6]<stdout>:
[1,6]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:15 DE TYPE        
[1,6]<stdout>:MAILLAGE_P                                                                      
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE NOEUDS                      739086
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE MAILLES                     729716
[1,6]<stdout>:                              SEG2                  108
[1,6]<stdout>:                              QUAD4               18200
[1,6]<stdout>:                              HEXA8              711408
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      3.54      0.01      3.53
[1,11]<stdout>:
[1,11]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,11]<stdout>:
[1,11]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,11]<stdout>:MAILLAGE_P                                                                      
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE NOEUDS                      764014
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE MAILLES                     738740
[1,11]<stdout>:                              QUAD4                7116
[1,11]<stdout>:                              HEXA8              731624
[1,11]<stdout>:
[1,11]<stdout>:NOMBRE DE GROUPES DE MAILLES               3
[1,11]<stdout>:
[1,11]<stdout>:--------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.23      0.02      0.20
[1,19]<stdout>:
[1,19]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,19]<stdout>:
[1,19]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,19]<stdout>:MAILLAGE_P                                                                      
[1,19]<stdout>:
[1,19]<stdout>:NOMBRE DE NOEUDS                      787638
[1,19]<stdout>:
[1,19]<stdout>:NOMBRE DE MAILLES                     769925
[1,19]<stdout>:                              SEG2                   80
[1,19]<stdout>:                              QUAD4               14656
[1,19]<stdout>:                              HEXA8              755189
[1,19]<stdout>:
[1,19]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,19]<stdout>:
[1,19]<stdout>:--------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.35      0.00      0.36
[1,14]<stdout>:
[1,14]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,14]<stdout>:
[1,14]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,14]<stdout>:MAILLAGE_P                                                                      
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE NOEUDS                      785068
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE MAILLES                     764698
[1,14]<stdout>:                              SEG2                   49
[1,14]<stdout>:                              QUAD4               10961
[1,14]<stdout>:                              HEXA8              753688
[1,14]<stdout>:
[1,14]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,14]<stdout>:
[1,14]<stdout>:--------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.26      0.00      0.26
[1,3]<stdout>:
[1,3]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,3]<stdout>:
[1,3]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,3]<stdout>:MAILLAGE_P                                                                      
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE NOEUDS                      815980
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE MAILLES                     796240
[1,3]<stdout>:                              SEG2                   40
[1,3]<stdout>:                              QUAD4               11156
[1,3]<stdout>:                              HEXA8              785044
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE GROUPES DE MAILLES               4
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,2]<stdout>:
[1,2]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 23/01/2025 A 17:07:17 DE TYPE        
[1,2]<stdout>:MAILLAGE_P                                                                      
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE NOEUDS                      825046
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE MAILLES                     801918
[1,2]<stdout>:                              QUAD4                7153
[1,2]<stdout>:                              HEXA8              794765
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE GROUPES DE MAILLES               2
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.43      0.00      0.44
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.09      0.00      0.09
[1,5]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,5]<stdout>:# Mémoire (Mo) :  4701.38 /  1041.05 /   383.03 /   346.73 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0002   user+syst:       17.46s (syst:        5.18s, elaps:       22.64s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,23]<stdout>:# Mémoire (Mo) :  4903.86 /  1127.00 /   391.36 /   354.82 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0002   user+syst:       15.82s (syst:        6.81s, elaps:       22.64s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,21]<stdout>:# Mémoire (Mo) :  5179.83 /  1149.07 /   401.02 /   364.23 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0002   user+syst:       15.20s (syst:        7.49s, elaps:       22.69s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,20]<stdout>:# Mémoire (Mo) :  5416.51 /  1153.94 /   401.72 /   364.92 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0002   user+syst:       14.86s (syst:        7.83s, elaps:       22.69s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,9]<stdout>:# Mémoire (Mo) :  5067.60 /  1136.71 /   398.00 /   361.22 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0002   user+syst:       15.48s (syst:        7.21s, elaps:       22.70s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,17]<stdout>:# Mémoire (Mo) :  5579.84 /  1184.24 /   411.69 /   374.74 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0002   user+syst:       14.77s (syst:        7.94s, elaps:       22.70s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,18]<stdout>:# Mémoire (Mo) :  5169.35 /  1143.69 /   400.05 /   363.23 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0002   user+syst:       15.52s (syst:        7.18s, elaps:       22.70s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,15]<stdout>:# Mémoire (Mo) :  5063.20 /  1140.33 /   401.44 /   364.51 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0002   user+syst:       16.19s (syst:        6.52s, elaps:       22.71s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,12]<stdout>:# Mémoire (Mo) :  4651.87 /  1114.77 /   392.78 /   356.00 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0002   user+syst:       17.43s (syst:        5.28s, elaps:       22.71s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,6]<stdout>:# Mémoire (Mo) :  4983.32 /  1134.02 /   399.66 /   362.72 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0002   user+syst:       17.12s (syst:        5.58s, elaps:       22.71s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0004 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,0]<stdout>:# Mémoire (Mo) :  4366.73 /  1239.46 /   443.01 /   397.56 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0004   user+syst:       17.78s (syst:        4.94s, elaps:       22.72s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,10]<stdout>:# Mémoire (Mo) :  5036.50 /  1145.17 /   403.58 /   366.56 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0002   user+syst:       16.05s (syst:        6.68s, elaps:       22.73s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,13]<stdout>:# Mémoire (Mo) :  5298.55 /  1161.05 /   408.11 /   371.06 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0002   user+syst:       15.48s (syst:        7.25s, elaps:       22.73s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,16]<stdout>:# Mémoire (Mo) :  5128.61 /  1148.42 /   404.48 /   367.45 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0002   user+syst:       15.99s (syst:        6.74s, elaps:       22.74s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,8]<stdout>:# Mémoire (Mo) :  5344.48 /  1166.60 /   408.48 /   371.47 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0002   user+syst:       15.46s (syst:        7.28s, elaps:       22.74s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,11]<stdout>:# Mémoire (Mo) :  5588.05 /  1186.55 /   414.40 /   377.33 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0002   user+syst:       14.81s (syst:        7.94s, elaps:       22.74s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,22]<stdout>:# Mémoire (Mo) :  5527.03 /  1174.99 /   412.47 /   375.32 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0002   user+syst:       15.07s (syst:        7.68s, elaps:       22.76s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,14]<stdout>:# Mémoire (Mo) :  5515.54 /  1184.67 /   418.57 /   381.32 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0002   user+syst:       14.90s (syst:        7.86s, elaps:       22.77s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,1]<stdout>:# Mémoire (Mo) :  5193.34 /  1158.49 /   412.25 /   375.02 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0002   user+syst:       15.68s (syst:        7.11s, elaps:       22.78s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,19]<stdout>:# Mémoire (Mo) :  5425.09 /  1178.22 /   419.39 /   382.11 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0002   user+syst:       14.82s (syst:        7.96s, elaps:       22.78s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,7]<stdout>:# Mémoire (Mo) :  5487.63 /  1097.14 /   415.10 /   377.86 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0002   user+syst:       15.46s (syst:        7.32s, elaps:       22.78s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,4]<stdout>:# Mémoire (Mo) :  5317.02 /  1166.82 /   413.73 /   376.50 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0002   user+syst:       15.01s (syst:        7.77s, elaps:       22.79s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,3]<stdout>:# Mémoire (Mo) :  5324.23 /  1180.17 /   423.29 /   385.81 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0002   user+syst:       14.87s (syst:        7.95s, elaps:       22.82s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,2]<stdout>:# Mémoire (Mo) :  5529.57 /  1198.57 /   428.36 /   390.83 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0002   user+syst:       14.76s (syst:        8.05s, elaps:       22.83s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt131
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt131
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt131
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt131
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt131
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt131
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt131
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt131
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt131
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt131
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt131
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt131
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt131
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt131
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt131
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt131
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt131
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt131
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt131
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt131
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Commande #0003 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 131
[1,1]<stdout>:# Commande #0003 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 131
[1,18]<stdout>:# Commande #0003 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 131
[1,10]<stdout>:# Commande #0003 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 131
[1,9]<stdout>:# Commande #0003 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 131
[1,15]<stdout>:# Commande #0003 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 131
[1,5]<stdout>:# Commande #0003 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 131
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt131
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0003 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 131
[1,6]<stdout>:# Commande #0003 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 131
[1,12]<stdout>:# Commande #0003 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 131
[1,8]<stdout>:# Commande #0003 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 131
[1,3]<stdout>:# Commande #0003 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 131
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt131
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0003 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 131
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt131
[1,16]<stdout>:# Commande #0003 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 131
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Commande #0003 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 131
[1,14]<stdout>:# Commande #0003 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 131
[1,4]<stdout>:# Commande #0003 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 131
[1,2]<stdout>:# Commande #0003 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 131
[1,17]<stdout>:# Commande #0003 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 131
[1,22]<stdout>:# Commande #0003 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 131
[1,9]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,9]<stdout>:                            PHENOMENE='MECANIQUE',
[1,9]<stdout>:                            TOUT='OUI'),
[1,9]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,9]<stdout>:                    INFO=1,
[1,9]<stdout>:                    MAILLAGE='<00000004>',
[1,9]<stdout>:                    VERI_JACOBIEN='OUI',
[1,9]<stdout>:                    VERI_NORM_IFS='OUI',
[1,9]<stdout>:                    VERI_PLAN='OUI')
[1,9]<stdout>:
[1,15]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,15]<stdout>:                            PHENOMENE='MECANIQUE',
[1,15]<stdout>:                            TOUT='OUI'),
[1,15]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,15]<stdout>:                    INFO=1,
[1,15]<stdout>:                    MAILLAGE='<00000004>',
[1,15]<stdout>:                    VERI_JACOBIEN='OUI',
[1,15]<stdout>:                    VERI_NORM_IFS='OUI',
[1,15]<stdout>:                    VERI_PLAN='OUI')
[1,15]<stdout>:
[1,5]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,5]<stdout>:                            PHENOMENE='MECANIQUE',
[1,5]<stdout>:                            TOUT='OUI'),
[1,5]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,5]<stdout>:                    INFO=1,
[1,5]<stdout>:                    MAILLAGE='<00000004>',
[1,5]<stdout>:                    VERI_JACOBIEN='OUI',
[1,5]<stdout>:                    VERI_NORM_IFS='OUI',
[1,5]<stdout>:                    VERI_PLAN='OUI')
[1,5]<stdout>:
[1,19]<stdout>:# Commande #0003 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 131
[1,23]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,23]<stdout>:                            PHENOMENE='MECANIQUE',
[1,23]<stdout>:                            TOUT='OUI'),
[1,23]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,23]<stdout>:                    INFO=1,
[1,23]<stdout>:                    MAILLAGE='<00000004>',
[1,23]<stdout>:                    VERI_JACOBIEN='OUI',
[1,23]<stdout>:                    VERI_NORM_IFS='OUI',
[1,23]<stdout>:                    VERI_PLAN='OUI')
[1,23]<stdout>:
[1,7]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,7]<stdout>:                            PHENOMENE='MECANIQUE',
[1,7]<stdout>:                            TOUT='OUI'),
[1,7]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,7]<stdout>:                    INFO=1,
[1,7]<stdout>:                    MAILLAGE='<00000004>',
[1,7]<stdout>:                    VERI_JACOBIEN='OUI',
[1,7]<stdout>:                    VERI_NORM_IFS='OUI',
[1,7]<stdout>:                    VERI_PLAN='OUI')
[1,7]<stdout>:
[1,12]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,12]<stdout>:                            PHENOMENE='MECANIQUE',
[1,12]<stdout>:                            TOUT='OUI'),
[1,12]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,12]<stdout>:                    INFO=1,
[1,12]<stdout>:                    MAILLAGE='<00000004>',
[1,12]<stdout>:                    VERI_JACOBIEN='OUI',
[1,12]<stdout>:                    VERI_NORM_IFS='OUI',
[1,12]<stdout>:                    VERI_PLAN='OUI')
[1,12]<stdout>:
[1,3]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,3]<stdout>:                            PHENOMENE='MECANIQUE',
[1,3]<stdout>:                            TOUT='OUI'),
[1,3]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,3]<stdout>:                    INFO=1,
[1,3]<stdout>:                    MAILLAGE='<00000004>',
[1,3]<stdout>:                    VERI_JACOBIEN='OUI',
[1,3]<stdout>:                    VERI_NORM_IFS='OUI',
[1,3]<stdout>:                    VERI_PLAN='OUI')
[1,3]<stdout>:
[1,11]<stdout>:# Commande #0003 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 131
[1,21]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,21]<stdout>:                            PHENOMENE='MECANIQUE',
[1,21]<stdout>:                            TOUT='OUI'),
[1,21]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,21]<stdout>:                    INFO=1,
[1,21]<stdout>:                    MAILLAGE='<00000004>',
[1,21]<stdout>:                    VERI_JACOBIEN='OUI',
[1,21]<stdout>:                    VERI_NORM_IFS='OUI',
[1,21]<stdout>:                    VERI_PLAN='OUI')
[1,21]<stdout>:
[1,1]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,1]<stdout>:                            PHENOMENE='MECANIQUE',
[1,1]<stdout>:                            TOUT='OUI'),
[1,1]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,1]<stdout>:                    INFO=1,
[1,1]<stdout>:                    MAILLAGE='<00000004>',
[1,1]<stdout>:                    VERI_JACOBIEN='OUI',
[1,1]<stdout>:                    VERI_NORM_IFS='OUI',
[1,1]<stdout>:                    VERI_PLAN='OUI')
[1,1]<stdout>:
[1,18]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,18]<stdout>:                            PHENOMENE='MECANIQUE',
[1,18]<stdout>:                            TOUT='OUI'),
[1,18]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,18]<stdout>:                    INFO=1,
[1,18]<stdout>:                    MAILLAGE='<00000004>',
[1,18]<stdout>:                    VERI_JACOBIEN='OUI',
[1,18]<stdout>:                    VERI_NORM_IFS='OUI',
[1,18]<stdout>:                    VERI_PLAN='OUI')
[1,18]<stdout>:
[1,10]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,10]<stdout>:                            PHENOMENE='MECANIQUE',
[1,10]<stdout>:                            TOUT='OUI'),
[1,10]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,10]<stdout>:                    INFO=1,
[1,10]<stdout>:                    MAILLAGE='<00000004>',
[1,10]<stdout>:                    VERI_JACOBIEN='OUI',
[1,10]<stdout>:                    VERI_NORM_IFS='OUI',
[1,10]<stdout>:                    VERI_PLAN='OUI')
[1,10]<stdout>:
[1,16]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,16]<stdout>:                            PHENOMENE='MECANIQUE',
[1,16]<stdout>:                            TOUT='OUI'),
[1,16]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,16]<stdout>:                    INFO=1,
[1,16]<stdout>:                    MAILLAGE='<00000004>',
[1,16]<stdout>:                    VERI_JACOBIEN='OUI',
[1,16]<stdout>:                    VERI_NORM_IFS='OUI',
[1,16]<stdout>:                    VERI_PLAN='OUI')
[1,16]<stdout>:
[1,13]<stdout>:# Commande #0003 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 131
[1,6]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,6]<stdout>:                            PHENOMENE='MECANIQUE',
[1,6]<stdout>:                            TOUT='OUI'),
[1,6]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,6]<stdout>:                    INFO=1,
[1,6]<stdout>:                    MAILLAGE='<00000004>',
[1,6]<stdout>:                    VERI_JACOBIEN='OUI',
[1,6]<stdout>:                    VERI_NORM_IFS='OUI',
[1,6]<stdout>:                    VERI_PLAN='OUI')
[1,6]<stdout>:
[1,8]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,8]<stdout>:                            PHENOMENE='MECANIQUE',
[1,8]<stdout>:                            TOUT='OUI'),
[1,8]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,8]<stdout>:                    INFO=1,
[1,8]<stdout>:                    MAILLAGE='<00000004>',
[1,8]<stdout>:                    VERI_JACOBIEN='OUI',
[1,8]<stdout>:                    VERI_NORM_IFS='OUI',
[1,8]<stdout>:                    VERI_PLAN='OUI')
[1,8]<stdout>:
[1,4]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,4]<stdout>:                            PHENOMENE='MECANIQUE',
[1,4]<stdout>:                            TOUT='OUI'),
[1,4]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,4]<stdout>:                    INFO=1,
[1,4]<stdout>:                    MAILLAGE='<00000004>',
[1,4]<stdout>:                    VERI_JACOBIEN='OUI',
[1,4]<stdout>:                    VERI_NORM_IFS='OUI',
[1,4]<stdout>:                    VERI_PLAN='OUI')
[1,4]<stdout>:
[1,20]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,20]<stdout>:                            PHENOMENE='MECANIQUE',
[1,20]<stdout>:                            TOUT='OUI'),
[1,20]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,20]<stdout>:                    INFO=1,
[1,20]<stdout>:                    MAILLAGE='<00000004>',
[1,20]<stdout>:                    VERI_JACOBIEN='OUI',
[1,20]<stdout>:                    VERI_NORM_IFS='OUI',
[1,20]<stdout>:                    VERI_PLAN='OUI')
[1,20]<stdout>:
[1,14]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,14]<stdout>:                            PHENOMENE='MECANIQUE',
[1,14]<stdout>:                            TOUT='OUI'),
[1,14]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,14]<stdout>:                    INFO=1,
[1,14]<stdout>:                    MAILLAGE='<00000004>',
[1,14]<stdout>:                    VERI_JACOBIEN='OUI',
[1,14]<stdout>:                    VERI_NORM_IFS='OUI',
[1,14]<stdout>:                    VERI_PLAN='OUI')
[1,14]<stdout>:
[1,17]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,17]<stdout>:                            PHENOMENE='MECANIQUE',
[1,17]<stdout>:                            TOUT='OUI'),
[1,17]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,17]<stdout>:                    INFO=1,
[1,17]<stdout>:                    MAILLAGE='<00000004>',
[1,17]<stdout>:                    VERI_JACOBIEN='OUI',
[1,17]<stdout>:                    VERI_NORM_IFS='OUI',
[1,17]<stdout>:                    VERI_PLAN='OUI')
[1,17]<stdout>:
[1,22]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,22]<stdout>:                            PHENOMENE='MECANIQUE',
[1,22]<stdout>:                            TOUT='OUI'),
[1,22]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,22]<stdout>:                    INFO=1,
[1,22]<stdout>:                    MAILLAGE='<00000004>',
[1,22]<stdout>:                    VERI_JACOBIEN='OUI',
[1,22]<stdout>:                    VERI_NORM_IFS='OUI',
[1,22]<stdout>:                    VERI_PLAN='OUI')
[1,22]<stdout>:
[1,2]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,2]<stdout>:                            PHENOMENE='MECANIQUE',
[1,2]<stdout>:                            TOUT='OUI'),
[1,2]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,2]<stdout>:                    INFO=1,
[1,2]<stdout>:                    MAILLAGE='<00000004>',
[1,2]<stdout>:                    VERI_JACOBIEN='OUI',
[1,2]<stdout>:                    VERI_NORM_IFS='OUI',
[1,2]<stdout>:                    VERI_PLAN='OUI')
[1,2]<stdout>:
[1,19]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,19]<stdout>:                            PHENOMENE='MECANIQUE',
[1,19]<stdout>:                            TOUT='OUI'),
[1,19]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,19]<stdout>:                    INFO=1,
[1,19]<stdout>:                    MAILLAGE='<00000004>',
[1,19]<stdout>:                    VERI_JACOBIEN='OUI',
[1,19]<stdout>:                    VERI_NORM_IFS='OUI',
[1,19]<stdout>:                    VERI_PLAN='OUI')
[1,19]<stdout>:
[1,11]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,11]<stdout>:                            PHENOMENE='MECANIQUE',
[1,11]<stdout>:                            TOUT='OUI'),
[1,11]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,11]<stdout>:                    INFO=1,
[1,11]<stdout>:                    MAILLAGE='<00000004>',
[1,11]<stdout>:                    VERI_JACOBIEN='OUI',
[1,11]<stdout>:                    VERI_NORM_IFS='OUI',
[1,11]<stdout>:                    VERI_PLAN='OUI')
[1,11]<stdout>:
[1,13]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,13]<stdout>:                            PHENOMENE='MECANIQUE',
[1,13]<stdout>:                            TOUT='OUI'),
[1,13]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,13]<stdout>:                    INFO=1,
[1,13]<stdout>:                    MAILLAGE='<00000004>',
[1,13]<stdout>:                    VERI_JACOBIEN='OUI',
[1,13]<stdout>:                    VERI_NORM_IFS='OUI',
[1,13]<stdout>:                    VERI_PLAN='OUI')
[1,13]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt131
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0005 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 131
[1,0]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,0]<stdout>:                            PHENOMENE='MECANIQUE',
[1,0]<stdout>:                            TOUT='OUI'),
[1,0]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,0]<stdout>:                    INFO=1,
[1,0]<stdout>:                    MAILLAGE='<00000004>',
[1,0]<stdout>:                    VERI_JACOBIEN='OUI',
[1,0]<stdout>:                    VERI_NORM_IFS='OUI',
[1,0]<stdout>:                    VERI_PLAN='OUI')
[1,0]<stdout>:
[1,23]<stdout>:Sur les 679471 mailles du maillage 00000004, on a demandé l'affectation de 679471, on a pu en
[1,23]<stdout>:affecter 679471.
[1,18]<stdout>:Sur les 711958 mailles du maillage 00000004, on a demandé l'affectation de 711958, on a pu en
[1,18]<stdout>:affecter 711958.
[1,21]<stdout>:Sur les 707172 mailles du maillage 00000004, on a demandé l'affectation de 707172, on a pu en
[1,21]<stdout>:affecter 707172.
[1,9]<stdout>:Sur les 707382 mailles du maillage 00000004, on a demandé l'affectation de 707382, on a pu en
[1,9]<stdout>:affecter 707382.
[1,12]<stdout>:Sur les 712480 mailles du maillage 00000004, on a demandé l'affectation de 712480, on a pu en
[1,12]<stdout>:affecter 712480.
[1,17]<stdout>:Sur les 723092 mailles du maillage 00000004, on a demandé l'affectation de 723092, on a pu en
[1,17]<stdout>:affecter 723092.
[1,20]<stdout>:Sur les 708571 mailles du maillage 00000004, on a demandé l'affectation de 708571, on a pu en
[1,20]<stdout>:affecter 708571.
[1,13]<stdout>:Sur les 740545 mailles du maillage 00000004, on a demandé l'affectation de 740545, on a pu en
[1,13]<stdout>:affecter 740545.
[1,15]<stdout>:Sur les 728341 mailles du maillage 00000004, on a demandé l'affectation de 728341, on a pu en
[1,15]<stdout>:affecter 728341.
[1,6]<stdout>:Sur les 729716 mailles du maillage 00000004, on a demandé l'affectation de 729716, on a pu en
[1,6]<stdout>:affecter 729716.
[1,8]<stdout>:Sur les 732914 mailles du maillage 00000004, on a demandé l'affectation de 732914, on a pu en
[1,8]<stdout>:affecter 732914.
[1,10]<stdout>:Sur les 740427 mailles du maillage 00000004, on a demandé l'affectation de 740427, on a pu en
[1,10]<stdout>:affecter 740427.
[1,11]<stdout>:Sur les 738740 mailles du maillage 00000004, on a demandé l'affectation de 738740, on a pu en
[1,11]<stdout>:affecter 738740.
[1,0]<stdout>:Sur les 736164 mailles du maillage 00000004, on a demandé l'affectation de 736164, on a pu en
[1,0]<stdout>:affecter 736164.
[1,5]<stdout>:Sur les 649527 mailles du maillage 00000004, on a demandé l'affectation de 649527, on a pu en
[1,5]<stdout>:affecter 649527.
[1,16]<stdout>:Sur les 740345 mailles du maillage 00000004, on a demandé l'affectation de 740345, on a pu en
[1,16]<stdout>:affecter 740345.
[1,1]<stdout>:Sur les 767389 mailles du maillage 00000004, on a demandé l'affectation de 767389, on a pu en
[1,1]<stdout>:affecter 767389.
[1,22]<stdout>:Sur les 752907 mailles du maillage 00000004, on a demandé l'affectation de 752907, on a pu en
[1,22]<stdout>:affecter 752907.
[1,4]<stdout>:Sur les 764742 mailles du maillage 00000004, on a demandé l'affectation de 764742, on a pu en
[1,4]<stdout>:affecter 764742.
[1,19]<stdout>:Sur les 769925 mailles du maillage 00000004, on a demandé l'affectation de 769925, on a pu en
[1,19]<stdout>:affecter 769925.
[1,14]<stdout>:Sur les 764698 mailles du maillage 00000004, on a demandé l'affectation de 764698, on a pu en
[1,14]<stdout>:affecter 764698.
[1,3]<stdout>:Sur les 796240 mailles du maillage 00000004, on a demandé l'affectation de 796240, on a pu en
[1,3]<stdout>:affecter 796240.
[1,2]<stdout>:Sur les 801918 mailles du maillage 00000004, on a demandé l'affectation de 801918, on a pu en
[1,2]<stdout>:affecter 801918.
[1,7]<stdout>:Sur les 765924 mailles du maillage 00000004, on a demandé l'affectation de 765924, on a pu en
[1,7]<stdout>:affecter 765924.
[1,20]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,9]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,20]<stdout>:_                _                SEG2         MECA_ARETE2      235
[1,20]<stdout>:_                _                QUAD4        MECA_FACE4       21505
[1,9]<stdout>:_                _                SEG2         MECA_ARETE2      93
[1,20]<stdout>:3D               _                HEXA8        MECA_HEXA8       686831
[1,9]<stdout>:_                _                QUAD4        MECA_FACE4       16777
[1,9]<stdout>:3D               _                HEXA8        MECA_HEXA8       690512
[1,5]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,5]<stdout>:_                _                SEG2         MECA_ARETE2      275
[1,5]<stdout>:_                _                QUAD4        MECA_FACE4       23443
[1,5]<stdout>:3D               _                HEXA8        MECA_HEXA8       625809
[1,18]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,18]<stdout>:_                _                SEG2         MECA_ARETE2      73
[1,18]<stdout>:_                _                QUAD4        MECA_FACE4       13773
[1,18]<stdout>:3D               _                HEXA8        MECA_HEXA8       698112
[1,23]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,23]<stdout>:_                _                SEG2         MECA_ARETE2      275
[1,23]<stdout>:_                _                QUAD4        MECA_FACE4       23831
[1,23]<stdout>:3D               _                HEXA8        MECA_HEXA8       655365
[1,0]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,0]<stdout>:_                _                SEG2         MECA_ARETE2      308
[1,0]<stdout>:_                _                QUAD4        MECA_FACE4       28336
[1,0]<stdout>:3D               _                HEXA8        MECA_HEXA8       707520
[1,21]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,21]<stdout>:_                _                SEG2         MECA_ARETE2      53
[1,21]<stdout>:_                _                QUAD4        MECA_FACE4       12102
[1,21]<stdout>:3D               _                HEXA8        MECA_HEXA8       695017
[1,13]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,13]<stdout>:_                _                SEG2         MECA_ARETE2      50
[1,13]<stdout>:_                _                QUAD4        MECA_FACE4       13311
[1,13]<stdout>:3D               _                HEXA8        MECA_HEXA8       727184
[1,22]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,22]<stdout>:_                _                SEG2         MECA_ARETE2      53
[1,22]<stdout>:_                _                QUAD4        MECA_FACE4       12789
[1,22]<stdout>:3D               _                HEXA8        MECA_HEXA8       740065
[1,11]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,11]<stdout>:_                _                QUAD4        MECA_FACE4       7116
[1,11]<stdout>:3D               _                HEXA8        MECA_HEXA8       731624
[1,14]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,14]<stdout>:_                _                SEG2         MECA_ARETE2      49
[1,14]<stdout>:_                _                QUAD4        MECA_FACE4       10961
[1,14]<stdout>:3D               _                HEXA8        MECA_HEXA8       753688
[1,17]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,17]<stdout>:_                _                QUAD4        MECA_FACE4       6226
[1,17]<stdout>:3D               _                HEXA8        MECA_HEXA8       716866
[1,8]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,8]<stdout>:_                _                SEG2         MECA_ARETE2      41
[1,8]<stdout>:_                _                QUAD4        MECA_FACE4       10041
[1,8]<stdout>:3D               _                HEXA8        MECA_HEXA8       722832
[1,6]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,15]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,6]<stdout>:_                _                SEG2         MECA_ARETE2      108
[1,6]<stdout>:_                _                QUAD4        MECA_FACE4       18200
[1,6]<stdout>:3D               _                HEXA8        MECA_HEXA8       711408
[1,15]<stdout>:_                _                SEG2         MECA_ARETE2      85
[1,15]<stdout>:_                _                QUAD4        MECA_FACE4       16800
[1,15]<stdout>:3D               _                HEXA8        MECA_HEXA8       711456
[1,12]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,12]<stdout>:_                _                SEG2         MECA_ARETE2      288
[1,12]<stdout>:_                _                QUAD4        MECA_FACE4       25792
[1,12]<stdout>:3D               _                HEXA8        MECA_HEXA8       686400
[1,10]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,10]<stdout>:_                _                SEG2         MECA_ARETE2      294
[1,10]<stdout>:_                _                QUAD4        MECA_FACE4       26048
[1,10]<stdout>:3D               _                HEXA8        MECA_HEXA8       714085
[1,19]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,19]<stdout>:_                _                SEG2         MECA_ARETE2      80
[1,19]<stdout>:_                _                QUAD4        MECA_FACE4       14656
[1,19]<stdout>:3D               _                HEXA8        MECA_HEXA8       755189
[1,2]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,2]<stdout>:_                _                QUAD4        MECA_FACE4       7153
[1,2]<stdout>:3D               _                HEXA8        MECA_HEXA8       794765
[1,4]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,4]<stdout>:_                _                SEG2         MECA_ARETE2      76
[1,4]<stdout>:_                _                QUAD4        MECA_FACE4       15459
[1,4]<stdout>:3D               _                HEXA8        MECA_HEXA8       749207
[1,1]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,1]<stdout>:_                _                SEG2         MECA_ARETE2      81
[1,1]<stdout>:_                _                QUAD4        MECA_FACE4       16028
[1,1]<stdout>:3D               _                HEXA8        MECA_HEXA8       751280
[1,16]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,16]<stdout>:_                _                SEG2         MECA_ARETE2      302
[1,16]<stdout>:_                _                QUAD4        MECA_FACE4       26947
[1,16]<stdout>:3D               _                HEXA8        MECA_HEXA8       713096
[1,7]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,7]<stdout>:_                _                SEG2         MECA_ARETE2      238
[1,7]<stdout>:_                _                QUAD4        MECA_FACE4       21844
[1,7]<stdout>:3D               _                HEXA8        MECA_HEXA8       743842
[1,3]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,3]<stdout>:_                _                SEG2         MECA_ARETE2      40
[1,3]<stdout>:_                _                QUAD4        MECA_FACE4       11156
[1,3]<stdout>:3D               _                HEXA8        MECA_HEXA8       785044
[1,5]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.37      0.00      0.37
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.02
[1,23]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.38      0.00      0.39
[1,23]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,9]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.41      0.00      0.41
[1,9]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,20]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.40      0.00      0.40
[1,20]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,21]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.40      0.00      0.40
[1,21]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,12]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.40      0.01      0.39
[1,12]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,18]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.41      0.00      0.42
[1,18]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,17]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.41      0.00      0.41
[1,17]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,6]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.40      0.00      0.41
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,15]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.41      0.00      0.41
[1,15]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,8]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.41      0.01      0.41
[1,8]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,11]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.42      0.00      0.42
[1,11]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,0]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.42      0.00      0.42
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,10]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.41      0.01      0.42
[1,10]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,13]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.42      0.02      0.42
[1,13]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,16]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.42      0.00      0.42
[1,16]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,22]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.44      0.00      0.44
[1,22]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,14]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.45      0.01      0.45
[1,14]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,7]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.42      0.02      0.43
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.02
[1,1]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.44      0.01      0.45
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,4]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.44      0.00      0.44
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,19]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.44      0.00      0.44
[1,19]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,3]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.45      0.01      0.45
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,2]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.46      0.01      0.46
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,23]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,23]<stdout>:# Mémoire (Mo) :  4903.86 /  1170.11 /   422.39 /   354.82 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0003   user+syst:        2.73s (syst:        0.00s, elaps:        2.74s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,12]<stdout>:# Mémoire (Mo) :  4651.87 /  1196.43 /   432.22 /   356.00 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,18]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,12]<stdout>:# Fin commande #0003   user+syst:        2.71s (syst:        0.03s, elaps:        2.74s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,9]<stdout>:# Mémoire (Mo) :  5067.60 /  1185.64 /   432.82 /   361.22 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Mémoire (Mo) :  5169.35 /  1187.29 /   435.01 /   363.23 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,18]<stdout>:# Fin commande #0003   user+syst:        2.73s (syst:        0.02s, elaps:        2.74s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0003   user+syst:        2.74s (syst:        0.01s, elaps:        2.74s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Mémoire (Mo) :  5416.51 /  1197.48 /   432.49 /   364.92 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Mémoire (Mo) :  5179.83 /  1192.60 /   433.83 /   364.23 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0003   user+syst:        2.74s (syst:        0.01s, elaps:        2.74s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Fin commande #0003   user+syst:        2.73s (syst:        0.01s, elaps:        2.74s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,5]<stdout>:# Mémoire (Mo) :  4701.38 /  1128.30 /   413.10 /   346.73 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,5]<stdout>:# Fin commande #0003   user+syst:        2.71s (syst:        0.03s, elaps:        2.74s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0005 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,15]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,17]<stdout>:# Mémoire (Mo) :  5579.84 /  1216.97 /   440.32 /   374.74 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,15]<stdout>:# Mémoire (Mo) :  5063.20 /  1212.60 /   439.31 /   364.51 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0003   user+syst:        2.73s (syst:        0.00s, elaps:        2.74s)
[1,16]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  4366.73 /  1229.66 /   443.01 /   397.56 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  4983.32 /  1206.22 /   439.27 /   362.72 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0003   user+syst:        2.72s (syst:        0.02s, elaps:        2.74s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,8]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,6]<stdout>:# Fin commande #0003   user+syst:        2.72s (syst:        0.03s, elaps:        2.74s)
[1,16]<stdout>:# Mémoire (Mo) :  5128.61 /  1220.91 /   441.32 /   367.45 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0005   user+syst:        2.71s (syst:        0.01s, elaps:        2.72s)
[1,13]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  5036.50 /  1217.61 /   441.23 /   366.56 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0003   user+syst:        2.73s (syst:        0.02s, elaps:        2.74s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Mémoire (Mo) :  5344.48 /  1210.52 /   442.34 /   371.47 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  5298.55 /  1205.09 /   443.95 /   371.06 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0003   user+syst:        2.70s (syst:        0.04s, elaps:        2.74s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,13]<stdout>:# Fin commande #0003   user+syst:        2.71s (syst:        0.04s, elaps:        2.74s)
[1,8]<stdout>:# Fin commande #0003   user+syst:        2.73s (syst:        0.02s, elaps:        2.74s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,11]<stdout>:# Mémoire (Mo) :  5588.05 /  1219.29 /   444.99 /   377.33 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Mémoire (Mo) :  5527.03 /  1219.21 /   447.48 /   375.32 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,14]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,11]<stdout>:# Fin commande #0003   user+syst:        2.73s (syst:        0.00s, elaps:        2.74s)
[1,4]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,22]<stdout>:# Fin commande #0003   user+syst:        2.74s (syst:        0.01s, elaps:        2.74s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Mémoire (Mo) :  5515.54 /  1229.08 /   454.28 /   381.32 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  5193.34 /  1232.76 /   453.29 /   375.02 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Mémoire (Mo) :  5425.09 /  1222.70 /   457.59 /   382.11 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :  5317.02 /  1241.03 /   452.78 /   376.50 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0003   user+syst:        2.72s (syst:        0.02s, elaps:        2.74s)
[1,1]<stdout>:# Fin commande #0003   user+syst:        2.71s (syst:        0.04s, elaps:        2.74s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0003   user+syst:        2.73s (syst:        0.02s, elaps:        2.74s)
[1,19]<stdout>:# Fin commande #0003   user+syst:        2.72s (syst:        0.02s, elaps:        2.74s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,2]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,2]<stdout>:# Mémoire (Mo) :  5529.57 /  1243.54 /   468.51 /   390.83 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  5324.23 /  1256.48 /   466.09 /   385.81 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0003   user+syst:        2.71s (syst:        0.03s, elaps:        2.74s)
[1,3]<stdout>:# Fin commande #0003   user+syst:        2.71s (syst:        0.04s, elaps:        2.74s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,7]<stdout>:# Mémoire (Mo) :  5487.63 /  1194.67 /   452.49 /   377.86 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0003   user+syst:        2.68s (syst:        0.06s, elaps:        2.74s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt141
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0004 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 141
[1,23]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,23]<stdout>:                                   SY=200.0),
[1,23]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,23]<stdout>:                              COEF_AMOR=1.0,
[1,23]<stdout>:                              E=200000.0,
[1,23]<stdout>:                              K_DESSIC=0.0,
[1,23]<stdout>:                              NU=0.3),
[1,23]<stdout>:                      INFO=1)
[1,23]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt141
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0004 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 141
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt141
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt141
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt141
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt141
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0004 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 141
[1,9]<stdout>:# Commande #0004 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 141
[1,12]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,12]<stdout>:                                   SY=200.0),
[1,12]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,12]<stdout>:                              COEF_AMOR=1.0,
[1,12]<stdout>:                              E=200000.0,
[1,12]<stdout>:                              K_DESSIC=0.0,
[1,12]<stdout>:                              NU=0.3),
[1,12]<stdout>:                      INFO=1)
[1,12]<stdout>:
[1,21]<stdout>:# Commande #0004 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 141
[1,20]<stdout>:# Commande #0004 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 141
[1,18]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,18]<stdout>:                                   SY=200.0),
[1,18]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,18]<stdout>:                              COEF_AMOR=1.0,
[1,18]<stdout>:                              E=200000.0,
[1,18]<stdout>:                              K_DESSIC=0.0,
[1,18]<stdout>:                              NU=0.3),
[1,18]<stdout>:                      INFO=1)
[1,18]<stdout>:
[1,9]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,9]<stdout>:                                   SY=200.0),
[1,9]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,9]<stdout>:                              COEF_AMOR=1.0,
[1,9]<stdout>:                              E=200000.0,
[1,9]<stdout>:                              K_DESSIC=0.0,
[1,9]<stdout>:                              NU=0.3),
[1,9]<stdout>:                      INFO=1)
[1,9]<stdout>:
[1,21]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,21]<stdout>:                                   SY=200.0),
[1,21]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,21]<stdout>:                              COEF_AMOR=1.0,
[1,21]<stdout>:                              E=200000.0,
[1,21]<stdout>:                              K_DESSIC=0.0,
[1,21]<stdout>:                              NU=0.3),
[1,21]<stdout>:                      INFO=1)
[1,21]<stdout>:
[1,20]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,20]<stdout>:                                   SY=200.0),
[1,20]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,20]<stdout>:                              COEF_AMOR=1.0,
[1,20]<stdout>:                              E=200000.0,
[1,20]<stdout>:                              K_DESSIC=0.0,
[1,20]<stdout>:                              NU=0.3),
[1,20]<stdout>:                      INFO=1)
[1,20]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt141
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0004 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 141
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt141
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt141
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt141
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt141
[1,17]<stdout>:# Commande #0004 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 141
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                                   SY=200.0),
[1,5]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,5]<stdout>:                              COEF_AMOR=1.0,
[1,5]<stdout>:                              E=200000.0,
[1,5]<stdout>:                              K_DESSIC=0.0,
[1,5]<stdout>:                              NU=0.3),
[1,5]<stdout>:                      INFO=1)
[1,5]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt141
[1,15]<stdout>:# Commande #0004 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 141
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0006 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 141
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt141
[1,6]<stdout>:# Commande #0004 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 141
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt141
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt141
[1,16]<stdout>:# Commande #0004 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 141
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,17]<stdout>:                                   SY=200.0),
[1,17]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,17]<stdout>:                              COEF_AMOR=1.0,
[1,17]<stdout>:                              E=200000.0,
[1,17]<stdout>:                              K_DESSIC=0.0,
[1,17]<stdout>:                              NU=0.3),
[1,17]<stdout>:                      INFO=1)
[1,17]<stdout>:
[1,10]<stdout>:# Commande #0004 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 141
[1,15]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,15]<stdout>:                                   SY=200.0),
[1,15]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,15]<stdout>:                              COEF_AMOR=1.0,
[1,15]<stdout>:                              E=200000.0,
[1,15]<stdout>:                              K_DESSIC=0.0,
[1,15]<stdout>:                              NU=0.3),
[1,15]<stdout>:                      INFO=1)
[1,15]<stdout>:
[1,13]<stdout>:# Commande #0004 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 141
[1,8]<stdout>:# Commande #0004 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 141
[1,6]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                                   SY=200.0),
[1,6]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,6]<stdout>:                              COEF_AMOR=1.0,
[1,6]<stdout>:                              E=200000.0,
[1,6]<stdout>:                              K_DESSIC=0.0,
[1,6]<stdout>:                              NU=0.3),
[1,6]<stdout>:                      INFO=1)
[1,6]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt141
[1,0]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                                   SY=200.0),
[1,0]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,0]<stdout>:                              COEF_AMOR=1.0,
[1,0]<stdout>:                              E=200000.0,
[1,0]<stdout>:                              K_DESSIC=0.0,
[1,0]<stdout>:                              NU=0.3),
[1,0]<stdout>:                      INFO=1)
[1,0]<stdout>:
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,16]<stdout>:                                   SY=200.0),
[1,16]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,16]<stdout>:                              COEF_AMOR=1.0,
[1,16]<stdout>:                              E=200000.0,
[1,16]<stdout>:                              K_DESSIC=0.0,
[1,16]<stdout>:                              NU=0.3),
[1,16]<stdout>:                      INFO=1)
[1,16]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt141
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,10]<stdout>:                                   SY=200.0),
[1,10]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,10]<stdout>:                              COEF_AMOR=1.0,
[1,10]<stdout>:                              E=200000.0,
[1,10]<stdout>:                              K_DESSIC=0.0,
[1,10]<stdout>:                              NU=0.3),
[1,10]<stdout>:                      INFO=1)
[1,10]<stdout>:
[1,11]<stdout>:# Commande #0004 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 141
[1,13]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,13]<stdout>:                                   SY=200.0),
[1,13]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,13]<stdout>:                              COEF_AMOR=1.0,
[1,13]<stdout>:                              E=200000.0,
[1,13]<stdout>:                              K_DESSIC=0.0,
[1,13]<stdout>:                              NU=0.3),
[1,13]<stdout>:                      INFO=1)
[1,13]<stdout>:
[1,8]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,8]<stdout>:                                   SY=200.0),
[1,8]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,8]<stdout>:                              COEF_AMOR=1.0,
[1,8]<stdout>:                              E=200000.0,
[1,8]<stdout>:                              K_DESSIC=0.0,
[1,8]<stdout>:                              NU=0.3),
[1,8]<stdout>:                      INFO=1)
[1,8]<stdout>:
[1,22]<stdout>:# Commande #0004 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 141
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt141
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt141
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt141
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt141
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,11]<stdout>:                                   SY=200.0),
[1,11]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,11]<stdout>:                              COEF_AMOR=1.0,
[1,11]<stdout>:                              E=200000.0,
[1,11]<stdout>:                              K_DESSIC=0.0,
[1,11]<stdout>:                              NU=0.3),
[1,11]<stdout>:                      INFO=1)
[1,11]<stdout>:
[1,19]<stdout>:# Commande #0004 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 141
[1,14]<stdout>:# Commande #0004 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 141
[1,1]<stdout>:# Commande #0004 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 141
[1,4]<stdout>:# Commande #0004 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 141
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt141
[1,22]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,22]<stdout>:                                   SY=200.0),
[1,22]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,22]<stdout>:                              COEF_AMOR=1.0,
[1,22]<stdout>:                              E=200000.0,
[1,22]<stdout>:                              K_DESSIC=0.0,
[1,22]<stdout>:                              NU=0.3),
[1,22]<stdout>:                      INFO=1)
[1,22]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt141
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0004 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 141
[1,14]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,14]<stdout>:                                   SY=200.0),
[1,14]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,14]<stdout>:                              COEF_AMOR=1.0,
[1,14]<stdout>:                              E=200000.0,
[1,14]<stdout>:                              K_DESSIC=0.0,
[1,14]<stdout>:                              NU=0.3),
[1,14]<stdout>:                      INFO=1)
[1,14]<stdout>:
[1,1]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                                   SY=200.0),
[1,1]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,1]<stdout>:                              COEF_AMOR=1.0,
[1,1]<stdout>:                              E=200000.0,
[1,1]<stdout>:                              K_DESSIC=0.0,
[1,1]<stdout>:                              NU=0.3),
[1,1]<stdout>:                      INFO=1)
[1,1]<stdout>:
[1,19]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,19]<stdout>:                                   SY=200.0),
[1,19]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,19]<stdout>:                              COEF_AMOR=1.0,
[1,19]<stdout>:                              E=200000.0,
[1,19]<stdout>:                              K_DESSIC=0.0,
[1,19]<stdout>:                              NU=0.3),
[1,19]<stdout>:                      INFO=1)
[1,19]<stdout>:
[1,2]<stdout>:# Commande #0004 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 141
[1,4]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                                   SY=200.0),
[1,4]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,4]<stdout>:                              COEF_AMOR=1.0,
[1,4]<stdout>:                              E=200000.0,
[1,4]<stdout>:                              K_DESSIC=0.0,
[1,4]<stdout>:                              NU=0.3),
[1,4]<stdout>:                      INFO=1)
[1,4]<stdout>:
[1,3]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                                   SY=200.0),
[1,3]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,3]<stdout>:                              COEF_AMOR=1.0,
[1,3]<stdout>:                              E=200000.0,
[1,3]<stdout>:                              K_DESSIC=0.0,
[1,3]<stdout>:                              NU=0.3),
[1,3]<stdout>:                      INFO=1)
[1,3]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt141
[1,2]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                                   SY=200.0),
[1,2]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,2]<stdout>:                              COEF_AMOR=1.0,
[1,2]<stdout>:                              E=200000.0,
[1,2]<stdout>:                              K_DESSIC=0.0,
[1,2]<stdout>:                              NU=0.3),
[1,2]<stdout>:                      INFO=1)
[1,2]<stdout>:
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0004 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 141
[1,7]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                                   SY=200.0),
[1,7]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,7]<stdout>:                              COEF_AMOR=1.0,
[1,7]<stdout>:                              E=200000.0,
[1,7]<stdout>:                              K_DESSIC=0.0,
[1,7]<stdout>:                              NU=0.3),
[1,7]<stdout>:                      INFO=1)
[1,7]<stdout>:
[1,23]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,23]<stdout>:# Mémoire (Mo) :  4903.86 /  1170.11 /   422.39 /   354.82 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,12]<stdout>:# Mémoire (Mo) :  4651.87 /  1196.43 /   432.22 /   356.00 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,12]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,21]<stdout>:# Mémoire (Mo) :  5179.83 /  1192.60 /   433.83 /   364.23 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,18]<stdout>:# Mémoire (Mo) :  5169.35 /  1187.29 /   435.01 /   363.23 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Mémoire (Mo) :  5416.51 /  1197.48 /   432.49 /   364.92 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt152
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,9]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,23]<stdout>:# Commande #0005 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 152
[1,17]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,15]<stdout>:# Mémoire (Mo) :  5063.20 /  1212.60 /   439.31 /   364.51 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Mémoire (Mo) :  5067.60 /  1185.64 /   432.82 /   361.22 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,17]<stdout>:# Mémoire (Mo) :  5579.84 /  1216.97 /   440.32 /   374.74 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,16]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,17]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,23]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,23]<stdout>:                              TOUT='OUI'),
[1,23]<stdout>:                      INFO=1,
[1,23]<stdout>:                      MAILLAGE='<00000004>')
[1,23]<stdout>:
[1,5]<stdout>:# Mémoire (Mo) :  4701.38 /  1128.30 /   413.10 /   346.73 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,16]<stdout>:# Mémoire (Mo) :  5128.61 /  1220.91 /   441.32 /   367.45 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Mémoire (Mo) :  5036.50 /  1217.61 /   441.23 /   366.56 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,13]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,8]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,16]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :  4983.32 /  1206.22 /   439.27 /   362.72 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,6]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,22]<stdout>:# Mémoire (Mo) :  5527.03 /  1219.21 /   447.48 /   375.32 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  5298.55 /  1205.09 /   443.95 /   371.06 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Mémoire (Mo) :  5344.48 /  1210.52 /   442.34 /   371.47 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,11]<stdout>:# Mémoire (Mo) :  5588.05 /  1219.29 /   444.99 /   377.33 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,14]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,3]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,2]<stdout>:# Mémoire (Mo) :  5529.57 /  1243.54 /   468.51 /   390.83 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,3]<stdout>:# Mémoire (Mo) :  5324.23 /  1256.48 /   466.09 /   385.81 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Mémoire (Mo) :  5515.54 /  1229.08 /   454.28 /   381.32 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt152
[1,1]<stdout>:# Mémoire (Mo) :  5193.34 /  1232.76 /   453.29 /   375.02 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0005 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:# Mémoire (Mo) :  5487.63 /  1194.67 /   452.49 /   377.86 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt152
[1,19]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt152
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Mémoire (Mo) :  5425.09 /  1222.70 /   457.59 /   382.11 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Commande #0005 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 152
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt152
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,12]<stdout>:                              TOUT='OUI'),
[1,12]<stdout>:                      INFO=1,
[1,12]<stdout>:                      MAILLAGE='<00000004>')
[1,12]<stdout>:
[1,19]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,4]<stdout>:# Mémoire (Mo) :  5317.02 /  1241.03 /   452.78 /   376.50 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Commande #0005 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 152
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,20]<stdout>:# Commande #0005 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 152
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,21]<stdout>:                              TOUT='OUI'),
[1,21]<stdout>:                      INFO=1,
[1,21]<stdout>:                      MAILLAGE='<00000004>')
[1,21]<stdout>:
[1,18]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,18]<stdout>:                              TOUT='OUI'),
[1,18]<stdout>:                      INFO=1,
[1,18]<stdout>:                      MAILLAGE='<00000004>')
[1,18]<stdout>:
[1,20]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,20]<stdout>:                              TOUT='OUI'),
[1,20]<stdout>:                      INFO=1,
[1,20]<stdout>:                      MAILLAGE='<00000004>')
[1,20]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt152
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0006 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt152
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0005 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 152
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt152
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  4366.73 /  1229.66 /   443.01 /   397.56 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Commande #0005 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 152
[1,17]<stdout>:# Commande #0005 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 152
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt152
[1,0]<stdout>:# Fin commande #0006   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt152
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt152
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,15]<stdout>:                              TOUT='OUI'),
[1,15]<stdout>:                      INFO=1,
[1,15]<stdout>:                      MAILLAGE='<00000004>')
[1,15]<stdout>:
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt152
[1,5]<stdout>:# Commande #0005 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 152
[1,16]<stdout>:# Commande #0005 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 152
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0005 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 152
[1,9]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,9]<stdout>:                              TOUT='OUI'),
[1,9]<stdout>:                      INFO=1,
[1,9]<stdout>:                      MAILLAGE='<00000004>')
[1,9]<stdout>:
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt152
[1,17]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,17]<stdout>:                              TOUT='OUI'),
[1,17]<stdout>:                      INFO=1,
[1,17]<stdout>:                      MAILLAGE='<00000004>')
[1,17]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt152
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt152
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0005 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 152
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt152
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Commande #0005 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 152
[1,13]<stdout>:# Commande #0005 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 152
[1,8]<stdout>:# Commande #0005 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 152
[1,10]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,10]<stdout>:                              TOUT='OUI'),
[1,10]<stdout>:                      INFO=1,
[1,10]<stdout>:                      MAILLAGE='<00000004>')
[1,10]<stdout>:
[1,5]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,5]<stdout>:                              TOUT='OUI'),
[1,5]<stdout>:                      INFO=1,
[1,5]<stdout>:                      MAILLAGE='<00000004>')
[1,5]<stdout>:
[1,16]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,16]<stdout>:                              TOUT='OUI'),
[1,16]<stdout>:                      INFO=1,
[1,16]<stdout>:                      MAILLAGE='<00000004>')
[1,16]<stdout>:
[1,11]<stdout>:# Commande #0005 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 152
[1,6]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,6]<stdout>:                              TOUT='OUI'),
[1,6]<stdout>:                      INFO=1,
[1,6]<stdout>:                      MAILLAGE='<00000004>')
[1,6]<stdout>:
[1,22]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,22]<stdout>:                              TOUT='OUI'),
[1,22]<stdout>:                      INFO=1,
[1,22]<stdout>:                      MAILLAGE='<00000004>')
[1,22]<stdout>:
[1,13]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,13]<stdout>:                              TOUT='OUI'),
[1,13]<stdout>:                      INFO=1,
[1,13]<stdout>:                      MAILLAGE='<00000004>')
[1,13]<stdout>:
[1,8]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,8]<stdout>:                              TOUT='OUI'),
[1,8]<stdout>:                      INFO=1,
[1,8]<stdout>:                      MAILLAGE='<00000004>')
[1,8]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt152
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt152
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt152
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,11]<stdout>:                              TOUT='OUI'),
[1,11]<stdout>:                      INFO=1,
[1,11]<stdout>:                      MAILLAGE='<00000004>')
[1,11]<stdout>:
[1,2]<stdout>:# Commande #0005 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 152
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt152
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0005 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 152
[1,3]<stdout>:# Commande #0005 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 152
[1,1]<stdout>:# Commande #0005 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt152
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,2]<stdout>:                              TOUT='OUI'),
[1,2]<stdout>:                      INFO=1,
[1,2]<stdout>:                      MAILLAGE='<00000004>')
[1,2]<stdout>:
[1,14]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,14]<stdout>:                              TOUT='OUI'),
[1,14]<stdout>:                      INFO=1,
[1,14]<stdout>:                      MAILLAGE='<00000004>')
[1,14]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt152
[1,7]<stdout>:# Commande #0005 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 152
[1,3]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,3]<stdout>:                              TOUT='OUI'),
[1,3]<stdout>:                      INFO=1,
[1,3]<stdout>:                      MAILLAGE='<00000004>')
[1,3]<stdout>:
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,1]<stdout>:                              TOUT='OUI'),
[1,1]<stdout>:                      INFO=1,
[1,1]<stdout>:                      MAILLAGE='<00000004>')
[1,1]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt152
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0005 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,7]<stdout>:                              TOUT='OUI'),
[1,7]<stdout>:                      INFO=1,
[1,7]<stdout>:                      MAILLAGE='<00000004>')
[1,7]<stdout>:
[1,4]<stdout>:# Commande #0005 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 152
[1,19]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,19]<stdout>:                              TOUT='OUI'),
[1,19]<stdout>:                      INFO=1,
[1,19]<stdout>:                      MAILLAGE='<00000004>')
[1,19]<stdout>:
[1,4]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,4]<stdout>:                              TOUT='OUI'),
[1,4]<stdout>:                      INFO=1,
[1,4]<stdout>:                      MAILLAGE='<00000004>')
[1,4]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt152
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0007 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 152
[1,0]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,0]<stdout>:                              TOUT='OUI'),
[1,0]<stdout>:                      INFO=1,
[1,0]<stdout>:                      MAILLAGE='<00000004>')
[1,0]<stdout>:
[1,23]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,23]<stdout>:# Mémoire (Mo) :  4903.86 /  1170.11 /   422.39 /   354.82 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,12]<stdout>:# Mémoire (Mo) :  4651.87 /  1196.43 /   432.22 /   356.00 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,12]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,20]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,18]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Mémoire (Mo) :  5179.83 /  1192.60 /   433.83 /   364.23 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Mémoire (Mo) :  5169.35 /  1187.29 /   435.01 /   363.23 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Mémoire (Mo) :  5416.51 /  1197.48 /   432.49 /   364.92 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt161
[1,20]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0006 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 161
[1,23]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,23]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,23]<stdout>:                                    DY=0.0,
[1,23]<stdout>:                                    DZ=0.0,
[1,23]<stdout>:                                    GROUP_MA='LEFT'),
[1,23]<stdout>:                       MODELE=model,
[1,23]<stdout>:                       SYNTAXE='NON')
[1,23]<stdout>:
[1,15]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,15]<stdout>:# Mémoire (Mo) :  5063.20 /  1212.60 /   439.31 /   364.51 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,15]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Mémoire (Mo) :  5579.84 /  1216.97 /   440.32 /   374.74 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,16]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,17]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,10]<stdout>:# Mémoire (Mo) :  5036.50 /  1217.61 /   441.23 /   366.56 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Mémoire (Mo) :  5128.61 /  1220.91 /   441.32 /   367.45 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.01s, elaps:        0.03s)
[1,8]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,5]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,22]<stdout>:# Mémoire (Mo) :  5527.03 /  1219.21 /   447.48 /   375.32 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,13]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,16]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt161
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Mémoire (Mo) :  5344.48 /  1210.52 /   442.34 /   371.47 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  4983.32 /  1206.22 /   439.27 /   362.72 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  4701.38 /  1128.30 /   413.10 /   346.73 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Mémoire (Mo) :  5298.55 /  1205.09 /   443.95 /   371.06 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Commande #0006 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 161
[1,8]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt161
[1,5]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,13]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt161
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt161
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,11]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,12]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,12]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,12]<stdout>:                                    DY=0.0,
[1,12]<stdout>:                                    DZ=0.0,
[1,12]<stdout>:                                    GROUP_MA='LEFT'),
[1,12]<stdout>:                       MODELE=model,
[1,12]<stdout>:                       SYNTAXE='NON')
[1,12]<stdout>:
[1,21]<stdout>:# Commande #0006 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 161
[1,9]<stdout>:# Mémoire (Mo) :  5067.60 /  1185.64 /   432.82 /   361.22 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,18]<stdout>:# Commande #0006 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 161
[1,20]<stdout>:# Commande #0006 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 161
[1,2]<stdout>:# Mémoire (Mo) :  5529.57 /  1243.54 /   468.51 /   390.83 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,9]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Mémoire (Mo) :  5588.05 /  1219.29 /   444.99 /   377.33 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,7]<stdout>:# Mémoire (Mo) :  5487.63 /  1194.67 /   452.49 /   377.86 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,21]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,21]<stdout>:                                    DY=0.0,
[1,21]<stdout>:                                    DZ=0.0,
[1,21]<stdout>:                                    GROUP_MA='LEFT'),
[1,21]<stdout>:                       MODELE=model,
[1,21]<stdout>:                       SYNTAXE='NON')
[1,21]<stdout>:
[1,3]<stdout>:# Mémoire (Mo) :  5324.23 /  1256.48 /   466.09 /   385.81 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,18]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,18]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,18]<stdout>:                                    DY=0.0,
[1,18]<stdout>:                                    DZ=0.0,
[1,18]<stdout>:                                    GROUP_MA='LEFT'),
[1,18]<stdout>:                       MODELE=model,
[1,18]<stdout>:                       SYNTAXE='NON')
[1,18]<stdout>:
[1,11]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,20]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,20]<stdout>:                                    DY=0.0,
[1,20]<stdout>:                                    DZ=0.0,
[1,20]<stdout>:                                    GROUP_MA='LEFT'),
[1,20]<stdout>:                       MODELE=model,
[1,20]<stdout>:                       SYNTAXE='NON')
[1,20]<stdout>:
[1,7]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,14]<stdout>:# Mémoire (Mo) :  5515.54 /  1229.08 /   454.28 /   381.32 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt161
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :  5193.34 /  1232.76 /   453.29 /   375.02 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0006 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 161
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt161
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Commande #0006 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 161
[1,15]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,15]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,15]<stdout>:                                    DY=0.0,
[1,15]<stdout>:                                    DZ=0.0,
[1,15]<stdout>:                                    GROUP_MA='LEFT'),
[1,15]<stdout>:                       MODELE=model,
[1,15]<stdout>:                       SYNTAXE='NON')
[1,15]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt161
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt161
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt161
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,17]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,17]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,17]<stdout>:                                    DY=0.0,
[1,17]<stdout>:                                    DZ=0.0,
[1,17]<stdout>:                                    GROUP_MA='LEFT'),
[1,17]<stdout>:                       MODELE=model,
[1,17]<stdout>:                       SYNTAXE='NON')
[1,17]<stdout>:
[1,10]<stdout>:# Commande #0006 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,16]<stdout>:# Commande #0006 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 161
[1,22]<stdout>:# Commande #0006 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 161
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt161
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt161
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Mémoire (Mo) :  5425.09 /  1222.70 /   457.59 /   382.11 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt161
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt161
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  5317.02 /  1241.03 /   452.78 /   376.50 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,10]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,10]<stdout>:                                    DY=0.0,
[1,10]<stdout>:                                    DZ=0.0,
[1,10]<stdout>:                                    GROUP_MA='LEFT'),
[1,10]<stdout>:                       MODELE=model,
[1,10]<stdout>:                       SYNTAXE='NON')
[1,10]<stdout>:
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,16]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,16]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,16]<stdout>:                                    DY=0.0,
[1,16]<stdout>:                                    DZ=0.0,
[1,16]<stdout>:                                    GROUP_MA='LEFT'),
[1,16]<stdout>:                       MODELE=model,
[1,16]<stdout>:                       SYNTAXE='NON')
[1,16]<stdout>:
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0006 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 161
[1,22]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,22]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,22]<stdout>:                                    DY=0.0,
[1,22]<stdout>:                                    DZ=0.0,
[1,22]<stdout>:                                    GROUP_MA='LEFT'),
[1,22]<stdout>:                       MODELE=model,
[1,22]<stdout>:                       SYNTAXE='NON')
[1,22]<stdout>:
[1,6]<stdout>:# Commande #0006 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0006 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 161
[1,13]<stdout>:# Commande #0006 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 161
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt161
[1,8]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,8]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,8]<stdout>:                                    DY=0.0,
[1,8]<stdout>:                                    DZ=0.0,
[1,8]<stdout>:                                    GROUP_MA='LEFT'),
[1,8]<stdout>:                       MODELE=model,
[1,8]<stdout>:                       SYNTAXE='NON')
[1,8]<stdout>:
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,6]<stdout>:                                    DY=0.0,
[1,6]<stdout>:                                    DZ=0.0,
[1,6]<stdout>:                                    GROUP_MA='LEFT'),
[1,6]<stdout>:                       MODELE=model,
[1,6]<stdout>:                       SYNTAXE='NON')
[1,6]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt161
[1,5]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,5]<stdout>:                                    DY=0.0,
[1,5]<stdout>:                                    DZ=0.0,
[1,5]<stdout>:                                    GROUP_MA='LEFT'),
[1,5]<stdout>:                       MODELE=model,
[1,5]<stdout>:                       SYNTAXE='NON')
[1,5]<stdout>:
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt161
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,13]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,13]<stdout>:                                    DY=0.0,
[1,13]<stdout>:                                    DZ=0.0,
[1,13]<stdout>:                                    GROUP_MA='LEFT'),
[1,13]<stdout>:                       MODELE=model,
[1,13]<stdout>:                       SYNTAXE='NON')
[1,13]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt161
[1,9]<stdout>:# Commande #0006 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 161
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt161
[1,2]<stdout>:# Commande #0006 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 161
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0006 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 161
[1,7]<stdout>:# Commande #0006 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 161
[1,3]<stdout>:# Commande #0006 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 161
[1,9]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,9]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,9]<stdout>:                                    DY=0.0,
[1,9]<stdout>:                                    DZ=0.0,
[1,9]<stdout>:                                    GROUP_MA='LEFT'),
[1,9]<stdout>:                       MODELE=model,
[1,9]<stdout>:                       SYNTAXE='NON')
[1,9]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt161
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,2]<stdout>:                                    DY=0.0,
[1,2]<stdout>:                                    DZ=0.0,
[1,2]<stdout>:                                    GROUP_MA='LEFT'),
[1,2]<stdout>:                       MODELE=model,
[1,2]<stdout>:                       SYNTAXE='NON')
[1,2]<stdout>:
[1,11]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,11]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,11]<stdout>:                                    DY=0.0,
[1,11]<stdout>:                                    DZ=0.0,
[1,11]<stdout>:                                    GROUP_MA='LEFT'),
[1,11]<stdout>:                       MODELE=model,
[1,11]<stdout>:                       SYNTAXE='NON')
[1,11]<stdout>:
[1,7]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,7]<stdout>:                                    DY=0.0,
[1,7]<stdout>:                                    DZ=0.0,
[1,7]<stdout>:                                    GROUP_MA='LEFT'),
[1,7]<stdout>:                       MODELE=model,
[1,7]<stdout>:                       SYNTAXE='NON')
[1,7]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt161
[1,3]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,3]<stdout>:                                    DY=0.0,
[1,3]<stdout>:                                    DZ=0.0,
[1,3]<stdout>:                                    GROUP_MA='LEFT'),
[1,3]<stdout>:                       MODELE=model,
[1,3]<stdout>:                       SYNTAXE='NON')
[1,3]<stdout>:
[1,14]<stdout>:# Commande #0006 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 161
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0006 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 161
[1,14]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,14]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,14]<stdout>:                                    DY=0.0,
[1,14]<stdout>:                                    DZ=0.0,
[1,14]<stdout>:                                    GROUP_MA='LEFT'),
[1,14]<stdout>:                       MODELE=model,
[1,14]<stdout>:                       SYNTAXE='NON')
[1,14]<stdout>:
[1,1]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,1]<stdout>:                                    DY=0.0,
[1,1]<stdout>:                                    DZ=0.0,
[1,1]<stdout>:                                    GROUP_MA='LEFT'),
[1,1]<stdout>:                       MODELE=model,
[1,1]<stdout>:                       SYNTAXE='NON')
[1,1]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt161
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt161
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0006 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:# Commande #0006 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 161
[1,19]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,19]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,19]<stdout>:                                    DY=0.0,
[1,19]<stdout>:                                    DZ=0.0,
[1,19]<stdout>:                                    GROUP_MA='LEFT'),
[1,19]<stdout>:                       MODELE=model,
[1,19]<stdout>:                       SYNTAXE='NON')
[1,19]<stdout>:
[1,4]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,4]<stdout>:                                    DY=0.0,
[1,4]<stdout>:                                    DZ=0.0,
[1,4]<stdout>:                                    GROUP_MA='LEFT'),
[1,4]<stdout>:                       MODELE=model,
[1,4]<stdout>:                       SYNTAXE='NON')
[1,4]<stdout>:
[1,0]<stdout>:# Résultat commande #0007 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,0]<stdout>:# Mémoire (Mo) :  4366.73 /  1229.66 /   443.01 /   397.56 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0007   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt161
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0008 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,0]<stdout>:                                    DY=0.0,
[1,0]<stdout>:                                    DZ=0.0,
[1,0]<stdout>:                                    GROUP_MA='LEFT'),
[1,0]<stdout>:                       MODELE=model,
[1,0]<stdout>:                       SYNTAXE='NON')
[1,0]<stdout>:
[1,5]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,5]<stdout>:# Mémoire (Mo) :  4701.38 /  1128.30 /   413.10 /   346.73 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0006   user+syst:        0.32s (syst:        0.01s, elaps:        0.34s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt173
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0007 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 173
[1,5]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,5]<stdout>:                                            DZ=0.001,
[1,5]<stdout>:                                            GROUP_MA='RIGHT'),
[1,5]<stdout>:                               MODELE=model,
[1,5]<stdout>:                               SYNTAXE='NON')
[1,5]<stdout>:
[1,23]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,23]<stdout>:# Mémoire (Mo) :  4903.86 /  1170.11 /   422.39 /   354.82 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0006   user+syst:        0.35s (syst:        0.01s, elaps:        0.35s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt173
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0007 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 173
[1,23]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,23]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,23]<stdout>:                                            DZ=0.001,
[1,23]<stdout>:                                            GROUP_MA='RIGHT'),
[1,23]<stdout>:                               MODELE=model,
[1,23]<stdout>:                               SYNTAXE='NON')
[1,23]<stdout>:
[1,12]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,12]<stdout>:# Mémoire (Mo) :  4651.87 /  1196.43 /   432.22 /   356.00 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0006   user+syst:        0.36s (syst:        0.00s, elaps:        0.36s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt173
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0007 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 173
[1,12]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,12]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,12]<stdout>:                                            DZ=0.001,
[1,12]<stdout>:                                            GROUP_MA='RIGHT'),
[1,12]<stdout>:                               MODELE=model,
[1,12]<stdout>:                               SYNTAXE='NON')
[1,12]<stdout>:
[1,9]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,9]<stdout>:# Mémoire (Mo) :  5067.60 /  1185.64 /   432.82 /   361.22 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,9]<stdout>:# Fin commande #0006   user+syst:        0.37s (syst:        0.00s, elaps:        0.37s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Mémoire (Mo) :  5416.51 /  1197.48 /   432.49 /   364.92 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0006   user+syst:        0.36s (syst:        0.00s, elaps:        0.37s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt173
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0007 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 173
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt173
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,9]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,9]<stdout>:                                            DZ=0.001,
[1,9]<stdout>:                                            GROUP_MA='RIGHT'),
[1,9]<stdout>:                               MODELE=model,
[1,9]<stdout>:                               SYNTAXE='NON')
[1,9]<stdout>:
[1,20]<stdout>:# Commande #0007 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 173
[1,20]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,20]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,20]<stdout>:                                            DZ=0.001,
[1,20]<stdout>:                                            GROUP_MA='RIGHT'),
[1,20]<stdout>:                               MODELE=model,
[1,20]<stdout>:                               SYNTAXE='NON')
[1,20]<stdout>:
[1,21]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,21]<stdout>:# Mémoire (Mo) :  5179.83 /  1192.60 /   433.83 /   364.23 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0006   user+syst:        0.37s (syst:        0.00s, elaps:        0.37s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt173
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Commande #0007 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 173
[1,21]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,21]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,21]<stdout>:                                            DZ=0.001,
[1,21]<stdout>:                                            GROUP_MA='RIGHT'),
[1,21]<stdout>:                               MODELE=model,
[1,21]<stdout>:                               SYNTAXE='NON')
[1,21]<stdout>:
[1,18]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,18]<stdout>:# Mémoire (Mo) :  5169.35 /  1187.29 /   435.01 /   363.23 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0006   user+syst:        0.37s (syst:        0.01s, elaps:        0.37s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt173
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0007 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 173
[1,18]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,18]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,18]<stdout>:                                            DZ=0.001,
[1,18]<stdout>:                                            GROUP_MA='RIGHT'),
[1,18]<stdout>:                               MODELE=model,
[1,18]<stdout>:                               SYNTAXE='NON')
[1,18]<stdout>:
[1,0]<stdout>:# Résultat commande #0008 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,0]<stdout>:# Mémoire (Mo) :  4366.73 /  1229.66 /   443.01 /   397.56 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0008   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,6]<stdout>:# Mémoire (Mo) :  4983.32 /  1206.22 /   439.27 /   362.72 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0006   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt173
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0009 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 173
[1,0]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,0]<stdout>:                                            DZ=0.001,
[1,0]<stdout>:                                            GROUP_MA='RIGHT'),
[1,0]<stdout>:                               MODELE=model,
[1,0]<stdout>:                               SYNTAXE='NON')
[1,0]<stdout>:
[1,15]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt173
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Mémoire (Mo) :  5063.20 /  1212.60 /   439.31 /   364.51 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Commande #0007 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 173
[1,15]<stdout>:# Fin commande #0006   user+syst:        0.37s (syst:        0.01s, elaps:        0.38s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,6]<stdout>:                                            DZ=0.001,
[1,6]<stdout>:                                            GROUP_MA='RIGHT'),
[1,6]<stdout>:                               MODELE=model,
[1,6]<stdout>:                               SYNTAXE='NON')
[1,6]<stdout>:
[1,16]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,16]<stdout>:# Mémoire (Mo) :  5128.61 /  1220.91 /   441.32 /   367.45 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0006   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt173
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Mémoire (Mo) :  5036.50 /  1217.61 /   441.23 /   366.56 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,10]<stdout>:# Fin commande #0006   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0007 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 173
[1,15]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,15]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,15]<stdout>:                                            DZ=0.001,
[1,15]<stdout>:                                            GROUP_MA='RIGHT'),
[1,15]<stdout>:                               MODELE=model,
[1,15]<stdout>:                               SYNTAXE='NON')
[1,15]<stdout>:
[1,17]<stdout>:# Mémoire (Mo) :  5579.84 /  1216.97 /   440.32 /   374.74 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0006   user+syst:        0.37s (syst:        0.00s, elaps:        0.38s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt173
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0007 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 173
[1,16]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,16]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,16]<stdout>:                                            DZ=0.001,
[1,16]<stdout>:                                            GROUP_MA='RIGHT'),
[1,16]<stdout>:                               MODELE=model,
[1,16]<stdout>:                               SYNTAXE='NON')
[1,16]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt173
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0007 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 173
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt173
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,10]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,10]<stdout>:                                            DZ=0.001,
[1,10]<stdout>:                                            GROUP_MA='RIGHT'),
[1,10]<stdout>:                               MODELE=model,
[1,10]<stdout>:                               SYNTAXE='NON')
[1,10]<stdout>:
[1,17]<stdout>:# Commande #0007 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 173
[1,17]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,17]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,17]<stdout>:                                            DZ=0.001,
[1,17]<stdout>:                                            GROUP_MA='RIGHT'),
[1,17]<stdout>:                               MODELE=model,
[1,17]<stdout>:                               SYNTAXE='NON')
[1,17]<stdout>:
[1,8]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,8]<stdout>:# Mémoire (Mo) :  5344.48 /  1210.52 /   442.34 /   371.47 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0006   user+syst:        0.38s (syst:        0.00s, elaps:        0.38s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt173
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0007 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 173
[1,8]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,8]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,8]<stdout>:                                            DZ=0.001,
[1,8]<stdout>:                                            GROUP_MA='RIGHT'),
[1,8]<stdout>:                               MODELE=model,
[1,8]<stdout>:                               SYNTAXE='NON')
[1,8]<stdout>:
[1,13]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,13]<stdout>:# Mémoire (Mo) :  5298.55 /  1205.09 /   443.95 /   371.06 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0006   user+syst:        0.39s (syst:        0.00s, elaps:        0.39s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt173
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Commande #0007 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 173
[1,13]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,13]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,13]<stdout>:                                            DZ=0.001,
[1,13]<stdout>:                                            GROUP_MA='RIGHT'),
[1,13]<stdout>:                               MODELE=model,
[1,13]<stdout>:                               SYNTAXE='NON')
[1,13]<stdout>:
[1,22]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,22]<stdout>:# Mémoire (Mo) :  5527.03 /  1219.21 /   447.48 /   375.32 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0006   user+syst:        0.39s (syst:        0.00s, elaps:        0.39s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt173
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,22]<stdout>:# Commande #0007 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 173
[1,11]<stdout>:# Mémoire (Mo) :  5588.05 /  1219.29 /   444.99 /   377.33 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,22]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,22]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,22]<stdout>:                                            DZ=0.001,
[1,22]<stdout>:                                            GROUP_MA='RIGHT'),
[1,22]<stdout>:                               MODELE=model,
[1,22]<stdout>:                               SYNTAXE='NON')
[1,22]<stdout>:
[1,11]<stdout>:# Fin commande #0006   user+syst:        0.38s (syst:        0.00s, elaps:        0.39s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  5317.02 /  1241.03 /   452.78 /   376.50 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0006   user+syst:        0.39s (syst:        0.00s, elaps:        0.39s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt173
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0007 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 173
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt173
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,11]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,11]<stdout>:                                            DZ=0.001,
[1,11]<stdout>:                                            GROUP_MA='RIGHT'),
[1,11]<stdout>:                               MODELE=model,
[1,11]<stdout>:                               SYNTAXE='NON')
[1,11]<stdout>:
[1,4]<stdout>:# Commande #0007 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 173
[1,4]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,4]<stdout>:                                            DZ=0.001,
[1,4]<stdout>:                                            GROUP_MA='RIGHT'),
[1,4]<stdout>:                               MODELE=model,
[1,4]<stdout>:                               SYNTAXE='NON')
[1,4]<stdout>:
[1,7]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,7]<stdout>:# Mémoire (Mo) :  5487.63 /  1194.67 /   452.49 /   377.86 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0006   user+syst:        0.38s (syst:        0.01s, elaps:        0.39s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt173
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0007 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 173
[1,7]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,7]<stdout>:                                            DZ=0.001,
[1,7]<stdout>:                                            GROUP_MA='RIGHT'),
[1,7]<stdout>:                               MODELE=model,
[1,7]<stdout>:                               SYNTAXE='NON')
[1,7]<stdout>:
[1,1]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,1]<stdout>:# Mémoire (Mo) :  5193.34 /  1232.76 /   453.29 /   375.02 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0006   user+syst:        0.39s (syst:        0.01s, elaps:        0.40s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt173
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0007 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 173
[1,1]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,1]<stdout>:                                            DZ=0.001,
[1,1]<stdout>:                                            GROUP_MA='RIGHT'),
[1,1]<stdout>:                               MODELE=model,
[1,1]<stdout>:                               SYNTAXE='NON')
[1,1]<stdout>:
[1,14]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,14]<stdout>:# Mémoire (Mo) :  5515.54 /  1229.08 /   454.28 /   381.32 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0006   user+syst:        0.40s (syst:        0.00s, elaps:        0.40s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt173
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0007 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 173
[1,14]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,14]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,14]<stdout>:                                            DZ=0.001,
[1,14]<stdout>:                                            GROUP_MA='RIGHT'),
[1,14]<stdout>:                               MODELE=model,
[1,14]<stdout>:                               SYNTAXE='NON')
[1,14]<stdout>:
[1,19]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,19]<stdout>:# Mémoire (Mo) :  5425.09 /  1222.70 /   457.59 /   382.11 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0006   user+syst:        0.39s (syst:        0.01s, elaps:        0.40s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt173
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0007 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 173
[1,19]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,19]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,19]<stdout>:                                            DZ=0.001,
[1,19]<stdout>:                                            GROUP_MA='RIGHT'),
[1,19]<stdout>:                               MODELE=model,
[1,19]<stdout>:                               SYNTAXE='NON')
[1,19]<stdout>:
[1,3]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,3]<stdout>:# Mémoire (Mo) :  5324.23 /  1256.48 /   466.09 /   385.81 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0006   user+syst:        0.42s (syst:        0.00s, elaps:        0.41s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt173
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0007 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 173
[1,3]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,3]<stdout>:                                            DZ=0.001,
[1,3]<stdout>:                                            GROUP_MA='RIGHT'),
[1,3]<stdout>:                               MODELE=model,
[1,3]<stdout>:                               SYNTAXE='NON')
[1,3]<stdout>:
[1,2]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,2]<stdout>:# Mémoire (Mo) :  5529.57 /  1243.54 /   468.51 /   390.83 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0006   user+syst:        0.41s (syst:        0.01s, elaps:        0.42s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt173
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0007 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 173
[1,2]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,2]<stdout>:                                            DZ=0.001,
[1,2]<stdout>:                                            GROUP_MA='RIGHT'),
[1,2]<stdout>:                               MODELE=model,
[1,2]<stdout>:                               SYNTAXE='NON')
[1,2]<stdout>:
[1,5]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,5]<stdout>:<MechanicalDirichletBC>
[1,5]<stdout>:# Mémoire (Mo) :  4701.38 /  1128.30 /   413.10 /   346.73 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0007   user+syst:        0.40s (syst:        0.02s, elaps:        0.41s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt185
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0008 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 185
[1,5]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,5]<stdout>:                            CHAM_MATER=mater,
[1,5]<stdout>:                            INST=0.0,
[1,5]<stdout>:                            MODELE=model,
[1,5]<stdout>:                            MODE_FOURIER=0,
[1,5]<stdout>:                            OPTION='RIGI_MECA')
[1,5]<stdout>:
[1,23]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,23]<stdout>:<MechanicalDirichletBC>
[1,23]<stdout>:# Mémoire (Mo) :  4903.86 /  1170.11 /   422.39 /   354.82 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0007   user+syst:        0.40s (syst:        0.00s, elaps:        0.41s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt185
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0008 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 185
[1,23]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,23]<stdout>:                            CHAM_MATER=mater,
[1,23]<stdout>:                            INST=0.0,
[1,23]<stdout>:                            MODELE=model,
[1,23]<stdout>:                            MODE_FOURIER=0,
[1,23]<stdout>:                            OPTION='RIGI_MECA')
[1,23]<stdout>:
[1,12]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,12]<stdout>:<MechanicalDirichletBC>
[1,12]<stdout>:# Mémoire (Mo) :  4651.87 /  1196.43 /   432.22 /   356.00 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.00s, elaps:        0.42s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,20]<stdout>:<MechanicalDirichletBC>
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt185
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Mémoire (Mo) :  5416.51 /  1197.48 /   432.49 /   364.92 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.00s, elaps:        0.41s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0008 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 185
[1,9]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,9]<stdout>:<MechanicalDirichletBC>
[1,12]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,12]<stdout>:                            CHAM_MATER=mater,
[1,12]<stdout>:                            INST=0.0,
[1,12]<stdout>:                            MODELE=model,
[1,12]<stdout>:                            MODE_FOURIER=0,
[1,12]<stdout>:                            OPTION='RIGI_MECA')
[1,12]<stdout>:
[1,9]<stdout>:# Mémoire (Mo) :  5067.60 /  1185.64 /   432.82 /   361.22 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.00s, elaps:        0.41s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt185
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Commande #0008 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 185
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt185
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,20]<stdout>:                            CHAM_MATER=mater,
[1,20]<stdout>:                            INST=0.0,
[1,20]<stdout>:                            MODELE=model,
[1,20]<stdout>:                            MODE_FOURIER=0,
[1,20]<stdout>:                            OPTION='RIGI_MECA')
[1,20]<stdout>:
[1,9]<stdout>:# Commande #0008 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 185
[1,9]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,9]<stdout>:                            CHAM_MATER=mater,
[1,9]<stdout>:                            INST=0.0,
[1,9]<stdout>:                            MODELE=model,
[1,9]<stdout>:                            MODE_FOURIER=0,
[1,9]<stdout>:                            OPTION='RIGI_MECA')
[1,9]<stdout>:
[1,21]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,21]<stdout>:<MechanicalDirichletBC>
[1,21]<stdout>:# Mémoire (Mo) :  5179.83 /  1192.60 /   433.83 /   364.23 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.00s, elaps:        0.41s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt185
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,18]<stdout>:<MechanicalDirichletBC>
[1,21]<stdout>:# Commande #0008 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 185
[1,18]<stdout>:# Mémoire (Mo) :  5169.35 /  1187.29 /   435.01 /   363.23 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.00s, elaps:        0.41s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,21]<stdout>:                            CHAM_MATER=mater,
[1,21]<stdout>:                            INST=0.0,
[1,21]<stdout>:                            MODELE=model,
[1,21]<stdout>:                            MODE_FOURIER=0,
[1,21]<stdout>:                            OPTION='RIGI_MECA')
[1,21]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt185
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0008 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 185
[1,18]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,18]<stdout>:                            CHAM_MATER=mater,
[1,18]<stdout>:                            INST=0.0,
[1,18]<stdout>:                            MODELE=model,
[1,18]<stdout>:                            MODE_FOURIER=0,
[1,18]<stdout>:                            OPTION='RIGI_MECA')
[1,18]<stdout>:
[1,0]<stdout>:# Résultat commande #0009 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,0]<stdout>:<MechanicalDirichletBC>
[1,0]<stdout>:# Mémoire (Mo) :  4366.73 /  1229.66 /   443.01 /   397.56 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0009   user+syst:        0.40s (syst:        0.01s, elaps:        0.41s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,6]<stdout>:<MechanicalDirichletBC>
[1,6]<stdout>:# Mémoire (Mo) :  4983.32 /  1206.22 /   439.27 /   362.72 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0007   user+syst:        0.40s (syst:        0.01s, elaps:        0.41s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,16]<stdout>:<MechanicalDirichletBC>
[1,16]<stdout>:# Mémoire (Mo) :  5128.61 /  1220.91 /   441.32 /   367.45 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0007   user+syst:        0.40s (syst:        0.00s, elaps:        0.41s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,10]<stdout>:<MechanicalDirichletBC>
[1,10]<stdout>:# Mémoire (Mo) :  5036.50 /  1217.61 /   441.23 /   366.56 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.00s, elaps:        0.41s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt185
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt185
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0010 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 185
[1,6]<stdout>:# Commande #0008 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 185
[1,0]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,0]<stdout>:                            CHAM_MATER=mater,
[1,0]<stdout>:                            INST=0.0,
[1,0]<stdout>:                            MODELE=model,
[1,0]<stdout>:                            MODE_FOURIER=0,
[1,0]<stdout>:                            OPTION='RIGI_MECA')
[1,0]<stdout>:
[1,15]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,15]<stdout>:<MechanicalDirichletBC>
[1,15]<stdout>:# Mémoire (Mo) :  5063.20 /  1212.60 /   439.31 /   364.51 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,6]<stdout>:                            CHAM_MATER=mater,
[1,6]<stdout>:                            INST=0.0,
[1,6]<stdout>:                            MODELE=model,
[1,6]<stdout>:                            MODE_FOURIER=0,
[1,6]<stdout>:                            OPTION='RIGI_MECA')
[1,6]<stdout>:
[1,15]<stdout>:# Fin commande #0007   user+syst:        0.40s (syst:        0.01s, elaps:        0.41s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt185
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0008 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 185
[1,16]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,16]<stdout>:                            CHAM_MATER=mater,
[1,16]<stdout>:                            INST=0.0,
[1,16]<stdout>:                            MODELE=model,
[1,16]<stdout>:                            MODE_FOURIER=0,
[1,16]<stdout>:                            OPTION='RIGI_MECA')
[1,16]<stdout>:
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt185
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0008 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 185
[1,10]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,10]<stdout>:                            CHAM_MATER=mater,
[1,10]<stdout>:                            INST=0.0,
[1,10]<stdout>:                            MODELE=model,
[1,10]<stdout>:                            MODE_FOURIER=0,
[1,10]<stdout>:                            OPTION='RIGI_MECA')
[1,10]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt185
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0008 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 185
[1,15]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,15]<stdout>:                            CHAM_MATER=mater,
[1,15]<stdout>:                            INST=0.0,
[1,15]<stdout>:                            MODELE=model,
[1,15]<stdout>:                            MODE_FOURIER=0,
[1,15]<stdout>:                            OPTION='RIGI_MECA')
[1,15]<stdout>:
[1,17]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,17]<stdout>:<MechanicalDirichletBC>
[1,17]<stdout>:# Mémoire (Mo) :  5579.84 /  1216.97 /   440.32 /   374.74 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.02s, elaps:        0.41s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,8]<stdout>:<MechanicalDirichletBC>
[1,8]<stdout>:# Mémoire (Mo) :  5344.48 /  1210.52 /   442.34 /   371.47 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.00s, elaps:        0.42s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt185
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Commande #0008 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 185
[1,17]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,17]<stdout>:                            CHAM_MATER=mater,
[1,17]<stdout>:                            INST=0.0,
[1,17]<stdout>:                            MODELE=model,
[1,17]<stdout>:                            MODE_FOURIER=0,
[1,17]<stdout>:                            OPTION='RIGI_MECA')
[1,17]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt185
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0008 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 185
[1,8]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,8]<stdout>:                            CHAM_MATER=mater,
[1,8]<stdout>:                            INST=0.0,
[1,8]<stdout>:                            MODELE=model,
[1,8]<stdout>:                            MODE_FOURIER=0,
[1,8]<stdout>:                            OPTION='RIGI_MECA')
[1,8]<stdout>:
[1,13]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,13]<stdout>:<MechanicalDirichletBC>
[1,13]<stdout>:# Mémoire (Mo) :  5298.55 /  1205.09 /   443.95 /   371.06 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.01s, elaps:        0.41s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,11]<stdout>:<MechanicalDirichletBC>
[1,11]<stdout>:# Mémoire (Mo) :  5588.05 /  1219.29 /   444.99 /   377.33 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.01s, elaps:        0.41s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt185
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,22]<stdout>:<MechanicalDirichletBC>
[1,13]<stdout>:# Commande #0008 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 185
[1,22]<stdout>:# Mémoire (Mo) :  5527.03 /  1219.21 /   447.48 /   375.32 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.00s, elaps:        0.41s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,13]<stdout>:                            CHAM_MATER=mater,
[1,13]<stdout>:                            INST=0.0,
[1,13]<stdout>:                            MODELE=model,
[1,13]<stdout>:                            MODE_FOURIER=0,
[1,13]<stdout>:                            OPTION='RIGI_MECA')
[1,13]<stdout>:
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt185
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0008 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 185
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt185
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,11]<stdout>:                            CHAM_MATER=mater,
[1,11]<stdout>:                            INST=0.0,
[1,11]<stdout>:                            MODELE=model,
[1,11]<stdout>:                            MODE_FOURIER=0,
[1,11]<stdout>:                            OPTION='RIGI_MECA')
[1,11]<stdout>:
[1,22]<stdout>:# Commande #0008 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 185
[1,22]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,22]<stdout>:                            CHAM_MATER=mater,
[1,22]<stdout>:                            INST=0.0,
[1,22]<stdout>:                            MODELE=model,
[1,22]<stdout>:                            MODE_FOURIER=0,
[1,22]<stdout>:                            OPTION='RIGI_MECA')
[1,22]<stdout>:
[1,4]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,4]<stdout>:<MechanicalDirichletBC>
[1,4]<stdout>:# Mémoire (Mo) :  5317.02 /  1241.03 /   452.78 /   376.50 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.00s, elaps:        0.42s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,1]<stdout>:<MechanicalDirichletBC>
[1,1]<stdout>:# Mémoire (Mo) :  5193.34 /  1232.76 /   453.29 /   375.02 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0007   user+syst:        0.39s (syst:        0.02s, elaps:        0.41s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,7]<stdout>:<MechanicalDirichletBC>
[1,7]<stdout>:# Mémoire (Mo) :  5487.63 /  1194.67 /   452.49 /   377.86 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.01s, elaps:        0.42s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt185
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0008 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 185
[1,4]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,4]<stdout>:                            CHAM_MATER=mater,
[1,4]<stdout>:                            INST=0.0,
[1,4]<stdout>:                            MODELE=model,
[1,4]<stdout>:                            MODE_FOURIER=0,
[1,4]<stdout>:                            OPTION='RIGI_MECA')
[1,4]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt185
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0008 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 185
[1,1]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,1]<stdout>:                            CHAM_MATER=mater,
[1,1]<stdout>:                            INST=0.0,
[1,1]<stdout>:                            MODELE=model,
[1,1]<stdout>:                            MODE_FOURIER=0,
[1,1]<stdout>:                            OPTION='RIGI_MECA')
[1,1]<stdout>:
[1,14]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,14]<stdout>:<MechanicalDirichletBC>
[1,14]<stdout>:# Mémoire (Mo) :  5515.54 /  1229.08 /   454.28 /   381.32 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.00s, elaps:        0.41s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt185
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0008 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 185
[1,7]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,7]<stdout>:                            CHAM_MATER=mater,
[1,7]<stdout>:                            INST=0.0,
[1,7]<stdout>:                            MODELE=model,
[1,7]<stdout>:                            MODE_FOURIER=0,
[1,7]<stdout>:                            OPTION='RIGI_MECA')
[1,7]<stdout>:
[1,19]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,19]<stdout>:<MechanicalDirichletBC>
[1,19]<stdout>:# Mémoire (Mo) :  5425.09 /  1222.70 /   457.59 /   382.11 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt185
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.00s, elaps:        0.41s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0008 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 185
[1,14]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,14]<stdout>:                            CHAM_MATER=mater,
[1,14]<stdout>:                            INST=0.0,
[1,14]<stdout>:                            MODELE=model,
[1,14]<stdout>:                            MODE_FOURIER=0,
[1,14]<stdout>:                            OPTION='RIGI_MECA')
[1,14]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt185
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0008 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 185
[1,19]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,19]<stdout>:                            CHAM_MATER=mater,
[1,19]<stdout>:                            INST=0.0,
[1,19]<stdout>:                            MODELE=model,
[1,19]<stdout>:                            MODE_FOURIER=0,
[1,19]<stdout>:                            OPTION='RIGI_MECA')
[1,19]<stdout>:
[1,3]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,3]<stdout>:<MechanicalDirichletBC>
[1,3]<stdout>:# Mémoire (Mo) :  5324.23 /  1256.48 /   466.09 /   385.81 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0007   user+syst:        0.41s (syst:        0.01s, elaps:        0.42s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt185
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0008 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 185
[1,3]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,3]<stdout>:                            CHAM_MATER=mater,
[1,3]<stdout>:                            INST=0.0,
[1,3]<stdout>:                            MODELE=model,
[1,3]<stdout>:                            MODE_FOURIER=0,
[1,3]<stdout>:                            OPTION='RIGI_MECA')
[1,3]<stdout>:
[1,2]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,2]<stdout>:<MechanicalDirichletBC>
[1,2]<stdout>:# Mémoire (Mo) :  5529.57 /  1243.54 /   468.51 /   390.83 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0007   user+syst:        0.40s (syst:        0.01s, elaps:        0.41s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt185
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0008 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 185
[1,2]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,2]<stdout>:                            CHAM_MATER=mater,
[1,2]<stdout>:                            INST=0.0,
[1,2]<stdout>:                            MODELE=model,
[1,2]<stdout>:                            MODE_FOURIER=0,
[1,2]<stdout>:                            OPTION='RIGI_MECA')
[1,2]<stdout>:
[1,5]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,5]<stdout>:<ElementaryMatrixDisplacementReal>
[1,5]<stdout>:# Mémoire (Mo) :  4701.38 /  2561.26 /  1815.90 /   346.73 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0008   user+syst:        5.66s (syst:        0.25s, elaps:        5.91s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt192
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0009 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 192
[1,5]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,5]<stdout>:                  MATR_RIGI=stiff_elem)
[1,5]<stdout>:
[1,23]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,23]<stdout>:<ElementaryMatrixDisplacementReal>
[1,23]<stdout>:# Mémoire (Mo) :  4903.86 /  2651.13 /  1891.83 /   354.82 (VmPeak / VmSize / Optimum / Minimum)
[1,23]<stdout>:# Fin commande #0008   user+syst:        5.95s (syst:        0.24s, elaps:        6.20s)
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:
[1,23]<stdout>:.. _stg1_txt192
[1,23]<stdout>:# ----------------------------------------------------------------------------------------------
[1,23]<stdout>:# Commande #0009 de
[1,23]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,23]<stdout>:Cube_perf.py, ligne 192
[1,23]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,23]<stdout>:                  MATR_RIGI=stiff_elem)
[1,23]<stdout>:
[1,12]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,12]<stdout>:<ElementaryMatrixDisplacementReal>
[1,12]<stdout>:# Mémoire (Mo) :  4651.87 /  2736.97 /  1970.49 /   356.00 (VmPeak / VmSize / Optimum / Minimum)
[1,12]<stdout>:# Fin commande #0008   user+syst:        6.30s (syst:        0.17s, elaps:        6.48s)
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:
[1,12]<stdout>:.. _stg1_txt192
[1,12]<stdout>:# ----------------------------------------------------------------------------------------------
[1,12]<stdout>:# Commande #0009 de
[1,12]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,12]<stdout>:Cube_perf.py, ligne 192
[1,12]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,12]<stdout>:                  MATR_RIGI=stiff_elem)
[1,12]<stdout>:
[1,20]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,20]<stdout>:<ElementaryMatrixDisplacementReal>
[1,20]<stdout>:# Mémoire (Mo) :  5416.51 /  2740.31 /  1971.71 /   364.92 (VmPeak / VmSize / Optimum / Minimum)
[1,20]<stdout>:# Fin commande #0008   user+syst:        6.18s (syst:        0.31s, elaps:        6.50s)
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:
[1,20]<stdout>:.. _stg1_txt192
[1,20]<stdout>:# ----------------------------------------------------------------------------------------------
[1,20]<stdout>:# Commande #0009 de
[1,20]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,20]<stdout>:Cube_perf.py, ligne 192
[1,20]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,20]<stdout>:                  MATR_RIGI=stiff_elem)
[1,20]<stdout>:
[1,9]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,9]<stdout>:<ElementaryMatrixDisplacementReal>
[1,9]<stdout>:# Mémoire (Mo) :  5067.60 /  2746.79 /  1980.68 /   361.22 (VmPeak / VmSize / Optimum / Minimum)
[1,9]<stdout>:# Fin commande #0008   user+syst:        6.21s (syst:        0.30s, elaps:        6.52s)
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:
[1,9]<stdout>:.. _stg1_txt192
[1,9]<stdout>:# ----------------------------------------------------------------------------------------------
[1,9]<stdout>:# Commande #0009 de
[1,9]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,9]<stdout>:Cube_perf.py, ligne 192
[1,9]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,9]<stdout>:                  MATR_RIGI=stiff_elem)
[1,9]<stdout>:
[1,21]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,21]<stdout>:<ElementaryMatrixDisplacementReal>
[1,21]<stdout>:# Mémoire (Mo) :  5179.83 /  2759.48 /  1991.87 /   364.23 (VmPeak / VmSize / Optimum / Minimum)
[1,21]<stdout>:# Fin commande #0008   user+syst:        6.29s (syst:        0.26s, elaps:        6.55s)
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:
[1,21]<stdout>:.. _stg1_txt192
[1,21]<stdout>:# ----------------------------------------------------------------------------------------------
[1,21]<stdout>:# Commande #0009 de
[1,21]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,21]<stdout>:Cube_perf.py, ligne 192
[1,21]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,21]<stdout>:                  MATR_RIGI=stiff_elem)
[1,21]<stdout>:
[1,18]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,18]<stdout>:<ElementaryMatrixDisplacementReal>
[1,18]<stdout>:# Mémoire (Mo) :  5169.35 /  2768.29 /  1999.76 /   363.23 (VmPeak / VmSize / Optimum / Minimum)
[1,18]<stdout>:# Fin commande #0008   user+syst:        6.27s (syst:        0.33s, elaps:        6.61s)
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:
[1,18]<stdout>:.. _stg1_txt192
[1,18]<stdout>:# ----------------------------------------------------------------------------------------------
[1,18]<stdout>:# Commande #0009 de
[1,18]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,18]<stdout>:Cube_perf.py, ligne 192
[1,18]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,18]<stdout>:                  MATR_RIGI=stiff_elem)
[1,18]<stdout>:
[1,0]<stdout>:# Résultat commande #0010 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,0]<stdout>:<ElementaryMatrixDisplacementReal>
[1,0]<stdout>:# Mémoire (Mo) :  4366.73 /  2806.82 /  2025.10 /   397.56 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0010   user+syst:        6.35s (syst:        0.33s, elaps:        6.68s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt192
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0011 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 192
[1,0]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,0]<stdout>:                  MATR_RIGI=stiff_elem)
[1,0]<stdout>:
[1,15]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,15]<stdout>:<ElementaryMatrixDisplacementReal>
[1,15]<stdout>:# Mémoire (Mo) :  5063.20 /  2808.08 /  2033.83 /   364.51 (VmPeak / VmSize / Optimum / Minimum)
[1,15]<stdout>:# Fin commande #0008   user+syst:        6.42s (syst:        0.28s, elaps:        6.70s)
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:
[1,15]<stdout>:.. _stg1_txt192
[1,15]<stdout>:# ----------------------------------------------------------------------------------------------
[1,15]<stdout>:# Commande #0009 de
[1,15]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,15]<stdout>:Cube_perf.py, ligne 192
[1,15]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,15]<stdout>:                  MATR_RIGI=stiff_elem)
[1,15]<stdout>:
[1,6]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,6]<stdout>:<ElementaryMatrixDisplacementReal>
[1,6]<stdout>:# Mémoire (Mo) :  4983.32 /  2808.57 /  2033.28 /   362.72 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0008   user+syst:        6.39s (syst:        0.32s, elaps:        6.70s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt192
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0009 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 192
[1,6]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,6]<stdout>:                  MATR_RIGI=stiff_elem)
[1,6]<stdout>:
[1,16]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,16]<stdout>:<ElementaryMatrixDisplacementReal>
[1,16]<stdout>:# Mémoire (Mo) :  5128.61 /  2815.64 /  2039.46 /   367.45 (VmPeak / VmSize / Optimum / Minimum)
[1,16]<stdout>:# Fin commande #0008   user+syst:        6.51s (syst:        0.21s, elaps:        6.73s)
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:
[1,16]<stdout>:.. _stg1_txt192
[1,16]<stdout>:# ----------------------------------------------------------------------------------------------
[1,16]<stdout>:# Commande #0009 de
[1,16]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,16]<stdout>:Cube_perf.py, ligne 192
[1,16]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,16]<stdout>:                  MATR_RIGI=stiff_elem)
[1,16]<stdout>:
[1,17]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,17]<stdout>:<ElementaryMatrixDisplacementReal>
[1,17]<stdout>:# Mémoire (Mo) :  5579.84 /  2821.60 /  2046.85 /   374.74 (VmPeak / VmSize / Optimum / Minimum)
[1,17]<stdout>:# Fin commande #0008   user+syst:        6.45s (syst:        0.30s, elaps:        6.75s)
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:
[1,17]<stdout>:.. _stg1_txt192
[1,17]<stdout>:# ----------------------------------------------------------------------------------------------
[1,17]<stdout>:# Commande #0009 de
[1,17]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,17]<stdout>:Cube_perf.py, ligne 192
[1,17]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,17]<stdout>:                  MATR_RIGI=stiff_elem)
[1,17]<stdout>:
[1,10]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,10]<stdout>:<ElementaryMatrixDisplacementReal>
[1,10]<stdout>:# Mémoire (Mo) :  5036.50 /  2816.89 /  2041.87 /   366.56 (VmPeak / VmSize / Optimum / Minimum)
[1,10]<stdout>:# Fin commande #0008   user+syst:        6.49s (syst:        0.27s, elaps:        6.76s)
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:
[1,10]<stdout>:.. _stg1_txt192
[1,10]<stdout>:# ----------------------------------------------------------------------------------------------
[1,10]<stdout>:# Commande #0009 de
[1,10]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,10]<stdout>:Cube_perf.py, ligne 192
[1,10]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,10]<stdout>:                  MATR_RIGI=stiff_elem)
[1,10]<stdout>:
[1,8]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,8]<stdout>:<ElementaryMatrixDisplacementReal>
[1,8]<stdout>:# Mémoire (Mo) :  5344.48 /  2835.75 /  2062.09 /   371.47 (VmPeak / VmSize / Optimum / Minimum)
[1,8]<stdout>:# Fin commande #0008   user+syst:        6.48s (syst:        0.32s, elaps:        6.79s)
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:
[1,8]<stdout>:.. _stg1_txt192
[1,8]<stdout>:# ----------------------------------------------------------------------------------------------
[1,8]<stdout>:# Commande #0009 de
[1,8]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,8]<stdout>:Cube_perf.py, ligne 192
[1,8]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,8]<stdout>:                  MATR_RIGI=stiff_elem)
[1,8]<stdout>:
[1,13]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,13]<stdout>:<ElementaryMatrixDisplacementReal>
[1,13]<stdout>:# Mémoire (Mo) :  5298.55 /  2850.58 /  2073.74 /   371.06 (VmPeak / VmSize / Optimum / Minimum)
[1,13]<stdout>:# Fin commande #0008   user+syst:        6.62s (syst:        0.23s, elaps:        6.85s)
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:
[1,13]<stdout>:.. _stg1_txt192
[1,13]<stdout>:# ----------------------------------------------------------------------------------------------
[1,13]<stdout>:# Commande #0009 de
[1,13]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,13]<stdout>:Cube_perf.py, ligne 192
[1,13]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,13]<stdout>:                  MATR_RIGI=stiff_elem)
[1,13]<stdout>:
[1,11]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,11]<stdout>:<ElementaryMatrixDisplacementReal>
[1,11]<stdout>:# Mémoire (Mo) :  5588.05 /  2865.12 /  2084.81 /   377.33 (VmPeak / VmSize / Optimum / Minimum)
[1,11]<stdout>:# Fin commande #0008   user+syst:        6.65s (syst:        0.28s, elaps:        6.92s)
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:
[1,11]<stdout>:.. _stg1_txt192
[1,11]<stdout>:# ----------------------------------------------------------------------------------------------
[1,11]<stdout>:# Commande #0009 de
[1,11]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,11]<stdout>:Cube_perf.py, ligne 192
[1,11]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,11]<stdout>:                  MATR_RIGI=stiff_elem)
[1,11]<stdout>:
[1,22]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,22]<stdout>:<ElementaryMatrixDisplacementReal>
[1,22]<stdout>:# Mémoire (Mo) :  5527.03 /  2887.18 /  2105.67 /   375.32 (VmPeak / VmSize / Optimum / Minimum)
[1,22]<stdout>:# Fin commande #0008   user+syst:        6.73s (syst:        0.24s, elaps:        6.99s)
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:
[1,22]<stdout>:.. _stg1_txt192
[1,22]<stdout>:# ----------------------------------------------------------------------------------------------
[1,22]<stdout>:# Commande #0009 de
[1,22]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,22]<stdout>:Cube_perf.py, ligne 192
[1,22]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,22]<stdout>:                  MATR_RIGI=stiff_elem)
[1,22]<stdout>:
[1,7]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,7]<stdout>:<ElementaryMatrixDisplacementReal>
[1,7]<stdout>:# Mémoire (Mo) :  5487.63 /  2897.73 /  2119.83 /   377.86 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0008   user+syst:        6.68s (syst:        0.32s, elaps:        7.01s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt192
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0009 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 192
[1,7]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,7]<stdout>:                  MATR_RIGI=stiff_elem)
[1,7]<stdout>:
[1,4]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,4]<stdout>:<ElementaryMatrixDisplacementReal>
[1,4]<stdout>:# Mémoire (Mo) :  5317.02 /  2916.46 /  2131.78 /   376.50 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0008   user+syst:        6.79s (syst:        0.28s, elaps:        7.06s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt192
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0009 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 192
[1,4]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,4]<stdout>:                  MATR_RIGI=stiff_elem)
[1,4]<stdout>:
[1,14]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,14]<stdout>:<ElementaryMatrixDisplacementReal>
[1,14]<stdout>:# Mémoire (Mo) :  5515.54 /  2922.98 /  2143.25 /   381.32 (VmPeak / VmSize / Optimum / Minimum)
[1,14]<stdout>:# Fin commande #0008   user+syst:        6.80s (syst:        0.31s, elaps:        7.11s)
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:
[1,14]<stdout>:.. _stg1_txt192
[1,14]<stdout>:# ----------------------------------------------------------------------------------------------
[1,14]<stdout>:# Commande #0009 de
[1,14]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,14]<stdout>:Cube_perf.py, ligne 192
[1,14]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,14]<stdout>:                  MATR_RIGI=stiff_elem)
[1,14]<stdout>:
[1,1]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,1]<stdout>:<ElementaryMatrixDisplacementReal>
[1,1]<stdout>:# Mémoire (Mo) :  5193.34 /  2922.09 /  2137.38 /   375.02 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0008   user+syst:        6.81s (syst:        0.31s, elaps:        7.11s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt192
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0009 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 192
[1,1]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,1]<stdout>:                  MATR_RIGI=stiff_elem)
[1,1]<stdout>:
[1,19]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,19]<stdout>:<ElementaryMatrixDisplacementReal>
[1,19]<stdout>:# Mémoire (Mo) :  5425.09 /  2937.00 /  2150.53 /   382.11 (VmPeak / VmSize / Optimum / Minimum)
[1,19]<stdout>:# Fin commande #0008   user+syst:        6.86s (syst:        0.28s, elaps:        7.14s)
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:
[1,19]<stdout>:.. _stg1_txt192
[1,19]<stdout>:# ----------------------------------------------------------------------------------------------
[1,19]<stdout>:# Commande #0009 de
[1,19]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,19]<stdout>:Cube_perf.py, ligne 192
[1,19]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,19]<stdout>:                  MATR_RIGI=stiff_elem)
[1,19]<stdout>:
[1,3]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,3]<stdout>:<ElementaryMatrixDisplacementReal>
[1,3]<stdout>:# Mémoire (Mo) :  5324.23 /  3020.68 /  2225.40 /   385.81 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0008   user+syst:        7.08s (syst:        0.29s, elaps:        7.37s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt192
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0009 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 192
[1,3]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,3]<stdout>:                  MATR_RIGI=stiff_elem)
[1,3]<stdout>:
[1,2]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,2]<stdout>:<ElementaryMatrixDisplacementReal>
[1,2]<stdout>:# Mémoire (Mo) :  5529.57 /  3042.75 /  2249.17 /   390.83 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0008   user+syst:        7.17s (syst:        0.32s, elaps:        7.50s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt192
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0009 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 192
[1,2]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,2]<stdout>:                  MATR_RIGI=stiff_elem)
[1,2]<stdout>:
[1,11]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,11]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,11]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,11]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,11]<stdout>:     aux 0 relations linéaires dualisées.
[1,7]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,7]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,7]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,7]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,7]<stdout>:     aux 0 relations linéaires dualisées.
[1,14]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,14]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,14]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,14]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,14]<stdout>:     aux 0 relations linéaires dualisées.
[1,0]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,0]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,0]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,0]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,0]<stdout>:     aux 0 relations linéaires dualisées.
[1,5]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,5]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,5]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,5]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,5]<stdout>:     aux 0 relations linéaires dualisées.
[1,10]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,10]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,10]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,10]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,10]<stdout>:     aux 0 relations linéaires dualisées.
[1,23]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,23]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,23]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,23]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,23]<stdout>:     aux 0 relations linéaires dualisées.
[1,18]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,18]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,18]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,18]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,18]<stdout>:     aux 0 relations linéaires dualisées.
[1,17]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,17]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,17]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,17]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,17]<stdout>:     aux 0 relations linéaires dualisées.
[1,21]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,21]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,21]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,21]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,21]<stdout>:     aux 0 relations linéaires dualisées.
[1,15]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,15]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,15]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,15]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,15]<stdout>:     aux 0 relations linéaires dualisées.
[1,22]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,22]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,22]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,22]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,22]<stdout>:     aux 0 relations linéaires dualisées.
[1,13]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,13]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,13]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,13]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,13]<stdout>:     aux 0 relations linéaires dualisées.
[1,20]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,20]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,20]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,20]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,20]<stdout>:     aux 0 relations linéaires dualisées.
[1,4]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,4]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,4]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,4]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,4]<stdout>:     aux 0 relations linéaires dualisées.
[1,19]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,19]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,19]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,19]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,19]<stdout>:     aux 0 relations linéaires dualisées.
[1,8]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,8]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,8]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,8]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,8]<stdout>:     aux 0 relations linéaires dualisées.
[1,9]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,9]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,9]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,9]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,9]<stdout>:     aux 0 relations linéaires dualisées.
[1,3]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,3]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,3]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,3]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,3]<stdout>:     aux 0 relations linéaires dualisées.
[1,6]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,6]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,6]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,6]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,6]<stdout>:     aux 0 relations linéaires dualisées.
[1,12]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,12]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,12]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,12]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,12]<stdout>:     aux 0 relations linéaires dualisées.
[1,2]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,2]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,2]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,2]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,2]<stdout>:     aux 0 relations linéaires dualisées.
[1,16]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,16]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,16]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,16]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,16]<stdout>:     aux 0 relations linéaires dualisées.
[1,1]<stdout>:Le système linéaire à résoudre a 50923779 degrés de liberté:
[1,1]<stdout>:   - 50923779 sont des degrés de liberté physiques
[1,1]<stdout>:     (ils sont portés par 16974593 noeuds du maillage)
[1,1]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,1]<stdout>:     aux 0 relations linéaires dualisées.
[1,22]<stdout>:La matrice est de taille 2303976 équations.
[1,22]<stdout>:  Elle contient 92192604 termes non nuls si elle est symétrique et 182081232 termes non nuls si elle
[1,22]<stdout>:n'est pas symétrique.
[1,22]<stdout>:  Soit un taux de remplissage de   0.003 %.
[1,11]<stdout>:La matrice est de taille 2292042 équations.
[1,11]<stdout>:  Elle contient 91340511 termes non nuls si elle est symétrique et 180388980 termes non nuls si elle
[1,11]<stdout>:n'est pas symétrique.
[1,11]<stdout>:  Soit un taux de remplissage de   0.003 %.
[1,4]<stdout>:La matrice est de taille 2330268 équations.
[1,4]<stdout>:  Elle contient 93301248 termes non nuls si elle est symétrique et 184272228 termes non nuls si elle
[1,4]<stdout>:n'est pas symétrique.
[1,4]<stdout>:  Soit un taux de remplissage de   0.003 %.
[1,10]<stdout>:
[1,10]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,10]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,10]<stdout>: ║                                                                                                ║
[1,10]<stdout>: ║ Erreur écriture de l'enregistrement 577 sur la base : GLOBALE 0                                ║
[1,10]<stdout>: ║      code retour : -4                                                                          ║
[1,10]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,10]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,10]<stdout>:
[1,20]<stdout>:
[1,20]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,20]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,20]<stdout>: ║                                                                                                ║
[1,20]<stdout>: ║ Erreur écriture de l'enregistrement 831 sur la base : GLOBALE 0                                ║
[1,20]<stdout>: ║      code retour : -4                                                                          ║
[1,20]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,20]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,20]<stdout>:
[1,13]<stdout>:
[1,13]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,13]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,13]<stdout>: ║                                                                                                ║
[1,13]<stdout>: ║ Erreur écriture de l'enregistrement 1 sur la base : GLOBALE 0                                  ║
[1,13]<stdout>: ║      code retour : -4                                                                          ║
[1,13]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,13]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,13]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,3]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║ Erreur écriture de l'enregistrement 1179 sur la base : GLOBALE 0                               ║
[1,3]<stdout>: ║      code retour : -4                                                                          ║
[1,3]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,3]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,3]<stdout>:
[1,18]<stdout>:
[1,18]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,18]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,18]<stdout>: ║                                                                                                ║
[1,18]<stdout>: ║ Erreur écriture de l'enregistrement 108 sur la base : GLOBALE 0                                ║
[1,18]<stdout>: ║      code retour : -4                                                                          ║
[1,18]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,18]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,18]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,1]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║ Erreur écriture de l'enregistrement 830 sur la base : GLOBALE 0                                ║
[1,1]<stdout>: ║      code retour : -4                                                                          ║
[1,1]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,1]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,1]<stdout>:
[1,17]<stdout>:
[1,17]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,17]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,17]<stdout>: ║                                                                                                ║
[1,17]<stdout>: ║ Erreur écriture de l'enregistrement 108 sur la base : GLOBALE 0                                ║
[1,17]<stdout>: ║      code retour : -4                                                                          ║
[1,17]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,17]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,17]<stdout>:
[1,12]<stdout>:
[1,12]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,12]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,12]<stdout>: ║                                                                                                ║
[1,12]<stdout>: ║ Erreur écriture de l'enregistrement 1 sur la base : GLOBALE 0                                  ║
[1,12]<stdout>: ║      code retour : -4                                                                          ║
[1,12]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,12]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,12]<stdout>:
[1,21]<stdout>:
[1,21]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,21]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,21]<stdout>: ║                                                                                                ║
[1,21]<stdout>: ║ Erreur écriture de l'enregistrement 108 sur la base : GLOBALE 0                                ║
[1,21]<stdout>: ║      code retour : -4                                                                          ║
[1,21]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,21]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,21]<stdout>:
[1,15]<stdout>:
[1,15]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,15]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,15]<stdout>: ║                                                                                                ║
[1,15]<stdout>: ║ Erreur écriture de l'enregistrement 108 sur la base : GLOBALE 0                                ║
[1,15]<stdout>: ║      code retour : -4                                                                          ║
[1,15]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,15]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,15]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,5]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║ Erreur écriture de l'enregistrement 1 sur la base : GLOBALE 0                                  ║
[1,5]<stdout>: ║      code retour : -4                                                                          ║
[1,5]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,5]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,5]<stdout>:
[1,8]<stdout>:
[1,8]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,8]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,8]<stdout>: ║                                                                                                ║
[1,8]<stdout>: ║ Erreur écriture de l'enregistrement 108 sur la base : GLOBALE 0                                ║
[1,8]<stdout>: ║      code retour : -4                                                                          ║
[1,8]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,8]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,8]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,0]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║ Erreur écriture de l'enregistrement 1054 sur la base : GLOBALE 0                               ║
[1,0]<stdout>: ║      code retour : -4                                                                          ║
[1,0]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,0]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,0]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,6]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║ Erreur écriture de l'enregistrement 108 sur la base : GLOBALE 0                                ║
[1,6]<stdout>: ║      code retour : -4                                                                          ║
[1,6]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,6]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,6]<stdout>:
[1,9]<stdout>:
[1,9]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,9]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,9]<stdout>: ║                                                                                                ║
[1,9]<stdout>: ║ Erreur écriture de l'enregistrement 108 sur la base : GLOBALE 0                                ║
[1,9]<stdout>: ║      code retour : -4                                                                          ║
[1,9]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,9]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,9]<stdout>:
[1,23]<stdout>:
[1,23]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,23]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,23]<stdout>: ║                                                                                                ║
[1,23]<stdout>: ║ Erreur écriture de l'enregistrement 1 sur la base : GLOBALE 0                                  ║
[1,23]<stdout>: ║      code retour : -4                                                                          ║
[1,23]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,23]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,23]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,2]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║ Erreur écriture de l'enregistrement 811 sur la base : GLOBALE 0                                ║
[1,2]<stdout>: ║      code retour : -4                                                                          ║
[1,2]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,2]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,2]<stdout>:
[1,14]<stdout>:
[1,14]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,14]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,14]<stdout>: ║                                                                                                ║
[1,14]<stdout>: ║ Erreur écriture de l'enregistrement 831 sur la base : GLOBALE 0                                ║
[1,14]<stdout>: ║      code retour : -4                                                                          ║
[1,14]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,14]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,14]<stdout>:
[1,16]<stdout>:
[1,16]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,16]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,16]<stdout>: ║                                                                                                ║
[1,16]<stdout>: ║ Erreur écriture de l'enregistrement 108 sur la base : GLOBALE 0                                ║
[1,16]<stdout>: ║      code retour : -4                                                                          ║
[1,16]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,16]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,16]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,7]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║ Erreur écriture de l'enregistrement 1012 sur la base : GLOBALE 0                               ║
[1,7]<stdout>: ║      code retour : -4                                                                          ║
[1,7]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,7]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,7]<stdout>:
[1,19]<stdout>:
[1,19]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,19]<stdout>: ║ <EXCEPTION> <JEVEUX_40>                                                                        ║
[1,19]<stdout>: ║                                                                                                ║
[1,19]<stdout>: ║ Erreur écriture de l'enregistrement 1256 sur la base : GLOBALE 0                               ║
[1,19]<stdout>: ║      code retour : -4                                                                          ║
[1,19]<stdout>: ║      Erreur probablement provoquée par une taille trop faible du répertoire de travail.        ║
[1,19]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,19]<stdout>:
[1,1]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,3]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,10]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,20]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #1 a émis un message d'erreur.
[1,0]<stdout>:Le processeur #3 a émis un message d'erreur.
[1,0]<stdout>:Le processeur #10 a émis un message d'erreur.
[1,0]<stdout>:Le processeur #20 a émis un message d'erreur.
[1,2]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #2 a émis un message d'erreur.
[1,13]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #13 a émis un message d'erreur.
[1,14]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #14 a émis un message d'erreur.
[1,18]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #18 a émis un message d'erreur.
[1,7]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #7 a émis un message d'erreur.
[1,17]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #17 a émis un message d'erreur.
[1,19]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #19 a émis un message d'erreur.
[1,5]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #5 a émis un message d'erreur.
[1,15]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #15 a émis un message d'erreur.
[1,12]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #12 a émis un message d'erreur.
[1,21]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #21 a émis un message d'erreur.
[1,8]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #8 a émis un message d'erreur.
[1,23]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #23 a émis un message d'erreur.
[1,6]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #6 a émis un message d'erreur.
[1,9]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #9 a émis un message d'erreur.
[1,16]<stdout>:On signale au processeur #0 qu'une exception a été levée.
[1,0]<stdout>:Le processeur #16 a émis un message d'erreur.
