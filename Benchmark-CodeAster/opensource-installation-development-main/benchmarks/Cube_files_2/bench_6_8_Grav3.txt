WARNING: If MPI_Abort is called during execution, result files could not be copied.
Running: mpiexec -n 8 --tag-output /opt/aster/install/mpi/bin/run_aster -n 8 --wrkdir /tmp/run_aster_jlaezu5o --status-file /home/aster/.tmp_run_aster/run_aster_bgqmey2v/__status__ --no-mpi /home/aster/.tmp_run_aster/run_aster_bgqmey2v/Cube_perf.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution of code_aster
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Prepare environment in /tmp/run_aster_jlaezu5o/proc.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command file #1 / 1
[1,0]<stdout>:
[1,0]<stdout>:Content of the file to execute:
[1,0]<stdout>:# coding=utf-8
[1,0]<stdout>:#!/usr/bin/python
[1,0]<stdout>:
[1,0]<stdout>:import os
[1,0]<stdout>:from statistics import mean
[1,0]<stdout>:from datetime import datetime
[1,0]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,0]<stdout>:
[1,0]<stdout>:from code_aster.Commands import *
[1,0]<stdout>:from code_aster import CA
[1,0]<stdout>:from code_aster.Utilities import petscInitialize
[1,0]<stdout>:
[1,0]<stdout>:CA.init()
[1,0]<stdout>:
[1,0]<stdout>:params = {}
[1,0]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,0]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,0]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,0]<stdout>:
[1,0]<stdout>:# General parameters
[1,0]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,0]<stdout>:rank = comm.Get_rank()
[1,0]<stdout>:size = comm.Get_size()
[1,0]<stdout>:
[1,0]<stdout>:nbHexa = 8 ** params["refinements"]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def memory_peak(mess=None):
[1,0]<stdout>:    """Return memory peak in MB"""
[1,0]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMgGen:
[1,0]<stdout>:    stats = {}
[1,0]<stdout>:
[1,0]<stdout>:    def __init__(self, what):
[1,0]<stdout>:        self._what = what
[1,0]<stdout>:
[1,0]<stdout>:    def __enter__(self):
[1,0]<stdout>:        self.start = datetime.now()
[1,0]<stdout>:
[1,0]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,0]<stdout>:        self.stop = datetime.now()
[1,0]<stdout>:        delta = self.stop - self.start
[1,0]<stdout>:        mem = memory_peak(self._what)
[1,0]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,0]<stdout>:    pass
[1,0]<stdout>:    # def __init__(self, what):
[1,0]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def write_stats(nume_ddl):
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB PROC")
[1,0]<stdout>:        print(size)
[1,0]<stdout>:        print()
[1,0]<stdout>:        print(
[1,0]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    for key, values in stats.items():
[1,0]<stdout>:        time = comm.gather(values[0], root=0)
[1,0]<stdout>:        mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(
[1,0]<stdout>:                key
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(mem))
[1,0]<stdout>:            )
[1,0]<stdout>:
[1,0]<stdout>:    mesh = nume_ddl.getMesh()
[1,0]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,0]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,0]<stdout>:
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,0]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,0]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,0]<stdout>:
[1,0]<stdout>:    def show(*args, **kwargs):
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(*args, **kwargs)
[1,0]<stdout>:
[1,0]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,0]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,0]<stdout>:    separ = "| :--------------- | ----------: |"
[1,0]<stdout>:    show(fmti.format("Refinement", refine))
[1,0]<stdout>:    show(separ)
[1,0]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,0]<stdout>:    for key, values in data.items():
[1,0]<stdout>:        times = comm.gather(values[0], root=0)
[1,0]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            show(fmtt.format(key, mean(times)))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,0]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,0]<stdout>:
[1,0]<stdout>:with ChronoCtxMg("Total"):
[1,0]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,0]<stdout>:        if params["parallel"] == "HPC":
[1,0]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:        else:
[1,0]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Model"):
[1,0]<stdout>:        model = AFFE_MODELE(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                PHENOMENE="MECANIQUE",
[1,0]<stdout>:                MODELISATION="3D",
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Material"):
[1,0]<stdout>:        steel = DEFI_MATERIAU(
[1,0]<stdout>:            ELAS=_F(
[1,0]<stdout>:                E=200000.0,
[1,0]<stdout>:                NU=0.3,
[1,0]<stdout>:            ),
[1,0]<stdout>:            ECRO_LINE=_F(
[1,0]<stdout>:    [1,0]<stdout>:            D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                SY=200.0,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        mater = AFFE_MATERIAU(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                MATER=steel,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,0]<stdout>:        block = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="LEFT",
[1,0]<stdout>:                    DX=0,
[1,0]<stdout>:                    DY=0.0,
[1,0]<stdout>:                    DZ=0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="RIGHT",
[1,0]<stdout>:                    DY=0.001,
[1,0]<stdout>:                    DZ=0.001,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,0]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            OPTION="RIGI_MECA",
[1,0]<stdout>:            CHAM_MATER=mater,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Numbering"):
[1,0]<stdout>:        dofNum = NUME_DDL(
[1,0]<stdout>:            MATR_RIGI=stiff_elem,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Assembly"):
[1,0]<stdout>:        stiffness = ASSE_MATRICE(
[1,0]<stdout>:            MATR_ELEM=stiff_elem,
[1,0]<stdout>:            NUME_DDL=dofNum,
[1,0]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,0]<stdout>:        rhs = CREA_CHAMP(
[1,0]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,0]<stdout>:            OPERATION="AFFE",
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                NOM_CMP=(
[1,0]<stdout>:                    "DX",
[1,0]<stdout>:                    "DY",
[1,0]<stdout>:                    "DZ",
[1,0]<stdout>:                ),
[1,0]<stdout>:                VALE=(
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,0]<stdout>:
[1,0]<stdout>:    if params["solver"] == "PETSC":
[1,0]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,0]<stdout>:    elif params["solver"] == "MUMPS":
[1,0]<stdout>:        solver = CA.MumpsSolver(
[1,0]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,0]<stdout>:            RENUM="PARMETIS",
[1,0]<stdout>:            ACCELERATION="FR+",
[1,0]<stdout>:            POSTTRAITEMENTS="MINI",
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Factorize"):
[1,0]<stdout>:        solver.factorize(stiffness)
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Solve"):
[1,0]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,0]<stdout>:
[1,0]<stdout>:# write_stats(dofNum)
[1,0]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,0]<stdout>:if params["parallel"] == "HPC":
[1,0]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,0]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,0]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,0]<stdout>:
[1,0]<stdout>:CA.close()
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command line #1:
[1,0]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution of code_aster
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Prepare environment in /tmp/run_aster_jlaezu5o/proc.1
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command file #1 / 1
[1,1]<stdout>:
[1,1]<stdout>:Content of the file to execute:
[1,1]<stdout>:# coding=utf-8
[1,1]<stdout>:#!/usr/bin/python
[1,1]<stdout>:
[1,1]<stdout>:import os
[1,1]<stdout>:from statistics import mean
[1,1]<stdout>:from datetime import datetime
[1,1]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,1]<stdout>:
[1,1]<stdout>:from code_aster.Commands import *
[1,1]<stdout>:from code_aster import CA
[1,1]<stdout>:from code_aster.Utilities import petscInitialize
[1,1]<stdout>:
[1,1]<stdout>:CA.init()
[1,1]<stdout>:
[1,1]<stdout>:params = {}
[1,1]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,1]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,1]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,1]<stdout>:
[1,1]<stdout>:# General parameters
[1,1]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,1]<stdout>:rank = comm.Get_rank()
[1,1]<stdout>:size = comm.Get_size()
[1,1]<stdout>:
[1,1]<stdout>:nbHexa = 8 ** params["refinements"]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def memory_peak(mess=None):
[1,1]<stdout>:    """Return memory peak in MB"""
[1,1]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMgGen:
[1,1]<stdout>:    stats = {}
[1,1]<stdout>:
[1,1]<stdout>:    def __init__(self, what):
[1,1]<stdout>:        self._what = what
[1,1]<stdout>:
[1,1]<stdout>:    def __enter__(self):
[1,1]<stdout>:        self.start = datetime.now()
[1,1]<stdout>:
[1,1]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,1]<stdout>:        self.stop = datetime.now()
[1,1]<stdout>:        delta = self.stop - self.start
[1,1]<stdout>:        mem = memory_peak(self._what)
[1,1]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,1]<stdout>:    pass
[1,1]<stdout>:    # def __init__(self, what):
[1,1]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def write_stats(nume_ddl):
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB PROC")
[1,1]<stdout>:        print(size)
[1,1]<stdout>:        print()
[1,1]<stdout>:        print(
[1,1]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    for key, values in stats.items():
[1,1]<stdout>:        time = comm.gather(values[0], root=0)
[1,1]<stdout>:        mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(
[1,1]<stdout>:                key
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(mem))
[1,1]<stdout>:            )
[1,1]<stdout>:
[1,1]<stdout>:    mesh = nume_ddl.getMesh()
[1,1]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,1]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,1]<stdout>:
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,1]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,1]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,1]<stdout>:
[1,1]<stdout>:    def show(*args, **kwargs):
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(*args, **kwargs)
[1,1]<stdout>:
[1,1]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,1]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,1]<stdout>:    separ = "| :--------------- | ----------: |"
[1,1]<stdout>:    show(fmti.format("Refinement", refine))
[1,1]<stdout>:    show(separ)
[1,1]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,1]<stdout>:    for key, values in data.items():
[1,1]<stdout>:        times = comm.gather(values[0], root=0)
[1,1]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            show(fmtt.format(key, mean(times)))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,1]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,1]<stdout>:
[1,1]<stdout>:with ChronoCtxMg("Total"):
[1,1]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,1]<stdout>:        if params["parallel"] == "HPC":
[1,1]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:        else:
[1,1]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Model"):
[1,1]<stdout>:        model = AFFE_MODELE(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                PHENOMENE="MECANIQUE",
[1,1]<stdout>:                MODELISATION="3D",
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Material"):
[1,1]<stdout>:        steel = DEFI_MATERIAU(
[1,1]<stdout>:            ELAS=_F(
[1,1]<stdout>:                E=200000.0,
[1,1]<stdout>:                NU=0.3,
[1,1]<stdout>:            ),
[1,1]<stdout>:            ECRO_LINE=_F(
[1,1]<stdout>:   [1,1]<stdout>:             D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                SY=200.0,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        mater = AFFE_MATERIAU(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                MATER=steel,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,1]<stdout>:        block = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="LEFT",
[1,1]<stdout>:                    DX=0,
[1,1]<stdout>:                    DY=0.0,
[1,1]<stdout>:                    DZ=0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="RIGHT",
[1,1]<stdout>:                    DY=0.001,
[1,1]<stdout>:                    DZ=0.001,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,1]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            OPTION="RIGI_MECA",
[1,1]<stdout>:            CHAM_MATER=mater,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Numbering"):
[1,1]<stdout>:        dofNum = NUME_DDL(
[1,1]<stdout>:            MATR_RIGI=stiff_elem,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Assembly"):
[1,1]<stdout>:        stiffness = ASSE_MATRICE(
[1,1]<stdout>:            MATR_ELEM=stiff_elem,
[1,1]<stdout>:            NUME_DDL=dofNum,
[1,1]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,1]<stdout>:        rhs = CREA_CHAMP(
[1,1]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,1]<stdout>:            OPERATION="AFFE",
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                NOM_CMP=(
[1,1]<stdout>:                    "DX",
[1,1]<stdout>:                    "DY",
[1,1]<stdout>:                    "DZ",
[1,1]<stdout>:                ),
[1,1]<stdout>:                VALE=(
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,1]<stdout>:
[1,1]<stdout>:    if params["solver"] == "PETSC":
[1,1]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,1]<stdout>:    elif params["solver"] == "MUMPS":
[1,1]<stdout>:        solver = CA.MumpsSolver(
[1,1]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,1]<stdout>:            RENUM="PARMETIS",
[1,1]<stdout>:            ACCELERATION="FR+",
[1,1]<stdout>:            POSTTRAITEMENTS="MINI",
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Factorize"):
[1,1]<stdout>:        solver.factorize(stiffness)
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Solve"):
[1,1]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,1]<stdout>:
[1,1]<stdout>:# write_stats(dofNum)
[1,1]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,1]<stdout>:if params["parallel"] == "HPC":
[1,1]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,1]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,1]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,1]<stdout>:
[1,1]<stdout>:CA.close()
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command line #1:
[1,1]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution of code_aster
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Prepare environment in /tmp/run_aster_jlaezu5o/proc.2
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command file #1 / 1
[1,2]<stdout>:
[1,2]<stdout>:Content of the file to execute:
[1,2]<stdout>:# coding=utf-8
[1,2]<stdout>:#!/usr/bin/python
[1,2]<stdout>:
[1,2]<stdout>:import os
[1,2]<stdout>:from statistics import mean
[1,2]<stdout>:from datetime import datetime
[1,2]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,2]<stdout>:
[1,2]<stdout>:from code_aster.Commands import *
[1,2]<stdout>:from code_aster import CA
[1,2]<stdout>:from code_aster.Utilities import petscInitialize
[1,2]<stdout>:
[1,2]<stdout>:CA.init()
[1,2]<stdout>:
[1,2]<stdout>:params = {}
[1,2]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,2]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,2]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,2]<stdout>:
[1,2]<stdout>:# General parameters
[1,2]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,2]<stdout>:rank = comm.Get_rank()
[1,2]<stdout>:size = comm.Get_size()
[1,2]<stdout>:
[1,2]<stdout>:nbHexa = 8 ** params["refinements"]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def memory_peak(mess=None):
[1,2]<stdout>:    """Return memory peak in MB"""
[1,2]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMgGen:
[1,2]<stdout>:    stats = {}
[1,2]<stdout>:
[1,2]<stdout>:    def __init__(self, what):
[1,2]<stdout>:        self._what = what
[1,2]<stdout>:
[1,2]<stdout>:    def __enter__(self):
[1,2]<stdout>:        self.start = datetime.now()
[1,2]<stdout>:
[1,2]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,2]<stdout>:        self.stop = datetime.now()
[1,2]<stdout>:        delta = self.stop - self.start
[1,2]<stdout>:        mem = memory_peak(self._what)
[1,2]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,2]<stdout>:    pass
[1,2]<stdout>:    # def __init__(self, what):
[1,2]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def write_stats(nume_ddl):
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB PROC")
[1,2]<stdout>:        print(size)
[1,2]<stdout>:        print()
[1,2]<stdout>:        print(
[1,2]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    for key, values in stats.items():
[1,2]<stdout>:        time = comm.gather(values[0], root=0)
[1,2]<stdout>:        mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(
[1,2]<stdout>:                key
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(mem))
[1,2]<stdout>:            )
[1,2]<stdout>:
[1,2]<stdout>:    mesh = nume_ddl.getMesh()
[1,2]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,2]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,2]<stdout>:
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,2]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,2]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,2]<stdout>:
[1,2]<stdout>:    def show(*args, **kwargs):
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(*args, **kwargs)
[1,2]<stdout>:
[1,2]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,2]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,2]<stdout>:    separ = "| :--------------- | ----------: |"
[1,2]<stdout>:    show(fmti.format("Refinement", refine))
[1,2]<stdout>:    show(separ)
[1,2]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,2]<stdout>:    for key, values in data.items():
[1,2]<stdout>:        times = comm.gather(values[0], root=0)
[1,2]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            show(fmtt.format(key, mean(times)))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,2]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,2]<stdout>:
[1,2]<stdout>:with ChronoCtxMg("Total"):
[1,2]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,2]<stdout>:        if params["parallel"] == "HPC":
[1,2]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:        else:
[1,2]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Model"):
[1,2]<stdout>:        model = AFFE_MODELE(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                PHENOMENE="MECANIQUE",
[1,2]<stdout>:                MODELISATION="3D",
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Material"):
[1,2]<stdout>:        steel = DEFI_MATERIAU(
[1,2]<stdout>:            ELAS=_F(
[1,2]<stdout>:                E=200000.0,
[1,2]<stdout>:                NU=0.3,
[1,2]<stdout>:            ),
[1,2]<stdout>:            ECRO_LINE=_F(
[1,2]<stdout>:   [1,2]<stdout>:             D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                SY=200.0,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        mater = AFFE_MATERIAU(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                MATER=steel,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,2]<stdout>:        block = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="LEFT",
[1,2]<stdout>:                    DX=0,
[1,2]<stdout>:                    DY=0.0,
[1,2]<stdout>:                    DZ=0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="RIGHT",
[1,2]<stdout>:                    DY=0.001,
[1,2]<stdout>:                    DZ=0.001,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,2]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            OPTION="RIGI_MECA",
[1,2]<stdout>:            CHAM_MATER=mater,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Numbering"):
[1,2]<stdout>:        dofNum = NUME_DDL(
[1,2]<stdout>:            MATR_RIGI=stiff_elem,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Assembly"):
[1,2]<stdout>:        stiffness = ASSE_MATRICE(
[1,2]<stdout>:            MATR_ELEM=stiff_elem,
[1,2]<stdout>:            NUME_DDL=dofNum,
[1,2]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,2]<stdout>:        rhs = CREA_CHAMP(
[1,2]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,2]<stdout>:            OPERATION="AFFE",
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                NOM_CMP=(
[1,2]<stdout>:                    "DX",
[1,2]<stdout>:                    "DY",
[1,2]<stdout>:                    "DZ",
[1,2]<stdout>:                ),
[1,2]<stdout>:                VALE=(
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,2]<stdout>:
[1,2]<stdout>:    if params["solver"] == "PETSC":
[1,2]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,2]<stdout>:    elif params["solver"] == "MUMPS":
[1,2]<stdout>:        solver = CA.MumpsSolver(
[1,2]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,2]<stdout>:            RENUM="PARMETIS",
[1,2]<stdout>:            ACCELERATION="FR+",
[1,2]<stdout>:            POSTTRAITEMENTS="MINI",
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Factorize"):
[1,2]<stdout>:        solver.factorize(stiffness)
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Solve"):
[1,2]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,2]<stdout>:
[1,2]<stdout>:# write_stats(dofNum)
[1,2]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,2]<stdout>:if params["parallel"] == "HPC":
[1,2]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,2]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,2]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,2]<stdout>:
[1,2]<stdout>:CA.close()
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command line #1:
[1,2]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution of code_aster
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Prepare environment in /tmp/run_aster_jlaezu5o/proc.3
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command file #1 / 1
[1,3]<stdout>:
[1,3]<stdout>:Content of the file to execute:
[1,3]<stdout>:# coding=utf-8
[1,3]<stdout>:#!/usr/bin/python
[1,3]<stdout>:
[1,3]<stdout>:import os
[1,3]<stdout>:from statistics import mean
[1,3]<stdout>:from datetime import datetime
[1,3]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,3]<stdout>:
[1,3]<stdout>:from code_aster.Commands import *
[1,3]<stdout>:from code_aster import CA
[1,3]<stdout>:from code_aster.Utilities import petscInitialize
[1,3]<stdout>:
[1,3]<stdout>:CA.init()
[1,3]<stdout>:
[1,3]<stdout>:params = {}
[1,3]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,3]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,3]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,3]<stdout>:
[1,3]<stdout>:# General parameters
[1,3]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,3]<stdout>:rank = comm.Get_rank()
[1,3]<stdout>:size = comm.Get_size()
[1,3]<stdout>:
[1,3]<stdout>:nbHexa = 8 ** params["refinements"]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def memory_peak(mess=None):
[1,3]<stdout>:    """Return memory peak in MB"""
[1,3]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMgGen:
[1,3]<stdout>:    stats = {}
[1,3]<stdout>:
[1,3]<stdout>:    def __init__(self, what):
[1,3]<stdout>:        self._what = what
[1,3]<stdout>:
[1,3]<stdout>:    def __enter__(self):
[1,3]<stdout>:        self.start = datetime.now()
[1,3]<stdout>:
[1,3]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,3]<stdout>:        self.stop = datetime.now()
[1,3]<stdout>:        delta = self.stop - self.start
[1,3]<stdout>:        mem = memory_peak(self._what)
[1,3]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,3]<stdout>:    pass
[1,3]<stdout>:    # def __init__(self, what):
[1,3]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def write_stats(nume_ddl):
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB PROC")
[1,3]<stdout>:        print(size)
[1,3]<stdout>:        print()
[1,3]<stdout>:        print(
[1,3]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    for key, values in stats.items():
[1,3]<stdout>:        time = comm.gather(values[0], root=0)
[1,3]<stdout>:        mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(
[1,3]<stdout>:                key
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(mem))
[1,3]<stdout>:            )
[1,3]<stdout>:
[1,3]<stdout>:    mesh = nume_ddl.getMesh()
[1,3]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,3]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,3]<stdout>:
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,3]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,3]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,3]<stdout>:
[1,3]<stdout>:    def show(*args, **kwargs):
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(*args, **kwargs)
[1,3]<stdout>:
[1,3]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,3]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,3]<stdout>:    separ = "| :--------------- | ----------: |"
[1,3]<stdout>:    show(fmti.format("Refinement", refine))
[1,3]<stdout>:    show(separ)
[1,3]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,3]<stdout>:    for key, values in data.items():
[1,3]<stdout>:        times = comm.gather(values[0], root=0)
[1,3]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            show(fmtt.format(key, mean(times)))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,3]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,3]<stdout>:
[1,3]<stdout>:with ChronoCtxMg("Total"):
[1,3]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,3]<stdout>:        if params["parallel"] == "HPC":
[1,3]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:        else:
[1,3]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Model"):
[1,3]<stdout>:        model = AFFE_MODELE(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                PHENOMENE="MECANIQUE",
[1,3]<stdout>:                MODELISATION="3D",
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Material"):
[1,3]<stdout>:        steel = DEFI_MATERIAU(
[1,3]<stdout>:            ELAS=_F(
[1,3]<stdout>:                E=200000.0,
[1,3]<stdout>:                NU=0.3,
[1,3]<stdout>:            ),
[1,3]<stdout>:            ECRO_LINE=_F(
[1,3]<stdout>:   [1,3]<stdout>:             D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                SY=200.0,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        mater = AFFE_MATERIAU(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                MATER=steel,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,3]<stdout>:        block = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="LEFT",
[1,3]<stdout>:                    DX=0,
[1,3]<stdout>:                    DY=0.0,
[1,3]<stdout>:                    DZ=0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="RIGHT",
[1,3]<stdout>:                    DY=0.001,
[1,3]<stdout>:                    DZ=0.001,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,3]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            OPTION="RIGI_MECA",
[1,3]<stdout>:            CHAM_MATER=mater,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Numbering"):
[1,3]<stdout>:        dofNum = NUME_DDL(
[1,3]<stdout>:            MATR_RIGI=stiff_elem,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Assembly"):
[1,3]<stdout>:        stiffness = ASSE_MATRICE(
[1,3]<stdout>:            MATR_ELEM=stiff_elem,
[1,3]<stdout>:            NUME_DDL=dofNum,
[1,3]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,3]<stdout>:        rhs = CREA_CHAMP(
[1,3]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,3]<stdout>:            OPERATION="AFFE",
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                NOM_CMP=(
[1,3]<stdout>:                    "DX",
[1,3]<stdout>:                    "DY",
[1,3]<stdout>:                    "DZ",
[1,3]<stdout>:                ),
[1,3]<stdout>:                VALE=(
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,3]<stdout>:
[1,3]<stdout>:    if params["solver"] == "PETSC":
[1,3]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,3]<stdout>:    elif params["solver"] == "MUMPS":
[1,3]<stdout>:        solver = CA.MumpsSolver(
[1,3]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,3]<stdout>:            RENUM="PARMETIS",
[1,3]<stdout>:            ACCELERATION="FR+",
[1,3]<stdout>:            POSTTRAITEMENTS="MINI",
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Factorize"):
[1,3]<stdout>:        solver.factorize(stiffness)
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Solve"):
[1,3]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,3]<stdout>:
[1,3]<stdout>:# write_stats(dofNum)
[1,3]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,3]<stdout>:if params["parallel"] == "HPC":
[1,3]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,3]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,3]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,3]<stdout>:
[1,3]<stdout>:CA.close()
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command line #1:
[1,3]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution of code_aster
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Prepare environment in /tmp/run_aster_jlaezu5o/proc.4
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution of code_aster
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Prepare environment in /tmp/run_aster_jlaezu5o/proc.5
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command file #1 / 1
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command file #1 / 1
[1,4]<stdout>:
[1,4]<stdout>:Content of the file to execute:
[1,4]<stdout>:# coding=utf-8
[1,4]<stdout>:#!/usr/bin/python
[1,4]<stdout>:
[1,4]<stdout>:import os
[1,4]<stdout>:from statistics import mean
[1,4]<stdout>:from datetime import datetime
[1,4]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,4]<stdout>:
[1,4]<stdout>:from code_aster.Commands import *
[1,4]<stdout>:from code_aster import CA
[1,4]<stdout>:from code_aster.Utilities import petscInitialize
[1,4]<stdout>:
[1,4]<stdout>:CA.init()
[1,4]<stdout>:
[1,4]<stdout>:params = {}
[1,4]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,4]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,4]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,4]<stdout>:
[1,4]<stdout>:# General parameters
[1,4]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,4]<stdout>:rank = comm.Get_rank()
[1,4]<stdout>:size = comm.Get_size()
[1,4]<stdout>:
[1,4]<stdout>:nbHexa = 8 ** params["refinements"]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def memory_peak(mess=None):
[1,4]<stdout>:    """Return memory peak in MB"""
[1,4]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMgGen:
[1,4]<stdout>:    stats = {}
[1,4]<stdout>:
[1,4]<stdout>:    def __init__(self, what):
[1,4]<stdout>:        self._what = what
[1,4]<stdout>:
[1,4]<stdout>:    def __enter__(self):
[1,4]<stdout>:        self.start = datetime.now()
[1,4]<stdout>:
[1,4]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,4]<stdout>:        self.stop = datetime.now()
[1,4]<stdout>:        delta = self.stop - self.start
[1,4]<stdout>:        mem = memory_peak(self._what)
[1,4]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,4]<stdout>:    pass
[1,4]<stdout>:    # def __init__(self, what):
[1,4]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def write_stats(nume_ddl):
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB PROC")
[1,4]<stdout>:        print(size)
[1,4]<stdout>:        print()
[1,4]<stdout>:        print(
[1,4]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    for key, values in stats.items():
[1,4]<stdout>:        time = comm.gather(values[0], root=0)
[1,4]<stdout>:        mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(
[1,4]<stdout>:                key
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(mem))
[1,4]<stdout>:            )
[1,4]<stdout>:
[1,4]<stdout>:    mesh = nume_ddl.getMesh()
[1,4]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,4]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,4]<stdout>:
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,4]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,4]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,4]<stdout>:
[1,4]<stdout>:    def show(*args, **kwargs):
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(*args, **kwargs)
[1,4]<stdout>:
[1,4]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,4]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,4]<stdout>:    separ = "| :--------------- | ----------: |"
[1,4]<stdout>:    show(fmti.format("Refinement", refine))
[1,4]<stdout>:    show(separ)
[1,4]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,4]<stdout>:    for key, values in data.items():
[1,4]<stdout>:        times = comm.gather(values[0], root=0)
[1,4]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            show(fmtt.format(key, mean(times)))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,4]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,4]<stdout>:
[1,4]<stdout>:with ChronoCtxMg("Total"):
[1,4]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,4]<stdout>:        if params["parallel"] == "HPC":
[1,4]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:        else:
[1,4]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Model"):
[1,4]<stdout>:        model = AFFE_MODELE(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                PHENOMENE="MECANIQUE",
[1,4]<stdout>:                MODELISATION="3D",
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Material"):
[1,4]<stdout>:        steel = DEFI_MATERIAU(
[1,4]<stdout>:            ELAS=_F(
[1,4]<stdout>:                E=200000.0,
[1,4]<stdout>:                NU=0.3,
[1,4]<stdout>:            ),
[1,4]<stdout>:            ECRO_LINE=_F(
[1,4]<stdout>:   [1,4]<stdout>:             D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                SY=200.0,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        mater = AFFE_MATERIAU(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                MATER=steel,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,4]<stdout>:        block = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="LEFT",
[1,4]<stdout>:                    DX=0,
[1,4]<stdout>:                    DY=0.0,
[1,4]<stdout>:                    DZ=0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="RIGHT",
[1,4]<stdout>:                    DY=0.001,
[1,4]<stdout>:                    DZ=0.001,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,4]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            OPTION="RIGI_MECA",
[1,4]<stdout>:            CHAM_MATER=mater,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Numbering"):
[1,4]<stdout>:        dofNum = NUME_DDL(
[1,4]<stdout>:            MATR_RIGI=stiff_elem,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Assembly"):
[1,4]<stdout>:        stiffness = ASSE_MATRICE(
[1,4]<stdout>:            MATR_ELEM=stiff_elem,
[1,4]<stdout>:            NUME_DDL=dofNum,
[1,4]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,4]<stdout>:        rhs = CREA_CHAMP(
[1,4]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,4]<stdout>:            OPERATION="AFFE",
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                NOM_CMP=(
[1,4]<stdout>:                    "DX",
[1,4]<stdout>:                    "DY",
[1,4]<stdout>:                    "DZ",
[1,4]<stdout>:                ),
[1,4]<stdout>:                VALE=(
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,4]<stdout>:
[1,4]<stdout>:    if params["solver"] == "PETSC":
[1,4]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,4]<stdout>:    elif params["solver"] == "MUMPS":
[1,4]<stdout>:        solver = CA.MumpsSolver(
[1,4]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,4]<stdout>:            RENUM="PARMETIS",
[1,4]<stdout>:            ACCELERATION="FR+",
[1,4]<stdout>:            POSTTRAITEMENTS="MINI",
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Factorize"):
[1,4]<stdout>:        solver.factorize(stiffness)
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Solve"):
[1,4]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,4]<stdout>:
[1,4]<stdout>:# write_stats(dofNum)
[1,4]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,4]<stdout>:if params["parallel"] == "HPC":
[1,4]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,4]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,4]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,4]<stdout>:
[1,4]<stdout>:CA.close()
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command line #1:
[1,5]<stdout>:
[1,5]<stdout>:Content of the file to execute:
[1,5]<stdout>:# coding=utf-8
[1,5]<stdout>:#!/usr/bin/python
[1,5]<stdout>:
[1,5]<stdout>:import os
[1,5]<stdout>:from statistics import mean
[1,5]<stdout>:from datetime import datetime
[1,5]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,5]<stdout>:
[1,5]<stdout>:from code_aster.Commands import *
[1,5]<stdout>:from code_aster import CA
[1,5]<stdout>:from code_aster.Utilities import petscInitialize
[1,5]<stdout>:
[1,5]<stdout>:CA.init()
[1,5]<stdout>:
[1,5]<stdout>:params = {}
[1,5]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,5]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,5]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,5]<stdout>:
[1,5]<stdout>:# General parameters
[1,5]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,5]<stdout>:rank = comm.Get_rank()
[1,5]<stdout>:size = comm.Get_size()
[1,5]<stdout>:
[1,5]<stdout>:nbHexa = 8 ** params["refinements"]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def memory_peak(mess=None):
[1,5]<stdout>:    """Return memory peak in MB"""
[1,5]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMgGen:
[1,5]<stdout>:    stats = {}
[1,5]<stdout>:
[1,5]<stdout>:    def __init__(self, what):
[1,5]<stdout>:        self._what = what
[1,5]<stdout>:
[1,5]<stdout>:    def __enter__(self):
[1,5]<stdout>:        self.start = datetime.now()
[1,5]<stdout>:
[1,5]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,5]<stdout>:        self.stop = datetime.now()
[1,5]<stdout>:        delta = self.stop - self.start
[1,5]<stdout>:        mem = memory_peak(self._what)
[1,5]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,5]<stdout>:    pass
[1,5]<stdout>:    # def __init__(self, what):
[1,5]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def write_stats(nume_ddl):
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB PROC")
[1,5]<stdout>:        print(size)
[1,5]<stdout>:        print()
[1,5]<stdout>:        print(
[1,5]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    for key, values in stats.items():
[1,5]<stdout>:        time = comm.gather(values[0], root=0)
[1,5]<stdout>:        mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(
[1,5]<stdout>:                key
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(mem))
[1,5]<stdout>:            )
[1,5]<stdout>:
[1,5]<stdout>:    mesh = nume_ddl.getMesh()
[1,5]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,5]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,5]<stdout>:
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,5]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,5]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,5]<stdout>:
[1,5]<stdout>:    def show(*args, **kwargs):
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(*args, **kwargs)
[1,5]<stdout>:
[1,5]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,5]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,5]<stdout>:    separ = "| :--------------- | ----------: |"
[1,5]<stdout>:    show(fmti.format("Refinement", refine))
[1,5]<stdout>:    show(separ)
[1,5]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,5]<stdout>:    for key, values in data.items():
[1,5]<stdout>:        times = comm.gather(values[0], root=0)
[1,5]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            show(fmtt.format(key, mean(times)))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,5]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,5]<stdout>:
[1,5]<stdout>:with ChronoCtxMg("Total"):
[1,5]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,5]<stdout>:        if params["parallel"] == "HPC":
[1,5]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:        else:
[1,5]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Model"):
[1,5]<stdout>:        model = AFFE_MODELE(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                PHENOMENE="MECANIQUE",
[1,5]<stdout>:                MODELISATION="3D",
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Material"):
[1,5]<stdout>:        steel = DEFI_MATERIAU(
[1,5]<stdout>:            ELAS=_F(
[1,5]<stdout>:                E=200000.0,
[1,5]<stdout>:                NU=0.3,
[1,5]<stdout>:            ),
[1,5]<stdout>:            ECRO_LINE=_F(
[1,5]<stdout>:    [1,4]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,5]<stdout>:            D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                SY=200.0,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        mater = AFFE_MATERIAU(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                MATER=steel,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,5]<stdout>:        block = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="LEFT",
[1,5]<stdout>:                    DX=0,
[1,5]<stdout>:                    DY=0.0,
[1,5]<stdout>:                    DZ=0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="RIGHT",
[1,5]<stdout>:                    DY=0.001,
[1,5]<stdout>:                    DZ=0.001,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,5]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            OPTION="RIGI_MECA",
[1,5]<stdout>:            CHAM_MATER=mater,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Numbering"):
[1,5]<stdout>:        dofNum = NUME_DDL(
[1,5]<stdout>:            MATR_RIGI=stiff_elem,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Assembly"):
[1,5]<stdout>:        stiffness = ASSE_MATRICE(
[1,5]<stdout>:            MATR_ELEM=stiff_elem,
[1,5]<stdout>:            NUME_DDL=dofNum,
[1,5]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,5]<stdout>:        rhs = CREA_CHAMP(
[1,5]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,5]<stdout>:            OPERATION="AFFE",
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                NOM_CMP=(
[1,5]<stdout>:                    "DX",
[1,5]<stdout>:                    "DY",
[1,5]<stdout>:                    "DZ",
[1,5]<stdout>:                ),
[1,5]<stdout>:                VALE=(
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,5]<stdout>:
[1,5]<stdout>:    if params["solver"] == "PETSC":
[1,5]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,5]<stdout>:    elif params["solver"] == "MUMPS":
[1,5]<stdout>:        solver = CA.MumpsSolver(
[1,5]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,5]<stdout>:            RENUM="PARMETIS",
[1,5]<stdout>:            ACCELERATION="FR+",
[1,5]<stdout>:            POSTTRAITEMENTS="MINI",
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Factorize"):
[1,5]<stdout>:        solver.factorize(stiffness)
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Solve"):
[1,5]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,5]<stdout>:
[1,5]<stdout>:# write_stats(dofNum)
[1,5]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,5]<stdout>:if params["parallel"] == "HPC":
[1,5]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,5]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,5]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,5]<stdout>:
[1,5]<stdout>:CA.close()
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command line #1:
[1,5]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution of code_aster
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Prepare environment in /tmp/run_aster_jlaezu5o/proc.6
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution of code_aster
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Prepare environment in /tmp/run_aster_jlaezu5o/proc.7
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command file #1 / 1
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command file #1 / 1
[1,6]<stdout>:
[1,6]<stdout>:Content of the file to execute:
[1,6]<stdout>:# coding=utf-8
[1,6]<stdout>:#!/usr/bin/python
[1,6]<stdout>:
[1,6]<stdout>:import os
[1,6]<stdout>:from statistics import mean
[1,6]<stdout>:from datetime import datetime
[1,6]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,6]<stdout>:
[1,6]<stdout>:from code_aster.Commands import *
[1,6]<stdout>:from code_aster import CA
[1,6]<stdout>:from code_aster.Utilities import petscInitialize
[1,6]<stdout>:
[1,6]<stdout>:CA.init()
[1,6]<stdout>:
[1,6]<stdout>:params = {}
[1,6]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,6]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,6]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,6]<stdout>:
[1,6]<stdout>:# General parameters
[1,6]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,6]<stdout>:rank = comm.Get_rank()
[1,6]<stdout>:size = comm.Get_size()
[1,6]<stdout>:
[1,6]<stdout>:nbHexa = 8 ** params["refinements"]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def memory_peak(mess=None):
[1,6]<stdout>:    """Return memory peak in MB"""
[1,6]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMgGen:
[1,6]<stdout>:    stats = {}
[1,6]<stdout>:
[1,6]<stdout>:    def __init__(self, what):
[1,6]<stdout>:        self._what = what
[1,6]<stdout>:
[1,6]<stdout>:    def __enter__(self):
[1,6]<stdout>:        self.start = datetime.now()
[1,6]<stdout>:
[1,6]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,6]<stdout>:        self.stop = datetime.now()
[1,6]<stdout>:        delta = self.stop - self.start
[1,6]<stdout>:        mem = memory_peak(self._what)
[1,6]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,6]<stdout>:    pass
[1,6]<stdout>:    # def __init__(self, what):
[1,6]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def write_stats(nume_ddl):
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB PROC")
[1,6]<stdout>:        print(size)
[1,6]<stdout>:        print()
[1,6]<stdout>:        print(
[1,6]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    for key, values in stats.items():
[1,6]<stdout>:        time = comm.gather(values[0], root=0)
[1,6]<stdout>:        mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(
[1,6]<stdout>:                key
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(mem))
[1,6]<stdout>:            )
[1,6]<stdout>:
[1,6]<stdout>:    mesh = nume_ddl.getMesh()
[1,6]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,6]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,6]<stdout>:
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,6]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,6]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,6]<stdout>:
[1,6]<stdout>:    def show(*args, **kwargs):
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(*args, **kwargs)
[1,6]<stdout>:
[1,6]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,6]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,6]<stdout>:    separ = "| :--------------- | ----------: |"
[1,6]<stdout>:    show(fmti.format("Refinement", refine))
[1,6]<stdout>:    show(separ)
[1,6]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,6]<stdout>:    for key, values in data.items():
[1,6]<stdout>:        times = comm.gather(values[0], root=0)
[1,6]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            show(fmtt.format(key, mean(times)))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,6]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,6]<stdout>:
[1,6]<stdout>:with ChronoCtxMg("Total"):
[1,6]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,6]<stdout>:        if params["parallel"] == "HPC":
[1,6]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:        else:
[1,6]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Model"):
[1,6]<stdout>:        model = AFFE_MODELE(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                PHENOMENE="MECANIQUE",
[1,6]<stdout>:                MODELISATION="3D",
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Material"):
[1,6]<stdout>:        steel = DEFI_MATERIAU(
[1,6]<stdout>:            ELAS=_F(
[1,6]<stdout>:                E=200000.0,
[1,6]<stdout>:                NU=0.3,
[1,6]<stdout>:            ),
[1,6]<stdout>:            ECRO_LINE=_F(
[1,6]<stdout>:   [1,6]<stdout>:             D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                SY=200.0,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        mater = AFFE_MATERIAU(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                MATER=steel,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,6]<stdout>:        block = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="LEFT",
[1,6]<stdout>:                    DX=0,
[1,6]<stdout>:                    DY=0.0,
[1,6]<stdout>:                    DZ=0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="RIGHT",
[1,6]<stdout>:                    DY=0.001,
[1,6]<stdout>:                    DZ=0.001,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,6]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            OPTION="RIGI_MECA",
[1,6]<stdout>:            CHAM_MATER=mater,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Numbering"):
[1,6]<stdout>:        dofNum = NUME_DDL(
[1,6]<stdout>:            MATR_RIGI=stiff_elem,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Assembly"):
[1,6]<stdout>:        stiffness = ASSE_MATRICE(
[1,6]<stdout>:            MATR_ELEM=stiff_elem,
[1,6]<stdout>:            NUME_DDL=dofNum,
[1,6]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,6]<stdout>:        rhs = CREA_CHAMP(
[1,6]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,6]<stdout>:            OPERATION="AFFE",
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                NOM_CMP=(
[1,6]<stdout>:                    "DX",
[1,6]<stdout>:                    "DY",
[1,6]<stdout>:                    "DZ",
[1,6]<stdout>:                ),
[1,6]<stdout>:                VALE=(
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,6]<stdout>:
[1,6]<stdout>:    if params["solver"] == "PETSC":
[1,6]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,6]<stdout>:    elif params["solver"] == "MUMPS":
[1,6]<stdout>:        solver = CA.MumpsSolver(
[1,6]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,6]<stdout>:            RENUM="PARMETIS",
[1,6]<stdout>:            ACCELERATION="FR+",
[1,6]<stdout>:            POSTTRAITEMENTS="MINI",
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Factorize"):
[1,6]<stdout>:        solver.factorize(stiffness)
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Solve"):
[1,6]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,6]<stdout>:
[1,6]<stdout>:# write_stats(dofNum)
[1,6]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,6]<stdout>:if params["parallel"] == "HPC":
[1,6]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,6]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,6]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,6]<stdout>:
[1,6]<stdout>:CA.close()
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command line #1:
[1,7]<stdout>:
[1,7]<stdout>:Content of the file to execute:
[1,7]<stdout>:# coding=utf-8
[1,7]<stdout>:#!/usr/bin/python
[1,7]<stdout>:
[1,7]<stdout>:import os
[1,7]<stdout>:from statistics import mean
[1,7]<stdout>:from datetime import datetime
[1,7]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,7]<stdout>:
[1,7]<stdout>:from code_aster.Commands import *
[1,7]<stdout>:from code_aster import CA
[1,7]<stdout>:from code_aster.Utilities import petscInitialize
[1,7]<stdout>:
[1,7]<stdout>:CA.init()
[1,7]<stdout>:
[1,7]<stdout>:params = {}
[1,7]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,7]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,7]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,7]<stdout>:
[1,7]<stdout>:# General parameters
[1,7]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,7]<stdout>:rank = comm.Get_rank()
[1,7]<stdout>:size = comm.Get_size()
[1,7]<stdout>:
[1,7]<stdout>:nbHexa = 8 ** params["refinements"]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def memory_peak(mess=None):
[1,7]<stdout>:    """Return memory peak in MB"""
[1,7]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMgGen:
[1,7]<stdout>:    stats = {}
[1,7]<stdout>:
[1,7]<stdout>:    def __init__(self, what):
[1,7]<stdout>:        self._what = what
[1,7]<stdout>:
[1,7]<stdout>:    def __enter__(self):
[1,7]<stdout>:        self.start = datetime.now()
[1,7]<stdout>:
[1,7]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,7]<stdout>:        self.stop = datetime.now()
[1,7]<stdout>:        delta = self.stop - self.start
[1,7]<stdout>:        mem = memory_peak(self._what)
[1,7]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,7]<stdout>:    pass
[1,7]<stdout>:    # def __init__(self, what):
[1,7]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def write_stats(nume_ddl):
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB PROC")
[1,7]<stdout>:        print(size)
[1,7]<stdout>:        print()
[1,7]<stdout>:        print(
[1,7]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    for key, values in stats.items():
[1,7]<stdout>:        time = comm.gather(values[0], root=0)
[1,7]<stdout>:        mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(
[1,7]<stdout>:                key
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(mem))
[1,7]<stdout>:            )
[1,7]<stdout>:
[1,7]<stdout>:    mesh = nume_ddl.getMesh()
[1,7]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,7]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,7]<stdout>:
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,7]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,7]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,7]<stdout>:
[1,7]<stdout>:    def show(*args, **kwargs):
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(*args, **kwargs)
[1,7]<stdout>:
[1,7]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,7]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,7]<stdout>:    separ = "| :--------------- | ----------: |"
[1,7]<stdout>:    show(fmti.format("Refinement", refine))
[1,7]<stdout>:    show(separ)
[1,7]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,7]<stdout>:    for key, values in data.items():
[1,7]<stdout>:        times = comm.gather(values[0], root=0)
[1,7]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            show(fmtt.format(key, mean(times)))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,7]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,7]<stdout>:
[1,7]<stdout>:with ChronoCtxMg("Total"):
[1,7]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,7]<stdout>:        if params["parallel"] == "HPC":
[1,7]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:        else:
[1,7]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Model"):
[1,7]<stdout>:        model = AFFE_MODELE(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                PHENOMENE="MECANIQUE",
[1,7]<stdout>:                MODELISATION="3D",
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Material"):
[1,7]<stdout>:        steel = DEFI_MATERIAU(
[1,7]<stdout>:            ELAS=_F(
[1,7]<stdout>:                E=200000.0,
[1,7]<stdout>:                NU=0.3,
[1,7]<stdout>:            ),
[1,7]<stdout>:            ECRO_LINE=_F(
[1,7]<stdout>:   [1,7]<stdout>:             D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                SY=200.0,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        mater = AFFE_MATERIAU(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                MATER=steel,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,7]<stdout>:        block = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="LEFT",
[1,7]<stdout>:                    DX=0,
[1,7]<stdout>:                    DY=0.0,
[1,7]<stdout>:                    DZ=0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="RIGHT",
[1,7]<stdout>:                    DY=0.001,
[1,7]<stdout>:                    DZ=0.001,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,7]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            OPTION="RIGI_MECA",
[1,7]<stdout>:            CHAM_MATER=mater,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Numbering"):
[1,7]<stdout>:        dofNum = NUME_DDL(
[1,7]<stdout>:            MATR_RIGI=stiff_elem,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Assembly"):
[1,7]<stdout>:        stiffness = ASSE_MATRICE(
[1,7]<stdout>:            MATR_ELEM=stiff_elem,
[1,7]<stdout>:            NUME_DDL=dofNum,
[1,7]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,7]<stdout>:        rhs = CREA_CHAMP(
[1,7]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,7]<stdout>:            OPERATION="AFFE",
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                NOM_CMP=(
[1,7]<stdout>:                    "DX",
[1,7]<stdout>:                    "DY",
[1,7]<stdout>:                    "DZ",
[1,7]<stdout>:                ),
[1,7]<stdout>:                VALE=(
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,7]<stdout>:
[1,7]<stdout>:    if params["solver"] == "PETSC":
[1,7]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,7]<stdout>:    elif params["solver"] == "MUMPS":
[1,7]<stdout>:        solver = CA.MumpsSolver(
[1,7]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,7]<stdout>:            RENUM="PARMETIS",
[1,7]<stdout>:            ACCELERATION="FR+",
[1,7]<stdout>:            POSTTRAITEMENTS="MINI",
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Factorize"):
[1,7]<stdout>:        solver.factorize(stiffness)
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Solve"):
[1,7]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,7]<stdout>:
[1,7]<stdout>:# write_stats(dofNum)
[1,7]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,7]<stdout>:if params["parallel"] == "HPC":
[1,7]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,7]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,7]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,7]<stdout>:
[1,7]<stdout>:CA.close()
[1,7]<stdout>:
[1,7]<stdout>:
[1,6]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command line #1:
[1,7]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,7]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,6]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,0]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,1]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,4]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,2]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,3]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,7]<stdout>:checking MPI initialization...
[1,7]<stdout>:using COMM_WORLD.
[1,7]<stdout>:MPI is initialized.
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,6]<stdout>:checking MPI initialization...
[1,6]<stdout>:using COMM_WORLD.
[1,6]<stdout>:MPI is initialized.
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,0]<stdout>:checking MPI initialization...
[1,0]<stdout>:using COMM_WORLD.
[1,0]<stdout>:MPI is initialized.
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,1]<stdout>:checking MPI initialization...
[1,1]<stdout>:using COMM_WORLD.
[1,1]<stdout>:MPI is initialized.
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,7]<stdout>:<INFO> Démarrage de l'exécution.
[1,7]<stdout>:
[1,6]<stdout>:<INFO> Démarrage de l'exécution.
[1,6]<stdout>:
[1,7]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,4]<stdout>:checking MPI initialization...
[1,4]<stdout>:using COMM_WORLD.
[1,4]<stdout>:MPI is initialized.
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,0]<stdout>:<INFO> Démarrage de l'exécution.
[1,0]<stdout>:
[1,2]<stdout>:checking MPI initialization...
[1,2]<stdout>:using COMM_WORLD.
[1,2]<stdout>:MPI is initialized.
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,7]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,7]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,5]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,6]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,0]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,7]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,7]<stdout>:                                                                                                    
[1,7]<stdout>:                              Exécution du : Fri Jan 24 13:36:25 2025                               
[1,7]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,7]<stdout>:                                        Architecture : 64bit                                        
[1,7]<stdout>:                                    Type de processeur : aarch64                                    
[1,7]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,7]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,1]<stdout>:<INFO> Démarrage de l'exécution.
[1,1]<stdout>:
[1,6]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,6]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,0]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,0]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,7]<stdout>:                                     Version de Python : 3.11.2                                     
[1,7]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,6]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,6]<stdout>:                                                                                                    
[1,6]<stdout>:                              Exécution du : Fri Jan 24 13:36:25 2025                               
[1,6]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,6]<stdout>:                                        Architecture : 64bit                                        
[1,6]<stdout>:                                    Type de processeur : aarch64                                    
[1,6]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,6]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,0]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,0]<stdout>:                                                                                                    
[1,0]<stdout>:                              Exécution du : Fri Jan 24 13:36:25 2025                               
[1,0]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,0]<stdout>:                                        Architecture : 64bit                                        
[1,0]<stdout>:                                    Type de processeur : aarch64                                    
[1,0]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,0]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,1]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,4]<stdout>:<INFO> Démarrage de l'exécution.
[1,4]<stdout>:
[1,7]<stdout>:                                      Parallélisme MPI : actif                                      
[1,7]<stdout>:                                   Rang du processeur courant : 7                                   
[1,7]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,6]<stdout>:                                     Version de Python : 3.11.2                                     
[1,6]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,0]<stdout>:                                     Version de Python : 3.11.2                                     
[1,0]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,1]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,1]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,2]<stdout>:<INFO> Démarrage de l'exécution.
[1,2]<stdout>:
[1,7]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,7]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,6]<stdout>:                                      Parallélisme MPI : actif                                      
[1,6]<stdout>:                                   Rang du processeur courant : 6                                   
[1,6]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,4]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,0]<stdout>:                                      Parallélisme MPI : actif                                      
[1,0]<stdout>:                                   Rang du processeur courant : 0                                   
[1,0]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,1]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,1]<stdout>:                                                                                                    
[1,1]<stdout>:                              Exécution du : Fri Jan 24 13:36:25 2025                               
[1,1]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,1]<stdout>:                                        Architecture : 64bit                                        
[1,1]<stdout>:                                    Type de processeur : aarch64                                    
[1,1]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,1]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,3]<stdout>:checking MPI initialization...
[1,3]<stdout>:using COMM_WORLD.
[1,3]<stdout>:MPI is initialized.
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,2]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,4]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,4]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,6]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,6]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,0]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,0]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,1]<stdout>:                                     Version de Python : 3.11.2                                     
[1,1]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,2]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,2]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,4]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,4]<stdout>:                                                                                                    
[1,4]<stdout>:                              Exécution du : Fri Jan 24 13:36:25 2025                               
[1,4]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,4]<stdout>:                                        Architecture : 64bit                                        
[1,4]<stdout>:                                    Type de processeur : aarch64                                    
[1,4]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,4]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,1]<stdout>:                                      Parallélisme MPI : actif                                      
[1,1]<stdout>:                                   Rang du processeur courant : 1                                   
[1,1]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,4]<stdout>:                                     Version de Python : 3.11.2                                     
[1,4]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,2]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,2]<stdout>:                                                                                                    
[1,2]<stdout>:                              Exécution du : Fri Jan 24 13:36:25 2025                               
[1,2]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,2]<stdout>:                                        Architecture : 64bit                                        
[1,2]<stdout>:                                    Type de processeur : aarch64                                    
[1,2]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,2]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,1]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,1]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:                                     Version de Python : 3.11.2                                     
[1,2]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,4]<stdout>:                                      Parallélisme MPI : actif                                      
[1,4]<stdout>:                                   Rang du processeur courant : 4                                   
[1,4]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,3]<stdout>:<INFO> Démarrage de l'exécution.
[1,3]<stdout>:
[1,2]<stdout>:                                      Parallélisme MPI : actif                                      
[1,2]<stdout>:                                   Rang du processeur courant : 2                                   
[1,2]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,4]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,4]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,7]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,2]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,2]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,3]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,7]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,6]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,3]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,3]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,7]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,6]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,0]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,6]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,3]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,3]<stdout>:                                                                                                    
[1,3]<stdout>:                              Exécution du : Fri Jan 24 13:36:25 2025                               
[1,3]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,3]<stdout>:                                        Architecture : 64bit                                        
[1,3]<stdout>:                                    Type de processeur : aarch64                                    
[1,3]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,3]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,0]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,7]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,6]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,1]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,7]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,3]<stdout>:                                     Version de Python : 3.11.2                                     
[1,3]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,6]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,1]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,5]<stdout>:checking MPI initialization...
[1,5]<stdout>:using COMM_WORLD.
[1,5]<stdout>:MPI is initialized.
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,0]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,6]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,3]<stdout>:                                      Parallélisme MPI : actif                                      
[1,3]<stdout>:                                   Rang du processeur courant : 3                                   
[1,3]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,1]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,0]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,4]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,7]<stdout>:
[1,1]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,3]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,3]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,4]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,1]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,6]<stdout>:
[1,4]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,2]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:starting the execution...
[1,0]<stdout>:
[1,1]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,4]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,2]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,6]<stdout>:starting the execution...
[1,0]<stdout>:starting the execution...
[1,4]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,2]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,5]<stdout>:<INFO> Démarrage de l'exécution.
[1,5]<stdout>:
[1,4]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,1]<stdout>:
[1,2]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,2]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,5]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,1]<stdout>:starting the execution...
[1,4]<stdout>:
[1,5]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,5]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,3]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,2]<stdout>:
[1,4]<stdout>:starting the execution...
[1,3]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,5]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,5]<stdout>:                                                                                                    
[1,5]<stdout>:                              Exécution du : Fri Jan 24 13:36:25 2025                               
[1,5]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,5]<stdout>:                                        Architecture : 64bit                                        
[1,5]<stdout>:                                    Type de processeur : aarch64                                    
[1,5]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,5]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,2]<stdout>:starting the execution...
[1,3]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,5]<stdout>:                                     Version de Python : 3.11.2                                     
[1,5]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,3]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,5]<stdout>:                                      Parallélisme MPI : actif                                      
[1,5]<stdout>:                                   Rang du processeur courant : 5                                   
[1,5]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,3]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,3]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,5]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,5]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,7]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,7]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,7]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,7]<stdout>:
[1,3]<stdout>:
[1,6]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,6]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,6]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,6]<stdout>:
[1,0]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,0]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,0]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,0]<stdout>:
[1,3]<stdout>:starting the execution...
[1,1]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,1]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,1]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,1]<stdout>:
[1,5]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,5]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,4]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,4]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,4]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,4]<stdout>:
[1,5]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,2]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,2]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,2]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,2]<stdout>:
[1,5]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,5]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,5]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,5]<stdout>:
[1,5]<stdout>:starting the execution...
[1,3]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,3]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,3]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,3]<stdout>:
[1,5]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,5]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,5]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,5]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,7]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,0]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,6]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,1]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,4]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,2]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,3]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,5]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Créée avec la version                   :  17.02.04
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Créée avec la version                   :  17.02.04
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Créée avec la version                   :  17.02.04
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Créée avec la version                   :  17.02.04
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Créée avec la version                   :  17.02.04
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Créée avec la version                   :  17.02.04
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Créée avec la version                   :  17.02.04
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Créée avec la version                   :  17.02.04
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre total d'accès en lecture         :  63
[1,7]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,7]<stdout>:     Nombre total d'accès en écriture        :  0
[1,7]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre total d'accès en lecture         :  63
[1,6]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,6]<stdout>:     Nombre total d'accès en écriture        :  0
[1,6]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre total d'accès en lecture         :  63
[1,0]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,0]<stdout>:     Nombre total d'accès en écriture        :  0
[1,0]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,0]<stdout>:Relecture des catalogues des éléments faite.
[1,0]<stdout>:
[1,7]<stdout>:Relecture des catalogues des éléments faite.
[1,7]<stdout>:
[1,6]<stdout>:Relecture des catalogues des éléments faite.
[1,6]<stdout>:
[1,0]<stdout>:Fin de lecture (durée  0.019223  s.) 
[1,0]<stdout>:
[1,7]<stdout>:Fin de lecture (durée  0.019263  s.) 
[1,7]<stdout>:
[1,6]<stdout>:Fin de lecture (durée  0.019412  s.) 
[1,6]<stdout>:
[1,7]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,7]<stdout>:                         ajouté à l'initialisation du processus : 613.50 Mo                         
[1,7]<stdout>:                               Limite cible du processus : 4811.90 Mo                               
[1,0]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,0]<stdout>:                         ajouté à l'initialisation du processus : 613.52 Mo                         
[1,0]<stdout>:                               Limite cible du processus : 4811.92 Mo                               
[1,6]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,6]<stdout>:                         ajouté à l'initialisation du processus : 613.50 Mo                         
[1,6]<stdout>:                               Limite cible du processus : 4811.90 Mo                               
[1,0]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,7]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,6]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,7]<stdout>:# Mémoire (Mo) :   613.50 /   604.63 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Mémoire (Mo) :   613.52 /   604.64 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :   613.50 /   604.63 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0001   user+syst:        0.04s (syst:        0.09s, elaps:        0.14s)
[1,6]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.11s, elaps:        0.14s)
[1,0]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.13s, elaps:        0.14s)
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre total d'accès en lecture         :  63
[1,4]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,4]<stdout>:     Nombre total d'accès en écriture        :  0
[1,4]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:Relecture des catalogues des éléments faite.
[1,4]<stdout>:
[1,4]<stdout>:Fin de lecture (durée  0.019213  s.) 
[1,4]<stdout>:
[1,4]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,4]<stdout>:                         ajouté à l'initialisation du processus : 613.50 Mo                         
[1,4]<stdout>:                               Limite cible du processus : 4811.90 Mo                               
[1,4]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre total d'accès en lecture         :  63
[1,2]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,2]<stdout>:     Nombre total d'accès en écriture        :  0
[1,2]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,4]<stdout>:# Mémoire (Mo) :   613.50 /   604.63 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:Relecture des catalogues des éléments faite.
[1,2]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre total d'accès en lecture         :  63
[1,3]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,3]<stdout>:     Nombre total d'accès en écriture        :  0
[1,3]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre total d'accès en lecture         :  63
[1,1]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,1]<stdout>:     Nombre total d'accès en écriture        :  0
[1,1]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,1]<stdout>:Relecture des catalogues des éléments faite.
[1,1]<stdout>:
[1,2]<stdout>:Fin de lecture (durée  0.019409  s.) 
[1,2]<stdout>:
[1,3]<stdout>:Relecture des catalogues des éléments faite.
[1,3]<stdout>:
[1,4]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.12s, elaps:        0.14s)
[1,3]<stdout>:Fin de lecture (durée  0.019101  s.) 
[1,3]<stdout>:
[1,1]<stdout>:Fin de lecture (durée  0.019548  s.) 
[1,1]<stdout>:
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,2]<stdout>:                         ajouté à l'initialisation du processus : 613.50 Mo                         
[1,2]<stdout>:                               Limite cible du processus : 4811.90 Mo                               
[1,3]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,3]<stdout>:                         ajouté à l'initialisation du processus : 613.50 Mo                         
[1,3]<stdout>:                               Limite cible du processus : 4811.90 Mo                               
[1,1]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,1]<stdout>:                         ajouté à l'initialisation du processus : 613.50 Mo                         
[1,1]<stdout>:                               Limite cible du processus : 4811.90 Mo                               
[1,2]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,1]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,3]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,2]<stdout>:# Mémoire (Mo) :   613.50 /   604.63 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :   613.50 /   604.63 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :   613.50 /   604.63 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.11s, elaps:        0.14s)
[1,1]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.12s, elaps:        0.14s)
[1,3]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.12s, elaps:        0.14s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre total d'accès en lecture         :  63
[1,5]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,5]<stdout>:     Nombre total d'accès en écriture        :  0
[1,5]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,5]<stdout>:Relecture des catalogues des éléments faite.
[1,5]<stdout>:
[1,5]<stdout>:Fin de lecture (durée  0.019328  s.) 
[1,5]<stdout>:
[1,5]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,5]<stdout>:                         ajouté à l'initialisation du processus : 613.50 Mo                         
[1,5]<stdout>:                               Limite cible du processus : 4811.90 Mo                               
[1,5]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,5]<stdout>:# Mémoire (Mo) :   613.50 /   604.63 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.13s, elaps:        0.13s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:PETSc initialized...
[1,5]<stdout>:PETSc initialized...
[1,1]<stdout>:PETSc initialized...
[1,7]<stdout>:PETSc initialized...
[1,2]<stdout>:PETSc initialized...
[1,6]<stdout>:PETSc initialized...
[1,0]<stdout>:PETSc initialized...
[1,4]<stdout>:PETSc initialized...
[1,0]<stdout>:Nom MED du maillage : PARALLEPIPED
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000001 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                      274625
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                     287488
[1,0]<stdout>:                              SEG2                  768
[1,0]<stdout>:                              QUAD4               24576
[1,0]<stdout>:                              HEXA8              262144
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                8
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES              19
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACCES='NEW',
[1,0]<stdout>:             ACTION='ASSOCIER',
[1,0]<stdout>:             FICHIER='/tmp/buildCube_sfxcrv8/buildCube.med',
[1,0]<stdout>:             TYPE='BINARY',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:Deleting '/tmp/buildCube_sfxcrv8/buildCube.med': No such file or directory
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   804.67 /   249.04 /   213.86 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0002   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:Création du fichier au format MED 3.3.1.
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0003 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACTION='LIBERER',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   804.79 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0003   user+syst:        0.00s (syst:        0.00s, elaps:        0.01s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,6]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,3]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,5]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,4]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,1]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,7]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,2]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,0]<stdout>:
[1,0]<stdout>:Nom MED du maillage : 00000001
[1,0]<stdout>:
[1,2]<stdout>:Nom MED du maillage : 00000001
[1,2]<stdout>:
[1,6]<stdout>:Nom MED du maillage : 00000001
[1,6]<stdout>:
[1,4]<stdout>:Nom MED du maillage : 00000001
[1,4]<stdout>:
[1,1]<stdout>:Nom MED du maillage : 00000001
[1,1]<stdout>:
[1,7]<stdout>:Nom MED du maillage : 00000001
[1,7]<stdout>:
[1,3]<stdout>:Nom MED du maillage : 00000001
[1,3]<stdout>:
[1,5]<stdout>:Nom MED du maillage : 00000001
[1,5]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt282
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt282
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt282
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt282
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt282
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt282
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt282
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt282
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,2]<stdout>:ligne 282
[1,1]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,1]<stdout>:ligne 282
[1,6]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,6]<stdout>:ligne 282
[1,7]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,7]<stdout>:ligne 282
[1,0]<stdout>:# Commande #0004 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,0]<stdout>:ligne 282
[1,5]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,5]<stdout>:ligne 282
[1,3]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,3]<stdout>:ligne 282
[1,4]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,4]<stdout>:ligne 282
[1,7]<stdout>:CREA_MAILLAGE(INFO=1,
[1,7]<stdout>:              MAILLAGE='<00000002>',
[1,7]<stdout>:              RAFFINEMENT=_F(NIVEAU=0,
[1,7]<stdout>:                             TOUT='OUI'))
[1,7]<stdout>:
[1,0]<stdout>:CREA_MAILLAGE(INFO=1,
[1,0]<stdout>:              MAILLAGE='<00000002>',
[1,0]<stdout>:              RAFFINEMENT=_F(NIVEAU=0,
[1,0]<stdout>:                             TOUT='OUI'))
[1,0]<stdout>:
[1,2]<stdout>:CREA_MAILLAGE(INFO=1,
[1,2]<stdout>:              MAILLAGE='<00000002>',
[1,2]<stdout>:              RAFFINEMENT=_F(NIVEAU=0,
[1,2]<stdout>:                             TOUT='OUI'))
[1,2]<stdout>:
[1,6]<stdout>:CREA_MAILLAGE(INFO=1,
[1,6]<stdout>:              MAILLAGE='<00000002>',
[1,6]<stdout>:              RAFFINEMENT=_F(NIVEAU=0,
[1,6]<stdout>:                             TOUT='OUI'))
[1,6]<stdout>:
[1,4]<stdout>:CREA_MAILLAGE(INFO=1,
[1,4]<stdout>:              MAILLAGE='<00000002>',
[1,4]<stdout>:              RAFFINEMENT=_F(NIVEAU=0,
[1,4]<stdout>:                             TOUT='OUI'))
[1,4]<stdout>:
[1,1]<stdout>:CREA_MAILLAGE(INFO=1,
[1,1]<stdout>:              MAILLAGE='<00000002>',
[1,1]<stdout>:              RAFFINEMENT=_F(NIVEAU=0,
[1,1]<stdout>:                             TOUT='OUI'))
[1,1]<stdout>:
[1,5]<stdout>:CREA_MAILLAGE(INFO=1,
[1,5]<stdout>:              MAILLAGE='<00000002>',
[1,5]<stdout>:              RAFFINEMENT=_F(NIVEAU=0,
[1,5]<stdout>:                             TOUT='OUI'))
[1,5]<stdout>:
[1,3]<stdout>:CREA_MAILLAGE(INFO=1,
[1,3]<stdout>:              MAILLAGE='<00000002>',
[1,3]<stdout>:              RAFFINEMENT=_F(NIVEAU=0,
[1,3]<stdout>:                             TOUT='OUI'))
[1,3]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,5]<stdout>:
[1,5]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:36:32 DE TYPE        
[1,5]<stdout>:MAILLAGE_P                                                                      
[1,5]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,7]<stdout>:
[1,7]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:36:32 DE TYPE        
[1,7]<stdout>:MAILLAGE_P                                                                      
[1,7]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:36:32 DE TYPE        
[1,0]<stdout>:MAILLAGE_P                                                                      
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                       37842
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                      37841
[1,0]<stdout>:                              SEG2                   98
[1,0]<stdout>:                              QUAD4                3192
[1,0]<stdout>:                              HEXA8               34551
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,4]<stdout>:
[1,4]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:36:32 DE TYPE        
[1,4]<stdout>:MAILLAGE_P                                                                      
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE NOEUDS                       37554
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE MAILLES                      37553
[1,4]<stdout>:                              SEG2                   98
[1,2]<stdout>:
[1,2]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,2]<stdout>:
[1,2]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:36:32 DE TYPE        
[1,2]<stdout>:MAILLAGE_P                                                                      
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE NOEUDS                       37422
[1,2]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,1]<stdout>:
[1,1]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:36:32 DE TYPE        
[1,1]<stdout>:MAILLAGE_P                                                                      
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE NOEUDS                       37726
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE MAILLES                      37723
[1,1]<stdout>:                              SEG2                   98
[1,6]<stdout>:
[1,6]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,6]<stdout>:
[1,6]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:36:32 DE TYPE        
[1,6]<stdout>:MAILLAGE_P                                                                      
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE NOEUDS                       37468
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE MAILLES                      37433
[1,6]<stdout>:                              SEG2                   97
[1,6]<stdout>:                              QUAD4                3148
[1,6]<stdout>:                              HEXA8               34188
[1,6]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,3]<stdout>:
[1,3]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:36:32 DE TYPE        
[1,3]<stdout>:MAILLAGE_P                                                                      
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE NOEUDS                       38279
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE MAILLES                      38235
[1,3]<stdout>:                              SEG2                   98
[1,3]<stdout>:                              QUAD4                3202
[1,3]<stdout>:                              HEXA8               34935
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,3]<stdout>:
[1,6]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,5]<stdout>:NOMBRE DE NOEUDS                       37353
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE MAILLES                      37319
[1,5]<stdout>:                              SEG2                   97
[1,5]<stdout>:                              QUAD4                3146
[1,5]<stdout>:                              HEXA8               34076
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,7]<stdout>:NOMBRE DE NOEUDS                       37609
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE MAILLES                      37508
[1,7]<stdout>:                              SEG2                   97
[1,7]<stdout>:                              QUAD4                3151
[1,7]<stdout>:                              HEXA8               34260
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,4]<stdout>:                              QUAD4                3183
[1,4]<stdout>:                              HEXA8               34272
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,2]<stdout>:NOMBRE DE MAILLES                      37388
[1,2]<stdout>:                              SEG2                   97
[1,2]<stdout>:                              QUAD4                3147
[1,2]<stdout>:                              HEXA8               34144
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,1]<stdout>:                              QUAD4                3188
[1,1]<stdout>:                              HEXA8               34437
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.01
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.01
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.01
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.01
[1,7]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,5]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,7]<stdout>:# Mémoire (Mo) :   921.52 /   732.96 /   217.83 /   185.76 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :   910.24 /   735.32 /   217.73 /   185.68 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0002   user+syst:        0.53s (syst:        0.05s, elaps:        0.58s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0002   user+syst:        0.52s (syst:        0.06s, elaps:        0.58s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,6]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,2]<stdout>:# Mémoire (Mo) :   910.50 /   735.26 /   217.76 /   185.70 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0002   user+syst:        0.53s (syst:        0.05s, elaps:        0.58s)
[1,6]<stdout>:# Mémoire (Mo) :   910.73 /   735.29 /   217.78 /   185.72 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Fin commande #0002   user+syst:        0.51s (syst:        0.07s, elaps:        0.58s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,4]<stdout>:# Mémoire (Mo) :   911.40 /   735.47 /   217.82 /   185.76 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,4]<stdout>:# Fin commande #0002   user+syst:        0.50s (syst:        0.08s, elaps:        0.58s)
[1,0]<stdout>:# Résultat commande #0004 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :   922.80 /   733.41 /   217.89 /   185.83 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0002   user+syst:        0.52s (syst:        0.06s, elaps:        0.58s)
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   854.14 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0004   user+syst:        0.49s (syst:        0.09s, elaps:        0.58s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,3]<stdout>:# Mémoire (Mo) :   915.84 /   736.61 /   218.12 /   186.04 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0002   user+syst:        0.50s (syst:        0.08s, elaps:        0.58s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt131
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt131
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt131
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt131
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt131
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt131
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt131
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0003 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 131
[1,5]<stdout>:# Commande #0003 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 131
[1,4]<stdout>:# Commande #0003 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 131
[1,2]<stdout>:# Commande #0003 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 131
[1,7]<stdout>:# Commande #0003 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 131
[1,1]<stdout>:# Commande #0003 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 131
[1,3]<stdout>:# Commande #0003 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 131
[1,4]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,4]<stdout>:                            PHENOMENE='MECANIQUE',
[1,4]<stdout>:                            TOUT='OUI'),
[1,4]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,4]<stdout>:                    INFO=1,
[1,4]<stdout>:                    MAILLAGE='<00000004>',
[1,4]<stdout>:                    VERI_JACOBIEN='OUI',
[1,4]<stdout>:                    VERI_NORM_IFS='OUI',
[1,4]<stdout>:                    VERI_PLAN='OUI')
[1,4]<stdout>:
[1,6]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,6]<stdout>:                            PHENOMENE='MECANIQUE',
[1,6]<stdout>:                            TOUT='OUI'),
[1,6]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,6]<stdout>:                    INFO=1,
[1,6]<stdout>:                    MAILLAGE='<00000004>',
[1,6]<stdout>:                    VERI_JACOBIEN='OUI',
[1,6]<stdout>:                    VERI_NORM_IFS='OUI',
[1,6]<stdout>:                    VERI_PLAN='OUI')
[1,6]<stdout>:
[1,5]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,5]<stdout>:                            PHENOMENE='MECANIQUE',
[1,5]<stdout>:                            TOUT='OUI'),
[1,5]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,5]<stdout>:                    INFO=1,
[1,5]<stdout>:                    MAILLAGE='<00000004>',
[1,5]<stdout>:                    VERI_JACOBIEN='OUI',
[1,5]<stdout>:                    VERI_NORM_IFS='OUI',
[1,5]<stdout>:                    VERI_PLAN='OUI')
[1,5]<stdout>:
[1,2]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,2]<stdout>:                            PHENOMENE='MECANIQUE',
[1,2]<stdout>:                            TOUT='OUI'),
[1,2]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,2]<stdout>:                    INFO=1,
[1,2]<stdout>:                    MAILLAGE='<00000004>',
[1,2]<stdout>:                    VERI_JACOBIEN='OUI',
[1,2]<stdout>:                    VERI_NORM_IFS='OUI',
[1,2]<stdout>:                    VERI_PLAN='OUI')
[1,2]<stdout>:
[1,7]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,7]<stdout>:                            PHENOMENE='MECANIQUE',
[1,7]<stdout>:                            TOUT='OUI'),
[1,7]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,7]<stdout>:                    INFO=1,
[1,7]<stdout>:                    MAILLAGE='<00000004>',
[1,7]<stdout>:                    VERI_JACOBIEN='OUI',
[1,7]<stdout>:                    VERI_NORM_IFS='OUI',
[1,7]<stdout>:                    VERI_PLAN='OUI')
[1,7]<stdout>:
[1,1]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,1]<stdout>:                            PHENOMENE='MECANIQUE',
[1,1]<stdout>:                            TOUT='OUI'),
[1,1]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,1]<stdout>:                    INFO=1,
[1,1]<stdout>:                    MAILLAGE='<00000004>',
[1,1]<stdout>:                    VERI_JACOBIEN='OUI',
[1,1]<stdout>:                    VERI_NORM_IFS='OUI',
[1,1]<stdout>:                    VERI_PLAN='OUI')
[1,1]<stdout>:
[1,3]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,3]<stdout>:                            PHENOMENE='MECANIQUE',
[1,3]<stdout>:                            TOUT='OUI'),
[1,3]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,3]<stdout>:                    INFO=1,
[1,3]<stdout>:                    MAILLAGE='<00000004>',
[1,3]<stdout>:                    VERI_JACOBIEN='OUI',
[1,3]<stdout>:                    VERI_NORM_IFS='OUI',
[1,3]<stdout>:                    VERI_PLAN='OUI')
[1,3]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt131
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0005 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 131
[1,0]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,0]<stdout>:                            PHENOMENE='MECANIQUE',
[1,0]<stdout>:                            TOUT='OUI'),
[1,0]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,0]<stdout>:                    INFO=1,
[1,0]<stdout>:                    MAILLAGE='<00000004>',
[1,0]<stdout>:                    VERI_JACOBIEN='OUI',
[1,0]<stdout>:                    VERI_NORM_IFS='OUI',
[1,0]<stdout>:                    VERI_PLAN='OUI')
[1,0]<stdout>:
[1,0]<stdout>:Sur les 37841 mailles du maillage 00000004, on a demandé l'affectation de 37841, on a pu en affecter
[1,0]<stdout>:37841.
[1,7]<stdout>:Sur les 37508 mailles du maillage 00000004, on a demandé l'affectation de 37508, on a pu en affecter
[1,7]<stdout>:37508.
[1,3]<stdout>:Sur les 38235 mailles du maillage 00000004, on a demandé l'affectation de 38235, on a pu en affecter
[1,3]<stdout>:38235.
[1,2]<stdout>:Sur les 37388 mailles du maillage 00000004, on a demandé l'affectation de 37388, on a pu en affecter
[1,2]<stdout>:37388.
[1,6]<stdout>:Sur les 37433 mailles du maillage 00000004, on a demandé l'affectation de 37433, on a pu en affecter
[1,6]<stdout>:37433.
[1,1]<stdout>:Sur les 37723 mailles du maillage 00000004, on a demandé l'affectation de 37723, on a pu en affecter
[1,1]<stdout>:37723.
[1,5]<stdout>:Sur les 37319 mailles du maillage 00000004, on a demandé l'affectation de 37319, on a pu en affecter
[1,5]<stdout>:37319.
[1,4]<stdout>:Sur les 37553 mailles du maillage 00000004, on a demandé l'affectation de 37553, on a pu en affecter
[1,4]<stdout>:37553.
[1,6]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,4]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,0]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,2]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,5]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,1]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,7]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,3]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,6]<stdout>:_                _                SEG2         MECA_ARETE2      97
[1,4]<stdout>:_                _                SEG2         MECA_ARETE2      98
[1,0]<stdout>:_                _                SEG2         MECA_ARETE2      98
[1,6]<stdout>:_                _                QUAD4        MECA_FACE4       3148
[1,6]<stdout>:3D               _                HEXA8        MECA_HEXA8       34188
[1,4]<stdout>:_                _                QUAD4        MECA_FACE4       3183
[1,0]<stdout>:_                _                QUAD4        MECA_FACE4       3192
[1,2]<stdout>:_                _                SEG2         MECA_ARETE2      97
[1,5]<stdout>:_                _                SEG2         MECA_ARETE2      97
[1,7]<stdout>:_                _                SEG2         MECA_ARETE2      97
[1,1]<stdout>:_                _                SEG2         MECA_ARETE2      98
[1,4]<stdout>:3D               _                HEXA8        MECA_HEXA8       34272
[1,0]<stdout>:3D               _                HEXA8        MECA_HEXA8       34551
[1,2]<stdout>:_                _                QUAD4        MECA_FACE4       3147
[1,5]<stdout>:_                _                QUAD4        MECA_FACE4       3146
[1,7]<stdout>:_                _                QUAD4        MECA_FACE4       3151
[1,1]<stdout>:_                _                QUAD4        MECA_FACE4       3188
[1,2]<stdout>:3D               _                HEXA8        MECA_HEXA8       34144
[1,5]<stdout>:3D               _                HEXA8        MECA_HEXA8       34076
[1,7]<stdout>:3D               _                HEXA8        MECA_HEXA8       34260
[1,1]<stdout>:3D               _                HEXA8        MECA_HEXA8       34437
[1,3]<stdout>:_                _                SEG2         MECA_ARETE2      98
[1,3]<stdout>:_                _                QUAD4        MECA_FACE4       3202
[1,3]<stdout>:3D               _                HEXA8        MECA_HEXA8       34935
[1,4]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,6]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,0]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,2]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,7]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.02
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.02      0.00      0.03
[1,3]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,1]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,5]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.02
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,1]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,7]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,4]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,6]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,0]<stdout>:# Résultat commande #0005 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,2]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,5]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,3]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,1]<stdout>:# Mémoire (Mo) :   922.80 /   766.14 /   217.89 /   204.76 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :   921.52 /   765.70 /   217.83 /   204.73 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :   911.40 /   768.20 /   217.82 /   204.73 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :   910.73 /   768.02 /   217.78 /   204.71 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :   915.84 /   769.34 /   218.12 /   204.86 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :   910.24 /   768.05 /   217.73 /   204.69 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :   910.50 /   768.00 /   217.76 /   204.70 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   844.33 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0003   user+syst:        0.20s (syst:        0.00s, elaps:        0.20s)
[1,2]<stdout>:# Fin commande #0003   user+syst:        0.20s (syst:        0.00s, elaps:        0.20s)
[1,3]<stdout>:# Fin commande #0003   user+syst:        0.20s (syst:        0.00s, elaps:        0.20s)
[1,5]<stdout>:# Fin commande #0003   user+syst:        0.20s (syst:        0.00s, elaps:        0.20s)
[1,6]<stdout>:# Fin commande #0003   user+syst:        0.20s (syst:        0.00s, elaps:        0.20s)
[1,1]<stdout>:# Fin commande #0003   user+syst:        0.20s (syst:        0.00s, elaps:        0.20s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0003   user+syst:        0.20s (syst:        0.00s, elaps:        0.20s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0005   user+syst:        0.17s (syst:        0.00s, elaps:        0.17s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt141
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt141
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt141
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt141
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt141
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt141
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt141
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt141
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0004 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 141
[1,6]<stdout>:# Commande #0004 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 141
[1,7]<stdout>:# Commande #0004 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 141
[1,1]<stdout>:# Commande #0004 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 141
[1,2]<stdout>:# Commande #0004 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 141
[1,3]<stdout>:# Commande #0004 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 141
[1,5]<stdout>:# Commande #0004 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 141
[1,0]<stdout>:# Commande #0006 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 141
[1,1]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                                   SY=200.0),
[1,1]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,1]<stdout>:                              COEF_AMOR=1.0,
[1,1]<stdout>:                              E=200000.0,
[1,1]<stdout>:                              K_DESSIC=0.0,
[1,1]<stdout>:                              NU=0.3),
[1,1]<stdout>:                      INFO=1)
[1,1]<stdout>:
[1,4]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                                   SY=200.0),
[1,4]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,4]<stdout>:                              COEF_AMOR=1.0,
[1,4]<stdout>:                              E=200000.0,
[1,4]<stdout>:                              K_DESSIC=0.0,
[1,4]<stdout>:                              NU=0.3),
[1,4]<stdout>:                      INFO=1)
[1,4]<stdout>:
[1,6]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                                   SY=200.0),
[1,6]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,6]<stdout>:                              COEF_AMOR=1.0,
[1,6]<stdout>:                              E=200000.0,
[1,6]<stdout>:                              K_DESSIC=0.0,
[1,6]<stdout>:                              NU=0.3),
[1,6]<stdout>:                      INFO=1)
[1,6]<stdout>:
[1,2]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                                   SY=200.0),
[1,2]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,2]<stdout>:                              COEF_AMOR=1.0,
[1,2]<stdout>:                              E=200000.0,
[1,2]<stdout>:                              K_DESSIC=0.0,
[1,2]<stdout>:                              NU=0.3),
[1,2]<stdout>:                      INFO=1)
[1,2]<stdout>:
[1,5]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                                   SY=200.0),
[1,5]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,5]<stdout>:                              COEF_AMOR=1.0,
[1,5]<stdout>:                              E=200000.0,
[1,5]<stdout>:                              K_DESSIC=0.0,
[1,5]<stdout>:                              NU=0.3),
[1,5]<stdout>:                      INFO=1)
[1,5]<stdout>:
[1,3]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                                   SY=200.0),
[1,3]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,3]<stdout>:                              COEF_AMOR=1.0,
[1,3]<stdout>:                              E=200000.0,
[1,3]<stdout>:                              K_DESSIC=0.0,
[1,3]<stdout>:                              NU=0.3),
[1,3]<stdout>:                      INFO=1)
[1,3]<stdout>:
[1,7]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                                   SY=200.0),
[1,7]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,7]<stdout>:                              COEF_AMOR=1.0,
[1,7]<stdout>:                              E=200000.0,
[1,7]<stdout>:                              K_DESSIC=0.0,
[1,7]<stdout>:                              NU=0.3),
[1,7]<stdout>:                      INFO=1)
[1,7]<stdout>:
[1,0]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                                   SY=200.0),
[1,0]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,0]<stdout>:                              COEF_AMOR=1.0,
[1,0]<stdout>:                              E=200000.0,
[1,0]<stdout>:                              K_DESSIC=0.0,
[1,0]<stdout>:                              NU=0.3),
[1,0]<stdout>:                      INFO=1)
[1,0]<stdout>:
[1,6]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,2]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,7]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,1]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,3]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,2]<stdout>:# Mémoire (Mo) :   910.50 /   768.00 /   217.76 /   204.70 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,6]<stdout>:# Mémoire (Mo) :   910.73 /   768.02 /   217.78 /   204.71 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :   921.52 /   765.70 /   217.83 /   204.73 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :   922.80 /   766.14 /   217.89 /   204.76 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,2]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,3]<stdout>:# Mémoire (Mo) :   915.84 /   769.34 /   218.12 /   204.86 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0004   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :   911.40 /   768.20 /   217.82 /   204.73 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,3]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,5]<stdout>:# Mémoire (Mo) :   910.24 /   768.05 /   217.73 /   204.69 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0006 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   844.33 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0006   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt152
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt152
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt152
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt152
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt152
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt152
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0005 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 152
[1,6]<stdout>:# Commande #0005 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:# Commande #0005 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 152
[1,1]<stdout>:# Commande #0005 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 152
[1,3]<stdout>:# Commande #0005 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 152
[1,4]<stdout>:# Commande #0005 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 152
[1,1]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,1]<stdout>:                              TOUT='OUI'),
[1,1]<stdout>:                      INFO=1,
[1,1]<stdout>:                      MAILLAGE='<00000004>')
[1,1]<stdout>:
[1,7]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,7]<stdout>:                              TOUT='OUI'),
[1,7]<stdout>:                      INFO=1,
[1,7]<stdout>:                      MAILLAGE='<00000004>')
[1,7]<stdout>:
[1,2]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,2]<stdout>:                              TOUT='OUI'),
[1,2]<stdout>:                      INFO=1,
[1,2]<stdout>:                      MAILLAGE='<00000004>')
[1,2]<stdout>:
[1,6]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,6]<stdout>:                              TOUT='OUI'),
[1,6]<stdout>:                      INFO=1,
[1,6]<stdout>:                      MAILLAGE='<00000004>')
[1,6]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt152
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,4]<stdout>:                              TOUT='OUI'),
[1,4]<stdout>:                      INFO=1,
[1,4]<stdout>:                      MAILLAGE='<00000004>')
[1,4]<stdout>:
[1,3]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,3]<stdout>:                              TOUT='OUI'),
[1,3]<stdout>:                      INFO=1,
[1,3]<stdout>:                      MAILLAGE='<00000004>')
[1,3]<stdout>:
[1,5]<stdout>:# Commande #0005 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 152
[1,5]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,5]<stdout>:                              TOUT='OUI'),
[1,5]<stdout>:                      INFO=1,
[1,5]<stdout>:                      MAILLAGE='<00000004>')
[1,5]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt152
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0007 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 152
[1,0]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,0]<stdout>:                              TOUT='OUI'),
[1,0]<stdout>:                      INFO=1,
[1,0]<stdout>:                      MAILLAGE='<00000004>')
[1,0]<stdout>:
[1,2]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,6]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,1]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,7]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,4]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,2]<stdout>:# Mémoire (Mo) :   910.50 /   768.00 /   217.76 /   204.70 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,6]<stdout>:# Mémoire (Mo) :   910.73 /   768.02 /   217.78 /   204.71 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :   922.80 /   766.14 /   217.89 /   204.76 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :   921.52 /   765.70 /   217.83 /   204.73 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :   911.40 /   768.20 /   217.82 /   204.73 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,1]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Mémoire (Mo) :   915.84 /   769.34 /   218.12 /   204.86 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,4]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,5]<stdout>:# Mémoire (Mo) :   910.24 /   768.05 /   217.73 /   204.69 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt161
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt161
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt161
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt161
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt161
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt161
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0006 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 161
[1,2]<stdout>:# Commande #0006 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 161
[1,1]<stdout>:# Commande #0006 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 161
[1,7]<stdout>:# Commande #0006 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:# Commande #0006 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 161
[1,3]<stdout>:# Commande #0006 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 161
[1,2]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,2]<stdout>:                                    DY=0.0,
[1,2]<stdout>:                                    DZ=0.0,
[1,2]<stdout>:                                    GROUP_MA='LEFT'),
[1,2]<stdout>:                       MODELE=model,
[1,2]<stdout>:                       SYNTAXE='NON')
[1,2]<stdout>:
[1,1]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,1]<stdout>:                                    DY=0.0,
[1,1]<stdout>:                                    DZ=0.0,
[1,1]<stdout>:                                    GROUP_MA='LEFT'),
[1,1]<stdout>:                       MODELE=model,
[1,1]<stdout>:                       SYNTAXE='NON')
[1,1]<stdout>:
[1,7]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,7]<stdout>:                                    DY=0.0,
[1,7]<stdout>:                                    DZ=0.0,
[1,7]<stdout>:                                    GROUP_MA='LEFT'),
[1,7]<stdout>:                       MODELE=model,
[1,7]<stdout>:                       SYNTAXE='NON')
[1,7]<stdout>:
[1,6]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,6]<stdout>:                                    DY=0.0,
[1,6]<stdout>:                                    DZ=0.0,
[1,6]<stdout>:                                    GROUP_MA='LEFT'),
[1,6]<stdout>:                       MODELE=model,
[1,6]<stdout>:                       SYNTAXE='NON')
[1,6]<stdout>:
[1,4]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,4]<stdout>:                                    DY=0.0,
[1,4]<stdout>:                                    DZ=0.0,
[1,4]<stdout>:                                    GROUP_MA='LEFT'),
[1,4]<stdout>:                       MODELE=model,
[1,4]<stdout>:                       SYNTAXE='NON')
[1,4]<stdout>:
[1,3]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,3]<stdout>:                                    DY=0.0,
[1,3]<stdout>:                                    DZ=0.0,
[1,3]<stdout>:                                    GROUP_MA='LEFT'),
[1,3]<stdout>:                       MODELE=model,
[1,3]<stdout>:                       SYNTAXE='NON')
[1,3]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt161
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0006 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:# Résultat commande #0007 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,5]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,5]<stdout>:                                    DY=0.0,
[1,5]<stdout>:                                    DZ=0.0,
[1,5]<stdout>:                                    GROUP_MA='LEFT'),
[1,5]<stdout>:                       MODELE=model,
[1,5]<stdout>:                       SYNTAXE='NON')
[1,5]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   844.33 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0007   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt161
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0008 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,0]<stdout>:                                    DY=0.0,
[1,0]<stdout>:                                    DZ=0.0,
[1,0]<stdout>:                                    GROUP_MA='LEFT'),
[1,0]<stdout>:                       MODELE=model,
[1,0]<stdout>:                       SYNTAXE='NON')
[1,0]<stdout>:
[1,6]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,1]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,6]<stdout>:# Mémoire (Mo) :   910.73 /   768.02 /   217.78 /   204.71 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,0]<stdout>:# Résultat commande #0008 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,2]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,6]<stdout>:# Fin commande #0006   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,5]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :   922.80 /   766.14 /   217.89 /   204.76 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :   921.52 /   765.70 /   217.83 /   204.73 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   844.33 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :   910.50 /   768.00 /   217.76 /   204.70 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0006   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,1]<stdout>:# Fin commande #0006   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,5]<stdout>:# Mémoire (Mo) :   910.24 /   768.05 /   217.73 /   204.69 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :   911.40 /   768.20 /   217.82 /   204.73 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0008   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,2]<stdout>:# Fin commande #0006   user+syst:        0.02s (syst:        0.01s, elaps:        0.02s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0006   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0006   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,3]<stdout>:# Mémoire (Mo) :   915.84 /   769.34 /   218.12 /   204.86 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0006   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt173
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt173
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt173
[1,6]<stdout>:# Commande #0007 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 173
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt173
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt173
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,6]<stdout>:                                            DZ=0.001,
[1,6]<stdout>:                                            GROUP_MA='RIGHT'),
[1,6]<stdout>:                               MODELE=model,
[1,6]<stdout>:                               SYNTAXE='NON')
[1,6]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt173
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0007 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 173
[1,7]<stdout>:# Commande #0007 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 173
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt173
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,7]<stdout>:                                            DZ=0.001,
[1,7]<stdout>:                                            GROUP_MA='RIGHT'),
[1,7]<stdout>:                               MODELE=model,
[1,7]<stdout>:                               SYNTAXE='NON')
[1,7]<stdout>:
[1,2]<stdout>:# Commande #0007 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 173
[1,1]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,1]<stdout>:                                            DZ=0.001,
[1,1]<stdout>:                                            GROUP_MA='RIGHT'),
[1,1]<stdout>:                               MODELE=model,
[1,1]<stdout>:                               SYNTAXE='NON')
[1,1]<stdout>:
[1,0]<stdout>:# Commande #0009 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 173
[1,5]<stdout>:# Commande #0007 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 173
[1,4]<stdout>:# Commande #0007 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 173
[1,2]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,2]<stdout>:                                            DZ=0.001,
[1,2]<stdout>:                                            GROUP_MA='RIGHT'),
[1,2]<stdout>:                               MODELE=model,
[1,2]<stdout>:                               SYNTAXE='NON')
[1,2]<stdout>:
[1,0]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,0]<stdout>:                                            DZ=0.001,
[1,0]<stdout>:                                            GROUP_MA='RIGHT'),
[1,0]<stdout>:                               MODELE=model,
[1,0]<stdout>:                               SYNTAXE='NON')
[1,0]<stdout>:
[1,5]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,5]<stdout>:                                            DZ=0.001,
[1,5]<stdout>:                                            GROUP_MA='RIGHT'),
[1,5]<stdout>:                               MODELE=model,
[1,5]<stdout>:                               SYNTAXE='NON')
[1,5]<stdout>:
[1,4]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,4]<stdout>:                                            DZ=0.001,
[1,4]<stdout>:                                            GROUP_MA='RIGHT'),
[1,4]<stdout>:                               MODELE=model,
[1,4]<stdout>:                               SYNTAXE='NON')
[1,4]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt173
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0007 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 173
[1,3]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,3]<stdout>:                                            DZ=0.001,
[1,3]<stdout>:                                            GROUP_MA='RIGHT'),
[1,3]<stdout>:                               MODELE=model,
[1,3]<stdout>:                               SYNTAXE='NON')
[1,3]<stdout>:
[1,2]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,2]<stdout>:<MechanicalDirichletBC>
[1,5]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,5]<stdout>:<MechanicalDirichletBC>
[1,4]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,4]<stdout>:<MechanicalDirichletBC>
[1,2]<stdout>:# Mémoire (Mo) :   910.50 /   768.00 /   217.76 /   204.70 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :   910.24 /   768.05 /   217.73 /   204.69 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :   911.40 /   768.20 /   217.82 /   204.73 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,6]<stdout>:<MechanicalDirichletBC>
[1,5]<stdout>:# Fin commande #0007   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,2]<stdout>:# Fin commande #0007   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0007   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :   910.73 /   768.02 /   217.78 /   204.71 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,7]<stdout>:<MechanicalDirichletBC>
[1,1]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,1]<stdout>:<MechanicalDirichletBC>
[1,0]<stdout>:# Résultat commande #0009 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,0]<stdout>:<MechanicalDirichletBC>
[1,6]<stdout>:# Fin commande #0007   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Mémoire (Mo) :   921.52 /   765.70 /   217.83 /   204.73 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,3]<stdout>:<MechanicalDirichletBC>
[1,1]<stdout>:# Mémoire (Mo) :   922.80 /   766.14 /   217.89 /   204.76 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   844.33 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0007   user+syst:        0.02s (syst:        0.00s, elaps:        0.03s)
[1,1]<stdout>:# Fin commande #0007   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Mémoire (Mo) :   915.84 /   769.34 /   218.12 /   204.86 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0009   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,3]<stdout>:# Fin commande #0007   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt185
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt185
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt185
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt185
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt185
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0008 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 185
[1,5]<stdout>:# Commande #0008 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 185
[1,2]<stdout>:# Commande #0008 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 185
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt185
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt185
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0008 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 185
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt185
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,4]<stdout>:                            CHAM_MATER=mater,
[1,4]<stdout>:                            INST=0.0,
[1,4]<stdout>:                            MODELE=model,
[1,4]<stdout>:                            MODE_FOURIER=0,
[1,4]<stdout>:                            OPTION='RIGI_MECA')
[1,4]<stdout>:
[1,5]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,5]<stdout>:                            CHAM_MATER=mater,
[1,5]<stdout>:                            INST=0.0,
[1,5]<stdout>:                            MODELE=model,
[1,5]<stdout>:                            MODE_FOURIER=0,
[1,5]<stdout>:                            OPTION='RIGI_MECA')
[1,5]<stdout>:
[1,2]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,2]<stdout>:                            CHAM_MATER=mater,
[1,2]<stdout>:                            INST=0.0,
[1,2]<stdout>:                            MODELE=model,
[1,2]<stdout>:                            MODE_FOURIER=0,
[1,2]<stdout>:                            OPTION='RIGI_MECA')
[1,2]<stdout>:
[1,7]<stdout>:# Commande #0008 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 185
[1,1]<stdout>:# Commande #0008 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 185
[1,6]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,6]<stdout>:                            CHAM_MATER=mater,
[1,6]<stdout>:                            INST=0.0,
[1,6]<stdout>:                            MODELE=model,
[1,6]<stdout>:                            MODE_FOURIER=0,
[1,6]<stdout>:                            OPTION='RIGI_MECA')
[1,6]<stdout>:
[1,0]<stdout>:# Commande #0010 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 185
[1,3]<stdout>:# Commande #0008 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 185
[1,7]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,7]<stdout>:                            CHAM_MATER=mater,
[1,7]<stdout>:                            INST=0.0,
[1,7]<stdout>:                            MODELE=model,
[1,7]<stdout>:                            MODE_FOURIER=0,
[1,7]<stdout>:                            OPTION='RIGI_MECA')
[1,7]<stdout>:
[1,1]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,1]<stdout>:                            CHAM_MATER=mater,
[1,1]<stdout>:                            INST=0.0,
[1,1]<stdout>:                            MODELE=model,
[1,1]<stdout>:                            MODE_FOURIER=0,
[1,1]<stdout>:                            OPTION='RIGI_MECA')
[1,1]<stdout>:
[1,0]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,0]<stdout>:                            CHAM_MATER=mater,
[1,0]<stdout>:                            INST=0.0,
[1,0]<stdout>:                            MODELE=model,
[1,0]<stdout>:                            MODE_FOURIER=0,
[1,0]<stdout>:                            OPTION='RIGI_MECA')
[1,0]<stdout>:
[1,3]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,3]<stdout>:                            CHAM_MATER=mater,
[1,3]<stdout>:                            INST=0.0,
[1,3]<stdout>:                            MODELE=model,
[1,3]<stdout>:                            MODE_FOURIER=0,
[1,3]<stdout>:                            OPTION='RIGI_MECA')
[1,3]<stdout>:
[1,0]<stdout>:# Résultat commande #0010 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,0]<stdout>:<ElementaryMatrixDisplacementReal>
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   844.33 /   292.61 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0010   user+syst:        0.41s (syst:        0.00s, elaps:        0.42s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt192
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0011 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 192
[1,0]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,0]<stdout>:                  MATR_RIGI=stiff_elem)
[1,0]<stdout>:
[1,2]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,2]<stdout>:<ElementaryMatrixDisplacementReal>
[1,2]<stdout>:# Mémoire (Mo) :   910.50 /   810.45 /   291.58 /   206.89 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0008   user+syst:        0.42s (syst:        0.00s, elaps:        0.42s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,4]<stdout>:<ElementaryMatrixDisplacementReal>
[1,4]<stdout>:# Mémoire (Mo) :   911.40 /   813.04 /   291.91 /   206.92 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0008   user+syst:        0.41s (syst:        0.01s, elaps:        0.42s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt192
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0009 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 192
[1,6]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,6]<stdout>:<ElementaryMatrixDisplacementReal>
[1,2]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,2]<stdout>:                  MATR_RIGI=stiff_elem)
[1,2]<stdout>:
[1,6]<stdout>:# Mémoire (Mo) :   910.73 /   819.47 /   291.65 /   206.90 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt192
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Fin commande #0008   user+syst:        0.41s (syst:        0.02s, elaps:        0.42s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,7]<stdout>:<ElementaryMatrixDisplacementReal>
[1,4]<stdout>:# Commande #0009 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 192
[1,7]<stdout>:# Mémoire (Mo) :   921.52 /   810.54 /   291.86 /   206.92 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0008   user+syst:        0.43s (syst:        0.00s, elaps:        0.42s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,4]<stdout>:                  MATR_RIGI=stiff_elem)
[1,4]<stdout>:
[1,5]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,5]<stdout>:<ElementaryMatrixDisplacementReal>
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt192
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Mémoire (Mo) :   910.24 /   821.59 /   291.40 /   206.87 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Commande #0009 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 192
[1,5]<stdout>:# Fin commande #0008   user+syst:        0.41s (syst:        0.01s, elaps:        0.42s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt192
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,6]<stdout>:                  MATR_RIGI=stiff_elem)
[1,6]<stdout>:
[1,7]<stdout>:# Commande #0009 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 192
[1,7]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,7]<stdout>:                  MATR_RIGI=stiff_elem)
[1,7]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt192
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0009 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 192
[1,1]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,1]<stdout>:<ElementaryMatrixDisplacementReal>
[1,5]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,5]<stdout>:                  MATR_RIGI=stiff_elem)
[1,5]<stdout>:
[1,1]<stdout>:# Mémoire (Mo) :   922.80 /   817.97 /   292.31 /   206.96 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0008   user+syst:        0.42s (syst:        0.00s, elaps:        0.42s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt192
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0009 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 192
[1,1]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,1]<stdout>:                  MATR_RIGI=stiff_elem)
[1,1]<stdout>:
[1,3]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,3]<stdout>:<ElementaryMatrixDisplacementReal>
[1,3]<stdout>:# Mémoire (Mo) :   915.84 /   815.04 /   293.66 /   207.10 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0008   user+syst:        0.42s (syst:        0.01s, elaps:        0.43s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt192
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0009 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 192
[1,3]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,3]<stdout>:                  MATR_RIGI=stiff_elem)
[1,3]<stdout>:
[1,1]<stdout>:Le système linéaire à résoudre a 823875 degrés de liberté:
[1,1]<stdout>:   - 823875 sont des degrés de liberté physiques
[1,1]<stdout>:     (ils sont portés par 274625 noeuds du maillage)
[1,1]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,1]<stdout>:     aux 0 relations linéaires dualisées.
[1,6]<stdout>:Le système linéaire à résoudre a 823875 degrés de liberté:
[1,6]<stdout>:   - 823875 sont des degrés de liberté physiques
[1,6]<stdout>:     (ils sont portés par 274625 noeuds du maillage)
[1,6]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,6]<stdout>:     aux 0 relations linéaires dualisées.
[1,7]<stdout>:Le système linéaire à résoudre a 823875 degrés de liberté:
[1,7]<stdout>:   - 823875 sont des degrés de liberté physiques
[1,7]<stdout>:     (ils sont portés par 274625 noeuds du maillage)
[1,7]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,7]<stdout>:     aux 0 relations linéaires dualisées.
[1,2]<stdout>:Le système linéaire à résoudre a 823875 degrés de liberté:
[1,2]<stdout>:   - 823875 sont des degrés de liberté physiques
[1,2]<stdout>:     (ils sont portés par 274625 noeuds du maillage)
[1,2]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,2]<stdout>:     aux 0 relations linéaires dualisées.
[1,3]<stdout>:Le système linéaire à résoudre a 823875 degrés de liberté:
[1,3]<stdout>:   - 823875 sont des degrés de liberté physiques
[1,3]<stdout>:     (ils sont portés par 274625 noeuds du maillage)
[1,3]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,3]<stdout>:     aux 0 relations linéaires dualisées.
[1,4]<stdout>:Le système linéaire à résoudre a 823875 degrés de liberté:
[1,4]<stdout>:   - 823875 sont des degrés de liberté physiques
[1,4]<stdout>:     (ils sont portés par 274625 noeuds du maillage)
[1,4]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,4]<stdout>:     aux 0 relations linéaires dualisées.
[1,5]<stdout>:Le système linéaire à résoudre a 823875 degrés de liberté:
[1,5]<stdout>:   - 823875 sont des degrés de liberté physiques
[1,5]<stdout>:     (ils sont portés par 274625 noeuds du maillage)
[1,5]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,5]<stdout>:     aux 0 relations linéaires dualisées.
[1,0]<stdout>:Le système linéaire à résoudre a 823875 degrés de liberté:
[1,0]<stdout>:   - 823875 sont des degrés de liberté physiques
[1,0]<stdout>:     (ils sont portés par 274625 noeuds du maillage)
[1,0]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,0]<stdout>:     aux 0 relations linéaires dualisées.
[1,0]<stdout>:La matrice est de taille 113526 équations.
[1,0]<stdout>:  Elle contient 4385313 termes non nuls si elle est symétrique et 8657100 termes non nuls si elle
[1,0]<stdout>:n'est pas symétrique.
[1,0]<stdout>:  Soit un taux de remplissage de   0.067 %.
[1,6]<stdout>:La matrice est de taille 112404 équations.
[1,6]<stdout>:  Elle contient 4340202 termes non nuls si elle est symétrique et 8568000 termes non nuls si elle
[1,6]<stdout>:n'est pas symétrique.
[1,6]<stdout>:  Soit un taux de remplissage de   0.068 %.
[1,4]<stdout>:La matrice est de taille 112662 équations.
[1,4]<stdout>:  Elle contient 4350618 termes non nuls si elle est symétrique et 8588574 termes non nuls si elle
[1,4]<stdout>:n'est pas symétrique.
[1,4]<stdout>:  Soit un taux de remplissage de   0.068 %.
[1,5]<stdout>:La matrice est de taille 112059 équations.
[1,5]<stdout>:  Elle contient 4326300 termes non nuls si elle est symétrique et 8540541 termes non nuls si elle
[1,5]<stdout>:n'est pas symétrique.
[1,5]<stdout>:  Soit un taux de remplissage de   0.068 %.
[1,7]<stdout>:La matrice est de taille 112827 équations.
[1,7]<stdout>:  Elle contient 4351902 termes non nuls si elle est symétrique et 8590977 termes non nuls si elle
[1,7]<stdout>:n'est pas symétrique.
[1,7]<stdout>:  Soit un taux de remplissage de   0.067 %.
[1,3]<stdout>:La matrice est de taille 114837 équations.
[1,3]<stdout>:  Elle contient 4434744 termes non nuls si elle est symétrique et 8754651 termes non nuls si elle
[1,3]<stdout>:n'est pas symétrique.
[1,3]<stdout>:  Soit un taux de remplissage de   0.066 %.
[1,1]<stdout>:La matrice est de taille 113178 équations.
[1,1]<stdout>:  Elle contient 4371207 termes non nuls si elle est symétrique et 8629236 termes non nuls si elle
[1,1]<stdout>:n'est pas symétrique.
[1,1]<stdout>:  Soit un taux de remplissage de   0.067 %.
[1,2]<stdout>:La matrice est de taille 112266 équations.
[1,2]<stdout>:  Elle contient 4334706 termes non nuls si elle est symétrique et 8557146 termes non nuls si elle
[1,2]<stdout>:n'est pas symétrique.
[1,2]<stdout>:  Soit un taux de remplissage de   0.068 %.
[1,3]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,6]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,4]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,2]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,7]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,3]<stdout>:# Mémoire (Mo) :   921.37 /   834.59 /   403.52 /   284.65 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :   916.34 /   829.56 /   400.91 /   284.01 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :   922.80 /   836.03 /   401.01 /   284.04 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :   921.52 /   830.59 /   401.30 /   284.13 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :   920.72 /   833.95 /   401.32 /   284.11 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,7]<stdout>:# Fin commande #0009   user+syst:        0.20s (syst:        0.15s, elaps:        0.35s)
[1,6]<stdout>:# Fin commande #0009   user+syst:        0.21s (syst:        0.14s, elaps:        0.35s)
[1,3]<stdout>:# Fin commande #0009   user+syst:        0.23s (syst:        0.11s, elaps:        0.34s)
[1,2]<stdout>:# Fin commande #0009   user+syst:        0.26s (syst:        0.09s, elaps:        0.35s)
[1,4]<stdout>:# Fin commande #0009   user+syst:        0.27s (syst:        0.08s, elaps:        0.35s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :   924.02 /   837.24 /   401.83 /   284.24 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0009   user+syst:        0.26s (syst:        0.10s, elaps:        0.35s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,5]<stdout>:# Mémoire (Mo) :   927.43 /   840.66 /   400.69 /   283.96 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0009   user+syst:        0.26s (syst:        0.09s, elaps:        0.35s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0011 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt197
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt197
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt197
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   861.06 /   402.20 /   284.33 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt197
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt197
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt197
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0011   user+syst:        0.31s (syst:        0.05s, elaps:        0.36s)
[1,6]<stdout>:# Commande #0010 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 197
[1,7]<stdout>:# Commande #0010 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 197
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0010 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 197
[1,2]<stdout>:# Commande #0010 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 197
[1,3]<stdout>:# Commande #0010 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 197
[1,1]<stdout>:# Commande #0010 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 197
[1,2]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:                         INFO=1,
[1,2]<stdout>:                         MATR_ELEM=stiff_elem,
[1,2]<stdout>:                         NUME_DDL=dofNum)
[1,2]<stdout>:
[1,7]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:                         INFO=1,
[1,7]<stdout>:                         MATR_ELEM=stiff_elem,
[1,7]<stdout>:                         NUME_DDL=dofNum)
[1,7]<stdout>:
[1,6]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:                         INFO=1,
[1,6]<stdout>:                         MATR_ELEM=stiff_elem,
[1,6]<stdout>:                         NUME_DDL=dofNum)
[1,6]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt197
[1,4]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:                         INFO=1,
[1,4]<stdout>:                         MATR_ELEM=stiff_elem,
[1,4]<stdout>:                         NUME_DDL=dofNum)
[1,4]<stdout>:
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:                         INFO=1,
[1,3]<stdout>:                         MATR_ELEM=stiff_elem,
[1,3]<stdout>:                         NUME_DDL=dofNum)
[1,3]<stdout>:
[1,1]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:                         INFO=1,
[1,1]<stdout>:                         MATR_ELEM=stiff_elem,
[1,1]<stdout>:                         NUME_DDL=dofNum)
[1,1]<stdout>:
[1,5]<stdout>:# Commande #0010 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 197
[1,5]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:                         INFO=1,
[1,5]<stdout>:                         MATR_ELEM=stiff_elem,
[1,5]<stdout>:                         NUME_DDL=dofNum)
[1,5]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt197
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0012 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 197
[1,0]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:                         INFO=1,
[1,0]<stdout>:                         MATR_ELEM=stiff_elem,
[1,0]<stdout>:                         NUME_DDL=dofNum)
[1,0]<stdout>:
[1,6]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,6]<stdout>:<AssemblyMatrixDisplacementReal>
[1,4]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,4]<stdout>:<AssemblyMatrixDisplacementReal>
[1,1]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,1]<stdout>:<AssemblyMatrixDisplacementReal>
[1,6]<stdout>:# Mémoire (Mo) :   922.80 /   869.14 /   401.01 /   284.04 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,2]<stdout>:<AssemblyMatrixDisplacementReal>
[1,4]<stdout>:# Mémoire (Mo) :   920.72 /   867.14 /   401.32 /   284.11 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0010   user+syst:        0.19s (syst:        0.01s, elaps:        0.19s)
[1,1]<stdout>:# Mémoire (Mo) :   924.02 /   870.59 /   401.83 /   284.24 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,3]<stdout>:<AssemblyMatrixDisplacementReal>
[1,2]<stdout>:# Mémoire (Mo) :   916.34 /   863.49 /   400.91 /   284.01 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,7]<stdout>:<AssemblyMatrixDisplacementReal>
[1,4]<stdout>:# Fin commande #0010   user+syst:        0.18s (syst:        0.02s, elaps:        0.19s)
[1,1]<stdout>:# Fin commande #0010   user+syst:        0.18s (syst:        0.01s, elaps:        0.19s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0010   user+syst:        0.18s (syst:        0.01s, elaps:        0.19s)
[1,3]<stdout>:# Mémoire (Mo) :   921.37 /   868.43 /   403.52 /   284.65 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Mémoire (Mo) :   921.52 /   864.66 /   401.30 /   284.13 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,5]<stdout>:<AssemblyMatrixDisplacementReal>
[1,3]<stdout>:# Fin commande #0010   user+syst:        0.19s (syst:        0.01s, elaps:        0.19s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0010   user+syst:        0.19s (syst:        0.01s, elaps:        0.19s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Mémoire (Mo) :   927.43 /   873.66 /   400.69 /   283.96 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0010   user+syst:        0.18s (syst:        0.01s, elaps:        0.19s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0012 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,0]<stdout>:<AssemblyMatrixDisplacementReal>
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   894.52 /   402.20 /   284.33 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0012   user+syst:        0.18s (syst:        0.01s, elaps:        0.19s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt204
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt204
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt204
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt204
[1,6]<stdout>:# Commande #0011 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 204
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0011 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 204
[1,1]<stdout>:# Commande #0011 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 204
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt204
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt204
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0011 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 204
[1,6]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,6]<stdout>:                         TOUT='OUI',
[1,6]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,6]<stdout>:                 INFO=1,
[1,6]<stdout>:                 MAILLAGE='<00000004>',
[1,6]<stdout>:                 OPERATION='AFFE',
[1,6]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,6]<stdout>:
[1,3]<stdout>:# Commande #0011 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 204
[1,4]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,4]<stdout>:                         TOUT='OUI',
[1,4]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,4]<stdout>:                 INFO=1,
[1,4]<stdout>:                 MAILLAGE='<00000004>',
[1,4]<stdout>:                 OPERATION='AFFE',
[1,4]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,4]<stdout>:
[1,7]<stdout>:# Commande #0011 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 204
[1,1]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,1]<stdout>:                         TOUT='OUI',
[1,1]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,1]<stdout>:                 INFO=1,
[1,1]<stdout>:                 MAILLAGE='<00000004>',
[1,1]<stdout>:                 OPERATION='AFFE',
[1,1]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,1]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt204
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,2]<stdout>:                         TOUT='OUI',
[1,2]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,2]<stdout>:                 INFO=1,
[1,2]<stdout>:                 MAILLAGE='<00000004>',
[1,2]<stdout>:                 OPERATION='AFFE',
[1,2]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,2]<stdout>:
[1,3]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,3]<stdout>:                         TOUT='OUI',
[1,3]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,3]<stdout>:                 INFO=1,
[1,3]<stdout>:                 MAILLAGE='<00000004>',
[1,3]<stdout>:                 OPERATION='AFFE',
[1,3]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,3]<stdout>:
[1,7]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,7]<stdout>:                         TOUT='OUI',
[1,7]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,7]<stdout>:                 INFO=1,
[1,7]<stdout>:                 MAILLAGE='<00000004>',
[1,7]<stdout>:                 OPERATION='AFFE',
[1,7]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,7]<stdout>:
[1,5]<stdout>:# Commande #0011 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 204
[1,5]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,5]<stdout>:                         TOUT='OUI',
[1,5]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,5]<stdout>:                 INFO=1,
[1,5]<stdout>:                 MAILLAGE='<00000004>',
[1,5]<stdout>:                 OPERATION='AFFE',
[1,5]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,5]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt204
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0013 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 204
[1,0]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,0]<stdout>:                         TOUT='OUI',
[1,0]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,0]<stdout>:                 INFO=1,
[1,0]<stdout>:                 MAILLAGE='<00000004>',
[1,0]<stdout>:                 OPERATION='AFFE',
[1,0]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,0]<stdout>:
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,0]<stdout>:# Résultat commande #0013 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   894.52 /   402.20 /   284.33 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0013   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,5]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,1]<stdout>:# Mémoire (Mo) :   924.02 /   873.19 /   401.83 /   284.24 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :   927.43 /   876.23 /   400.69 /   283.96 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,1]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
[1,5]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Mémoire (Mo) :   922.80 /   872.57 /   401.01 /   284.04 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt223
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.00
[1,0]<stdout>:# Commande #0014 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 223
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt223
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt223
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:                             INFO=1,
[1,0]<stdout>:                             INST=0.0,
[1,0]<stdout>:                             NUME_DDL=dofNum)
[1,0]<stdout>:
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,1]<stdout>:# Commande #0012 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 223
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.00
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt223
[1,5]<stdout>:# Commande #0012 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 223
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,6]<stdout>:# Commande #0012 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 223
[1,1]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:                             INFO=1,
[1,1]<stdout>:                             INST=0.0,
[1,1]<stdout>:                             NUME_DDL=dofNum)
[1,1]<stdout>:
[1,5]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:                             INFO=1,
[1,5]<stdout>:                             INST=0.0,
[1,5]<stdout>:                             NUME_DDL=dofNum)
[1,5]<stdout>:
[1,4]<stdout>:# Mémoire (Mo) :   920.72 /   873.17 /   401.32 /   284.11 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:                             INFO=1,
[1,6]<stdout>:                             INST=0.0,
[1,6]<stdout>:                             NUME_DDL=dofNum)
[1,6]<stdout>:
[1,4]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,3]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,7]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,2]<stdout>:# Mémoire (Mo) :   916.34 /   870.36 /   400.91 /   284.01 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :   921.52 /   871.55 /   401.30 /   284.13 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :   921.37 /   875.45 /   403.52 /   284.65 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0011   user+syst:        0.00s (syst:        0.00s, elaps:        0.01s)
[1,3]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
[1,7]<stdout>:# Fin commande #0011   user+syst:        0.01s (syst:        0.00s, elaps:        0.01s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt223
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0012 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 223
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt223
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt223
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt223
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:                             INFO=1,
[1,4]<stdout>:                             INST=0.0,
[1,4]<stdout>:                             NUME_DDL=dofNum)
[1,4]<stdout>:
[1,7]<stdout>:# Commande #0012 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 223
[1,2]<stdout>:# Commande #0012 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 223
[1,3]<stdout>:# Commande #0012 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 223
[1,7]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:                             INFO=1,
[1,7]<stdout>:                             INST=0.0,
[1,7]<stdout>:                             NUME_DDL=dofNum)
[1,7]<stdout>:
[1,2]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:                             INFO=1,
[1,2]<stdout>:                             INST=0.0,
[1,2]<stdout>:                             NUME_DDL=dofNum)
[1,2]<stdout>:
[1,3]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:                             INFO=1,
[1,3]<stdout>:                             INST=0.0,
[1,3]<stdout>:                             NUME_DDL=dofNum)
[1,3]<stdout>:
[1,5]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,0]<stdout>:# Résultat commande #0014 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,5]<stdout>:# Mémoire (Mo) :   927.43 /   876.23 /   400.69 /   283.96 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   894.52 /   402.20 /   284.33 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,0]<stdout>:# Fin commande #0014   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,6]<stdout>:# Mémoire (Mo) :   922.80 /   872.57 /   401.01 /   284.04 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :   924.02 /   873.19 /   401.83 /   284.24 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,4]<stdout>:# Mémoire (Mo) :   920.72 /   873.17 /   401.32 /   284.11 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,2]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,3]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,2]<stdout>:# Mémoire (Mo) :   916.34 /   871.21 /   400.91 /   284.01 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :   921.37 /   875.45 /   403.52 /   284.65 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :   921.52 /   872.42 /   401.30 /   284.13 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.03s)
[1,3]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.01s, elaps:        0.03s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:  0 KSP unpreconditioned resid norm 2.784557239768e+02 true resid norm 2.784557239768e+02 ||r(i)||/||b|| 1.000000000000e+00
[1,0]<stdout>:  1 KSP unpreconditioned resid norm 4.009571457659e+01 true resid norm 4.009571457659e+01 ||r(i)||/||b|| 1.439931419041e-01
[1,0]<stdout>:  2 KSP unpreconditioned resid norm 5.890060180254e+00 true resid norm 5.890060180254e+00 ||r(i)||/||b|| 2.115259150049e-02
[1,0]<stdout>:  3 KSP unpreconditioned resid norm 1.957958149858e+00 true resid norm 1.957958149858e+00 ||r(i)||/||b|| 7.031488244865e-03
[1,0]<stdout>:  4 KSP unpreconditioned resid norm 8.012318379371e-01 true resid norm 8.012318379371e-01 ||r(i)||/||b|| 2.877411986704e-03
[1,0]<stdout>:  5 KSP unpreconditioned resid norm 3.395331760170e-01 true resid norm 3.395331760170e-01 ||r(i)||/||b|| 1.219343496222e-03
[1,0]<stdout>:  6 KSP unpreconditioned resid norm 1.420869183877e-01 true resid norm 1.420869183877e-01 ||r(i)||/||b|| 5.102675440049e-04
[1,0]<stdout>:  7 KSP unpreconditioned resid norm 6.091624435935e-02 true resid norm 6.091624435934e-02 ||r(i)||/||b|| 2.187645615230e-04
[1,0]<stdout>:  8 KSP unpreconditioned resid norm 2.640903985864e-02 true resid norm 2.640903985864e-02 ||r(i)||/||b|| 9.484107376742e-05
[1,0]<stdout>:  9 KSP unpreconditioned resid norm 1.092884914679e-02 true resid norm 1.092884914679e-02 ||r(i)||/||b|| 3.924806784616e-05
[1,0]<stdout>: 10 KSP unpreconditioned resid norm 4.673954292475e-03 true resid norm 4.673954292474e-03 ||r(i)||/||b|| 1.678526921883e-05
[1,0]<stdout>: 11 KSP unpreconditioned resid norm 1.981512272372e-03 true resid norm 1.981512272372e-03 ||r(i)||/||b|| 7.116076638946e-06
[1,0]<stdout>: 12 KSP unpreconditioned resid norm 8.339694117590e-04 true resid norm 8.339694117609e-04 ||r(i)||/||b|| 2.994980314466e-06
[1,0]<stdout>: 13 KSP unpreconditioned resid norm 3.430933258008e-04 true resid norm 3.430933258007e-04 ||r(i)||/||b|| 1.232128831474e-06
[1,0]<stdout>: 14 KSP unpreconditioned resid norm 1.367094008445e-04 true resid norm 1.367094008456e-04 ||r(i)||/||b|| 4.909556136724e-07
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt72
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt72
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt72
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt72
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt72
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt72
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt72
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,6]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,1]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,7]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,2]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,3]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,4]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,0]<stdout>:| Refinement       |           6 |
[1,0]<stdout>:| :--------------- | ----------: |
[1,0]<stdout>:| Number of cells  |     262 144 |
[1,0]<stdout>:| Number of nodes  |     274 625 |
[1,0]<stdout>:| Number of DOFs   |     823 875 |
[1,0]<stdout>:| Number of procs  |           8 |
[1,0]<stdout>:| Nb of DOFs/proc  |     102 984 |
[1,0]<stdout>:| Build mesh       |        7.51 |
[1,0]<stdout>:| Model            |        0.20 |
[1,0]<stdout>:| Material         |        0.06 |
[1,0]<stdout>:| Boundary conditions |        0.05 |
[1,0]<stdout>:| Create matrix    |        0.42 |
[1,0]<stdout>:| Numbering        |        0.35 |
[1,0]<stdout>:| Assembly         |        0.20 |
[1,0]<stdout>:| Build RHS        |        0.04 |
[1,0]<stdout>:| Factorize        |        1.97 |
[1,0]<stdout>:| Solve            |        0.81 |
[1,0]<stdout>:| Total            |       11.62 |
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt72
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:FIN(INFO_RESU='NON',
[1,1]<stdout>:    RETASSAGE='NON')
[1,1]<stdout>:
[1,7]<stdout>:FIN(INFO_RESU='NON',
[1,7]<stdout>:    RETASSAGE='NON')
[1,7]<stdout>:
[1,2]<stdout>:FIN(INFO_RESU='NON',
[1,2]<stdout>:    RETASSAGE='NON')
[1,2]<stdout>:
[1,3]<stdout>:FIN(INFO_RESU='NON',
[1,3]<stdout>:    RETASSAGE='NON')
[1,3]<stdout>:
[1,6]<stdout>:FIN(INFO_RESU='NON',
[1,6]<stdout>:    RETASSAGE='NON')
[1,6]<stdout>:
[1,5]<stdout>:FIN(INFO_RESU='NON',
[1,5]<stdout>:    RETASSAGE='NON')
[1,5]<stdout>:
[1,4]<stdout>:FIN(INFO_RESU='NON',
[1,4]<stdout>:    RETASSAGE='NON')
[1,4]<stdout>:
[1,0]<stdout>:# Commande #0015 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,0]<stdout>:FIN(INFO_RESU='NON',
[1,0]<stdout>:    RETASSAGE='NON')
[1,0]<stdout>:
[1,6]<stdout>:No database in results, objects not saved on processor #6
[1,4]<stdout>:No database in results, objects not saved on processor #4
[1,2]<stdout>:No database in results, objects not saved on processor #2
[1,3]<stdout>:No database in results, objects not saved on processor #3
[1,7]<stdout>:No database in results, objects not saved on processor #7
[1,1]<stdout>:No database in results, objects not saved on processor #1
[1,5]<stdout>:No database in results, objects not saved on processor #5
[1,0]<stdout>:No database in results, objects not saved on processor #0
[1,0]<stdout>:****************************************************************************************************************************************************************
[1,0]<stdout>:***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
[1,0]<stdout>:****************************************************************************************************************************************************************
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------------ PETSc Performance Summary: ------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:petsc_aster on a  named fe732af82b6a with 8 processors, by Unknown Fri Jan 24 13:36:37 2025
[1,0]<stdout>:Using 1 OpenMP threads
[1,0]<stdout>:Using Petsc Release Version 3.20.5, unknown 
[1,0]<stdout>:
[1,0]<stdout>:                         Max       Max/Min     Avg       Total
[1,0]<stdout>:Time (sec):           1.165e+01     1.000   1.165e+01
[1,0]<stdout>:Objects:              0.000e+00     0.000   0.000e+00
[1,0]<stdout>:Flops:                2.889e+09     1.025   2.857e+09  2.285e+10
[1,0]<stdout>:Flops/sec:            2.481e+08     1.025   2.453e+08  1.962e+09
[1,0]<stdout>:MPI Msg Count:        3.430e+03     1.218   3.111e+03  2.489e+04
[1,0]<stdout>:MPI Msg Len (bytes):  3.274e+07     1.151   1.014e+04  2.524e+08
[1,0]<stdout>:MPI Reductions:       9.940e+02     1.000
[1,0]<stdout>:
[1,0]<stdout>:Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
[1,0]<stdout>:                            e.g., VecAXPY() for real vectors of length N --> 2N flops
[1,0]<stdout>:                            and VecAXPY() for complex vectors of length N --> 8N flops
[1,0]<stdout>:
[1,0]<stdout>:Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
[1,0]<stdout>:                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
[1,0]<stdout>: 0:      Main Stage: 1.1646e+01 100.0%  2.2854e+10 100.0%  2.489e+04 100.0%  1.014e+04      100.0%  9.760e+02  98.2%
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:See the 'Profiling' chapter of the users' manual for details on interpreting output.
[1,0]<stdout>:Phase summary info:
[1,0]<stdout>:   Count: number of times phase was executed
[1,0]<stdout>:   Time and Flop: Max - maximum over all processors
[1,0]<stdout>:                  Ratio - ratio of maximum to minimum over all processors
[1,0]<stdout>:   Mess: number of messages sent
[1,0]<stdout>:   AvgLen: average message length (bytes)
[1,0]<stdout>:   Reduct: number of global reductions
[1,0]<stdout>:   Global: entire computation
[1,0]<stdout>:   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
[1,0]<stdout>:      %T - percent time in this phase         %F - percent flop in this phase
[1,0]<stdout>:      %M - percent messages in this phase     %L - percent message lengths in this phase
[1,0]<stdout>:      %R - percent reductions in this phase
[1,0]<stdout>:   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
[1,0]<stdout>:                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:--- Event Stage 0: Main Stage
[1,0]<stdout>:
[1,0]<stdout>:BuildTwoSided        244 1.0 5.1539e-02 2.2 0.00e+00 0.0 2.2e+03 4.0e+00 2.4e+02  0  0  9  0 25   0  0  9  0 25     0
[1,0]<stdout>:BuildTwoSidedF       184 1.0 5.0212e-02 2.2 0.00e+00 0.0 1.0e+03 5.0e+04 1.8e+02  0  0  4 21 19   0  0  4 21 19     0
[1,0]<stdout>:MatMult              294 1.0 7.5782e-01 1.0 1.69e+09 1.0 1.2e+04 6.4e+03 0.0e+00  6 58 47 30  0   6 58 47 30  0 17506
[1,0]<stdout>:MatMultAdd            56 1.0 2.9850e-02 1.1 7.12e+07 1.1 1.6e+03 8.6e+02 0.0e+00  0  2  6  1  0   0  2  6  1  0 18684
[1,0]<stdout>:MatMultTranspose      56 1.0 3.2312e-02 1.0 7.12e+07 1.1 1.6e+03 8.6e+02 0.0e+00  0  2  6  1  0   0  2  6  1  0 17266
[1,0]<stdout>:MatSolve              14 0.0 3.1577e-05 0.0 9.24e+02 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0    29
[1,0]<stdout>:MatLUFactorSym         1 1.0 6.9690e-06 1.3 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatLUFactorNum         1 1.0 2.7780e-06 3.7 1.29e+02 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0    46
[1,0]<stdout>:MatConvert             1 1.0 3.6692e-03 1.1 0.00e+00 0.0 8.8e+01 1.2e+03 1.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatScale               8 1.0 6.6310e-03 1.1 5.09e+06 1.1 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0  6008
[1,0]<stdout>:MatResidual           56 1.0 1.1590e-01 1.0 2.55e+08 1.0 2.2e+03 5.4e+03 0.0e+00  1  9  9  5  0   1  9  9  5  0 17324
[1,0]<stdout>:MatAssemblyBegin     102 1.0 7.0096e-02 1.5 0.00e+00 0.0 1.0e+03 5.0e+04 5.3e+01  0  0  4 21  5   0  0  4 21  5     0
[1,0]<stdout>:MatAssemblyEnd       102 1.0 9.5095e-02 1.0 3.76e+05 1.9 2.3e+03 4.2e+02 2.2e+02  1  0  9  0 22   1  0  9  0 23    26
[1,0]<stdout>:MatGetRowIJ            1 0.0 8.8740e-06 0.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatCreateSubMat        4 1.0 1.3779e-03 1.0 0.00e+00 0.0 6.9e+01 1.8e+03 6.0e+01  0  0  0  0  6   0  0  0  0  6     0
[1,0]<stdout>:MatGetOrdering         1 0.0 2.8852e-05 0.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatCoarsen             4 1.0 4.6445e-02 1.0 2.41e+06 1.0 2.8e+03 6.8e+02 1.7e+02  0  0 11  1 17   0  0 11  1 17   407
[1,0]<stdout>:MatZeroEntries         5 1.0 1.7417e-03 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatAXPY                8 1.0 5.8006e-02 1.0 1.59e+06 1.0 3.2e+02 4.0e+02 2.8e+01  0  0  1  0  3   0  0  1  0  3   215
[1,0]<stdout>:MatTranspose          18 1.0 3.4206e-02 1.0 0.00e+00 0.0 1.5e+03 3.3e+03 7.2e+01  0  0  6  2  7   0  0  6  2  7     0
[1,0]<stdout>:MatMatMultSym         15 1.0 2.7000e-01 1.0 0.00e+00 0.0 8.8e+02 9.3e+03 5.0e+01  2  0  4  3  5   2  0  4  3  5     0
[1,0]<stdout>:MatMatMultNum         15 1.0 2.2517e-01 1.0 4.44e+08 1.0 1.8e+02 2.9e+04 5.0e+00  2 15  1  2  1   2 15  1  2  1 15391
[1,0]<stdout>:MatPtAPSymbolic        5 1.0 6.3755e-01 1.0 0.00e+00 0.0 1.1e+03 5.2e+04 3.5e+01  5  0  5 23  4   5  0  5 23  4     0
[1,0]<stdout>:MatPtAPNumeric         5 1.0 4.6545e-01 1.0 8.16e+08 1.0 7.7e+02 5.8e+04 3.0e+01  4 28  3 18  3   4 28  3 18  3 13666
[1,0]<stdout>:MatGetLocalMat        15 1.0 2.0653e-02 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatGetBrAoCol         15 1.0 1.1724e-02 1.1 0.00e+00 0.0 1.3e+03 4.6e+04 0.0e+00  0  0  5 24  0   0  0  5 24  0     0
[1,0]<stdout>:VecMDot               57 1.0 1.0421e-02 1.3 3.64e+07 1.0 0.0e+00 0.0e+00 5.7e+01  0  1  0  0  6   0  1  0  0  6 27479
[1,0]<stdout>:VecNorm               79 1.0 4.3868e-03 1.7 9.71e+06 1.0 0.0e+00 0.0e+00 7.9e+01  0  0  0  0  8   0  0  0  0  8 17412
[1,0]<stdout>:VecScale              62 1.0 6.8874e-04 1.1 3.07e+06 1.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 35117
[1,0]<stdout>:VecCopy              188 1.0 2.1161e-03 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecSet               198 1.0 6.5261e-04 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecAXPY               19 1.0 7.7616e-04 1.0 3.36e+06 1.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 34036
[1,0]<stdout>:VecAYPX              352 1.0 8.5790e-03 1.0 1.38e+07 1.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 12642
[1,0]<stdout>:VecAXPBYCZ           112 1.0 3.5826e-03 1.1 1.51e+07 1.0 0.0e+00 0.0e+00 0.0e+00  0  1  0  0  0   0  1  0  0  0 33241
[1,0]<stdout>:VecMAXPY              76 1.0 1.3298e-02 1.1 6.35e+07 1.0 0.0e+00 0.0e+00 0.0e+00  0  2  0  0  0   0  2  0  0  0 37559
[1,0]<stdout>:VecAssemblyBegin     133 1.0 5.9829e-03 6.9 0.00e+00 0.0 0.0e+00 0.0e+00 1.3e+02  0  0  0  0 13   0  0  0  0 13     0
[1,0]<stdout>:VecAssemblyEnd       133 1.0 6.6992e-05 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecPointwiseMult     268 1.0 6.3916e-03 1.0 7.24e+06 1.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0  8917
[1,0]<stdout>:VecScatterBegin      538 1.0 3.7838e-03 1.1 0.00e+00 0.0 1.7e+04 4.8e+03 0.0e+00  0  0 67 32  0   0  0 67 32  0     0
[1,0]<stdout>:VecScatterEnd        538 1.0 3.4954e-02 2.1 2.45e+04 1.3 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     5
[1,0]<stdout>:VecNormalize          47 1.0 1.9403e-03 1.6 4.51e+06 1.0 0.0e+00 0.0e+00 4.7e+01  0  0  0  0  5   0  0  0  0  5 18288
[1,0]<stdout>:SFSetGraph            60 1.0 3.3168e-04 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFSetUp               60 1.0 2.8955e-03 1.7 0.00e+00 0.0 3.3e+03 4.1e+02 6.0e+01  0  0 13  1  6   0  0 13  1  6     0
[1,0]<stdout>:SFBcastBegin          24 1.0 1.4150e-04 1.3 0.00e+00 0.0 1.1e+03 6.9e+02 0.0e+00  0  0  4  0  0   0  0  4  0  0     0
[1,0]<stdout>:SFBcastEnd            24 1.0 5.1632e-04 2.8 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFReduceBegin          8 1.0 4.9836e-05 1.2 0.00e+00 0.0 2.2e+02 5.9e+02 0.0e+00  0  0  1  0  0   0  0  1  0  0     0
[1,0]<stdout>:SFReduceEnd            8 1.0 5.1039e-05 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFPack               570 1.0 1.5747e-03 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFUnpack             570 1.0 1.6382e-04 1.2 2.45e+04 1.3 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0  1053
[1,0]<stdout>:KSPSetUp              11 1.0 4.5645e-03 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:KSPSolve               1 1.0 7.9908e-01 1.0 1.74e+09 1.0 1.3e+04 5.2e+03 5.9e+01  7 60 53 27  6   7 60 53 27  6 17185
[1,0]<stdout>:KSPGMRESOrthog        54 1.0 1.5465e-02 1.1 6.77e+07 1.0 0.0e+00 0.0e+00 5.4e+01  0  2  0  0  5   0  2  0  0  6 34475
[1,0]<stdout>:PCSetUp_GAMG+          1 1.0 1.6757e+00 1.0 1.14e+09 1.0 1.1e+04 1.3e+04 7.4e+02 14 39 43 54 74  14 39 43 54 76  5337
[1,0]<stdout>: PCGAMGCreateG         4 1.0 1.2899e-01 1.0 9.38e+05 1.0 1.7e+03 2.9e+03 1.0e+02  1  0  7  2 10   1  0  7  2 10    57
[1,0]<stdout>: GAMG Coarsen          4 1.0 5.0977e-02 1.0 2.41e+06 1.0 2.8e+03 6.8e+02 1.7e+02  0  0 11  1 17   0  0 11  1 17   371
[1,0]<stdout>:  GAMG MIS/Agg         4 1.0 4.6462e-02 1.0 2.41e+06 1.0 2.8e+03 6.8e+02 1.7e+02  0  0 11  1 17   0  0 11  1 17   407
[1,0]<stdout>: PCGAMGProl            4 1.0 4.7689e-02 1.0 0.00e+00 0.0 2.0e+03 1.9e+03 1.7e+02  0  0  8  2 17   0  0  8  2 17     0
[1,0]<stdout>:  GAMG Prol-col        4 1.0 1.9950e-02 1.0 0.00e+00 0.0 1.7e+03 7.6e+02 1.3e+02  0  0  7  1 13   0  0  7  1 13     0
[1,0]<stdout>:  GAMG Prol-lift       4 1.0 2.5463e-02 1.0 0.00e+00 0.0 2.3e+02 1.1e+04 2.4e+01  0  0  1  1  2   0  0  1  1  2     0
[1,0]<stdout>: PCGAMGOptProl         4 1.0 3.6010e-01 1.0 3.27e+08 1.0 2.5e+03 8.7e+03 1.3e+02  3 11 10  9 13   3 11 10  9 14  7149
[1,0]<stdout>:  GAMG smooth          4 1.0 2.5588e-01 1.0 1.15e+08 1.0 9.4e+02 1.4e+04 4.8e+01  2  4  4  5  5   2  4  4  5  5  3538
[1,0]<stdout>: PCGAMGCreateL         4 1.0 1.0853e+00 1.0 8.14e+08 1.1 1.7e+03 6.1e+04 1.6e+02  9 28  7 41 16   9 28  7 41 17  5844
[1,0]<stdout>:  GAMG PtAP            4 1.0 1.0830e+00 1.0 8.14e+08 1.1 1.6e+03 6.5e+04 5.2e+01  9 28  6 41  5   9 28  6 41  5  5856
[1,0]<stdout>:  GAMG Reduce          2 1.0 2.3826e-03 1.0 0.00e+00 0.0 1.2e+02 1.1e+03 1.1e+02  0  0  0  0 11   0  0  0  0 11     0
[1,0]<stdout>:PCGAMG Gal l00         1 1.0 8.3550e-01 1.0 6.40e+08 1.1 4.7e+02 1.1e+05 1.3e+01  7 22  2 20  1   7 22  2 20  1  5919
[1,0]<stdout>:PCGAMG Opt l00         1 1.0 1.9268e-01 1.0 9.87e+07 1.0 2.7e+02 3.7e+04 1.1e+01  2  3  1  4  1   2  3  1  4  1  4030
[1,0]<stdout>:PCGAMG Gal l01         1 1.0 2.1569e-01 1.0 1.64e+08 1.3 5.4e+02 7.8e+04 1.3e+01  2  5  2 17  1   2  5  2 17  1  5613
[1,0]<stdout>:PCGAMG Opt l01         1 1.0 1.7163e-02 1.0 8.67e+06 1.1 3.3e+02 6.1e+03 1.1e+01  0  0  1  1  1   0  0  1  1  1  3870
[1,0]<stdout>:PCGAMG Gal l02         1 1.0 3.1458e-02 1.0 2.75e+07 1.6 5.4e+02 1.6e+04 1.3e+01  0  1  2  3  1   0  1  2  3  1  5921
[1,0]<stdout>:PCGAMG Opt l02         1 1.0 4.6577e-03 1.0 2.60e+06 1.6 3.3e+02 4.0e+03 1.1e+01  0  0  1  1  1   0  0  1  1  1  3758
[1,0]<stdout>:PCGAMG Gal l03         1 1.0 3.2241e-04 1.0 7.39e+04 0.0 1.1e+01 8.2e+02 1.3e+01  0  0  0  0  1   0  0  0  0  1   459
[1,0]<stdout>:PCGAMG Opt l03         1 1.0 2.5935e-04 1.0 7.00e+04 0.0 1.0e+01 1.3e+03 1.1e+01  0  0  0  0  1   0  0  0  0  1   540
[1,0]<stdout>:PCSetUp                2 1.0 1.6758e+00 1.0 1.14e+09 1.0 1.1e+04 1.3e+04 7.4e+02 14 39 43 54 74  14 39 43 54 76  5337
[1,0]<stdout>:PCSetUpOnBlocks       14 1.0 1.0050e-04 1.4 1.29e+02 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     1
[1,0]<stdout>:PCApply               14 1.0 5.4936e-01 1.0 1.19e+09 1.0 1.2e+04 4.2e+03 1.4e+01  5 41 48 20  1   5 41 48 20  1 17040
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Object Type          Creations   Destructions. Reports information only for process 0.
[1,0]<stdout>:
[1,0]<stdout>:--- Event Stage 0: Main Stage
[1,0]<stdout>:
[1,0]<stdout>:           Container    32             24
[1,0]<stdout>:              Matrix   188            142
[1,0]<stdout>:      Matrix Coarsen     4              4
[1,0]<stdout>:   Matrix Null Space     1              0
[1,0]<stdout>:              Vector   430            335
[1,0]<stdout>:           Index Set   121            110
[1,0]<stdout>:   Star Forest Graph    76             59
[1,0]<stdout>:       Krylov Solver    11              4
[1,0]<stdout>:      Preconditioner    11              4
[1,0]<stdout>:         PetscRandom     4              4
[1,0]<stdout>:    Distributed Mesh     8              4
[1,0]<stdout>:     Discrete System     8              4
[1,0]<stdout>:           Weak Form     8              4
[1,0]<stdout>:              Viewer     1              0
[1,0]<stdout>:========================================================================================================================
[1,0]<stdout>:Average time to get PetscTime(): 4.23e-08
[1,0]<stdout>:Average time for MPI_Barrier(): 1.9886e-06
[1,0]<stdout>:Average time for zero size MPI_Send(): 1.05538e-06
[1,0]<stdout>:#PETSc Option Table entries:
[1,0]<stdout>:-ksp_monitor_true_residual # (source: command line)
[1,0]<stdout>:-log_view[1,0]<stdout>: # (source: command line)
[1,0]<stdout>:-pc_gamg_verbose 2 # (source: code)
[1,0]<stdout>:#End of PETSc Option Table entries
[1,0]<stdout>:Compiled without FORTRAN kernels
[1,0]<stdout>:Compiled with full precision matrices (default)
[1,0]<stdout>:sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
[1,0]<stdout>:Configure options: --with-debugging=0 --with-mpi=1 --with-ssl=0 --with-x=0 --with-64-bit-indices=0 --with-mumps-lib="-L/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/lib -lzmumps -ldmumps -lmumps_common -lpord -L/opt/aster/20240327/gcc13-openblas-ompi4/scotch-7.0.4/lib -lesmumps -lptscotch -lptscotcherr -lptscotcherrexit -lscotch -lscotcherr -lscotcherrexit -L/opt/aster/20240327/gcc13-openblas-ompi4/parmetis-4.0.3_aster3/lib -lparmetis" --with-mumps-include=/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/include --with-blaslapack-lib=-lopenblas --with-scalapack-lib="-L/opt/aster/20240327/gcc13-openblas-ompi4/scalapack-2.2.0/lib -lscalapack " --with-python=1 --with-petsc4py=1 --download-ml=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/pkg-trilinos-ml-v13.2.0.tar.gz --download-sowing=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/sowing_v1.1.26-p8.tar.gz --download-hypre=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/hypre_v2.29.0.tar.gz --download-superlu=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/SuperLU_v6.0.1.tar.gz --download-slepc=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/slepc-v3.20.1.tar.gz --download-slepc-configure-arguments="--with-slepc4py --download-arpack=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/arpack_3.9.0.tar.gz" --download-hpddm=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/hpddm_201eecd26177f88d7bb6287251877d8013fb64d2.tar.gz --with-openmp=1 --prefix=/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5 CC=mpicc CXX=mpicxx FC=mpif90 FCFLAGS=" -fallow-argument-mismatch" LIBS="-lgomp -lz"
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:Libraries compiled on 2025-01-23 15:23:23 on buildkitsandbox 
[1,0]<stdout>:Machine characteristics: Linux-5.10.230-223.885.amzn2.aarch64-aarch64-with-glibc2.40
[1,0]<stdout>:Using PETSc directory: /opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5
[1,0]<stdout>:Using PETSc arch: 
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using C compiler: mpicc  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -Wno-lto-type-mismatch -Wno-stringop-overflow -fstack-protector -fvisibility=hidden -g -O  -fopenmp 
[1,0]<stdout>:Using Fortran compiler: mpif90  -fPIC -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O   -fopenmp   -fopenmp
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using include paths: -I/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/include -I/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/include
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using C linker: mpicc
[1,0]<stdout>:Using Fortran linker: mpif90
[1,0]<stdout>:Using libraries: -Wl,-rpath,/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -lpetsc -Wl,-rpath,/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/scotch-7.0.4/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/parmetis-4.0.3_aster3/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/scalapack-2.2.0/lib -Wl,-rpath,/usr/lib/aarch64-linux-gnu/openmpi/lib/fortran/gfortran -L/usr/lib/aarch64-linux-gnu/openmpi/lib/fortran/gfortran -Wl,-rpath,/usr/lib/gcc/aarch64-linux-gnu/13 -L/usr/lib/gcc/aarch64-linux-gnu/13 -Wl,-rpath,/usr/lib/aarch64-linux-gnu -L/usr/lib/aarch64-linux-gnu -Wl,-rpath,/lib/aarch64-linux-gnu -L/lib/aarch64-linux-gnu -lHYPRE -lzmumps -ldmumps -lmumps_common -lpord -lesmumps -lptscotch -lptscotcherr -lptscotcherrexit -lscotch -lscotcherr -lscotcherrexit -lparmetis -lscalapack -lsuperlu -lml -lopenblas -lm -lgomp -lz -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lopen-rte -lopen-pal -lhwloc -levent_core -levent_pthreads -lgfortran -lm -lgfortran -lm -lgfortran -lgcc_s -lstdc++ -lgomp -lz
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:WARNING! There are options you set that were not used!
[1,0]<stdout>:WARNING! could be spelling mistake, etc!
[1,0]<stdout>:There is one unused database option. It is:
[1,0]<stdout>:Option left: name:-pc_gamg_verbose value: 2 source: code
[1,2]<stdout>:
[1,2]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,2]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,2]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,2]<stdout>: ║            aucune alarme                                                                       ║
[1,2]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,2]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,5]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,5]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,5]<stdout>: ║            aucune alarme                                                                       ║
[1,5]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,5]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,1]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,1]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,1]<stdout>: ║            aucune alarme                                                                       ║
[1,1]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,1]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,0]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,0]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,0]<stdout>: ║            aucune alarme                                                                       ║
[1,0]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,0]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,6]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,6]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,6]<stdout>: ║            aucune alarme                                                                       ║
[1,6]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,6]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,7]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,7]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,7]<stdout>: ║            aucune alarme                                                                       ║
[1,7]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,7]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,3]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,3]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,3]<stdout>: ║            aucune alarme                                                                       ║
[1,3]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,3]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,4]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,4]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,4]<stdout>: ║            aucune alarme                                                                       ║
[1,4]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,4]<stdout>:
[1,0]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,6]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,7]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,3]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,1]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,2]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,5]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,4]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,1]<stdout>:  
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     284.24 Mo
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     401.83 Mo
[1,1]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1217.99 Mo
[1,1]<stdout>:  
[1,1]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,1]<stdout>:  
[1,1]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,1]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  402  Mo.
[1,1]<stdout>:     TAILLE CUMULEE LIBEREE            :                  239  Mo.
[1,1]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1801101
[1,1]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1800626
[1,1]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,1]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,2]<stdout>:  
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     284.01 Mo
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     400.91 Mo
[1,2]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1213.44 Mo
[1,2]<stdout>:  
[1,2]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,2]<stdout>:  
[1,2]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,2]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  401  Mo.
[1,2]<stdout>:     TAILLE CUMULEE LIBEREE            :                  237  Mo.
[1,2]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1789801
[1,2]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1789322
[1,2]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,2]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,2]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,2]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,2]<stdout>:  
[1,2]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     284.01 Mo
[1,4]<stdout>:  
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     284.11 Mo
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     401.32 Mo
[1,4]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1217.59 Mo
[1,4]<stdout>:  
[1,4]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,4]<stdout>:  
[1,4]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,4]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  401  Mo.
[1,4]<stdout>:     TAILLE CUMULEE LIBEREE            :                  239  Mo.
[1,4]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1808839
[1,4]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1808364
[1,4]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,4]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,4]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,4]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,4]<stdout>:  
[1,4]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     284.11 Mo
[1,5]<stdout>:  
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     283.96 Mo
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     400.69 Mo
[1,5]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1208.21 Mo
[1,5]<stdout>:  
[1,5]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,5]<stdout>:  
[1,5]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,5]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  401  Mo.
[1,5]<stdout>:     TAILLE CUMULEE LIBEREE            :                  237  Mo.
[1,5]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1787471
[1,5]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1786996
[1,5]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,5]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,5]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,5]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,5]<stdout>:  
[1,5]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     283.96 Mo
[1,5]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,5]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,5]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     400.69 Mo
[1,5]<stdout>:     - LIMITE LES ACCES DISQUE
[1,5]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,5]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1208.21 Mo
[1,5]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,5]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,0]<stdout>:  
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     284.33 Mo
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     402.20 Mo
[1,0]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1223.11 Mo
[1,0]<stdout>:  
[1,0]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,0]<stdout>:  
[1,0]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,0]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  402  Mo.
[1,0]<stdout>:     TAILLE CUMULEE LIBEREE            :                  550  Mo.
[1,0]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              4680793
[1,0]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              4680318
[1,0]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,0]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,0]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,0]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,0]<stdout>:  
[1,0]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     284.33 Mo
[1,0]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,0]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,0]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     402.20 Mo
[1,0]<stdout>:     - LIMITE LES ACCES DISQUE
[1,0]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,0]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1223.11 Mo
[1,0]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,6]<stdout>:  
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     284.04 Mo
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     401.01 Mo
[1,6]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1212.92 Mo
[1,6]<stdout>:  
[1,6]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,6]<stdout>:  
[1,6]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,6]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  401  Mo.
[1,6]<stdout>:     TAILLE CUMULEE LIBEREE            :                  238  Mo.
[1,6]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1791095
[1,6]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1790624
[1,6]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,6]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,6]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,6]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,6]<stdout>:  
[1,6]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     284.04 Mo
[1,6]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,6]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,6]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     401.01 Mo
[1,6]<stdout>:     - LIMITE LES ACCES DISQUE
[1,6]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,6]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1212.92 Mo
[1,6]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,6]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,6]<stdout>:  
[1,7]<stdout>:  
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     284.13 Mo
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     401.30 Mo
[1,7]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1209.57 Mo
[1,7]<stdout>:  
[1,7]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,7]<stdout>:  
[1,7]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,7]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  401  Mo.
[1,7]<stdout>:     TAILLE CUMULEE LIBEREE            :                  238  Mo.
[1,7]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1794245
[1,7]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1793762
[1,7]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,7]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,7]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,7]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,7]<stdout>:  
[1,7]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     284.13 Mo
[1,7]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,7]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,7]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     401.30 Mo
[1,7]<stdout>:     - LIMITE LES ACCES DISQUE
[1,7]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,7]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1209.57 Mo
[1,7]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,7]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,7]<stdout>:  
[1,3]<stdout>:  
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                     284.65 Mo
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                     403.52 Mo
[1,3]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    1239.01 Mo
[1,3]<stdout>:  
[1,3]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,3]<stdout>:  
[1,3]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,3]<stdout>:     TAILLE CUMULEE MAXIMUM            :                  404  Mo.
[1,3]<stdout>:     TAILLE CUMULEE LIBEREE            :                  241  Mo.
[1,3]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              1823529
[1,3]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              1823046
[1,3]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,3]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,3]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,3]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,3]<stdout>:  
[1,3]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     284.65 Mo
[1,3]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,3]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,3]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     403.52 Mo
[1,3]<stdout>:     - LIMITE LES ACCES DISQUE
[1,3]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,3]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1239.01 Mo
[1,3]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,3]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,3]<stdout>:  
[1,2]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,2]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,2]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     400.91 Mo
[1,2]<stdout>:     - LIMITE LES ACCES DISQUE
[1,2]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,2]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1213.44 Mo
[1,2]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,2]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,2]<stdout>:  
[1,1]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,1]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,1]<stdout>:  
[1,1]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :     284.24 Mo
[1,1]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,1]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,1]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     401.83 Mo
[1,1]<stdout>:     - LIMITE LES ACCES DISQUE
[1,1]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,1]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1217.99 Mo
[1,1]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,1]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,1]<stdout>:  
[1,4]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,4]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,4]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :     401.32 Mo
[1,4]<stdout>:     - LIMITE LES ACCES DISQUE
[1,4]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,4]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    1217.59 Mo
[1,4]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,4]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,4]<stdout>:  
[1,5]<stdout>:  
[1,0]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,0]<stdout>:  
[1,4]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:36:37
[1,5]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:36:37
[1,6]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:36:37
[1,7]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:36:37
[1,3]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:36:37
[1,2]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:36:37
[1,0]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:36:37
[1,1]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:36:37
[1,4]<stdout>:INFO './glob.1' deleted
[1,4]<stdout>:Deleting './glob.2': No such file or directory
[1,5]<stdout>:INFO './glob.1' deleted
[1,5]<stdout>:Deleting './glob.2': [1,6]<stdout>:INFO './glob.1' deleted
[1,7]<stdout>:INFO './glob.1' deleted
[1,3]<stdout>:INFO './glob.1' deleted
[1,3]<stdout>:Deleting './glob.2': [1,1]<stdout>:INFO './glob.1' deleted
[1,1]<stdout>:Deleting './glob.2': [1,0]<stdout>:INFO './glob.1' deleted
[1,0]<stdout>:Deleting './glob.2': No such file or directory
[1,2]<stdout>:INFO './glob.1' deleted
[1,2]<stdout>:Deleting './glob.2': No such file or directory
[1,2]<stdout>:INFO './vola.1' deleted
[1,2]<stdout>:Deleting './vola.2': No such file or directory
[1,6]<stdout>:Deleting './glob.2': No such file or directory
[1,6]<stdout>:INFO './vola.1' deleted
[1,6]<stdout>:Deleting './vola.2': No such file or directory
[1,7]<stdout>:Deleting './glob.2': No such file or directory
[1,7]<stdout>:INFO './vola.1' deleted
[1,7]<stdout>:Deleting './vola.2': [1,1]<stdout>:No such file or directory
[1,1]<stdout>:INFO './vola.1' deleted
[1,1]<stdout>:Deleting './vola.2': No such file or directory
[1,0]<stdout>:INFO './vola.1' deleted
[1,0]<stdout>:Deleting './vola.2': No such file or directory
[1,3]<stdout>:No such file or directory
[1,3]<stdout>:INFO './vola.1' deleted
[1,3]<stdout>:Deleting './vola.2': No such file or directory
[1,4]<stdout>:INFO './vola.1' deleted
[1,4]<stdout>:Deleting './vola.2': No such file or directory
[1,5]<stdout>:No such file or directory
[1,5]<stdout>:INFO './vola.1' deleted
[1,5]<stdout>:Deleting './vola.2': No such file or directory
[1,7]<stdout>:No such file or directory
[1,5]<stdout>:
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * DEBUT                    :       0.00 :       0.13 :       0.13 :       0.13 *
[1,5]<stdout>: * CREA_MAILLAGE            :       0.52 :       0.06 :       0.58 :       0.58 *
[1,5]<stdout>: * AFFE_MODELE              :       0.20 :       0.00 :       0.20 :       0.20 *
[1,5]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,5]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,5]<stdout>: * AFFE_CHAR_CINE           :       0.02 :       0.00 :       0.02 :       0.02 *
[1,5]<stdout>: * AFFE_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.03 *
[1,5]<stdout>: * CALC_MATR_ELEM           :       0.41 :       0.01 :       0.42 :       0.42 *
[1,5]<stdout>: * NUME_DDL                 :       0.26 :       0.09 :       0.35 :       0.35 *
[1,5]<stdout>: * ASSE_MATRICE             :       0.18 :       0.01 :       0.19 :       0.19 *
[1,5]<stdout>: * CREA_CHAMP               :       0.01 :       0.00 :       0.01 :       0.01 *
[1,5]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.03 *
[1,5]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,5]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,5]<stdout>: *  . fortran               :       0.75 :       0.19 :       0.94 :       0.94 *
[1,5]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.14 *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * TOTAL_JOB                :      10.94 :       0.86 :      11.80 :      11.80 *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * DEBUT                    :       0.02 :       0.12 :       0.14 :       0.14 *
[1,1]<stdout>: * CREA_MAILLAGE            :       0.52 :       0.06 :       0.58 :       0.58 *
[1,1]<stdout>: * AFFE_MODELE              :       0.20 :       0.00 :       0.20 :       0.20 *
[1,1]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,1]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,1]<stdout>: * AFFE_CHAR_CINE           :       0.02 :       0.00 :       0.02 :       0.02 *
[1,1]<stdout>: * AFFE_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.03 *
[1,1]<stdout>: * CALC_MATR_ELEM           :       0.42 :       0.00 :       0.42 :       0.42 *
[1,1]<stdout>: * NUME_DDL                 :       0.26 :       0.10 :       0.36 :       0.35 *
[1,1]<stdout>: * ASSE_MATRICE             :       0.18 :       0.01 :       0.19 :       0.19 *
[1,1]<stdout>: * CREA_CHAMP               :       0.01 :       0.00 :       0.01 :       0.01 *
[1,1]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.01 :       0.03 :       0.03 *
[1,1]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,1]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,1]<stdout>: *  . fortran               :       0.76 :       0.18 :       0.94 :       0.95 *
[1,1]<stdout>: *  . cleanup               :       0.14 :       0.01 :       0.15 :       0.13 *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * TOTAL_JOB                :      10.93 :       0.87 :      11.80 :      11.80 *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * DEBUT                    :       0.00 :       0.13 :       0.13 :       0.14 *
[1,0]<stdout>: * DEFI_FICHIER             :       0.00 :       0.00 :       0.00 :       0.00 *
[1,0]<stdout>: * DEFI_FICHIER             :       0.00 :       0.00 :       0.00 :       0.01 *
[1,0]<stdout>: * CREA_MAILLAGE            :       0.49 :       0.09 :       0.58 :       0.58 *
[1,0]<stdout>: * AFFE_MODELE              :       0.17 :       0.00 :       0.17 :       0.17 *
[1,0]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,0]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,0]<stdout>: * AFFE_CHAR_CINE           :       0.02 :       0.00 :       0.02 :       0.02 *
[1,0]<stdout>: * AFFE_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.03 *
[1,0]<stdout>: * CALC_MATR_ELEM           :       0.41 :       0.00 :       0.41 :       0.42 *
[1,0]<stdout>: * NUME_DDL                 :       0.31 :       0.05 :       0.36 :       0.36 *
[1,0]<stdout>: * ASSE_MATRICE             :       0.18 :       0.01 :       0.19 :       0.19 *
[1,0]<stdout>: * CREA_CHAMP               :       0.01 :       0.00 :       0.01 :       0.01 *
[1,0]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.03 *
[1,0]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,0]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,0]<stdout>: *  . fortran               :       0.68 :       0.22 :       0.90 :       0.91 *
[1,0]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.16 *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * TOTAL_JOB                :      10.68 :       1.12 :      11.80 :      11.80 *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * DEBUT                    :       0.02 :       0.12 :       0.14 :       0.14 *
[1,3]<stdout>: * CREA_MAILLAGE            :       0.50 :       0.08 :       0.58 :       0.58 *
[1,3]<stdout>: * AFFE_MODELE              :       0.20 :       0.00 :       0.20 :       0.20 *
[1,3]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,3]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.01 :       0.03 :       0.03 *
[1,3]<stdout>: * AFFE_CHAR_CINE           :       0.02 :       0.00 :       0.02 :       0.02 *
[1,3]<stdout>: * AFFE_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.03 *
[1,3]<stdout>: * CALC_MATR_ELEM           :       0.42 :       0.01 :       0.43 :       0.43 *
[1,3]<stdout>: * NUME_DDL                 :       0.23 :       0.11 :       0.34 :       0.34 *
[1,3]<stdout>: * ASSE_MATRICE             :       0.19 :       0.01 :       0.20 :       0.19 *
[1,3]<stdout>: * CREA_CHAMP               :       0.01 :       0.00 :       0.01 :       0.01 *
[1,3]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.03 *
[1,3]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,3]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.01 *
[1,3]<stdout>: *  . fortran               :       0.74 :       0.20 :       0.94 :       0.94 *
[1,3]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.14 *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * TOTAL_JOB                :      10.99 :       0.81 :      11.80 :      11.80 *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * DEBUT                    :       0.02 :       0.12 :       0.14 :       0.14 *
[1,4]<stdout>: * CREA_MAILLAGE            :       0.50 :       0.08 :       0.58 :       0.58 *
[1,4]<stdout>: * AFFE_MODELE              :       0.20 :       0.00 :       0.20 :       0.20 *
[1,4]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,4]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,4]<stdout>: * AFFE_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.02 *
[1,4]<stdout>: * AFFE_CHAR_CINE           :       0.02 :       0.00 :       0.02 :       0.03 *
[1,4]<stdout>: * CALC_MATR_ELEM           :       0.41 :       0.01 :       0.42 :       0.42 *
[1,4]<stdout>: * NUME_DDL                 :       0.27 :       0.08 :       0.35 :       0.35 *
[1,4]<stdout>: * ASSE_MATRICE             :       0.18 :       0.02 :       0.20 :       0.19 *
[1,4]<stdout>: * CREA_CHAMP               :       0.01 :       0.00 :       0.01 :       0.01 *
[1,4]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.03 *
[1,4]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,4]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,4]<stdout>: *  . fortran               :       0.74 :       0.19 :       0.93 :       0.95 *
[1,4]<stdout>: *  . cleanup               :       0.14 :       0.00 :       0.14 :       0.14 *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * TOTAL_JOB                :      10.96 :       0.84 :      11.80 :      11.80 *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * DEBUT                    :       0.03 :       0.11 :       0.14 :       0.14 *
[1,2]<stdout>: * CREA_MAILLAGE            :       0.53 :       0.05 :       0.58 :       0.58 *
[1,2]<stdout>: * AFFE_MODELE              :       0.20 :       0.00 :       0.20 :       0.20 *
[1,2]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,2]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,2]<stdout>: * AFFE_CHAR_CINE           :       0.02 :       0.01 :       0.03 :       0.02 *
[1,2]<stdout>: * AFFE_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.03 *
[1,2]<stdout>: * CALC_MATR_ELEM           :       0.42 :       0.00 :       0.42 :       0.42 *
[1,2]<stdout>: * NUME_DDL                 :       0.26 :       0.09 :       0.35 :       0.35 *
[1,2]<stdout>: * ASSE_MATRICE             :       0.18 :       0.01 :       0.19 :       0.19 *
[1,2]<stdout>: * CREA_CHAMP               :       0.00 :       0.00 :       0.00 :       0.01 *
[1,2]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.03 *
[1,2]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,2]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,2]<stdout>: *  . fortran               :       0.78 :       0.17 :       0.95 :       0.95 *
[1,2]<stdout>: *  . cleanup               :       0.14 :       0.01 :       0.15 :       0.14 *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * TOTAL_JOB                :      10.98 :       0.82 :      11.80 :      11.80 *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * DEBUT                    :       0.02 :       0.11 :       0.13 :       0.14 *
[1,6]<stdout>: * CREA_MAILLAGE            :       0.51 :       0.07 :       0.58 :       0.58 *
[1,6]<stdout>: * AFFE_MODELE              :       0.20 :       0.00 :       0.20 :       0.20 *
[1,6]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,6]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,6]<stdout>: * AFFE_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.02 *
[1,6]<stdout>: * AFFE_CHAR_CINE           :       0.02 :       0.00 :       0.02 :       0.03 *
[1,6]<stdout>: * CALC_MATR_ELEM           :       0.41 :       0.02 :       0.43 :       0.42 *
[1,6]<stdout>: * NUME_DDL                 :       0.21 :       0.14 :       0.35 :       0.35 *
[1,6]<stdout>: * ASSE_MATRICE             :       0.19 :       0.01 :       0.20 :       0.19 *
[1,6]<stdout>: * CREA_CHAMP               :       0.01 :       0.00 :       0.01 :       0.01 *
[1,6]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.03 *
[1,6]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,6]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,6]<stdout>: *  . fortran               :       0.75 :       0.18 :       0.93 :       0.95 *
[1,6]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.13 *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * TOTAL_JOB                :      10.91 :       0.88 :      11.79 :      11.80 *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * DEBUT                    :       0.04 :       0.09 :       0.13 :       0.14 *
[1,7]<stdout>: * CREA_MAILLAGE            :       0.53 :       0.05 :       0.58 :       0.58 *
[1,7]<stdout>: * AFFE_MODELE              :       0.20 :       0.00 :       0.20 :       0.20 *
[1,7]<stdout>: * DEFI_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.03 *
[1,7]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,7]<stdout>: * AFFE_CHAR_CINE           :       0.03 :       0.00 :       0.03 :       0.02 *
[1,7]<stdout>: * AFFE_CHAR_CINE           :       0.02 :       0.00 :       0.02 :       0.03 *
[1,7]<stdout>: * CALC_MATR_ELEM           :       0.43 :       0.00 :       0.43 :       0.42 *
[1,7]<stdout>: * NUME_DDL                 :       0.20 :       0.15 :       0.35 :       0.35 *
[1,7]<stdout>: * ASSE_MATRICE             :       0.19 :       0.01 :       0.20 :       0.19 *
[1,7]<stdout>: * CREA_CHAMP               :       0.01 :       0.00 :       0.01 :       0.01 *
[1,7]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.01 :       0.03 :       0.03 *
[1,7]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,7]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,7]<stdout>: *  . fortran               :       0.79 :       0.14 :       0.93 :       0.95 *
[1,7]<stdout>: *  . cleanup               :       0.14 :       0.01 :       0.15 :       0.13 *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * TOTAL_JOB                :      11.01 :       0.79 :      11.80 :      11.80 *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>:
[1,6]<stdout>:# Mémoire (Mo) :  1212.92 /  1209.63 /   401.01 /   284.04 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  1208.21 /  1204.94 /   400.69 /   283.96 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  1217.99 /  1214.68 /   401.83 /   284.24 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  1239.01 /  1216.53 /   403.52 /   284.65 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :  1217.59 /  1214.30 /   401.32 /   284.11 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :  1213.44 /  1210.16 /   400.91 /   284.01 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  1209.57 /  1206.40 /   401.30 /   284.13 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Mémoire (Mo) :  1223.11 /  1219.79 /   402.20 /   284.33 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,6]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,4]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0015   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:End of the Code_Aster execution
[1,6]<stdout>:Code_Aster MPI exits normally
[1,6]<stdout>:Exited
[1,5]<stdout>:End of the Code_Aster execution
[1,5]<stdout>:Code_Aster MPI exits normally
[1,5]<stdout>:Exited
[1,7]<stdout>:End of the Code_Aster execution
[1,7]<stdout>:Code_Aster MPI exits normally
[1,7]<stdout>:Exited
[1,1]<stdout>:End of the Code_Aster execution
[1,1]<stdout>:Code_Aster MPI exits normally
[1,1]<stdout>:Exited
[1,4]<stdout>:End of the Code_Aster execution
[1,4]<stdout>:Code_Aster MPI exits normally
[1,4]<stdout>:Exited
[1,2]<stdout>:End of the Code_Aster execution
[1,2]<stdout>:Code_Aster MPI exits normally
[1,2]<stdout>:Exited
[1,3]<stdout>:End of the Code_Aster execution
[1,3]<stdout>:Code_Aster MPI exits normally
[1,3]<stdout>:Exited
[1,0]<stdout>:End of the Code_Aster execution
[1,0]<stdout>:Code_Aster MPI exits normally
[1,0]<stdout>:Exited
[1,6]<stdout>:
[1,6]<stdout>:EXECUTION_CODE_ASTER_EXIT_338=0
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:execution ended (command file #1): OK
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Content of /tmp/run_aster_jlaezu5o/proc.6 after execution:
[1,6]<stdout>:.:
[1,6]<stdout>:total 28
[1,6]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:36 338.export
[1,6]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_IN
[1,6]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_OUT
[1,6]<stdout>:-rw-r--r-- 1 aster aster 22309 Jan 24 13:36 fort.6
[1,6]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.8
[1,6]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.9
[1,6]<stdout>:
[1,6]<stdout>:REPE_OUT:
[1,6]<stdout>:total 0
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution summary
[1,6]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,6]<stdout>:Execution of code_aster             11.38       1.06      12.44      16.58
[1,6]<stdout>:Copying results                      0.01       0.00       0.01       0.00
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:Total                               11.39       1.06      12.45      16.58
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:EXECUTION_CODE_ASTER_EXIT_312=0
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:execution ended (command file #1): OK
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Content of /tmp/run_aster_jlaezu5o/proc.0 after execution:
[1,0]<stdout>:.:
[1,0]<stdout>:total 64
[1,0]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:36 312.export
[1,0]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_IN
[1,0]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_OUT
[1,0]<stdout>:-rw-r--r-- 1 aster aster 15367 Jan 24 13:36 asrun.log
[1,0]<stdout>:-rw-r--r-- 1 aster aster 44920 Jan 24 13:36 fort.6
[1,0]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.8
[1,0]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.9
[1,0]<stdout>:
[1,0]<stdout>:REPE_OUT:
[1,0]<stdout>:total 0
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution summary
[1,0]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,0]<stdout>:Execution of code_aster             11.15       1.31      12.46      16.63
[1,0]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:Total                               11.15       1.31      12.46      16.63
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------
[1,0]<stdout>:--- DIAGNOSTIC JOB : OK
[1,0]<stdout>:------------------------------------------------------------
[1,0]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:EXECUTION_CODE_ASTER_EXIT_331=0
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:execution ended (command file #1): OK
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Content of /tmp/run_aster_jlaezu5o/proc.4 after execution:
[1,4]<stdout>:.:
[1,4]<stdout>:total 28
[1,4]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:36 331.export
[1,4]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_IN
[1,4]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_OUT
[1,4]<stdout>:-rw-r--r-- 1 aster aster 22309 Jan 24 13:36 fort.6
[1,4]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.8
[1,4]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.9
[1,4]<stdout>:
[1,4]<stdout>:REPE_OUT:
[1,4]<stdout>:total 0
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution summary
[1,4]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,4]<stdout>:Execution of code_aster             11.39       1.06      12.45      16.65
[1,4]<stdout>:Copying results                      0.00       0.00       0.00       0.01
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:Total                               11.39       1.06      12.45      16.66
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:EXECUTION_CODE_ASTER_EXIT_322=0
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:execution ended (command file #1): OK
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Content of /tmp/run_aster_jlaezu5o/proc.2 after execution:
[1,2]<stdout>:.:
[1,2]<stdout>:total 28
[1,2]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:36 322.export
[1,2]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_IN
[1,2]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_OUT
[1,2]<stdout>:-rw-r--r-- 1 aster aster 22309 Jan 24 13:36 fort.6
[1,2]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.8
[1,2]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.9
[1,2]<stdout>:
[1,2]<stdout>:REPE_OUT:
[1,2]<stdout>:total 0
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution summary
[1,2]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,2]<stdout>:Execution of code_aster             11.38       1.09      12.47      16.67
[1,2]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:Total                               11.38       1.09      12.47      16.67
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:EXECUTION_CODE_ASTER_EXIT_335=0
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:execution ended (command file #1): OK
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Content of /tmp/run_aster_jlaezu5o/proc.5 after execution:
[1,5]<stdout>:.:
[1,5]<stdout>:total 28
[1,5]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:36 335.export
[1,5]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_IN
[1,5]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_OUT
[1,5]<stdout>:-rw-r--r-- 1 aster aster 22309 Jan 24 13:36 fort.6
[1,5]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.8
[1,5]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.9
[1,5]<stdout>:
[1,5]<stdout>:REPE_OUT:
[1,5]<stdout>:total 0
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution summary
[1,5]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,5]<stdout>:Execution of code_aster             11.39       1.08      12.47      16.67
[1,5]<stdout>:Copying results                      0.01       0.00       0.01       0.01
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:Total                               11.40       1.08      12.48      16.68
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:EXECUTION_CODE_ASTER_EXIT_327=0
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:execution ended (command file #1): OK
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Content of /tmp/run_aster_jlaezu5o/proc.3 after execution:
[1,3]<stdout>:.:
[1,3]<stdout>:total 28
[1,3]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:36 327.export
[1,3]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_IN
[1,3]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_OUT
[1,3]<stdout>:-rw-r--r-- 1 aster aster 22309 Jan 24 13:36 fort.6
[1,3]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.8
[1,3]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.9
[1,3]<stdout>:
[1,3]<stdout>:REPE_OUT:
[1,3]<stdout>:total 0
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution summary
[1,3]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,3]<stdout>:Execution of code_aster             11.43       1.03      12.46      16.68
[1,3]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:Total                               11.43       1.03      12.46      16.68
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:EXECUTION_CODE_ASTER_EXIT_339=0
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:execution ended (command file #1): OK
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Content of /tmp/run_aster_jlaezu5o/proc.7 after execution:
[1,7]<stdout>:.:
[1,7]<stdout>:total 28
[1,7]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:36 339.export
[1,7]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_IN
[1,7]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_OUT
[1,7]<stdout>:-rw-r--r-- 1 aster aster 22309 Jan 24 13:36 fort.6
[1,7]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.8
[1,7]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.9
[1,7]<stdout>:
[1,7]<stdout>:REPE_OUT:
[1,7]<stdout>:total 0
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution summary
[1,7]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,7]<stdout>:Execution of code_aster             11.44       1.02      12.46      16.72
[1,7]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:Total                               11.44       1.02      12.46      16.72
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:EXECUTION_CODE_ASTER_EXIT_317=0
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:execution ended (command file #1): OK
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Content of /tmp/run_aster_jlaezu5o/proc.1 after execution:
[1,1]<stdout>:.:
[1,1]<stdout>:total 28
[1,1]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:36 317.export
[1,1]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_IN
[1,1]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:36 REPE_OUT
[1,1]<stdout>:-rw-r--r-- 1 aster aster 22309 Jan 24 13:36 fort.6
[1,1]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.8
[1,1]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:36 fort.9
[1,1]<stdout>:
[1,1]<stdout>:REPE_OUT:
[1,1]<stdout>:total 0
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution summary
[1,1]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:Preparation of environment           0.01       0.00       0.01       0.00
[1,1]<stdout>:Execution of code_aster             11.35       1.11      12.46      16.80
[1,1]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:Total                               11.36       1.11      12.47      16.80
[1,1]<stdout>:--------------------------------------------------------------------------------
