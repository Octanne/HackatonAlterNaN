WARNING: If MPI_Abort is called during execution, result files could not be copied.
Running: mpiexec -n 8 --tag-output /opt/aster/install/mpi/bin/run_aster -n 8 --wrkdir /tmp/run_aster_8_8x944r --status-file /home/aster/.tmp_run_aster/run_aster_xz8krrdu/__status__ --no-mpi /home/aster/.tmp_run_aster/run_aster_xz8krrdu/Cube_perf.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution of code_aster
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Prepare environment in /tmp/run_aster_8_8x944r/proc.0
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command file #1 / 1
[1,0]<stdout>:
[1,0]<stdout>:Content of the file to execute:
[1,0]<stdout>:# coding=utf-8
[1,0]<stdout>:#!/usr/bin/python
[1,0]<stdout>:
[1,0]<stdout>:import os
[1,0]<stdout>:from statistics import mean
[1,0]<stdout>:from datetime import datetime
[1,0]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,0]<stdout>:
[1,0]<stdout>:from code_aster.Commands import *
[1,0]<stdout>:from code_aster import CA
[1,0]<stdout>:from code_aster.Utilities import petscInitialize
[1,0]<stdout>:
[1,0]<stdout>:CA.init()
[1,0]<stdout>:
[1,0]<stdout>:params = {}
[1,0]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,0]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,0]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,0]<stdout>:
[1,0]<stdout>:# General parameters
[1,0]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,0]<stdout>:rank = comm.Get_rank()
[1,0]<stdout>:size = comm.Get_size()
[1,0]<stdout>:
[1,0]<stdout>:nbHexa = 8 ** params["refinements"]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def memory_peak(mess=None):
[1,0]<stdout>:    """Return memory peak in MB"""
[1,0]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMgGen:
[1,0]<stdout>:    stats = {}
[1,0]<stdout>:
[1,0]<stdout>:    def __init__(self, what):
[1,0]<stdout>:        self._what = what
[1,0]<stdout>:
[1,0]<stdout>:    def __enter__(self):
[1,0]<stdout>:        self.start = datetime.now()
[1,0]<stdout>:
[1,0]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,0]<stdout>:        self.stop = datetime.now()
[1,0]<stdout>:        delta = self.stop - self.start
[1,0]<stdout>:        mem = memory_peak(self._what)
[1,0]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,0]<stdout>:    pass
[1,0]<stdout>:    # def __init__(self, what):
[1,0]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def write_stats(nume_ddl):
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB PROC")
[1,0]<stdout>:        print(size)
[1,0]<stdout>:        print()
[1,0]<stdout>:        print(
[1,0]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    for key, values in stats.items():
[1,0]<stdout>:        time = comm.gather(values[0], root=0)
[1,0]<stdout>:        mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(
[1,0]<stdout>:                key
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(time))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(min(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(max(mem))
[1,0]<stdout>:                + ", "
[1,0]<stdout>:                + str(mean(mem))
[1,0]<stdout>:            )
[1,0]<stdout>:
[1,0]<stdout>:    mesh = nume_ddl.getMesh()
[1,0]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,0]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,0]<stdout>:
[1,0]<stdout>:    if rank == 0:
[1,0]<stdout>:        print()
[1,0]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,0]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,0]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,0]<stdout>:
[1,0]<stdout>:    def show(*args, **kwargs):
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            print(*args, **kwargs)
[1,0]<stdout>:
[1,0]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,0]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,0]<stdout>:    separ = "| :--------------- | ----------: |"
[1,0]<stdout>:    show(fmti.format("Refinement", refine))
[1,0]<stdout>:    show(separ)
[1,0]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,0]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,0]<stdout>:    for key, values in data.items():
[1,0]<stdout>:        times = comm.gather(values[0], root=0)
[1,0]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,0]<stdout>:        if rank == 0:
[1,0]<stdout>:            show(fmtt.format(key, mean(times)))
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,0]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,0]<stdout>:
[1,0]<stdout>:with ChronoCtxMg("Total"):
[1,0]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,0]<stdout>:        if params["parallel"] == "HPC":
[1,0]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:        else:
[1,0]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Model"):
[1,0]<stdout>:        model = AFFE_MODELE(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                PHENOMENE="MECANIQUE",
[1,0]<stdout>:                MODELISATION="3D",
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Material"):
[1,0]<stdout>:        steel = DEFI_MATERIAU(
[1,0]<stdout>:            ELAS=_F(
[1,0]<stdout>:                E=200000.0,
[1,0]<stdout>:                NU=0.3,
[1,0]<stdout>:            ),
[1,0]<stdout>:            ECRO_LINE=_F(
[1,0]<stdout>:   [1,0]<stdout>:             D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                SY=200.0,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        mater = AFFE_MATERIAU(
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                MATER=steel,
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,0]<stdout>:        block = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="LEFT",
[1,0]<stdout>:                    DX=0,
[1,0]<stdout>:                    DY=0.0,
[1,0]<stdout>:                    DZ=0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            MECA_IMPO=(
[1,0]<stdout>:                _F(
[1,0]<stdout>:                    GROUP_MA="RIGHT",
[1,0]<stdout>:                    DY=0.001,
[1,0]<stdout>:                    DZ=0.001,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,0]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,0]<stdout>:            MODELE=model,
[1,0]<stdout>:            OPTION="RIGI_MECA",
[1,0]<stdout>:            CHAM_MATER=mater,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Numbering"):
[1,0]<stdout>:        dofNum = NUME_DDL(
[1,0]<stdout>:            MATR_RIGI=stiff_elem,
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Assembly"):
[1,0]<stdout>:        stiffness = ASSE_MATRICE(
[1,0]<stdout>:            MATR_ELEM=stiff_elem,
[1,0]<stdout>:            NUME_DDL=dofNum,
[1,0]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,0]<stdout>:        rhs = CREA_CHAMP(
[1,0]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,0]<stdout>:            OPERATION="AFFE",
[1,0]<stdout>:            MAILLAGE=mesh,
[1,0]<stdout>:            AFFE=_F(
[1,0]<stdout>:                TOUT="OUI",
[1,0]<stdout>:                NOM_CMP=(
[1,0]<stdout>:                    "DX",
[1,0]<stdout>:                    "DY",
[1,0]<stdout>:                    "DZ",
[1,0]<stdout>:                ),
[1,0]<stdout>:                VALE=(
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                    0.0,
[1,0]<stdout>:                ),
[1,0]<stdout>:            ),
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,0]<stdout>:
[1,0]<stdout>:    if params["solver"] == "PETSC":
[1,0]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,0]<stdout>:    elif params["solver"] == "MUMPS":
[1,0]<stdout>:        solver = CA.MumpsSolver(
[1,0]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,0]<stdout>:            RENUM="PARMETIS",
[1,0]<stdout>:            ACCELERATION="FR+",
[1,0]<stdout>:            POSTTRAITEMENTS="MINI",
[1,0]<stdout>:        )
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Factorize"):
[1,0]<stdout>:        solver.factorize(stiffness)
[1,0]<stdout>:
[1,0]<stdout>:    with ChronoCtxMg("Solve"):
[1,0]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,0]<stdout>:
[1,0]<stdout>:# write_stats(dofNum)
[1,0]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,0]<stdout>:if params["parallel"] == "HPC":
[1,0]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,0]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,0]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,0]<stdout>:
[1,0]<stdout>:CA.close()
[1,0]<stdout>:
[1,0]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution of code_aster
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Command line #1:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Prepare environment in /tmp/run_aster_8_8x944r/proc.1
[1,0]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command file #1 / 1
[1,1]<stdout>:
[1,1]<stdout>:Content of the file to execute:
[1,1]<stdout>:# coding=utf-8
[1,1]<stdout>:#!/usr/bin/python
[1,1]<stdout>:
[1,1]<stdout>:import os
[1,1]<stdout>:from statistics import mean
[1,1]<stdout>:from datetime import datetime
[1,1]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,1]<stdout>:
[1,1]<stdout>:from code_aster.Commands import *
[1,1]<stdout>:from code_aster import CA
[1,1]<stdout>:from code_aster.Utilities import petscInitialize
[1,1]<stdout>:
[1,1]<stdout>:CA.init()
[1,1]<stdout>:
[1,1]<stdout>:params = {}
[1,1]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,1]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,1]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,1]<stdout>:
[1,1]<stdout>:# General parameters
[1,1]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,1]<stdout>:rank = comm.Get_rank()
[1,1]<stdout>:size = comm.Get_size()
[1,1]<stdout>:
[1,1]<stdout>:nbHexa = 8 ** params["refinements"]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def memory_peak(mess=None):
[1,1]<stdout>:    """Return memory peak in MB"""
[1,1]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMgGen:
[1,1]<stdout>:    stats = {}
[1,1]<stdout>:
[1,1]<stdout>:    def __init__(self, what):
[1,1]<stdout>:        self._what = what
[1,1]<stdout>:
[1,1]<stdout>:    def __enter__(self):
[1,1]<stdout>:        self.start = datetime.now()
[1,1]<stdout>:
[1,1]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,1]<stdout>:        self.stop = datetime.now()
[1,1]<stdout>:        delta = self.stop - self.start
[1,1]<stdout>:        mem = memory_peak(self._what)
[1,1]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,1]<stdout>:    pass
[1,1]<stdout>:    # def __init__(self, what):
[1,1]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def write_stats(nume_ddl):
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB PROC")
[1,1]<stdout>:        print(size)
[1,1]<stdout>:        print()
[1,1]<stdout>:        print(
[1,1]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    for key, values in stats.items():
[1,1]<stdout>:        time = comm.gather(values[0], root=0)
[1,1]<stdout>:        mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(
[1,1]<stdout>:                key
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(mean(time))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(min(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(max(mem))
[1,1]<stdout>:                + ", "
[1,1]<stdout>:                + str(m[1,1]<stdout>:ean(mem))
[1,1]<stdout>:            )
[1,1]<stdout>:
[1,1]<stdout>:    mesh = nume_ddl.getMesh()
[1,1]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,1]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,1]<stdout>:
[1,1]<stdout>:    if rank == 0:
[1,1]<stdout>:        print()
[1,1]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,1]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,1]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,1]<stdout>:
[1,1]<stdout>:    def show(*args, **kwargs):
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            print(*args, **kwargs)
[1,1]<stdout>:
[1,1]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,1]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,1]<stdout>:    separ = "| :--------------- | ----------: |"
[1,1]<stdout>:    show(fmti.format("Refinement", refine))
[1,1]<stdout>:    show(separ)
[1,1]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,1]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,1]<stdout>:    for key, values in data.items():
[1,1]<stdout>:        times = comm.gather(values[0], root=0)
[1,1]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,1]<stdout>:        if rank == 0:
[1,1]<stdout>:            show(fmtt.format(key, mean(times)))
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,1]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,1]<stdout>:
[1,1]<stdout>:with ChronoCtxMg("Total"):
[1,1]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,1]<stdout>:        if params["parallel"] == "HPC":
[1,1]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:        else:
[1,1]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Model"):
[1,1]<stdout>:        model = AFFE_MODELE(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                PHENOMENE="MECANIQUE",
[1,1]<stdout>:                MODELISATION="3D",
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Material"):
[1,1]<stdout>:        steel = DEFI_MATERIAU(
[1,1]<stdout>:            ELAS=_F(
[1,1]<stdout>:                E=200000.0,
[1,1]<stdout>:                NU=0.3,
[1,1]<stdout>:            ),
[1,1]<stdout>:            ECRO_LINE=_F(
[1,1]<stdout>:                D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                SY=200.0,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        mater = AFFE_MATERIAU(
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                MATER=steel,
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,1]<stdout>:        block = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="LEFT",
[1,1]<stdout>:                    DX=0,
[1,1]<stdout>:                    DY=0.0,
[1,1]<stdout>:                    DZ=0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            MECA_IMPO=(
[1,1]<stdout>:                _F(
[1,1]<stdout>:                    GROUP_MA="RIGHT",
[1,1]<stdout>:                    DY=0.001,
[1,1]<stdout>:                    DZ=0.001,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,1]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,1]<stdout>:            MODELE=model,
[1,1]<stdout>:            OPTION="RIGI_MECA",
[1,1]<stdout>:            CHAM_MATER=mater,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Numbering"):
[1,1]<stdout>:        dofNum = NUME_DDL(
[1,1]<stdout>:            MATR_RIGI=stiff_elem,
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Assembly"):
[1,1]<stdout>:        stiffness = ASSE_MATRICE(
[1,1]<stdout>:            MATR_ELEM=stiff_elem,
[1,1]<stdout>:            NUME_DDL=dofNum,
[1,1]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,1]<stdout>:        rhs = CREA_CHAMP(
[1,1]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,1]<stdout>:            OPERATION="AFFE",
[1,1]<stdout>:            MAILLAGE=mesh,
[1,1]<stdout>:            AFFE=_F(
[1,1]<stdout>:                TOUT="OUI",
[1,1]<stdout>:                NOM_CMP=(
[1,1]<stdout>:                    "DX",
[1,1]<stdout>:                    "DY",
[1,1]<stdout>:                    "DZ",
[1,1]<stdout>:                ),
[1,1]<stdout>:                VALE=(
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                    0.0,
[1,1]<stdout>:                ),
[1,1]<stdout>:            ),
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,1]<stdout>:
[1,1]<stdout>:    if params["solver"] == "PETSC":
[1,1]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,1]<stdout>:    elif params["solver"] == "MUMPS":
[1,1]<stdout>:        solver = CA.MumpsSolver(
[1,1]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,1]<stdout>:   [1,1]<stdout>:         RENUM="PARMETIS",
[1,1]<stdout>:            ACCELERATION="FR+",
[1,1]<stdout>:            POSTTRAITEMENTS="MINI",
[1,1]<stdout>:        )
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Factorize"):
[1,1]<stdout>:        solver.factorize(stiffness)
[1,1]<stdout>:
[1,1]<stdout>:    with ChronoCtxMg("Solve"):
[1,1]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,1]<stdout>:
[1,1]<stdout>:# write_stats(dofNum)
[1,1]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,1]<stdout>:if params["parallel"] == "HPC":
[1,1]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,1]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,1]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,1]<stdout>:
[1,1]<stdout>:CA.close()
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Command line #1:
[1,1]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution of code_aster
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Prepare environment in /tmp/run_aster_8_8x944r/proc.2
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command file #1 / 1
[1,2]<stdout>:
[1,2]<stdout>:Content of the file to execute:
[1,2]<stdout>:# coding=utf-8
[1,2]<stdout>:#!/usr/bin/python
[1,2]<stdout>:
[1,2]<stdout>:import os
[1,2]<stdout>:from statistics import mean
[1,2]<stdout>:from datetime import datetime
[1,2]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,2]<stdout>:
[1,2]<stdout>:from code_aster.Commands import *
[1,2]<stdout>:from code_aster import CA
[1,2]<stdout>:from code_aster.Utilities import petscInitialize
[1,2]<stdout>:
[1,2]<stdout>:CA.init()
[1,2]<stdout>:
[1,2]<stdout>:params = {}
[1,2]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,2]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,2]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,2]<stdout>:
[1,2]<stdout>:# General parameters
[1,2]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,2]<stdout>:rank = comm.Get_rank()
[1,2]<stdout>:size = comm.Get_size()
[1,2]<stdout>:
[1,2]<stdout>:nbHexa = 8 ** params["refinements"]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def memory_peak(mess=None):
[1,2]<stdout>:    """Return memory peak in MB"""
[1,2]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMgGen:
[1,2]<stdout>:    stats = {}
[1,2]<stdout>:
[1,2]<stdout>:    def __init__(self, what):
[1,2]<stdout>:        self._what = what
[1,2]<stdout>:
[1,2]<stdout>:    def __enter__(self):
[1,2]<stdout>:        self.start = datetime.now()
[1,2]<stdout>:
[1,2]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,2]<stdout>:        self.stop = datetime.now()
[1,2]<stdout>:        delta = self.stop - self.start
[1,2]<stdout>:        mem = memory_peak(self._what)
[1,2]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,2]<stdout>:    pass
[1,2]<stdout>:    # def __init__(self, what):
[1,2]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def write_stats(nume_ddl):
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB PROC")
[1,2]<stdout>:        print(size)
[1,2]<stdout>:        print()
[1,2]<stdout>:        print(
[1,2]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    for key, values in stats.items():
[1,2]<stdout>:        time = comm.gather(values[0], root=0)
[1,2]<stdout>:        mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(
[1,2]<stdout>:                key
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(time))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(min(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(max(mem))
[1,2]<stdout>:                + ", "
[1,2]<stdout>:                + str(mean(mem))
[1,2]<stdout>:            )
[1,2]<stdout>:
[1,2]<stdout>:    mesh = nume_ddl.getMesh()
[1,2]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,2]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,2]<stdout>:
[1,2]<stdout>:    if rank == 0:
[1,2]<stdout>:        print()
[1,2]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,2]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,2]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,2]<stdout>:
[1,2]<stdout>:    def show(*args, **kwargs):
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            print(*args, **kwargs)
[1,2]<stdout>:
[1,2]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,2]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,2]<stdout>:    separ = "| :--------------- | ----------: |"
[1,2]<stdout>:    show(fmti.format("Refinement", refine))
[1,2]<stdout>:    show(separ)
[1,2]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,2]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,2]<stdout>:    for key, values in data.items():
[1,2]<stdout>:        times = comm.gather(values[0], root=0)
[1,2]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,2]<stdout>:        if rank == 0:
[1,2]<stdout>:            show(fmtt.format(key, mean(times)))
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,2]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,2]<stdout>:
[1,2]<stdout>:with ChronoCtxMg("Total"):
[1,2]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,2]<stdout>:        if params["parallel"] == "HPC":
[1,2]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:        else:
[1,2]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Model"):
[1,2]<stdout>:        model = AFFE_MODELE(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                PHENOMENE="MECANIQUE",
[1,2]<stdout>:                MODELISATION="3D",
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Material"):
[1,2]<stdout>:        steel = DEFI_MATERIAU(
[1,2]<stdout>:            ELAS=_F(
[1,2]<stdout>:                E=200000.0,
[1,2]<stdout>:                NU=0.3,
[1,2]<stdout>:            ),
[1,2]<stdout>:            ECRO_LINE=_F(
[1,2]<stdout>:   [1,2]<stdout>:             D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                SY=200.0,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        mater = AFFE_MATERIAU(
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                MATER=steel,
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,2]<stdout>:        block = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="LEFT",
[1,2]<stdout>:                    DX=0,
[1,2]<stdout>:                    DY=0.0,
[1,2]<stdout>:                    DZ=0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            MECA_IMPO=(
[1,2]<stdout>:                _F(
[1,2]<stdout>:                    GROUP_MA="RIGHT",
[1,2]<stdout>:                    DY=0.001,
[1,2]<stdout>:                    DZ=0.001,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,2]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,2]<stdout>:            MODELE=model,
[1,2]<stdout>:            OPTION="RIGI_MECA",
[1,2]<stdout>:            CHAM_MATER=mater,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Numbering"):
[1,2]<stdout>:        dofNum = NUME_DDL(
[1,2]<stdout>:            MATR_RIGI=stiff_elem,
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Assembly"):
[1,2]<stdout>:        stiffness = ASSE_MATRICE(
[1,2]<stdout>:            MATR_ELEM=stiff_elem,
[1,2]<stdout>:            NUME_DDL=dofNum,
[1,2]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,2]<stdout>:        rhs = CREA_CHAMP(
[1,2]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,2]<stdout>:            OPERATION="AFFE",
[1,2]<stdout>:            MAILLAGE=mesh,
[1,2]<stdout>:            AFFE=_F(
[1,2]<stdout>:                TOUT="OUI",
[1,2]<stdout>:                NOM_CMP=(
[1,2]<stdout>:                    "DX",
[1,2]<stdout>:                    "DY",
[1,2]<stdout>:                    "DZ",
[1,2]<stdout>:                ),
[1,2]<stdout>:                VALE=(
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                    0.0,
[1,2]<stdout>:                ),
[1,2]<stdout>:            ),
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,2]<stdout>:
[1,2]<stdout>:    if params["solver"] == "PETSC":
[1,2]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,2]<stdout>:    elif params["solver"] == "MUMPS":
[1,2]<stdout>:        solver = CA.MumpsSolver(
[1,2]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,2]<stdout>:            RENUM="PARMETIS",
[1,2]<stdout>:            ACCELERATION="FR+",
[1,2]<stdout>:            POSTTRAITEMENTS="MINI",
[1,2]<stdout>:        )
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Factorize"):
[1,2]<stdout>:        solver.factorize(stiffness)
[1,2]<stdout>:
[1,2]<stdout>:    with ChronoCtxMg("Solve"):
[1,2]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,2]<stdout>:
[1,2]<stdout>:# write_stats(dofNum)
[1,2]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,2]<stdout>:if params["parallel"] == "HPC":
[1,2]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,2]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,2]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,2]<stdout>:
[1,2]<stdout>:CA.close()
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Command line #1:
[1,2]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution of code_aster
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Prepare environment in /tmp/run_aster_8_8x944r/proc.3
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command file #1 / 1
[1,3]<stdout>:
[1,3]<stdout>:Content of the file to execute:
[1,3]<stdout>:# coding=utf-8
[1,3]<stdout>:#!/usr/bin/python
[1,3]<stdout>:
[1,3]<stdout>:import os
[1,3]<stdout>:from statistics import mean
[1,3]<stdout>:from datetime import datetime
[1,3]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,3]<stdout>:
[1,3]<stdout>:from code_aster.Commands import *
[1,3]<stdout>:from code_aster import CA
[1,3]<stdout>:from code_aster.Utilities import petscInitialize
[1,3]<stdout>:
[1,3]<stdout>:CA.init()
[1,3]<stdout>:
[1,3]<stdout>:params = {}
[1,3]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,3]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,3]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,3]<stdout>:
[1,3]<stdout>:# General parameters
[1,3]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,3]<stdout>:rank = comm.Get_rank()
[1,3]<stdout>:size = comm.Get_size()
[1,3]<stdout>:
[1,3]<stdout>:nbHexa = 8 ** params["refinements"]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def memory_peak(mess=None):
[1,3]<stdout>:    """Return memory peak in MB"""
[1,3]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMgGen:
[1,3]<stdout>:    stats = {}
[1,3]<stdout>:
[1,3]<stdout>:    def __init__(self, what):
[1,3]<stdout>:        self._what = what
[1,3]<stdout>:
[1,3]<stdout>:    def __enter__(self):
[1,3]<stdout>:        self.start = datetime.now()
[1,3]<stdout>:
[1,3]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,3]<stdout>:        self.stop = datetime.now()
[1,3]<stdout>:        delta = self.stop - self.start
[1,3]<stdout>:        mem = memory_peak(self._what)
[1,3]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,3]<stdout>:    pass
[1,3]<stdout>:    # def __init__(self, what):
[1,3]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def write_stats(nume_ddl):
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB PROC")
[1,3]<stdout>:        print(size)
[1,3]<stdout>:        print()
[1,3]<stdout>:        print(
[1,3]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    for key, values in stats.items():
[1,3]<stdout>:        time = comm.gather(values[0], root=0)
[1,3]<stdout>:        mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(
[1,3]<stdout>:                key
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(time))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(min(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(max(mem))
[1,3]<stdout>:                + ", "
[1,3]<stdout>:                + str(mean(mem))
[1,3]<stdout>:            )
[1,3]<stdout>:
[1,3]<stdout>:    mesh = nume_ddl.getMesh()
[1,3]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,3]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,3]<stdout>:
[1,3]<stdout>:    if rank == 0:
[1,3]<stdout>:        print()
[1,3]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,3]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,3]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,3]<stdout>:
[1,3]<stdout>:    def show(*args, **kwargs):
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            print(*args, **kwargs)
[1,3]<stdout>:
[1,3]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,3]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,3]<stdout>:    separ = "| :--------------- | ----------: |"
[1,3]<stdout>:    show(fmti.format("Refinement", refine))
[1,3]<stdout>:    show(separ)
[1,3]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,3]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,3]<stdout>:    for key, values in data.items():
[1,3]<stdout>:        times = comm.gather(values[0], root=0)
[1,3]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,3]<stdout>:        if rank == 0:
[1,3]<stdout>:            show(fmtt.format(key, mean(times)))
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,3]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,3]<stdout>:
[1,3]<stdout>:with ChronoCtxMg("Total"):
[1,3]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,3]<stdout>:        if params["parallel"] == "HPC":
[1,3]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:        else:
[1,3]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Model"):
[1,3]<stdout>:        model = AFFE_MODELE(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                PHENOMENE="MECANIQUE",
[1,3]<stdout>:                MODELISATION="3D",
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Material"):
[1,3]<stdout>:        steel = DEFI_MATERIAU(
[1,3]<stdout>:            ELAS=_F(
[1,3]<stdout>:                E=200000.0,
[1,3]<stdout>:                NU=0.3,
[1,3]<stdout>:            ),
[1,3]<stdout>:            ECRO_LINE=_F(
[1,3]<stdout>:    [1,3]<stdout>:            D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                SY=200.0,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        mater = AFFE_MATERIAU(
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                MATER=steel,
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,3]<stdout>:        block = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="LEFT",
[1,3]<stdout>:                    DX=0,
[1,3]<stdout>:                    DY=0.0,
[1,3]<stdout>:                    DZ=0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            MECA_IMPO=(
[1,3]<stdout>:                _F(
[1,3]<stdout>:                    GROUP_MA="RIGHT",
[1,3]<stdout>:                    DY=0.001,
[1,3]<stdout>:                    DZ=0.001,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,3]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,3]<stdout>:            MODELE=model,
[1,3]<stdout>:            OPTION="RIGI_MECA",
[1,3]<stdout>:            CHAM_MATER=mater,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Numbering"):
[1,3]<stdout>:        dofNum = NUME_DDL(
[1,3]<stdout>:            MATR_RIGI=stiff_elem,
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Assembly"):
[1,3]<stdout>:        stiffness = ASSE_MATRICE(
[1,3]<stdout>:            MATR_ELEM=stiff_elem,
[1,3]<stdout>:            NUME_DDL=dofNum,
[1,3]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,3]<stdout>:        rhs = CREA_CHAMP(
[1,3]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,3]<stdout>:            OPERATION="AFFE",
[1,3]<stdout>:            MAILLAGE=mesh,
[1,3]<stdout>:            AFFE=_F(
[1,3]<stdout>:                TOUT="OUI",
[1,3]<stdout>:                NOM_CMP=(
[1,3]<stdout>:                    "DX",
[1,3]<stdout>:                    "DY",
[1,3]<stdout>:                    "DZ",
[1,3]<stdout>:                ),
[1,3]<stdout>:                VALE=(
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                    0.0,
[1,3]<stdout>:                ),
[1,3]<stdout>:            ),
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,3]<stdout>:
[1,3]<stdout>:    if params["solver"] == "PETSC":
[1,3]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,3]<stdout>:    elif params["solver"] == "MUMPS":
[1,3]<stdout>:        solver = CA.MumpsSolver(
[1,3]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,3]<stdout>:            RENUM="PARMETIS",
[1,3]<stdout>:            ACCELERATION="FR+",
[1,3]<stdout>:            POSTTRAITEMENTS="MINI",
[1,3]<stdout>:        )
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Factorize"):
[1,3]<stdout>:        solver.factorize(stiffness)
[1,3]<stdout>:
[1,3]<stdout>:    with ChronoCtxMg("Solve"):
[1,3]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,3]<stdout>:
[1,3]<stdout>:# write_stats(dofNum)
[1,3]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,3]<stdout>:if params["parallel"] == "HPC":
[1,3]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,3]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,3]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,3]<stdout>:
[1,3]<stdout>:CA.close()
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Command line #1:
[1,3]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution of code_aster
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Prepare environment in /tmp/run_aster_8_8x944r/proc.4
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command file #1 / 1
[1,4]<stdout>:
[1,4]<stdout>:Content of the file to execute:
[1,4]<stdout>:# coding=utf-8
[1,4]<stdout>:#!/usr/bin/python
[1,4]<stdout>:
[1,4]<stdout>:import os
[1,4]<stdout>:from statistics import mean
[1,4]<stdout>:from datetime import datetime
[1,4]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,4]<stdout>:
[1,4]<stdout>:from code_aster.Commands import *
[1,4]<stdout>:from code_aster import CA
[1,4]<stdout>:from code_aster.Utilities import petscInitialize
[1,4]<stdout>:
[1,4]<stdout>:CA.init()
[1,4]<stdout>:
[1,4]<stdout>:params = {}
[1,4]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,4]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,4]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,4]<stdout>:
[1,4]<stdout>:# General parameters
[1,4]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,4]<stdout>:rank = comm.Get_rank()
[1,4]<stdout>:size = comm.Get_size()
[1,4]<stdout>:
[1,4]<stdout>:nbHexa = 8 ** params["refinements"]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def memory_peak(mess=None):
[1,4]<stdout>:    """Return memory peak in MB"""
[1,4]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMgGen:
[1,4]<stdout>:    stats = {}
[1,4]<stdout>:
[1,4]<stdout>:    def __init__(self, what):
[1,4]<stdout>:        self._what = what
[1,4]<stdout>:
[1,4]<stdout>:    def __enter__(self):
[1,4]<stdout>:        self.start = datetime.now()
[1,4]<stdout>:
[1,4]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,4]<stdout>:        self.stop = datetime.now()
[1,4]<stdout>:        delta = self.stop - self.start
[1,4]<stdout>:        mem = memory_peak(self._what)
[1,4]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,4]<stdout>:    pass
[1,4]<stdout>:    # def __init__(self, what):
[1,4]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def write_stats(nume_ddl):
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB PROC")
[1,4]<stdout>:        print(size)
[1,4]<stdout>:        print()
[1,4]<stdout>:        print(
[1,4]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    for key, values in stats.items():
[1,4]<stdout>:        time = comm.gather(values[0], root=0)
[1,4]<stdout>:        mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(
[1,4]<stdout>:                key
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(time))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(min(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(max(mem))
[1,4]<stdout>:                + ", "
[1,4]<stdout>:                + str(mean(mem))
[1,4]<stdout>:            )
[1,4]<stdout>:
[1,4]<stdout>:    mesh = nume_ddl.getMesh()
[1,4]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,4]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,4]<stdout>:
[1,4]<stdout>:    if rank == 0:
[1,4]<stdout>:        print()
[1,4]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,4]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,4]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,4]<stdout>:
[1,4]<stdout>:    def show(*args, **kwargs):
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            print(*args, **kwargs)
[1,4]<stdout>:
[1,4]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,4]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,4]<stdout>:    separ = "| :--------------- | ----------: |"
[1,4]<stdout>:    show(fmti.format("Refinement", refine))
[1,4]<stdout>:    show(separ)
[1,4]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,4]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,4]<stdout>:    for key, values in data.items():
[1,4]<stdout>:        times = comm.gather(values[0], root=0)
[1,4]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,4]<stdout>:        if rank == 0:
[1,4]<stdout>:            show(fmtt.format(key, mean(times)))
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,4]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,4]<stdout>:
[1,4]<stdout>:with ChronoCtxMg("Total"):
[1,4]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,4]<stdout>:        if params["parallel"] == "HPC":
[1,4]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:        else:
[1,4]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Model"):
[1,4]<stdout>:        model = AFFE_MODELE(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                PHENOMENE="MECANIQUE",
[1,4]<stdout>:                MODELISATION="3D",
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Material"):
[1,4]<stdout>:        steel = DEFI_MATERIAU(
[1,4]<stdout>:            ELAS=_F(
[1,4]<stdout>:                E=200000.0,
[1,4]<stdout>:                NU=0.3,
[1,4]<stdout>:            ),
[1,4]<stdout>:            ECRO_LINE=_F(
[1,4]<stdout>:   [1,4]<stdout>:             D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                SY=200.0,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        mater = AFFE_MATERIAU(
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                MATER=steel,
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,4]<stdout>:        block = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="LEFT",
[1,4]<stdout>:                    DX=0,
[1,4]<stdout>:                    DY=0.0,
[1,4]<stdout>:                    DZ=0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            MECA_IMPO=(
[1,4]<stdout>:                _F(
[1,4]<stdout>:                    GROUP_MA="RIGHT",
[1,4]<stdout>:                    DY=0.001,
[1,4]<stdout>:                    DZ=0.001,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,4]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,4]<stdout>:            MODELE=model,
[1,4]<stdout>:            OPTION="RIGI_MECA",
[1,4]<stdout>:            CHAM_MATER=mater,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Numbering"):
[1,4]<stdout>:        dofNum = NUME_DDL(
[1,4]<stdout>:            MATR_RIGI=stiff_elem,
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Assembly"):
[1,4]<stdout>:        stiffness = ASSE_MATRICE(
[1,4]<stdout>:            MATR_ELEM=stiff_elem,
[1,4]<stdout>:            NUME_DDL=dofNum,
[1,4]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,4]<stdout>:        rhs = CREA_CHAMP(
[1,4]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,4]<stdout>:            OPERATION="AFFE",
[1,4]<stdout>:            MAILLAGE=mesh,
[1,4]<stdout>:            AFFE=_F(
[1,4]<stdout>:                TOUT="OUI",
[1,4]<stdout>:                NOM_CMP=(
[1,4]<stdout>:                    "DX",
[1,4]<stdout>:                    "DY",
[1,4]<stdout>:                    "DZ",
[1,4]<stdout>:                ),
[1,4]<stdout>:                VALE=(
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                    0.0,
[1,4]<stdout>:                ),
[1,4]<stdout>:            ),
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,4]<stdout>:
[1,4]<stdout>:    if params["solver"] == "PETSC":
[1,4]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,4]<stdout>:    elif params["solver"] == "MUMPS":
[1,4]<stdout>:        solver = CA.MumpsSolver(
[1,4]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,4]<stdout>:            RENUM="PARMETIS",
[1,4]<stdout>:            ACCELERATION="FR+",
[1,4]<stdout>:            POSTTRAITEMENTS="MINI",
[1,4]<stdout>:        )
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Factorize"):
[1,4]<stdout>:        solver.factorize(stiffness)
[1,4]<stdout>:
[1,4]<stdout>:    with ChronoCtxMg("Solve"):
[1,4]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,4]<stdout>:
[1,4]<stdout>:# write_stats(dofNum)
[1,4]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,4]<stdout>:if params["parallel"] == "HPC":
[1,4]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,4]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,4]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,4]<stdout>:
[1,4]<stdout>:CA.close()
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Command line #1:
[1,4]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution of code_aster
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Prepare environment in /tmp/run_aster_8_8x944r/proc.6
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution of code_aster
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Prepare environment in /tmp/run_aster_8_8x944r/proc.5
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command file #1 / 1
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command file #1 / 1
[1,6]<stdout>:
[1,6]<stdout>:Content of the file to execute:
[1,6]<stdout>:# coding=utf-8
[1,6]<stdout>:#!/usr/bin/python
[1,6]<stdout>:
[1,6]<stdout>:import os
[1,6]<stdout>:from statistics import mean
[1,6]<stdout>:from datetime import datetime
[1,6]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,6]<stdout>:
[1,6]<stdout>:from code_aster.Commands import *
[1,6]<stdout>:from code_aster import CA
[1,6]<stdout>:from code_aster.Utilities import petscInitialize
[1,6]<stdout>:
[1,6]<stdout>:CA.init()
[1,6]<stdout>:
[1,6]<stdout>:params = {}
[1,6]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,6]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,6]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,6]<stdout>:
[1,6]<stdout>:# General parameters
[1,6]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,6]<stdout>:rank = comm.Get_rank()
[1,6]<stdout>:size = comm.Get_size()
[1,6]<stdout>:
[1,6]<stdout>:nbHexa = 8 ** params["refinements"]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def memory_peak(mess=None):
[1,6]<stdout>:    """Return memory peak in MB"""
[1,6]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMgGen:
[1,6]<stdout>:    stats = {}
[1,6]<stdout>:
[1,6]<stdout>:    def __init__(self, what):
[1,6]<stdout>:        self._what = what
[1,6]<stdout>:
[1,6]<stdout>:    def __enter__(self):
[1,6]<stdout>:        self.start = datetime.now()
[1,6]<stdout>:
[1,6]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,6]<stdout>:        self.stop = datetime.now()
[1,6]<stdout>:        delta = self.stop - self.start
[1,6]<stdout>:        mem = memory_peak(self._what)
[1,6]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,6]<stdout>:    pass
[1,6]<stdout>:    # def __init__(self, what):
[1,6]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def write_stats(nume_ddl):
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB PROC")
[1,6]<stdout>:        print(size)
[1,6]<stdout>:        print()
[1,6]<stdout>:        print(
[1,6]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    for key, values in stats.items():
[1,6]<stdout>:        time = comm.gather(values[0], root=0)
[1,6]<stdout>:        mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(
[1,6]<stdout>:                key
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(time))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(min(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(max(mem))
[1,6]<stdout>:                + ", "
[1,6]<stdout>:                + str(mean(mem))
[1,6]<stdout>:            )
[1,6]<stdout>:
[1,6]<stdout>:    mesh = nume_ddl.getMesh()
[1,6]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,6]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,6]<stdout>:
[1,6]<stdout>:    if rank == 0:
[1,6]<stdout>:        print()
[1,6]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,6]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,6]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,6]<stdout>:
[1,6]<stdout>:    def show(*args, **kwargs):
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            print(*args, **kwargs)
[1,6]<stdout>:
[1,6]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,6]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,6]<stdout>:    separ = "| :--------------- | ----------: |"
[1,6]<stdout>:    show(fmti.format("Refinement", refine))
[1,6]<stdout>:    show(separ)
[1,6]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,6]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,6]<stdout>:    for key, values in data.items():
[1,6]<stdout>:        times = comm.gather(values[0], root=0)
[1,6]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,6]<stdout>:        if rank == 0:
[1,6]<stdout>:            show(fmtt.format(key, mean(times)))
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,6]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,6]<stdout>:
[1,6]<stdout>:with ChronoCtxMg("Total"):
[1,6]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,6]<stdout>:        if params["parallel"] == "HPC":
[1,6]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:        else:
[1,6]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Model"):
[1,6]<stdout>:        model = AFFE_MODELE(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                PHENOMENE="MECANIQUE",
[1,6]<stdout>:                MODELISATION="3D",
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Material"):
[1,6]<stdout>:        steel = DEFI_MATERIAU(
[1,6]<stdout>:            ELAS=_F(
[1,6]<stdout>:                E=200000.0,
[1,6]<stdout>:                NU=0.3,
[1,6]<stdout>:            ),
[1,6]<stdout>:            ECRO_LINE=_F(
[1,6]<stdout>:   [1,6]<stdout>:             D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                SY=200.0,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        mater = AFFE_MATERIAU(
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                MATER=steel,
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,6]<stdout>:        block = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="LEFT",
[1,6]<stdout>:                    DX=0,
[1,6]<stdout>:                    DY=0.0,
[1,6]<stdout>:                    DZ=0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            MECA_IMPO=(
[1,6]<stdout>:                _F(
[1,6]<stdout>:                    GROUP_MA="RIGHT",
[1,6]<stdout>:                    DY=0.001,
[1,6]<stdout>:                    DZ=0.001,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,6]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,6]<stdout>:            MODELE=model,
[1,6]<stdout>:            OPTION="RIGI_MECA",
[1,6]<stdout>:            CHAM_MATER=mater,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Numbering"):
[1,6]<stdout>:        dofNum = NUME_DDL(
[1,6]<stdout>:            MATR_RIGI=stiff_elem,
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Assembly"):
[1,6]<stdout>:        stiffness = ASSE_MATRICE(
[1,6]<stdout>:            MATR_ELEM=stiff_elem,
[1,6]<stdout>:            NUME_DDL=dofNum,
[1,6]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,6]<stdout>:        rhs = CREA_CHAMP(
[1,6]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,6]<stdout>:            OPERATION="AFFE",
[1,6]<stdout>:            MAILLAGE=mesh,
[1,6]<stdout>:            AFFE=_F(
[1,6]<stdout>:                TOUT="OUI",
[1,6]<stdout>:                NOM_CMP=(
[1,6]<stdout>:                    "DX",
[1,6]<stdout>:                    "DY",
[1,6]<stdout>:                    "DZ",
[1,6]<stdout>:                ),
[1,6]<stdout>:                VALE=(
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                    0.0,
[1,6]<stdout>:                ),
[1,6]<stdout>:            ),
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,6]<stdout>:
[1,6]<stdout>:    if params["solver"] == "PETSC":
[1,6]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,6]<stdout>:    elif params["solver"] == "MUMPS":
[1,6]<stdout>:        solver = CA.MumpsSolver(
[1,6]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,6]<stdout>:            RENUM="PARMETIS",
[1,6]<stdout>:            ACCELERATION="FR+",
[1,6]<stdout>:            POSTTRAITEMENTS="MINI",
[1,6]<stdout>:        )
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Factorize"):
[1,6]<stdout>:        solver.factorize(stiffness)
[1,6]<stdout>:
[1,6]<stdout>:    with ChronoCtxMg("Solve"):
[1,6]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,6]<stdout>:
[1,6]<stdout>:# write_stats(dofNum)
[1,6]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,6]<stdout>:if params["parallel"] == "HPC":
[1,6]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,6]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,6]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,6]<stdout>:
[1,6]<stdout>:CA.close()
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Command line #1:
[1,5]<stdout>:
[1,5]<stdout>:Content of the file to execute:
[1,5]<stdout>:# coding=utf-8
[1,5]<stdout>:#!/usr/bin/python
[1,5]<stdout>:
[1,5]<stdout>:import os
[1,5]<stdout>:from statistics import mean
[1,5]<stdout>:from datetime import datetime
[1,5]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,5]<stdout>:
[1,5]<stdout>:from code_aster.Commands import *
[1,5]<stdout>:from code_aster import CA
[1,5]<stdout>:from code_aster.Utilities import petscInitialize
[1,5]<stdout>:
[1,5]<stdout>:CA.init()
[1,5]<stdout>:
[1,5]<stdout>:params = {}
[1,5]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,5]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,5]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,5]<stdout>:
[1,5]<stdout>:# General parameters
[1,5]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,5]<stdout>:rank = comm.Get_rank()
[1,5]<stdout>:size = comm.Get_size()
[1,5]<stdout>:
[1,5]<stdout>:nbHexa = 8 ** params["refinements"]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def memory_peak(mess=None):
[1,5]<stdout>:    """Return memory peak in MB"""
[1,5]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMgGen:
[1,5]<stdout>:    stats = {}
[1,5]<stdout>:
[1,5]<stdout>:    def __init__(self, what):
[1,5]<stdout>:        self._what = what
[1,5]<stdout>:
[1,5]<stdout>:    def __enter__(self):
[1,5]<stdout>:        self.start = datetime.now()
[1,5]<stdout>:
[1,5]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,5]<stdout>:        self.stop = datetime.now()
[1,5]<stdout>:        delta = self.stop - self.start
[1,5]<stdout>:        mem = memory_peak(self._what)
[1,5]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,5]<stdout>:    pass
[1,5]<stdout>:    # def __init__(self, what):
[1,5]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def write_stats(nume_ddl):
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB PROC")
[1,5]<stdout>:        print(size)
[1,5]<stdout>:        print()
[1,5]<stdout>:        print(
[1,5]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    for key, values in stats.items():
[1,5]<stdout>:        time = comm.gather(values[0], root=0)
[1,5]<stdout>:        mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(
[1,5]<stdout>:                key
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(time))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(min(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(max(mem))
[1,5]<stdout>:                + ", "
[1,5]<stdout>:                + str(mean(mem))
[1,5]<stdout>:            )
[1,5]<stdout>:
[1,5]<stdout>:    mesh = nume_ddl.getMesh()
[1,5]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,5]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,5]<stdout>:
[1,5]<stdout>:    if rank == 0:
[1,5]<stdout>:        print()
[1,5]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,5]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,5]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,5]<stdout>:
[1,5]<stdout>:    def show(*args, **kwargs):
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            print(*args, **kwargs)
[1,5]<stdout>:
[1,5]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,5]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,5]<stdout>:    separ = "| :--------------- | ----------: |"
[1,5]<stdout>:    show(fmti.format("Refinement", refine))
[1,5]<stdout>:    show(separ)
[1,5]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,5]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,5]<stdout>:    for key, values in data.items():
[1,5]<stdout>:        times = comm.gather(values[0], root=0)
[1,5]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,5]<stdout>:        if rank == 0:
[1,5]<stdout>:            show(fmtt.format(key, mean(times)))
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,5]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,5]<stdout>:
[1,5]<stdout>:with ChronoCtxMg("Total"):
[1,5]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,5]<stdout>:        if params["parallel"] == "HPC":
[1,5]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:        else:
[1,5]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Model"):
[1,5]<stdout>:        model = AFFE_MODELE(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                PHENOMENE="MECANIQUE",
[1,5]<stdout>:                MODELISATION="3D",
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Material"):
[1,5]<stdout>:        steel = DEFI_MATERIAU(
[1,5]<stdout>:            ELAS=_F(
[1,5]<stdout>:                E=200000.0,
[1,5]<stdout>:                NU=0.3,
[1,5]<stdout>:            ),
[1,5]<stdout>:            ECRO_LINE=_F(
[1,5]<stdout>:   [1,6]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,5]<stdout>:             D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                SY=200.0,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        mater = AFFE_MATERIAU(
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                MATER=steel,
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,5]<stdout>:        block = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="LEFT",
[1,5]<stdout>:                    DX=0,
[1,5]<stdout>:                    DY=0.0,
[1,5]<stdout>:                    DZ=0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            MECA_IMPO=(
[1,5]<stdout>:                _F(
[1,5]<stdout>:                    GROUP_MA="RIGHT",
[1,5]<stdout>:                    DY=0.001,
[1,5]<stdout>:                    DZ=0.001,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,5]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,5]<stdout>:            MODELE=model,
[1,5]<stdout>:            OPTION="RIGI_MECA",
[1,5]<stdout>:            CHAM_MATER=mater,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Numbering"):
[1,5]<stdout>:        dofNum = NUME_DDL(
[1,5]<stdout>:            MATR_RIGI=stiff_elem,
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Assembly"):
[1,5]<stdout>:        stiffness = ASSE_MATRICE(
[1,5]<stdout>:            MATR_ELEM=stiff_elem,
[1,5]<stdout>:            NUME_DDL=dofNum,
[1,5]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,5]<stdout>:        rhs = CREA_CHAMP(
[1,5]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,5]<stdout>:            OPERATION="AFFE",
[1,5]<stdout>:            MAILLAGE=mesh,
[1,5]<stdout>:            AFFE=_F(
[1,5]<stdout>:                TOUT="OUI",
[1,5]<stdout>:                NOM_CMP=(
[1,5]<stdout>:                    "DX",
[1,5]<stdout>:                    "DY",
[1,5]<stdout>:                    "DZ",
[1,5]<stdout>:                ),
[1,5]<stdout>:                VALE=(
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                    0.0,
[1,5]<stdout>:                ),
[1,5]<stdout>:            ),
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,5]<stdout>:
[1,5]<stdout>:    if params["solver"] == "PETSC":
[1,5]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,5]<stdout>:    elif params["solver"] == "MUMPS":
[1,5]<stdout>:        solver = CA.MumpsSolver(
[1,5]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,5]<stdout>:            RENUM="PARMETIS",
[1,5]<stdout>:            ACCELERATION="FR+",
[1,5]<stdout>:            POSTTRAITEMENTS="MINI",
[1,5]<stdout>:        )
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Factorize"):
[1,5]<stdout>:        solver.factorize(stiffness)
[1,5]<stdout>:
[1,5]<stdout>:    with ChronoCtxMg("Solve"):
[1,5]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,5]<stdout>:
[1,5]<stdout>:# write_stats(dofNum)
[1,5]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,5]<stdout>:if params["parallel"] == "HPC":
[1,5]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,5]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,5]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,5]<stdout>:
[1,5]<stdout>:CA.close()
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Command line #1:
[1,5]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution of code_aster
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Prepare environment in /tmp/run_aster_8_8x944r/proc.7
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command file #1 / 1
[1,7]<stdout>:
[1,7]<stdout>:Content of the file to execute:
[1,7]<stdout>:# coding=utf-8
[1,7]<stdout>:#!/usr/bin/python
[1,7]<stdout>:
[1,7]<stdout>:import os
[1,7]<stdout>:from statistics import mean
[1,7]<stdout>:from datetime import datetime
[1,7]<stdout>:from resource import RUSAGE_SELF, getrusage
[1,7]<stdout>:
[1,7]<stdout>:from code_aster.Commands import *
[1,7]<stdout>:from code_aster import CA
[1,7]<stdout>:from code_aster.Utilities import petscInitialize
[1,7]<stdout>:
[1,7]<stdout>:CA.init()
[1,7]<stdout>:
[1,7]<stdout>:params = {}
[1,7]<stdout>:params["refinements"] = int(os.environ.get("REFINE", 1))
[1,7]<stdout>:params["parallel"] = os.environ.get("USE_LEGACY", "HPC")
[1,7]<stdout>:params["solver"] = os.environ.get("SOLVER", "PETSC")
[1,7]<stdout>:
[1,7]<stdout>:# General parameters
[1,7]<stdout>:comm = CA.MPI.ASTER_COMM_WORLD
[1,7]<stdout>:rank = comm.Get_rank()
[1,7]<stdout>:size = comm.Get_size()
[1,7]<stdout>:
[1,7]<stdout>:nbHexa = 8 ** params["refinements"]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def memory_peak(mess=None):
[1,7]<stdout>:    """Return memory peak in MB"""
[1,7]<stdout>:    return int(getrusage(RUSAGE_SELF).ru_maxrss / 1024)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMgGen:
[1,7]<stdout>:    stats = {}
[1,7]<stdout>:
[1,7]<stdout>:    def __init__(self, what):
[1,7]<stdout>:        self._what = what
[1,7]<stdout>:
[1,7]<stdout>:    def __enter__(self):
[1,7]<stdout>:        self.start = datetime.now()
[1,7]<stdout>:
[1,7]<stdout>:    def __exit__(self, exctype, exc, tb):
[1,7]<stdout>:        self.stop = datetime.now()
[1,7]<stdout>:        delta = self.stop - self.start
[1,7]<stdout>:        mem = memory_peak(self._what)
[1,7]<stdout>:        self.stats[self._what] = [delta.total_seconds(), mem]
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:class ChronoCtxMg(ChronoCtxMgGen):
[1,7]<stdout>:    pass
[1,7]<stdout>:    # def __init__(self, what):
[1,7]<stdout>:    #     ChronoCtxMgGen.__init__(self, what)
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def write_stats(nume_ddl):
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print("TITLE: TEST PERF CUBE")
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB PROC")
[1,7]<stdout>:        print(size)
[1,7]<stdout>:        print()
[1,7]<stdout>:        print(
[1,7]<stdout>:            "COMMAND, TIME MIN (s), TIME MAX (s), TIME MEAN (s), MEM MIN (Mo), MEM MAX (Mo), MEM MEAN (Mo)"
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    for key, values in stats.items():
[1,7]<stdout>:        time = comm.gather(values[0], root=0)
[1,7]<stdout>:        mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(
[1,7]<stdout>:                key
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(time))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(min(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(max(mem))
[1,7]<stdout>:                + ", "
[1,7]<stdout>:                + str(mean(mem))
[1,7]<stdout>:            )
[1,7]<stdout>:
[1,7]<stdout>:    mesh = nume_ddl.getMesh()
[1,7]<stdout>:    nodes = len(mesh.getInnerNodes())
[1,7]<stdout>:    nodes = comm.allreduce(nodes, CA.MPI.SUM)
[1,7]<stdout>:
[1,7]<stdout>:    if rank == 0:
[1,7]<stdout>:        print()
[1,7]<stdout>:        print("NB CELLS, NB NODES, NB DOFS")
[1,7]<stdout>:        print(str(nbHexa) + ", " + str(nodes) + ", " + str(nume_ddl.getNumberOfDofs()))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:def print_markdown_table(data, refine, nbcells, nbnodes, nbdofs):
[1,7]<stdout>:    """Print a table of the mean time as a Markdown table."""
[1,7]<stdout>:
[1,7]<stdout>:    def show(*args, **kwargs):
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            print(*args, **kwargs)
[1,7]<stdout>:
[1,7]<stdout>:    fmti = "| {0:<16s} | {1:11,d} |"
[1,7]<stdout>:    fmtt = "| {0:<16s} | {1:11.2f} |"
[1,7]<stdout>:    separ = "| :--------------- | ----------: |"
[1,7]<stdout>:    show(fmti.format("Refinement", refine))
[1,7]<stdout>:    show(separ)
[1,7]<stdout>:    show(fmti.format("Number of cells", nbcells).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of nodes", nbnodes).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of DOFs", nbdofs).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Number of procs", size).replace(",", " "))
[1,7]<stdout>:    show(fmti.format("Nb of DOFs/proc", nbdofs // size).replace(",", " "))
[1,7]<stdout>:    for key, values in data.items():
[1,7]<stdout>:        times = comm.gather(values[0], root=0)
[1,7]<stdout>:        # mem = comm.gather(values[1], root=0)
[1,7]<stdout>:        if rank == 0:
[1,7]<stdout>:            show(fmtt.format(key, mean(times)))
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# petscInitialize('-ksp_monitor_true_residual -stats' )
[1,7]<stdout>:petscInitialize("-ksp_monitor_true_residual -log_view")
[1,7]<stdout>:
[1,7]<stdout>:with ChronoCtxMg("Total"):
[1,7]<stdout>:    with ChronoCtxMg("Build mesh"):
[1,7]<stdout>:        if params["parallel"] == "HPC":
[1,7]<stdout>:            mesh = CA.ParallelMesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:        else:
[1,7]<stdout>:            mesh = CA.Mesh.buildCube(refine=params["refinements"])
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Model"):
[1,7]<stdout>:        model = AFFE_MODELE(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                PHENOMENE="MECANIQUE",
[1,7]<stdout>:                MODELISATION="3D",
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Material"):
[1,7]<stdout>:        steel = DEFI_MATERIAU(
[1,7]<stdout>:            ELAS=_F(
[1,7]<stdout>:                E=200000.0,
[1,7]<stdout>:                NU=0.3,
[1,7]<stdout>:            ),
[1,7]<stdout>:            ECRO_LINE=_F(
[1,7]<stdout>:   [1,7]<stdout>:             D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                SY=200.0,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        mater = AFFE_MATERIAU(
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                MATER=steel,
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Boundary conditions"):
[1,7]<stdout>:        block = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="LEFT",
[1,7]<stdout>:                    DX=0,
[1,7]<stdout>:                    DY=0.0,
[1,7]<stdout>:                    DZ=0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        imposed_displ = AFFE_CHAR_CINE(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            MECA_IMPO=(
[1,7]<stdout>:                _F(
[1,7]<stdout>:                    GROUP_MA="RIGHT",
[1,7]<stdout>:                    DY=0.001,
[1,7]<stdout>:                    DZ=0.001,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Create matrix"):
[1,7]<stdout>:        stiff_elem = CALC_MATR_ELEM(
[1,7]<stdout>:            MODELE=model,
[1,7]<stdout>:            OPTION="RIGI_MECA",
[1,7]<stdout>:            CHAM_MATER=mater,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Numbering"):
[1,7]<stdout>:        dofNum = NUME_DDL(
[1,7]<stdout>:            MATR_RIGI=stiff_elem,
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Assembly"):
[1,7]<stdout>:        stiffness = ASSE_MATRICE(
[1,7]<stdout>:            MATR_ELEM=stiff_elem,
[1,7]<stdout>:            NUME_DDL=dofNum,
[1,7]<stdout>:            CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Build RHS"):
[1,7]<stdout>:        rhs = CREA_CHAMP(
[1,7]<stdout>:            TYPE_CHAM="NOEU_DEPL_R",
[1,7]<stdout>:            OPERATION="AFFE",
[1,7]<stdout>:            MAILLAGE=mesh,
[1,7]<stdout>:            AFFE=_F(
[1,7]<stdout>:                TOUT="OUI",
[1,7]<stdout>:                NOM_CMP=(
[1,7]<stdout>:                    "DX",
[1,7]<stdout>:                    "DY",
[1,7]<stdout>:                    "DZ",
[1,7]<stdout>:                ),
[1,7]<stdout>:                VALE=(
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                    0.0,
[1,7]<stdout>:                ),
[1,7]<stdout>:            ),
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:        load_vector = CALC_CHAR_CINE(NUME_DDL=dofNum, CHAR_CINE=(block, imposed_displ))
[1,7]<stdout>:
[1,7]<stdout>:    if params["solver"] == "PETSC":
[1,7]<stdout>:        solver = CA.PetscSolver(RENUM="SANS", PRE_COND="GAMG")
[1,7]<stdout>:    elif params["solver"] == "MUMPS":
[1,7]<stdout>:        solver = CA.MumpsSolver(
[1,7]<stdout>:            MATR_DISTRIBUEE="OUI",
[1,7]<stdout>:            RENUM="PARMETIS",
[1,7]<stdout>:            ACCELERATION="FR+",
[1,7]<stdout>:            POSTTRAITEMENTS="MINI",
[1,7]<stdout>:        )
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Factorize"):
[1,7]<stdout>:        solver.factorize(stiffness)
[1,7]<stdout>:
[1,7]<stdout>:    with ChronoCtxMg("Solve"):
[1,7]<stdout>:        resu = solver.solve(rhs, load_vector)
[1,7]<stdout>:
[1,7]<stdout>:# write_stats(dofNum)
[1,7]<stdout>:nbNodes = len(mesh.getInnerNodes())
[1,7]<stdout>:if params["parallel"] == "HPC":
[1,7]<stdout>:    nbNodes = comm.allreduce(nbNodes, CA.MPI.SUM)
[1,7]<stdout>:nbDOFs = dofNum.getNumberOfDOFs()
[1,7]<stdout>:print_markdown_table(ChronoCtxMg.stats, params["refinements"], nbHexa, nbNodes, nbDOFs)
[1,7]<stdout>:
[1,7]<stdout>:CA.close()
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Command line #1:
[1,7]<stdout>:    ulimit -c unlimited ; ulimit -t 108000 ; ( /opt/venv/bin/python3 -m mpi4py /home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/Cube_perf.py --last --tpmax 86400 ; echo $? > _exit_code_ ) 2>&1 | tee -a fort.6
[1,1]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,7]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,0]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,3]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,6]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,5]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,4]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,2]<stdout>:setting '--memory' value to 3686.40 MB (keyword RESERVE_MEMOIRE)
[1,7]<stdout>:checking MPI initialization...
[1,7]<stdout>:using COMM_WORLD.
[1,7]<stdout>:MPI is initialized.
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,1]<stdout>:checking MPI initialization...
[1,1]<stdout>:using COMM_WORLD.
[1,1]<stdout>:MPI is initialized.
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,3]<stdout>:checking MPI initialization...
[1,3]<stdout>:using COMM_WORLD.
[1,3]<stdout>:MPI is initialized.
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,4]<stdout>:checking MPI initialization...
[1,4]<stdout>:using COMM_WORLD.
[1,4]<stdout>:MPI is initialized.
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,6]<stdout>:checking MPI initialization...
[1,6]<stdout>:using COMM_WORLD.
[1,6]<stdout>:MPI is initialized.
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,0]<stdout>:checking MPI initialization...
[1,0]<stdout>:using COMM_WORLD.
[1,0]<stdout>:MPI is initialized.
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,5]<stdout>:checking MPI initialization...
[1,5]<stdout>:using COMM_WORLD.
[1,5]<stdout>:MPI is initialized.
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,2]<stdout>:checking MPI initialization...
[1,2]<stdout>:using COMM_WORLD.
[1,2]<stdout>:MPI is initialized.
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,7]<stdout>:<INFO> Démarrage de l'exécution.
[1,7]<stdout>:
[1,3]<stdout>:<INFO> Démarrage de l'exécution.
[1,3]<stdout>:
[1,1]<stdout>:<INFO> Démarrage de l'exécution.
[1,1]<stdout>:
[1,4]<stdout>:<INFO> Démarrage de l'exécution.
[1,4]<stdout>:
[1,6]<stdout>:<INFO> Démarrage de l'exécution.
[1,6]<stdout>:
[1,0]<stdout>:<INFO> Démarrage de l'exécution.
[1,0]<stdout>:
[1,5]<stdout>:<INFO> Démarrage de l'exécution.
[1,5]<stdout>:
[1,2]<stdout>:<INFO> Démarrage de l'exécution.
[1,2]<stdout>:
[1,7]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,3]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,1]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,4]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,6]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,0]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,5]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,2]<stdout>:                       -- CODE_ASTER -- VERSION : DÉVELOPPEMENT (unstable) --                       
[1,3]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,3]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,1]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,1]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,7]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,7]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,6]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,6]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,4]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,4]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,0]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,0]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,5]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,5]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,2]<stdout>:                               Version 17.2.4 modifiée le 20/01/2025                                
[1,2]<stdout>:                               révision f855b56619c7 - branche 'main'                               
[1,1]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,1]<stdout>:                                                                                                    
[1,1]<stdout>:                              Exécution du : Fri Jan 24 13:40:52 2025                               
[1,1]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,1]<stdout>:                                        Architecture : 64bit                                        
[1,1]<stdout>:                                    Type de processeur : aarch64                                    
[1,1]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,1]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,7]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,7]<stdout>:                                                                                                    
[1,7]<stdout>:                              Exécution du : Fri Jan 24 13:40:52 2025                               
[1,7]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,7]<stdout>:                                        Architecture : 64bit                                        
[1,7]<stdout>:                                    Type de processeur : aarch64                                    
[1,7]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,7]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,3]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,3]<stdout>:                                                                                                    
[1,3]<stdout>:                              Exécution du : Fri Jan 24 13:40:52 2025                               
[1,3]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,3]<stdout>:                                        Architecture : 64bit                                        
[1,3]<stdout>:                                    Type de processeur : aarch64                                    
[1,3]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,3]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,6]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,6]<stdout>:                                                                                                    
[1,6]<stdout>:                              Exécution du : Fri Jan 24 13:40:52 2025                               
[1,6]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,6]<stdout>:                                        Architecture : 64bit                                        
[1,6]<stdout>:                                    Type de processeur : aarch64                                    
[1,6]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,6]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,5]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,5]<stdout>:                                                                                                    
[1,5]<stdout>:                              Exécution du : Fri Jan 24 13:40:52 2025                               
[1,5]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,5]<stdout>:                                        Architecture : 64bit                                        
[1,5]<stdout>:                                    Type de processeur : aarch64                                    
[1,5]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,5]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,4]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,4]<stdout>:                                                                                                    
[1,4]<stdout>:                              Exécution du : Fri Jan 24 13:40:52 2025                               
[1,4]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,4]<stdout>:                                        Architecture : 64bit                                        
[1,4]<stdout>:                                    Type de processeur : aarch64                                    
[1,4]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,4]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,0]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,0]<stdout>:                                                                                                    
[1,0]<stdout>:                              Exécution du : Fri Jan 24 13:40:52 2025                               
[1,0]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,0]<stdout>:                                        Architecture : 64bit                                        
[1,0]<stdout>:                                    Type de processeur : aarch64                                    
[1,0]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,0]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,1]<stdout>:                                     Version de Python : 3.11.2                                     
[1,1]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,7]<stdout>:                                     Version de Python : 3.11.2                                     
[1,7]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,2]<stdout>:                                   Copyright EDF R&D 1991 - 2025                                    
[1,2]<stdout>:                                                                                                    
[1,2]<stdout>:                              Exécution du : Fri Jan 24 13:40:52 2025                               
[1,2]<stdout>:                                  Nom de la machine : fe732af82b6a                                  
[1,2]<stdout>:                                        Architecture : 64bit                                        
[1,2]<stdout>:                                    Type de processeur : aarch64                                    
[1,2]<stdout>:        Système d'exploitation : Linux-5.10.226-214.880.amzn2.aarch64-aarch64-with-glibc2.40        
[1,2]<stdout>:                                  Langue des messages : en (UTF-8)                                  
[1,3]<stdout>:                                     Version de Python : 3.11.2                                     
[1,3]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,6]<stdout>:                                     Version de Python : 3.11.2                                     
[1,6]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,5]<stdout>:                                     Version de Python : 3.11.2                                     
[1,5]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,0]<stdout>:                                     Version de Python : 3.11.2                                     
[1,0]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,4]<stdout>:                                     Version de Python : 3.11.2                                     
[1,4]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,1]<stdout>:                                      Parallélisme MPI : actif                                      
[1,1]<stdout>:                                   Rang du processeur courant : 1                                   
[1,1]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,2]<stdout>:                                     Version de Python : 3.11.2                                     
[1,2]<stdout>:                                     Version de NumPy : 1.24.2                                      
[1,3]<stdout>:                                      Parallélisme MPI : actif                                      
[1,3]<stdout>:                                   Rang du processeur courant : 3                                   
[1,3]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,7]<stdout>:                                      Parallélisme MPI : actif                                      
[1,7]<stdout>:                                   Rang du processeur courant : 7                                   
[1,7]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,6]<stdout>:                                      Parallélisme MPI : actif                                      
[1,6]<stdout>:                                   Rang du processeur courant : 6                                   
[1,6]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,5]<stdout>:                                      Parallélisme MPI : actif                                      
[1,5]<stdout>:                                   Rang du processeur courant : 5                                   
[1,5]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,0]<stdout>:                                      Parallélisme MPI : actif                                      
[1,0]<stdout>:                                   Rang du processeur courant : 0                                   
[1,0]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,4]<stdout>:                                      Parallélisme MPI : actif                                      
[1,4]<stdout>:                                   Rang du processeur courant : 4                                   
[1,4]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,3]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,3]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,1]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,1]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:                                      Parallélisme MPI : actif                                      
[1,2]<stdout>:                                   Rang du processeur courant : 2                                   
[1,2]<stdout>:                               Nombre de processeurs MPI utilisés : 8                               
[1,6]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,6]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,7]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,7]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,5]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,5]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,0]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,0]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,4]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,4]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,2]<stdout>:                                    Parallélisme OpenMP : actif                                     
[1,2]<stdout>:                              Nombre de processus OpenMP utilisés : 1                               
[1,3]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,1]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,6]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,7]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,5]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,0]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,2]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,4]<stdout>:                               Version de la librairie HDF5 : 1.10.9                                
[1,5]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,3]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,1]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,6]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,0]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,2]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,4]<stdout>:                                Version de la librairie MED : 4.1.1                                 
[1,7]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,5]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,3]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,1]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,6]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,2]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,0]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,4]<stdout>:                               Version de la librairie MFront : 4.2.0                               
[1,3]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,1]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,6]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,7]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,5]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,2]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,0]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,4]<stdout>:                               Version de la librairie MUMPS : 5.6.2                                
[1,7]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,6]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,5]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,3]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,1]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,2]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,0]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,7]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,1]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,4]<stdout>:                              Version de la librairie PETSc : 3.20.5p0                              
[1,5]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,3]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,6]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,2]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,0]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,4]<stdout>:                               Version de la librairie SCOTCH : 7.0.4                               
[1,3]<stdout>:
[1,1]<stdout>:
[1,5]<stdout>:
[1,7]<stdout>:
[1,2]<stdout>:
[1,6]<stdout>:
[1,0]<stdout>:
[1,4]<stdout>:
[1,3]<stdout>:starting the execution...
[1,1]<stdout>:starting the execution...
[1,5]<stdout>:starting the execution...
[1,7]<stdout>:starting the execution...
[1,2]<stdout>:starting the execution...
[1,6]<stdout>:starting the execution...
[1,0]<stdout>:starting the execution...
[1,4]<stdout>:starting the execution...
[1,7]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,7]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,7]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,7]<stdout>:
[1,2]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,2]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,2]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,2]<stdout>:
[1,3]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,3]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,3]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,3]<stdout>:
[1,1]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,1]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,1]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,1]<stdout>:
[1,5]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,5]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,5]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,5]<stdout>:
[1,6]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,6]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,6]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,6]<stdout>:
[1,0]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,0]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,0]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,0]<stdout>:
[1,4]<stdout>:Valeur initiale du temps CPU maximum =   86400 secondes
[1,4]<stdout>:  Valeur du temps CPU maximum passé aux commandes =   77760 secondes
[1,4]<stdout>:  Réserve CPU prévue = 8640 secondes
[1,4]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,6]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,2]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,3]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,5]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,1]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,4]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,7]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./glob.1
[1,0]<stdout>:
[1,3]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,3]<stdout>:
[1,1]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,1]<stdout>:
[1,5]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,5]<stdout>:
[1,7]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,7]<stdout>:
[1,4]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,4]<stdout>:
[1,6]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,6]<stdout>:
[1,2]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,2]<stdout>:
[1,0]<stdout>:Ouverture en écriture du fichier ./vola.1
[1,0]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Créée avec la version                   :  17.02.04
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Créée avec la version                   :  17.02.04
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,3]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,3]<stdout>:
[1,1]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,1]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Créée avec la version                   :  17.02.04
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,5]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,5]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Créée avec la version                   :  17.02.04
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Créée avec la version                   :  17.02.04
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Créée avec la version                   :  17.02.04
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,7]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,7]<stdout>:
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Créée avec la version                   :  17.02.04
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,2]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,2]<stdout>:
[1,4]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,4]<stdout>:
[1,6]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,6]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Créée avec la version                   :  17.02.04
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,0]<stdout>:Ouverture en lecture du fichier /opt/aster/install/mpi/lib/aster/elem.1
[1,0]<stdout>:
[1,3]<stdout>:Nom de la base                          :  ELEMBASE
[1,3]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,3]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,3]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,3]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,3]<stdout>:     Nombre total d'accès en lecture         :  63
[1,3]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,3]<stdout>:     Nombre total d'accès en écriture        :  0
[1,3]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,3]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,3]<stdout>:     Taille maximum du répertoire            :  300
[1,3]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,3]<stdout>:
[1,3]<stdout>:Relecture des catalogues des éléments faite.
[1,3]<stdout>:
[1,3]<stdout>:Fin de lecture (durée  0.019583  s.) 
[1,3]<stdout>:
[1,3]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,3]<stdout>:                         ajouté à l'initialisation du processus : 613.51 Mo                         
[1,3]<stdout>:                               Limite cible du processus : 4811.91 Mo                               
[1,3]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,3]<stdout>:# Mémoire (Mo) :   613.51 /   604.64 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:Nom de la base                          :  ELEMBASE
[1,5]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,5]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,5]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,5]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,5]<stdout>:     Nombre total d'accès en lecture         :  63
[1,5]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,5]<stdout>:     Nombre total d'accès en écriture        :  0
[1,5]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,5]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,5]<stdout>:     Taille maximum du répertoire            :  300
[1,5]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,5]<stdout>:
[1,3]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.13s, elaps:        0.14s)
[1,7]<stdout>:Nom de la base                          :  ELEMBASE
[1,7]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,7]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,7]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,7]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,7]<stdout>:     Nombre total d'accès en lecture         :  63
[1,7]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,7]<stdout>:     Nombre total d'accès en écriture        :  0
[1,7]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,7]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,7]<stdout>:     Taille maximum du répertoire            :  300
[1,7]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,7]<stdout>:
[1,5]<stdout>:Relecture des catalogues des éléments faite.
[1,5]<stdout>:
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:Nom de la base                          :  ELEMBASE
[1,2]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,2]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,2]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,2]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,2]<stdout>:     Nombre total d'accès en lecture         :  63
[1,2]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,2]<stdout>:     Nombre total d'accès en écriture        :  0
[1,2]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,2]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,2]<stdout>:     Taille maximum du répertoire            :  300
[1,2]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,2]<stdout>:
[1,6]<stdout>:Nom de la base                          :  ELEMBASE
[1,6]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,6]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,6]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,6]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,6]<stdout>:     Nombre total d'accès en lecture         :  63
[1,6]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,6]<stdout>:     Nombre total d'accès en écriture        :  0
[1,6]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,6]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,6]<stdout>:     Taille maximum du répertoire            :  300
[1,6]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,6]<stdout>:
[1,4]<stdout>:Nom de la base                          :  ELEMBASE
[1,4]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,4]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,4]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,4]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,4]<stdout>:     Nombre total d'accès en lecture         :  63
[1,4]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,4]<stdout>:     Nombre total d'accès en écriture        :  0
[1,4]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,4]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,4]<stdout>:     Taille maximum du répertoire            :  300
[1,4]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,4]<stdout>:
[1,5]<stdout>:Fin de lecture (durée  0.020154  s.) 
[1,5]<stdout>:
[1,7]<stdout>:Relecture des catalogues des éléments faite.
[1,7]<stdout>:
[1,1]<stdout>:Nom de la base                          :  ELEMBASE
[1,1]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,1]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,1]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,1]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,1]<stdout>:     Nombre total d'accès en lecture         :  63
[1,1]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,1]<stdout>:     Nombre total d'accès en écriture        :  0
[1,1]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,1]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,1]<stdout>:     Taille maximum du répertoire            :  300
[1,1]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,1]<stdout>:
[1,2]<stdout>:Relecture des catalogues des éléments faite.
[1,2]<stdout>:
[1,6]<stdout>:Relecture des catalogues des éléments faite.
[1,6]<stdout>:
[1,4]<stdout>:Relecture des catalogues des éléments faite.
[1,4]<stdout>:
[1,1]<stdout>:Relecture des catalogues des éléments faite.
[1,1]<stdout>:
[1,7]<stdout>:Fin de lecture (durée  0.020042  s.) 
[1,7]<stdout>:
[1,2]<stdout>:Fin de lecture (durée  0.020028  s.) 
[1,2]<stdout>:
[1,6]<stdout>:Fin de lecture (durée  0.019935  s.) 
[1,6]<stdout>:
[1,4]<stdout>:Fin de lecture (durée  0.020027  s.) 
[1,4]<stdout>:
[1,1]<stdout>:Fin de lecture (durée  0.020561  s.) 
[1,1]<stdout>:
[1,5]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,5]<stdout>:                         ajouté à l'initialisation du processus : 613.47 Mo                         
[1,5]<stdout>:                               Limite cible du processus : 4811.87 Mo                               
[1,7]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,7]<stdout>:                         ajouté à l'initialisation du processus : 613.47 Mo                         
[1,7]<stdout>:                               Limite cible du processus : 4811.87 Mo                               
[1,5]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,2]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,2]<stdout>:                         ajouté à l'initialisation du processus : 613.50 Mo                         
[1,2]<stdout>:                               Limite cible du processus : 4811.90 Mo                               
[1,6]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,6]<stdout>:                         ajouté à l'initialisation du processus : 613.47 Mo                         
[1,6]<stdout>:                               Limite cible du processus : 4811.87 Mo                               
[1,4]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,4]<stdout>:                         ajouté à l'initialisation du processus : 613.47 Mo                         
[1,4]<stdout>:                               Limite cible du processus : 4811.87 Mo                               
[1,7]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,1]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,1]<stdout>:                         ajouté à l'initialisation du processus : 613.50 Mo                         
[1,1]<stdout>:                               Limite cible du processus : 4811.90 Mo                               
[1,6]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,2]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,4]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,1]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,5]<stdout>:# Mémoire (Mo) :   613.47 /   604.49 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :   613.47 /   604.49 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :   613.50 /   604.63 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :   613.47 /   604.49 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:Nom de la base                          :  ELEMBASE
[1,0]<stdout>:     Nombre d'enregistrements utilisés       :  45
[1,0]<stdout>:     Nombre d'enregistrements maximum        :  512
[1,0]<stdout>:     Nombre d'enregistrements par fichier    :  512
[1,0]<stdout>:     Longueur d'enregistrement (octets)      :  819200
[1,0]<stdout>:     Nombre total d'accès en lecture         :  63
[1,0]<stdout>:     Volume des accès en lecture             :         49.22 Mo.
[1,0]<stdout>:     Nombre total d'accès en écriture        :  0
[1,0]<stdout>:     Volume des accès en écriture            :          0.00 Mo.
[1,0]<stdout>:     Nombre d'identificateurs utilisés       :  123
[1,0]<stdout>:     Taille maximum du répertoire            :  300
[1,0]<stdout>:     Pourcentage d'utilisation du répertoire :  41 %
[1,0]<stdout>:
[1,5]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.11s, elaps:        0.14s)
[1,4]<stdout>:# Mémoire (Mo) :   613.47 /   604.49 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :   613.50 /   604.63 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0001   user+syst:        0.03s (syst:        0.11s, elaps:        0.14s)
[1,2]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.13s, elaps:        0.14s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Fin commande #0001   user+syst:        0.00s (syst:        0.13s, elaps:        0.14s)
[1,0]<stdout>:Relecture des catalogues des éléments faite.
[1,0]<stdout>:
[1,1]<stdout>:# Fin commande #0001   user+syst:        0.02s (syst:        0.12s, elaps:        0.14s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0001   user+syst:        0.04s (syst:        0.10s, elaps:        0.14s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:Fin de lecture (durée  0.019922  s.) 
[1,0]<stdout>:
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:                      Mémoire limite pour l'allocation dynamique : 4198.40 Mo                       
[1,0]<stdout>:                         ajouté à l'initialisation du processus : 613.52 Mo                         
[1,0]<stdout>:                               Limite cible du processus : 4811.92 Mo                               
[1,0]<stdout>:                         Taille limite des fichiers d'échange : 2048.00 Go                          
[1,0]<stdout>:# Mémoire (Mo) :   613.52 /   604.64 /   209.22 /   185.03 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0001   user+syst:        0.01s (syst:        0.13s, elaps:        0.14s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:PETSc initialized...
[1,4]<stdout>:PETSc initialized...
[1,1]<stdout>:PETSc initialized...
[1,6]<stdout>:PETSc initialized...
[1,7]<stdout>:PETSc initialized...
[1,3]<stdout>:PETSc initialized...
[1,5]<stdout>:PETSc initialized...
[1,0]<stdout>:PETSc initialized...
[1,0]<stdout>:Nom MED du maillage : PARALLEPIPED
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000001 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                      274625
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                     287488
[1,0]<stdout>:                              SEG2                  768
[1,0]<stdout>:                              QUAD4               24576
[1,0]<stdout>:                              HEXA8              262144
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                8
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES              19
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACCES='NEW',
[1,0]<stdout>:             ACTION='ASSOCIER',
[1,0]<stdout>:             FICHIER='/tmp/buildCuben_ri5j89/buildCube.med',
[1,0]<stdout>:             TYPE='BINARY',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:Deleting '/tmp/buildCuben_ri5j89/buildCube.med': No such file or directory
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   804.61 /   249.04 /   213.86 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0002   user+syst:        0.01s (syst:        0.01s, elaps:        0.01s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:Création du fichier au format MED 3.3.1.
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt190
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0003 de /opt/aster/install/mpi/lib/aster/code_aster/Helpers/LogicalUnit.py, ligne 190
[1,0]<stdout>:DEFI_FICHIER(ACTION='LIBERER',
[1,0]<stdout>:             UNITE=99)
[1,0]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  1134.98 /   804.73 /   282.08 /   250.98 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0003   user+syst:        0.00s (syst:        0.00s, elaps:        0.00s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,5]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,2]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,1]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,6]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,7]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,3]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,4]<stdout>:<INFO> Activation du mode parallélisme distribué.
[1,0]<stdout>:
[1,0]<stdout>:Nom MED du maillage : 00000001
[1,0]<stdout>:
[1,3]<stdout>:Nom MED du maillage : 00000001
[1,3]<stdout>:
[1,2]<stdout>:Nom MED du maillage : 00000001
[1,2]<stdout>:
[1,1]<stdout>:Nom MED du maillage : 00000001
[1,1]<stdout>:
[1,6]<stdout>:Nom MED du maillage : 00000001
[1,6]<stdout>:
[1,4]<stdout>:Nom MED du maillage : 00000001
[1,4]<stdout>:
[1,5]<stdout>:Nom MED du maillage : 00000001
[1,5]<stdout>:
[1,7]<stdout>:Nom MED du maillage : 00000001
[1,7]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,4]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt282
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt282
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt282
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt282
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt282
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt282
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt282
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt282
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,4]<stdout>:ligne 282
[1,0]<stdout>:# Commande #0004 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,0]<stdout>:ligne 282
[1,5]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,5]<stdout>:ligne 282
[1,3]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,3]<stdout>:ligne 282
[1,7]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,7]<stdout>:ligne 282
[1,1]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,1]<stdout>:ligne 282
[1,6]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,6]<stdout>:ligne 282
[1,2]<stdout>:# Commande #0002 de /opt/aster/install/mpi/lib/aster/code_aster/ObjectsExt/parallelmesh_ext.py,
[1,2]<stdout>:ligne 282
[1,6]<stdout>:CREA_MAILLAGE(INFO=1,
[1,6]<stdout>:              MAILLAGE='<00000002>',
[1,6]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,6]<stdout>:                             TOUT='OUI'))
[1,6]<stdout>:
[1,7]<stdout>:CREA_MAILLAGE(INFO=1,
[1,7]<stdout>:              MAILLAGE='<00000002>',
[1,7]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,7]<stdout>:                             TOUT='OUI'))
[1,7]<stdout>:
[1,4]<stdout>:CREA_MAILLAGE(INFO=1,
[1,4]<stdout>:              MAILLAGE='<00000002>',
[1,4]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,4]<stdout>:                             TOUT='OUI'))
[1,4]<stdout>:
[1,0]<stdout>:CREA_MAILLAGE(INFO=1,
[1,0]<stdout>:              MAILLAGE='<00000002>',
[1,0]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,0]<stdout>:                             TOUT='OUI'))
[1,0]<stdout>:
[1,5]<stdout>:CREA_MAILLAGE(INFO=1,
[1,5]<stdout>:              MAILLAGE='<00000002>',
[1,5]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,5]<stdout>:                             TOUT='OUI'))
[1,5]<stdout>:
[1,3]<stdout>:CREA_MAILLAGE(INFO=1,
[1,3]<stdout>:              MAILLAGE='<00000002>',
[1,3]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,3]<stdout>:                             TOUT='OUI'))
[1,3]<stdout>:
[1,2]<stdout>:CREA_MAILLAGE(INFO=1,
[1,2]<stdout>:              MAILLAGE='<00000002>',
[1,2]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,2]<stdout>:                             TOUT='OUI'))
[1,2]<stdout>:
[1,1]<stdout>:CREA_MAILLAGE(INFO=1,
[1,1]<stdout>:              MAILLAGE='<00000002>',
[1,1]<stdout>:              RAFFINEMENT=_F(NIVEAU=1,
[1,1]<stdout>:                             TOUT='OUI'))
[1,1]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,7]<stdout>:
[1,7]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:41:05 DE TYPE        
[1,7]<stdout>:MAILLAGE_P                                                                      
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE NOEUDS                      272200
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE MAILLES                     271919
[1,7]<stdout>:                              SEG2                  191
[1,7]<stdout>:                              QUAD4               12207
[1,7]<stdout>:                              HEXA8              259521
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,7]<stdout>:
[1,7]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,7]<stdout>:
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,0]<stdout>:
[1,0]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:41:04 DE TYPE        
[1,0]<stdout>:MAILLAGE_P                                                                      
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE NOEUDS                      281877
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE MAILLES                     281608
[1,0]<stdout>:                              SEG2                  192
[1,0]<stdout>:                              QUAD4               12392
[1,0]<stdout>:                              HEXA8              269024
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,0]<stdout>:
[1,0]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,0]<stdout>:
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,5]<stdout>:
[1,5]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:41:05 DE TYPE        
[1,5]<stdout>:MAILLAGE_P                                                                      
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE NOEUDS                      282424
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE MAILLES                     282044
[1,5]<stdout>:                              SEG2                  194
[1,5]<stdout>:                              QUAD4               12493
[1,5]<stdout>:                              HEXA8              269357
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,5]<stdout>:
[1,5]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,5]<stdout>:
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.08      0.00      0.08
[1,2]<stdout>:
[1,2]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,2]<stdout>:
[1,2]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:41:04 DE TYPE        
[1,2]<stdout>:MAILLAGE_P                                                                      
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE NOEUDS                      280516
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE MAILLES                     280331
[1,2]<stdout>:                              SEG2                  197
[1,2]<stdout>:                              QUAD4               12702
[1,2]<stdout>:                              HEXA8              267432
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,2]<stdout>:
[1,2]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,2]<stdout>:
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,3]<stdout>:
[1,3]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:41:05 DE TYPE        
[1,3]<stdout>:MAILLAGE_P                                                                      
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE NOEUDS                      286922
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE MAILLES                     286353
[1,3]<stdout>:                              SEG2                  192
[1,3]<stdout>:                              QUAD4               12461
[1,3]<stdout>:                              HEXA8              273700
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,3]<stdout>:
[1,3]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,3]<stdout>:
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.01      0.00      0.02
[1,6]<stdout>:
[1,6]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,6]<stdout>:
[1,6]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:41:05 DE TYPE        
[1,6]<stdout>:MAILLAGE_P                                                                      
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE NOEUDS                      276628
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE MAILLES                     276409
[1,6]<stdout>:                              SEG2                  192
[1,6]<stdout>:                              QUAD4               12347
[1,6]<stdout>:                              HEXA8              263870
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,6]<stdout>:
[1,6]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,6]<stdout>:
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.19      0.00      0.18
[1,1]<stdout>:
[1,1]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,1]<stdout>:
[1,1]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:41:04 DE TYPE        
[1,1]<stdout>:MAILLAGE_P                                                                      
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE NOEUDS                      285350
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE MAILLES                     285284
[1,1]<stdout>:                              SEG2                  195
[1,1]<stdout>:                              QUAD4               12641
[1,1]<stdout>:                              HEXA8              272448
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,1]<stdout>:
[1,1]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,1]<stdout>:
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:------------ MAILLAGE 00000004 - IMPRESSIONS NIVEAU  1 ------------
[1,4]<stdout>:
[1,4]<stdout>:ASTER 17.02.04 CONCEPT 00000004 CALCULE LE 24/01/2025 A 13:41:04 DE TYPE        
[1,4]<stdout>:MAILLAGE_P                                                                      
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE NOEUDS                      286540
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE MAILLES                     286309
[1,4]<stdout>:                              SEG2                  195
[1,4]<stdout>:                              QUAD4               12634
[1,4]<stdout>:                              HEXA8              273480
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE GROUPES DE NOEUDS                1
[1,4]<stdout>:
[1,4]<stdout>:NOMBRE DE GROUPES DE MAILLES               7
[1,4]<stdout>:
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.18      0.01      0.17
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.18      0.00      0.19
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.05      0.00      0.04
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.42      0.01      0.40
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.23      0.00      0.23
[1,7]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,7]<stdout>:# Mémoire (Mo) :  2239.11 /   834.28 /   280.92 /   247.07 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0002   user+syst:        4.32s (syst:        1.32s, elaps:        5.64s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,6]<stdout>:# Mémoire (Mo) :  2240.09 /   834.93 /   281.65 /   247.77 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0002   user+syst:        4.42s (syst:        1.24s, elaps:        5.65s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,2]<stdout>:# Mémoire (Mo) :  2236.95 /   837.07 /   283.92 /   250.01 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0002   user+syst:        4.29s (syst:        1.38s, elaps:        5.66s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0004 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,0]<stdout>:# Mémoire (Mo) :  2332.28 /   949.17 /   328.52 /   286.13 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0004   user+syst:        4.41s (syst:        1.27s, elaps:        5.67s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,5]<stdout>:# Mémoire (Mo) :  2272.05 /   839.96 /   284.88 /   250.94 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0002   user+syst:        4.46s (syst:        1.21s, elaps:        5.67s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,3]<stdout>:# Mémoire (Mo) :  2297.16 /   842.78 /   286.12 /   252.14 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0002   user+syst:        4.41s (syst:        1.28s, elaps:        5.67s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,4]<stdout>:# Mémoire (Mo) :  2269.92 /   840.47 /   285.54 /   251.57 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0002   user+syst:        4.40s (syst:        1.29s, elaps:        5.68s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0002 (CREA_MAILLAGE): '<00000004>' de type <ParallelMesh>
[1,1]<stdout>:# Mémoire (Mo) :  2262.06 /   839.66 /   285.21 /   251.25 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0002   user+syst:        4.49s (syst:        1.21s, elaps:        5.68s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt131
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt131
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt131
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt131
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt131
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt131
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt131
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0003 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 131
[1,1]<stdout>:# Commande #0003 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 131
[1,2]<stdout>:# Commande #0003 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 131
[1,7]<stdout>:# Commande #0003 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 131
[1,5]<stdout>:# Commande #0003 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 131
[1,4]<stdout>:# Commande #0003 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 131
[1,3]<stdout>:# Commande #0003 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 131
[1,6]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,6]<stdout>:                            PHENOMENE='MECANIQUE',
[1,6]<stdout>:                            TOUT='OUI'),
[1,6]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,6]<stdout>:                    INFO=1,
[1,6]<stdout>:                    MAILLAGE='<00000004>',
[1,6]<stdout>:                    VERI_JACOBIEN='OUI',
[1,6]<stdout>:                    VERI_NORM_IFS='OUI',
[1,6]<stdout>:                    VERI_PLAN='OUI')
[1,6]<stdout>:
[1,1]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,1]<stdout>:                            PHENOMENE='MECANIQUE',
[1,1]<stdout>:                            TOUT='OUI'),
[1,1]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,1]<stdout>:                    INFO=1,
[1,1]<stdout>:                    MAILLAGE='<00000004>',
[1,1]<stdout>:                    VERI_JACOBIEN='OUI',
[1,1]<stdout>:                    VERI_NORM_IFS='OUI',
[1,1]<stdout>:                    VERI_PLAN='OUI')
[1,1]<stdout>:
[1,2]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,2]<stdout>:                            PHENOMENE='MECANIQUE',
[1,2]<stdout>:                            TOUT='OUI'),
[1,2]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,2]<stdout>:                    INFO=1,
[1,2]<stdout>:                    MAILLAGE='<00000004>',
[1,2]<stdout>:                    VERI_JACOBIEN='OUI',
[1,2]<stdout>:                    VERI_NORM_IFS='OUI',
[1,2]<stdout>:                    VERI_PLAN='OUI')
[1,2]<stdout>:
[1,7]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,7]<stdout>:                            PHENOMENE='MECANIQUE',
[1,7]<stdout>:                            TOUT='OUI'),
[1,7]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,7]<stdout>:                    INFO=1,
[1,7]<stdout>:                    MAILLAGE='<00000004>',
[1,7]<stdout>:                    VERI_JACOBIEN='OUI',
[1,7]<stdout>:                    VERI_NORM_IFS='OUI',
[1,7]<stdout>:                    VERI_PLAN='OUI')
[1,7]<stdout>:
[1,5]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,5]<stdout>:                            PHENOMENE='MECANIQUE',
[1,5]<stdout>:                            TOUT='OUI'),
[1,5]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,5]<stdout>:                    INFO=1,
[1,5]<stdout>:                    MAILLAGE='<00000004>',
[1,5]<stdout>:                    VERI_JACOBIEN='OUI',
[1,5]<stdout>:                    VERI_NORM_IFS='OUI',
[1,5]<stdout>:                    VERI_PLAN='OUI')
[1,5]<stdout>:
[1,4]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,4]<stdout>:                            PHENOMENE='MECANIQUE',
[1,4]<stdout>:                            TOUT='OUI'),
[1,4]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,4]<stdout>:                    INFO=1,
[1,4]<stdout>:                    MAILLAGE='<00000004>',
[1,4]<stdout>:                    VERI_JACOBIEN='OUI',
[1,4]<stdout>:                    VERI_NORM_IFS='OUI',
[1,4]<stdout>:                    VERI_PLAN='OUI')
[1,4]<stdout>:
[1,3]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,3]<stdout>:                            PHENOMENE='MECANIQUE',
[1,3]<stdout>:                            TOUT='OUI'),
[1,3]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,3]<stdout>:                    INFO=1,
[1,3]<stdout>:                    MAILLAGE='<00000004>',
[1,3]<stdout>:                    VERI_JACOBIEN='OUI',
[1,3]<stdout>:                    VERI_NORM_IFS='OUI',
[1,3]<stdout>:                    VERI_PLAN='OUI')
[1,3]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt131
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0005 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 131
[1,0]<stdout>:model = AFFE_MODELE(AFFE=_F(MODELISATION='3D',
[1,0]<stdout>:                            PHENOMENE='MECANIQUE',
[1,0]<stdout>:                            TOUT='OUI'),
[1,0]<stdout>:                    DISTRIBUTION=_F(METHODE='CENTRALISE'),
[1,0]<stdout>:                    INFO=1,
[1,0]<stdout>:                    MAILLAGE='<00000004>',
[1,0]<stdout>:                    VERI_JACOBIEN='OUI',
[1,0]<stdout>:                    VERI_NORM_IFS='OUI',
[1,0]<stdout>:                    VERI_PLAN='OUI')
[1,0]<stdout>:
[1,0]<stdout>:Sur les 281608 mailles du maillage 00000004, on a demandé l'affectation de 281608, on a pu en
[1,0]<stdout>:affecter 281608.
[1,6]<stdout>:Sur les 276409 mailles du maillage 00000004, on a demandé l'affectation de 276409, on a pu en
[1,6]<stdout>:affecter 276409.
[1,7]<stdout>:Sur les 271919 mailles du maillage 00000004, on a demandé l'affectation de 271919, on a pu en
[1,7]<stdout>:affecter 271919.
[1,1]<stdout>:Sur les 285284 mailles du maillage 00000004, on a demandé l'affectation de 285284, on a pu en
[1,1]<stdout>:affecter 285284.
[1,2]<stdout>:Sur les 280331 mailles du maillage 00000004, on a demandé l'affectation de 280331, on a pu en
[1,2]<stdout>:affecter 280331.
[1,5]<stdout>:Sur les 282044 mailles du maillage 00000004, on a demandé l'affectation de 282044, on a pu en
[1,5]<stdout>:affecter 282044.
[1,3]<stdout>:Sur les 286353 mailles du maillage 00000004, on a demandé l'affectation de 286353, on a pu en
[1,3]<stdout>:affecter 286353.
[1,4]<stdout>:Sur les 286309 mailles du maillage 00000004, on a demandé l'affectation de 286309, on a pu en
[1,4]<stdout>:affecter 286309.
[1,7]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,7]<stdout>:_                _                SEG2         MECA_ARETE2      191
[1,7]<stdout>:_                _                QUAD4        MECA_FACE4       12207
[1,7]<stdout>:3D               _                HEXA8        MECA_HEXA8       259521
[1,6]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,6]<stdout>:_                _                SEG2         MECA_ARETE2      192
[1,6]<stdout>:_                _                QUAD4        MECA_FACE4       12347
[1,6]<stdout>:3D               _                HEXA8        MECA_HEXA8       263870
[1,5]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,2]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,2]<stdout>:_                _                SEG2         MECA_ARETE2      197
[1,5]<stdout>:_                _                SEG2         MECA_ARETE2      194
[1,5]<stdout>:_                _                QUAD4        MECA_FACE4       12493
[1,2]<stdout>:_                _                QUAD4        MECA_FACE4       12702
[1,5]<stdout>:3D               _                HEXA8        MECA_HEXA8       269357
[1,2]<stdout>:3D               _                HEXA8        MECA_HEXA8       267432
[1,0]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,0]<stdout>:_                _                SEG2         MECA_ARETE2      192
[1,0]<stdout>:_                _                QUAD4        MECA_FACE4       12392
[1,0]<stdout>:3D               _                HEXA8        MECA_HEXA8       269024
[1,4]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,4]<stdout>:_                _                SEG2         MECA_ARETE2      195
[1,4]<stdout>:_                _                QUAD4        MECA_FACE4       12634
[1,4]<stdout>:3D               _                HEXA8        MECA_HEXA8       273480
[1,3]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,1]<stdout>:Modélisation     Formulation      Type maille  Élément fini     Nombre
[1,3]<stdout>:_                _                SEG2         MECA_ARETE2      192
[1,3]<stdout>:_                _                QUAD4        MECA_FACE4       12461
[1,3]<stdout>:3D               _                HEXA8        MECA_HEXA8       273700
[1,1]<stdout>:_                _                SEG2         MECA_ARETE2      195
[1,1]<stdout>:_                _                QUAD4        MECA_FACE4       12641
[1,1]<stdout>:3D               _                HEXA8        MECA_HEXA8       272448
[1,7]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.18      0.00      0.18
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,6]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.19      0.00      0.19
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,2]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.19      0.00      0.19
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,5]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.19      0.00      0.19
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,0]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.19      0.00      0.19
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,1]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.20      0.00      0.19
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,3]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.20      0.00      0.19
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,4]<stdout>:#2      Calculs elementaires et assemblages               CPU (USER+SYST/SYST/ELAPS):      0.20      0.00      0.20
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.03      0.00      0.03
[1,7]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,0]<stdout>:# Résultat commande #0005 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,7]<stdout>:# Mémoire (Mo) :  2239.11 /   871.16 /   288.58 /   247.07 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0003   user+syst:        1.29s (syst:        0.00s, elaps:        1.29s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  2332.28 /   939.37 /   328.52 /   286.13 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0005   user+syst:        1.26s (syst:        0.00s, elaps:        1.26s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,5]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,1]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,6]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,2]<stdout>:# Mémoire (Mo) :  2236.95 /   874.08 /   292.78 /   250.01 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,5]<stdout>:# Mémoire (Mo) :  2272.05 /   877.00 /   293.34 /   250.94 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Résultat commande #0003 (AFFE_MODELE): model ('<00000005>') de type <Model>
[1,2]<stdout>:# Fin commande #0003   user+syst:        1.29s (syst:        0.00s, elaps:        1.30s)
[1,1]<stdout>:# Mémoire (Mo) :  2262.06 /   876.74 /   294.27 /   251.25 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Fin commande #0003   user+syst:        1.30s (syst:        0.00s, elaps:        1.30s)
[1,6]<stdout>:# Mémoire (Mo) :  2240.09 /   871.88 /   289.94 /   247.88 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  2269.92 /   877.57 /   294.61 /   251.57 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  2297.16 /   879.88 /   294.69 /   252.14 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0003   user+syst:        1.29s (syst:        0.00s, elaps:        1.30s)
[1,6]<stdout>:# Fin commande #0003   user+syst:        1.30s (syst:        0.00s, elaps:        1.30s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0003   user+syst:        1.30s (syst:        0.00s, elaps:        1.30s)
[1,3]<stdout>:# Fin commande #0003   user+syst:        1.29s (syst:        0.00s, elaps:        1.30s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt141
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0004 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 141
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt141
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0006 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 141
[1,7]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,7]<stdout>:                                   SY=200.0),
[1,7]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,7]<stdout>:                              COEF_AMOR=1.0,
[1,7]<stdout>:                              E=200000.0,
[1,7]<stdout>:                              K_DESSIC=0.0,
[1,7]<stdout>:                              NU=0.3),
[1,7]<stdout>:                      INFO=1)
[1,7]<stdout>:
[1,0]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,0]<stdout>:                                   SY=200.0),
[1,0]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,0]<stdout>:                              COEF_AMOR=1.0,
[1,0]<stdout>:                              E=200000.0,
[1,0]<stdout>:                              K_DESSIC=0.0,
[1,0]<stdout>:                              NU=0.3),
[1,0]<stdout>:                      INFO=1)
[1,0]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt141
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt141
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt141
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt141
[1,2]<stdout>:# Commande #0004 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 141
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt141
[1,5]<stdout>:# Commande #0004 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 141
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt141
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0004 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 141
[1,6]<stdout>:# Commande #0004 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 141
[1,4]<stdout>:# Commande #0004 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 141
[1,3]<stdout>:# Commande #0004 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 141
[1,2]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,2]<stdout>:                                   SY=200.0),
[1,2]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,2]<stdout>:                              COEF_AMOR=1.0,
[1,2]<stdout>:                              E=200000.0,
[1,2]<stdout>:                              K_DESSIC=0.0,
[1,2]<stdout>:                              NU=0.3),
[1,2]<stdout>:                      INFO=1)
[1,2]<stdout>:
[1,5]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,5]<stdout>:                                   SY=200.0),
[1,5]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,5]<stdout>:                              COEF_AMOR=1.0,
[1,5]<stdout>:                              E=200000.0,
[1,5]<stdout>:                              K_DESSIC=0.0,
[1,5]<stdout>:                              NU=0.3),
[1,5]<stdout>:                      INFO=1)
[1,5]<stdout>:
[1,1]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,1]<stdout>:                                   SY=200.0),
[1,1]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,1]<stdout>:                              COEF_AMOR=1.0,
[1,1]<stdout>:                              E=200000.0,
[1,1]<stdout>:                              K_DESSIC=0.0,
[1,1]<stdout>:                              NU=0.3),
[1,1]<stdout>:                      INFO=1)
[1,1]<stdout>:
[1,6]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,6]<stdout>:                                   SY=200.0),
[1,6]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,6]<stdout>:                              COEF_AMOR=1.0,
[1,6]<stdout>:                              E=200000.0,
[1,6]<stdout>:                              K_DESSIC=0.0,
[1,6]<stdout>:                              NU=0.3),
[1,6]<stdout>:                      INFO=1)
[1,6]<stdout>:
[1,4]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,4]<stdout>:                                   SY=200.0),
[1,4]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,4]<stdout>:                              COEF_AMOR=1.0,
[1,4]<stdout>:                              E=200000.0,
[1,4]<stdout>:                              K_DESSIC=0.0,
[1,4]<stdout>:                              NU=0.3),
[1,4]<stdout>:                      INFO=1)
[1,4]<stdout>:
[1,3]<stdout>:steel = DEFI_MATERIAU(ECRO_LINE=_F(D_SIGM_EPSI=2000.0,
[1,3]<stdout>:                                   SY=200.0),
[1,3]<stdout>:                      ELAS=_F(B_ENDOGE=0.0,
[1,3]<stdout>:                              COEF_AMOR=1.0,
[1,3]<stdout>:                              E=200000.0,
[1,3]<stdout>:                              K_DESSIC=0.0,
[1,3]<stdout>:                              NU=0.3),
[1,3]<stdout>:                      INFO=1)
[1,3]<stdout>:
[1,7]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,7]<stdout>:# Mémoire (Mo) :  2239.11 /   871.16 /   288.58 /   247.07 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,1]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,3]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,2]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,6]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,1]<stdout>:# Mémoire (Mo) :  2262.06 /   876.74 /   294.27 /   251.25 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  2272.05 /   877.00 /   293.34 /   250.94 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  2297.16 /   879.88 /   294.69 /   252.14 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0004 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,2]<stdout>:# Mémoire (Mo) :  2236.95 /   874.08 /   292.78 /   250.01 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# Mémoire (Mo) :  2240.09 /   871.88 /   289.94 /   247.88 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,5]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,4]<stdout>:# Mémoire (Mo) :  2269.92 /   877.57 /   294.61 /   251.57 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0004   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0006 (DEFI_MATERIAU): steel ('<00000006>') de type <Material>
[1,0]<stdout>:# Mémoire (Mo) :  2332.28 /   939.37 /   328.52 /   286.13 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0006   user+syst:        0.03s (syst:        0.00s, elaps:        0.03s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt152
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0005 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 152
[1,7]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,7]<stdout>:                              TOUT='OUI'),
[1,7]<stdout>:                      INFO=1,
[1,7]<stdout>:                      MAILLAGE='<00000004>')
[1,7]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt152
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt152
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt152
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt152
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt152
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0005 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 152
[1,5]<stdout>:# Commande #0005 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 152
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt152
[1,1]<stdout>:# Commande #0005 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 152
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0005 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 152
[1,6]<stdout>:# Commande #0005 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 152
[1,4]<stdout>:# Commande #0005 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 152
[1,5]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,5]<stdout>:                              TOUT='OUI'),
[1,5]<stdout>:                      INFO=1,
[1,5]<stdout>:                      MAILLAGE='<00000004>')
[1,5]<stdout>:
[1,3]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,3]<stdout>:                              TOUT='OUI'),
[1,3]<stdout>:                      INFO=1,
[1,3]<stdout>:                      MAILLAGE='<00000004>')
[1,3]<stdout>:
[1,1]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,1]<stdout>:                              TOUT='OUI'),
[1,1]<stdout>:                      INFO=1,
[1,1]<stdout>:                      MAILLAGE='<00000004>')
[1,1]<stdout>:
[1,2]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,2]<stdout>:                              TOUT='OUI'),
[1,2]<stdout>:                      INFO=1,
[1,2]<stdout>:                      MAILLAGE='<00000004>')
[1,2]<stdout>:
[1,6]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,6]<stdout>:                              TOUT='OUI'),
[1,6]<stdout>:                      INFO=1,
[1,6]<stdout>:                      MAILLAGE='<00000004>')
[1,6]<stdout>:
[1,4]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,4]<stdout>:                              TOUT='OUI'),
[1,4]<stdout>:                      INFO=1,
[1,4]<stdout>:                      MAILLAGE='<00000004>')
[1,4]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt152
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0007 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 152
[1,0]<stdout>:mater = AFFE_MATERIAU(AFFE=_F(MATER=steel,
[1,0]<stdout>:                              TOUT='OUI'),
[1,0]<stdout>:                      INFO=1,
[1,0]<stdout>:                      MAILLAGE='<00000004>')
[1,0]<stdout>:
[1,7]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,7]<stdout>:# Mémoire (Mo) :  2239.11 /   871.16 /   288.58 /   247.07 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,3]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,5]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,1]<stdout>:# Mémoire (Mo) :  2262.06 /   876.74 /   294.27 /   251.25 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  2297.16 /   879.88 /   294.69 /   252.14 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,6]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,5]<stdout>:# Mémoire (Mo) :  2272.05 /   877.00 /   293.34 /   250.94 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,3]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,5]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0005 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,6]<stdout>:# Mémoire (Mo) :  2240.09 /   871.88 /   289.94 /   247.88 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :  2236.95 /   874.08 /   292.78 /   250.01 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0005   user+syst:        0.02s (syst:        0.00s, elaps:        0.02s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  2269.92 /   877.57 /   294.61 /   251.57 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0005   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt161
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0006 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 161
[1,7]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,7]<stdout>:                                    DY=0.0,
[1,7]<stdout>:                                    DZ=0.0,
[1,7]<stdout>:                                    GROUP_MA='LEFT'),
[1,7]<stdout>:                       MODELE=model,
[1,7]<stdout>:                       SYNTAXE='NON')
[1,7]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt161
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt161
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt161
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0006 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 161
[1,3]<stdout>:# Commande #0006 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 161
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt161
[1,5]<stdout>:# Commande #0006 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 161
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt161
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,1]<stdout>:                                    DY=0.0,
[1,1]<stdout>:                                    DZ=0.0,
[1,1]<stdout>:                                    GROUP_MA='LEFT'),
[1,1]<stdout>:                       MODELE=model,
[1,1]<stdout>:                       SYNTAXE='NON')
[1,1]<stdout>:
[1,6]<stdout>:# Commande #0006 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt161
[1,3]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,3]<stdout>:                                    DY=0.0,
[1,3]<stdout>:                                    DZ=0.0,
[1,3]<stdout>:                                    GROUP_MA='LEFT'),
[1,3]<stdout>:                       MODELE=model,
[1,3]<stdout>:                       SYNTAXE='NON')
[1,3]<stdout>:
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,5]<stdout>:                                    DY=0.0,
[1,5]<stdout>:                                    DZ=0.0,
[1,5]<stdout>:                                    GROUP_MA='LEFT'),
[1,5]<stdout>:                       MODELE=model,
[1,5]<stdout>:                       SYNTAXE='NON')
[1,5]<stdout>:
[1,2]<stdout>:# Commande #0006 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 161
[1,4]<stdout>:# Commande #0006 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 161
[1,6]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,6]<stdout>:                                    DY=0.0,
[1,6]<stdout>:                                    DZ=0.0,
[1,6]<stdout>:                                    GROUP_MA='LEFT'),
[1,6]<stdout>:                       MODELE=model,
[1,6]<stdout>:                       SYNTAXE='NON')
[1,6]<stdout>:
[1,2]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,2]<stdout>:                                    DY=0.0,
[1,2]<stdout>:                                    DZ=0.0,
[1,2]<stdout>:                                    GROUP_MA='LEFT'),
[1,2]<stdout>:                       MODELE=model,
[1,2]<stdout>:                       SYNTAXE='NON')
[1,2]<stdout>:
[1,0]<stdout>:# Résultat commande #0007 (AFFE_MATERIAU): mater ('<00000007>') de type <MaterialField>
[1,4]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,4]<stdout>:                                    DY=0.0,
[1,4]<stdout>:                                    DZ=0.0,
[1,4]<stdout>:                                    GROUP_MA='LEFT'),
[1,4]<stdout>:                       MODELE=model,
[1,4]<stdout>:                       SYNTAXE='NON')
[1,4]<stdout>:
[1,0]<stdout>:# Mémoire (Mo) :  2332.28 /   939.37 /   328.52 /   286.13 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0007   user+syst:        0.03s (syst:        0.00s, elaps:        0.02s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt161
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0008 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 161
[1,0]<stdout>:block = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                       MECA_IMPO=_F(DX=0,
[1,0]<stdout>:                                    DY=0.0,
[1,0]<stdout>:                                    DZ=0.0,
[1,0]<stdout>:                                    GROUP_MA='LEFT'),
[1,0]<stdout>:                       MODELE=model,
[1,0]<stdout>:                       SYNTAXE='NON')
[1,0]<stdout>:
[1,7]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,7]<stdout>:# Mémoire (Mo) :  2239.11 /   871.16 /   288.58 /   247.07 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0006   user+syst:        0.17s (syst:        0.00s, elaps:        0.17s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt173
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0007 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 173
[1,7]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,7]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,7]<stdout>:                                            DZ=0.001,
[1,7]<stdout>:                                            GROUP_MA='RIGHT'),
[1,7]<stdout>:                               MODELE=model,
[1,7]<stdout>:                               SYNTAXE='NON')
[1,7]<stdout>:
[1,6]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,6]<stdout>:# Mémoire (Mo) :  2240.09 /   871.88 /   289.94 /   247.88 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0006   user+syst:        0.16s (syst:        0.00s, elaps:        0.17s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt173
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  2236.95 /   874.08 /   292.78 /   250.01 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0006   user+syst:        0.17s (syst:        0.00s, elaps:        0.17s)
[1,6]<stdout>:# Commande #0007 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 173
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,6]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,6]<stdout>:                                            DZ=0.001,
[1,6]<stdout>:                                            GROUP_MA='RIGHT'),
[1,6]<stdout>:                               MODELE=model,
[1,6]<stdout>:                               SYNTAXE='NON')
[1,6]<stdout>:
[1,0]<stdout>:# Résultat commande #0008 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,0]<stdout>:# Mémoire (Mo) :  2332.28 /   939.37 /   328.52 /   286.13 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0008   user+syst:        0.17s (syst:        0.00s, elaps:        0.16s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt173
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0007 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 173
[1,2]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,2]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,2]<stdout>:                                            DZ=0.001,
[1,2]<stdout>:                                            GROUP_MA='RIGHT'),
[1,2]<stdout>:                               MODELE=model,
[1,2]<stdout>:                               SYNTAXE='NON')
[1,2]<stdout>:
[1,5]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,5]<stdout>:# Mémoire (Mo) :  2272.05 /   877.00 /   293.34 /   250.94 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt173
[1,5]<stdout>:# Fin commande #0006   user+syst:        0.17s (syst:        0.00s, elaps:        0.17s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0009 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 173
[1,0]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,0]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,0]<stdout>:                                            DZ=0.001,
[1,0]<stdout>:                                            GROUP_MA='RIGHT'),
[1,0]<stdout>:                               MODELE=model,
[1,0]<stdout>:                               SYNTAXE='NON')
[1,0]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt173
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0007 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 173
[1,5]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,5]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,5]<stdout>:                                            DZ=0.001,
[1,5]<stdout>:                                            GROUP_MA='RIGHT'),
[1,5]<stdout>:                               MODELE=model,
[1,5]<stdout>:                               SYNTAXE='NON')
[1,5]<stdout>:
[1,1]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,1]<stdout>:# Mémoire (Mo) :  2262.06 /   876.74 /   294.27 /   251.25 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0006   user+syst:        0.17s (syst:        0.00s, elaps:        0.17s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,3]<stdout>:# Mémoire (Mo) :  2297.16 /   879.88 /   294.69 /   252.14 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0006   user+syst:        0.17s (syst:        0.00s, elaps:        0.18s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt173
[1,4]<stdout>:# Résultat commande #0006 (AFFE_CHAR_CINE): block ('<00000008>') de type <MechanicalDirichletBC>
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0007 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 173
[1,4]<stdout>:# Mémoire (Mo) :  2269.92 /   877.57 /   294.61 /   251.57 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,1]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,1]<stdout>:                                            DZ=0.001,
[1,1]<stdout>:                                            GROUP_MA='RIGHT'),
[1,1]<stdout>:                               MODELE=model,
[1,1]<stdout>:                               SYNTAXE='NON')
[1,1]<stdout>:
[1,4]<stdout>:# Fin commande #0006   user+syst:        0.17s (syst:        0.00s, elaps:        0.18s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt173
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0007 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 173
[1,3]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,3]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,3]<stdout>:                                            DZ=0.001,
[1,3]<stdout>:                                            GROUP_MA='RIGHT'),
[1,3]<stdout>:                               MODELE=model,
[1,3]<stdout>:                               SYNTAXE='NON')
[1,3]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt173
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0007 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 173
[1,4]<stdout>:imposed_displ = AFFE_CHAR_CINE(INFO=1,
[1,4]<stdout>:                               MECA_IMPO=_F(DY=0.001,
[1,4]<stdout>:                                            DZ=0.001,
[1,4]<stdout>:                                            GROUP_MA='RIGHT'),
[1,4]<stdout>:                               MODELE=model,
[1,4]<stdout>:                               SYNTAXE='NON')
[1,4]<stdout>:
[1,7]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,7]<stdout>:<MechanicalDirichletBC>
[1,7]<stdout>:# Mémoire (Mo) :  2239.11 /   871.16 /   288.58 /   247.07 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0007   user+syst:        0.17s (syst:        0.00s, elaps:        0.17s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt185
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0008 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 185
[1,7]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,7]<stdout>:                            CHAM_MATER=mater,
[1,7]<stdout>:                            INST=0.0,
[1,7]<stdout>:                            MODELE=model,
[1,7]<stdout>:                            MODE_FOURIER=0,
[1,7]<stdout>:                            OPTION='RIGI_MECA')
[1,7]<stdout>:
[1,6]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,6]<stdout>:<MechanicalDirichletBC>
[1,6]<stdout>:# Mémoire (Mo) :  2240.09 /   871.88 /   289.94 /   247.88 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0007   user+syst:        0.16s (syst:        0.01s, elaps:        0.17s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,2]<stdout>:<MechanicalDirichletBC>
[1,2]<stdout>:# Mémoire (Mo) :  2236.95 /   874.08 /   292.78 /   250.01 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0007   user+syst:        0.17s (syst:        0.00s, elaps:        0.17s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt185
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,5]<stdout>:<MechanicalDirichletBC>
[1,5]<stdout>:# Mémoire (Mo) :  2272.05 /   877.00 /   293.34 /   250.94 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Résultat commande #0009 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,0]<stdout>:<MechanicalDirichletBC>
[1,6]<stdout>:# Commande #0008 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 185
[1,5]<stdout>:# Fin commande #0007   user+syst:        0.17s (syst:        0.00s, elaps:        0.17s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  2332.28 /   939.37 /   328.52 /   286.13 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,6]<stdout>:                            CHAM_MATER=mater,
[1,6]<stdout>:                            INST=0.0,
[1,6]<stdout>:                            MODELE=model,
[1,6]<stdout>:                            MODE_FOURIER=0,
[1,6]<stdout>:                            OPTION='RIGI_MECA')
[1,6]<stdout>:
[1,0]<stdout>:# Fin commande #0009   user+syst:        0.17s (syst:        0.00s, elaps:        0.17s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt185
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0008 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 185
[1,3]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,3]<stdout>:<MechanicalDirichletBC>
[1,3]<stdout>:# Mémoire (Mo) :  2297.16 /   879.88 /   294.69 /   252.14 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,2]<stdout>:                            CHAM_MATER=mater,
[1,2]<stdout>:                            INST=0.0,
[1,2]<stdout>:                            MODELE=model,
[1,2]<stdout>:                            MODE_FOURIER=0,
[1,2]<stdout>:                            OPTION='RIGI_MECA')
[1,2]<stdout>:
[1,3]<stdout>:# Fin commande #0007   user+syst:        0.16s (syst:        0.01s, elaps:        0.17s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt185
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,4]<stdout>:<MechanicalDirichletBC>
[1,1]<stdout>:# Résultat commande #0007 (AFFE_CHAR_CINE): imposed_displ ('<00000009>') de type
[1,1]<stdout>:<MechanicalDirichletBC>
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt185
[1,4]<stdout>:# Mémoire (Mo) :  2269.92 /   877.57 /   294.61 /   251.57 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Commande #0008 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 185
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Mémoire (Mo) :  2262.06 /   876.74 /   294.27 /   251.25 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0007   user+syst:        0.16s (syst:        0.00s, elaps:        0.17s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0007   user+syst:        0.17s (syst:        0.00s, elaps:        0.18s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,5]<stdout>:                            CHAM_MATER=mater,
[1,5]<stdout>:                            INST=0.0,
[1,5]<stdout>:                            MODELE=model,
[1,5]<stdout>:                            MODE_FOURIER=0,
[1,5]<stdout>:                            OPTION='RIGI_MECA')
[1,5]<stdout>:
[1,0]<stdout>:# Commande #0010 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 185
[1,0]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,0]<stdout>:                            CHAM_MATER=mater,
[1,0]<stdout>:                            INST=0.0,
[1,0]<stdout>:                            MODELE=model,
[1,0]<stdout>:                            MODE_FOURIER=0,
[1,0]<stdout>:                            OPTION='RIGI_MECA')
[1,0]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt185
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0008 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 185
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt185
[1,3]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,3]<stdout>:                            CHAM_MATER=mater,
[1,3]<stdout>:                            INST=0.0,
[1,3]<stdout>:                            MODELE=model,
[1,3]<stdout>:                            MODE_FOURIER=0,
[1,3]<stdout>:                            OPTION='RIGI_MECA')
[1,3]<stdout>:
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt185
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0008 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 185
[1,1]<stdout>:# Commande #0008 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 185
[1,4]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,4]<stdout>:                            CHAM_MATER=mater,
[1,4]<stdout>:                            INST=0.0,
[1,4]<stdout>:                            MODELE=model,
[1,4]<stdout>:                            MODE_FOURIER=0,
[1,4]<stdout>:                            OPTION='RIGI_MECA')
[1,4]<stdout>:
[1,1]<stdout>:stiff_elem = CALC_MATR_ELEM(CALC_ELEM_MODELE='OUI',
[1,1]<stdout>:                            CHAM_MATER=mater,
[1,1]<stdout>:                            INST=0.0,
[1,1]<stdout>:                            MODELE=model,
[1,1]<stdout>:                            MODE_FOURIER=0,
[1,1]<stdout>:                            OPTION='RIGI_MECA')
[1,1]<stdout>:
[1,7]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,7]<stdout>:<ElementaryMatrixDisplacementReal>
[1,7]<stdout>:# Mémoire (Mo) :  2239.11 /  1456.30 /   871.99 /   247.07 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0008   user+syst:        2.97s (syst:        0.14s, elaps:        3.11s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt192
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0009 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 192
[1,7]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,7]<stdout>:                  MATR_RIGI=stiff_elem)
[1,7]<stdout>:
[1,6]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,6]<stdout>:<ElementaryMatrixDisplacementReal>
[1,6]<stdout>:# Mémoire (Mo) :  2240.09 /  1469.32 /   883.09 /   247.88 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0008   user+syst:        2.91s (syst:        0.20s, elaps:        3.11s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt192
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0009 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 192
[1,6]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,6]<stdout>:                  MATR_RIGI=stiff_elem)
[1,6]<stdout>:
[1,2]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,2]<stdout>:<ElementaryMatrixDisplacementReal>
[1,2]<stdout>:# Mémoire (Mo) :  2236.95 /  1479.64 /   893.75 /   250.01 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0008   user+syst:        2.98s (syst:        0.18s, elaps:        3.17s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt192
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Commande #0009 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 192
[1,2]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,2]<stdout>:                  MATR_RIGI=stiff_elem)
[1,2]<stdout>:
[1,0]<stdout>:# Résultat commande #0010 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,0]<stdout>:<ElementaryMatrixDisplacementReal>
[1,0]<stdout>:# Mémoire (Mo) :  2332.28 /  1498.58 /   897.72 /   286.13 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0010   user+syst:        3.10s (syst:        0.07s, elaps:        3.16s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt192
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0011 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 192
[1,0]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,0]<stdout>:                  MATR_RIGI=stiff_elem)
[1,0]<stdout>:
[1,5]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,5]<stdout>:<ElementaryMatrixDisplacementReal>
[1,5]<stdout>:# Mémoire (Mo) :  2272.05 /  1484.85 /   898.75 /   250.94 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0008   user+syst:        3.02s (syst:        0.16s, elaps:        3.18s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt192
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0009 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 192
[1,5]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,5]<stdout>:                  MATR_RIGI=stiff_elem)
[1,5]<stdout>:
[1,1]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,1]<stdout>:<ElementaryMatrixDisplacementReal>
[1,1]<stdout>:# Mémoire (Mo) :  2262.06 /  1496.02 /   906.47 /   251.25 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0008   user+syst:        3.00s (syst:        0.22s, elaps:        3.21s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt192
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0009 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 192
[1,1]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,1]<stdout>:                  MATR_RIGI=stiff_elem)
[1,1]<stdout>:
[1,3]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,3]<stdout>:<ElementaryMatrixDisplacementReal>
[1,3]<stdout>:# Mémoire (Mo) :  2297.16 /  1500.12 /   909.69 /   252.14 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Fin commande #0008   user+syst:        3.10s (syst:        0.13s, elaps:        3.22s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt192
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0009 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 192
[1,3]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,3]<stdout>:                  MATR_RIGI=stiff_elem)
[1,3]<stdout>:
[1,4]<stdout>:# Résultat commande #0008 (CALC_MATR_ELEM): stiff_elem ('<0000000b>') de type
[1,4]<stdout>:<ElementaryMatrixDisplacementReal>
[1,4]<stdout>:# Mémoire (Mo) :  2269.92 /  1501.52 /   909.25 /   251.57 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0008   user+syst:        3.15s (syst:        0.10s, elaps:        3.23s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt192
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Commande #0009 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 192
[1,4]<stdout>:dofNum = NUME_DDL(INFO=1,
[1,4]<stdout>:                  MATR_RIGI=stiff_elem)
[1,4]<stdout>:
[1,7]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,7]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,7]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,7]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,7]<stdout>:     aux 0 relations linéaires dualisées.
[1,2]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,2]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,2]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,2]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,2]<stdout>:     aux 0 relations linéaires dualisées.
[1,6]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,6]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,6]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,6]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,6]<stdout>:     aux 0 relations linéaires dualisées.
[1,4]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,4]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,4]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,4]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,4]<stdout>:     aux 0 relations linéaires dualisées.
[1,3]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,3]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,3]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,3]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,3]<stdout>:     aux 0 relations linéaires dualisées.
[1,5]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,5]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,5]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,5]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,5]<stdout>:     aux 0 relations linéaires dualisées.
[1,1]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,1]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,1]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,1]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,1]<stdout>:     aux 0 relations linéaires dualisées.
[1,0]<stdout>:Le système linéaire à résoudre a 6440067 degrés de liberté:
[1,0]<stdout>:   - 6440067 sont des degrés de liberté physiques
[1,0]<stdout>:     (ils sont portés par 2146689 noeuds du maillage)
[1,0]<stdout>:   - 0 sont les couples de paramètres de Lagrange associés
[1,0]<stdout>:     aux 0 relations linéaires dualisées.
[1,7]<stdout>:La matrice est de taille 816600 équations.
[1,7]<stdout>:  Elle contient 32448246 termes non nuls si elle est symétrique et 64079892 termes non nuls si elle
[1,7]<stdout>:n'est pas symétrique.
[1,7]<stdout>:  Soit un taux de remplissage de   0.010 %.
[1,6]<stdout>:La matrice est de taille 829884 équations.
[1,6]<stdout>:  Elle contient 32986518 termes non nuls si elle est symétrique et 65143152 termes non nuls si elle
[1,6]<stdout>:n'est pas symétrique.
[1,6]<stdout>:  Soit un taux de remplissage de   0.009 %.
[1,5]<stdout>:La matrice est de taille 847272 équations.
[1,5]<stdout>:  Elle contient 33674262 termes non nuls si elle est symétrique et 66501252 termes non nuls si elle
[1,5]<stdout>:n'est pas symétrique.
[1,5]<stdout>:  Soit un taux de remplissage de   0.009 %.
[1,3]<stdout>:La matrice est de taille 860766 équations.
[1,3]<stdout>:  Elle contient 34214988 termes non nuls si elle est symétrique et 67569210 termes non nuls si elle
[1,3]<stdout>:n'est pas symétrique.
[1,3]<stdout>:  Soit un taux de remplissage de   0.009 %.
[1,2]<stdout>:La matrice est de taille 841548 équations.
[1,2]<stdout>:  Elle contient 33438201 termes non nuls si elle est symétrique et 66034854 termes non nuls si elle
[1,2]<stdout>:n'est pas symétrique.
[1,2]<stdout>:  Soit un taux de remplissage de   0.009 %.
[1,4]<stdout>:La matrice est de taille 859620 équations.
[1,4]<stdout>:  Elle contient 34181097 termes non nuls si elle est symétrique et 67502574 termes non nuls si elle
[1,4]<stdout>:n'est pas symétrique.
[1,4]<stdout>:  Soit un taux de remplissage de   0.009 %.
[1,0]<stdout>:La matrice est de taille 845631 équations.
[1,0]<stdout>:  Elle contient 33624450 termes non nuls si elle est symétrique et 66403269 termes non nuls si elle
[1,0]<stdout>:n'est pas symétrique.
[1,0]<stdout>:  Soit un taux de remplissage de   0.009 %.
[1,1]<stdout>:La matrice est de taille 856050 équations.
[1,1]<stdout>:  Elle contient 34047660 termes non nuls si elle est symétrique et 67239270 termes non nuls si elle
[1,1]<stdout>:n'est pas symétrique.
[1,1]<stdout>:  Soit un taux de remplissage de   0.009 %.
[1,1]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,6]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,7]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,3]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,5]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,2]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,1]<stdout>:# Mémoire (Mo) :  2350.16 /  1691.22 /  1757.98 /  1044.91 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  2317.42 /  1658.48 /  1728.56 /  1038.19 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  2301.34 /  1642.39 /  1714.41 /  1034.79 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0009   user+syst:        1.58s (syst:        0.98s, elaps:        2.57s)
[1,3]<stdout>:# Mémoire (Mo) :  2355.28 /  1696.34 /  1762.23 /  1045.99 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Résultat commande #0009 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,5]<stdout>:# Mémoire (Mo) :  2336.90 /  1677.96 /  1748.18 /  1042.57 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  2330.36 /  1671.42 /  1741.84 /  1041.09 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0009   user+syst:        1.74s (syst:        0.93s, elaps:        2.68s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Fin commande #0009   user+syst:        1.69s (syst:        0.99s, elaps:        2.68s)
[1,3]<stdout>:# Fin commande #0009   user+syst:        1.58s (syst:        0.97s, elaps:        2.56s)
[1,5]<stdout>:# Fin commande #0009   user+syst:        1.69s (syst:        0.90s, elaps:        2.60s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0009   user+syst:        1.62s (syst:        1.00s, elaps:        2.62s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Mémoire (Mo) :  2356.45 /  1697.50 /  1761.55 /  1045.77 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0009   user+syst:        1.55s (syst:        0.98s, elaps:        2.55s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt197
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt197
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt197
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt197
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt197
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt197
[1,0]<stdout>:# Résultat commande #0011 (NUME_DDL): dofNum ('<00000011>') de type <ParallelDOFNumbering>
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0010 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 197
[1,6]<stdout>:# Commande #0010 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 197
[1,3]<stdout>:# Commande #0010 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 197
[1,5]<stdout>:# Commande #0010 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 197
[1,7]<stdout>:# Commande #0010 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 197
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt197
[1,2]<stdout>:# Commande #0010 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 197
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Mémoire (Mo) :  2350.32 /  1691.38 /  1746.83 /  1042.22 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Commande #0010 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 197
[1,0]<stdout>:# Fin commande #0011   user+syst:        1.63s (syst:        0.98s, elaps:        2.62s)
[1,1]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:                         INFO=1,
[1,1]<stdout>:                         MATR_ELEM=stiff_elem,
[1,1]<stdout>:                         NUME_DDL=dofNum)
[1,1]<stdout>:
[1,6]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:                         INFO=1,
[1,6]<stdout>:                         MATR_ELEM=stiff_elem,
[1,6]<stdout>:                         NUME_DDL=dofNum)
[1,6]<stdout>:
[1,3]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:                         INFO=1,
[1,3]<stdout>:                         MATR_ELEM=stiff_elem,
[1,3]<stdout>:                         NUME_DDL=dofNum)
[1,3]<stdout>:
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:                         INFO=1,
[1,7]<stdout>:                         MATR_ELEM=stiff_elem,
[1,7]<stdout>:                         NUME_DDL=dofNum)
[1,7]<stdout>:
[1,5]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:                         INFO=1,
[1,5]<stdout>:                         MATR_ELEM=stiff_elem,
[1,5]<stdout>:                         NUME_DDL=dofNum)
[1,5]<stdout>:
[1,2]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:                         INFO=1,
[1,2]<stdout>:                         MATR_ELEM=stiff_elem,
[1,2]<stdout>:                         NUME_DDL=dofNum)
[1,2]<stdout>:
[1,4]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:                         INFO=1,
[1,4]<stdout>:                         MATR_ELEM=stiff_elem,
[1,4]<stdout>:                         NUME_DDL=dofNum)
[1,4]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt197
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0012 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 197
[1,0]<stdout>:stiffness = ASSE_MATRICE(CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:                         INFO=1,
[1,0]<stdout>:                         MATR_ELEM=stiff_elem,
[1,0]<stdout>:                         NUME_DDL=dofNum)
[1,0]<stdout>:
[1,1]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,1]<stdout>:<AssemblyMatrixDisplacementReal>
[1,3]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,3]<stdout>:<AssemblyMatrixDisplacementReal>
[1,6]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,6]<stdout>:<AssemblyMatrixDisplacementReal>
[1,5]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,5]<stdout>:<AssemblyMatrixDisplacementReal>
[1,7]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,7]<stdout>:<AssemblyMatrixDisplacementReal>
[1,4]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,4]<stdout>:<AssemblyMatrixDisplacementReal>
[1,3]<stdout>:# Mémoire (Mo) :  2355.28 /  1963.95 /  1762.23 /  1045.99 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  2350.16 /  1957.52 /  1757.98 /  1044.91 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  2317.42 /  1916.48 /  1728.56 /  1038.19 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  2336.90 /  1941.34 /  1748.18 /  1042.57 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Résultat commande #0010 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,2]<stdout>:<AssemblyMatrixDisplacementReal>
[1,7]<stdout>:# Mémoire (Mo) :  2301.34 /  1896.18 /  1714.41 /  1034.79 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0010   user+syst:        2.03s (syst:        0.06s, elaps:        2.09s)
[1,3]<stdout>:# Fin commande #0010   user+syst:        2.04s (syst:        0.05s, elaps:        2.09s)
[1,4]<stdout>:# Mémoire (Mo) :  2356.45 /  1964.84 /  1761.55 /  1045.77 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Fin commande #0010   user+syst:        2.03s (syst:        0.06s, elaps:        2.09s)
[1,5]<stdout>:# Fin commande #0010   user+syst:        2.03s (syst:        0.06s, elaps:        2.09s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Mémoire (Mo) :  2330.36 /  1932.96 /  1741.84 /  1041.09 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0010   user+syst:        2.04s (syst:        0.05s, elaps:        2.09s)
[1,4]<stdout>:# Fin commande #0010   user+syst:        2.05s (syst:        0.04s, elaps:        2.09s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0010   user+syst:        2.02s (syst:        0.07s, elaps:        2.09s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0012 (ASSE_MATRICE): stiffness ('<00000013>') de type
[1,0]<stdout>:<AssemblyMatrixDisplacementReal>
[1,0]<stdout>:# Mémoire (Mo) :  2350.32 /  1954.37 /  1746.83 /  1042.22 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0012   user+syst:        2.04s (syst:        0.05s, elaps:        2.09s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt204
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt204
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt204
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt204
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt204
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt204
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt204
[1,3]<stdout>:# Commande #0011 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 204
[1,1]<stdout>:# Commande #0011 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 204
[1,5]<stdout>:# Commande #0011 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 204
[1,6]<stdout>:# Commande #0011 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 204
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0011 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 204
[1,4]<stdout>:# Commande #0011 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 204
[1,2]<stdout>:# Commande #0011 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 204
[1,3]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,3]<stdout>:                         TOUT='OUI',
[1,3]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,3]<stdout>:                 INFO=1,
[1,3]<stdout>:                 MAILLAGE='<00000004>',
[1,3]<stdout>:                 OPERATION='AFFE',
[1,3]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,3]<stdout>:
[1,1]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,1]<stdout>:                         TOUT='OUI',
[1,1]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,1]<stdout>:                 INFO=1,
[1,1]<stdout>:                 MAILLAGE='<00000004>',
[1,1]<stdout>:                 OPERATION='AFFE',
[1,1]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,1]<stdout>:
[1,5]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,5]<stdout>:                         TOUT='OUI',
[1,5]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,5]<stdout>:                 INFO=1,
[1,5]<stdout>:                 MAILLAGE='<00000004>',
[1,5]<stdout>:                 OPERATION='AFFE',
[1,5]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,5]<stdout>:
[1,6]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,6]<stdout>:                         TOUT='OUI',
[1,6]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,6]<stdout>:                 INFO=1,
[1,6]<stdout>:                 MAILLAGE='<00000004>',
[1,6]<stdout>:                 OPERATION='AFFE',
[1,6]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,6]<stdout>:
[1,7]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,7]<stdout>:                         TOUT='OUI',
[1,7]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,7]<stdout>:                 INFO=1,
[1,7]<stdout>:                 MAILLAGE='<00000004>',
[1,7]<stdout>:                 OPERATION='AFFE',
[1,7]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,7]<stdout>:
[1,4]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,4]<stdout>:                         TOUT='OUI',
[1,4]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,4]<stdout>:                 INFO=1,
[1,4]<stdout>:                 MAILLAGE='<00000004>',
[1,4]<stdout>:                 OPERATION='AFFE',
[1,4]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,4]<stdout>:
[1,2]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,2]<stdout>:                         TOUT='OUI',
[1,2]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,2]<stdout>:                 INFO=1,
[1,2]<stdout>:                 MAILLAGE='<00000004>',
[1,2]<stdout>:                 OPERATION='AFFE',
[1,2]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,2]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt204
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Commande #0013 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 204
[1,0]<stdout>:rhs = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ'),
[1,0]<stdout>:                         TOUT='OUI',
[1,0]<stdout>:                         VALE=(0.0, 0.0, 0.0)),
[1,0]<stdout>:                 INFO=1,
[1,0]<stdout>:                 MAILLAGE='<00000004>',
[1,0]<stdout>:                 OPERATION='AFFE',
[1,0]<stdout>:                 TYPE_CHAM='NOEU_DEPL_R')
[1,0]<stdout>:
[1,7]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,6]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,2]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,7]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,7]<stdout>:# Mémoire (Mo) :  2301.34 /  1946.03 /  1714.41 /  1034.79 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,7]<stdout>:# Fin commande #0011   user+syst:        0.04s (syst:        0.01s, elaps:        0.05s)
[1,5]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,4]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,3]<stdout>:#4      Communications MPI                                CPU (USER+SYST/SYST/ELAPS):      0.00      0.00      0.00
[1,6]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,6]<stdout>:# Mémoire (Mo) :  2317.42 /  1967.13 /  1728.56 /  1038.19 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0011   user+syst:        0.03s (syst:        0.02s, elaps:        0.05s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt223
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# Commande #0012 de
[1,7]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,7]<stdout>:Cube_perf.py, ligne 223
[1,2]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,2]<stdout>:# Mémoire (Mo) :  2330.36 /  1984.33 /  1741.84 /  1041.09 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,7]<stdout>:                             INFO=1,
[1,7]<stdout>:                             INST=0.0,
[1,7]<stdout>:                             NUME_DDL=dofNum)
[1,7]<stdout>:
[1,2]<stdout>:# Fin commande #0011   user+syst:        0.05s (syst:        0.01s, elaps:        0.05s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0013 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt223
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,0]<stdout>:# Mémoire (Mo) :  2350.32 /  2005.99 /  1746.83 /  1042.22 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Commande #0012 de
[1,6]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,6]<stdout>:Cube_perf.py, ligne 223
[1,5]<stdout>:# Mémoire (Mo) :  2336.90 /  1993.06 /  1748.18 /  1042.57 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0013   user+syst:        0.03s (syst:        0.01s, elaps:        0.05s)
[1,5]<stdout>:# Fin commande #0011   user+syst:        0.04s (syst:        0.01s, elaps:        0.05s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,6]<stdout>:                             INFO=1,
[1,6]<stdout>:                             INST=0.0,
[1,6]<stdout>:                             NUME_DDL=dofNum)
[1,6]<stdout>:
[1,1]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,4]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,3]<stdout>:# Résultat commande #0011 (CREA_CHAMP): rhs ('<00000015>') de type <FieldOnNodesReal>
[1,1]<stdout>:# Mémoire (Mo) :  2350.16 /  2009.77 /  1757.98 /  1044.91 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt223
[1,4]<stdout>:# Mémoire (Mo) :  2356.45 /  2017.31 /  1761.55 /  1045.77 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Mémoire (Mo) :  2355.28 /  2016.50 /  1762.23 /  1045.99 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Fin commande #0011   user+syst:        0.04s (syst:        0.02s, elaps:        0.05s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0011   user+syst:        0.04s (syst:        0.01s, elaps:        0.05s)
[1,2]<stdout>:# Commande #0012 de
[1,2]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,2]<stdout>:Cube_perf.py, ligne 223
[1,3]<stdout>:# Fin commande #0011   user+syst:        0.03s (syst:        0.01s, elaps:        0.05s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,2]<stdout>:                             INFO=1,
[1,2]<stdout>:                             INST=0.0,
[1,2]<stdout>:                             NUME_DDL=dofNum)
[1,2]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt223
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt223
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Commande #0012 de
[1,5]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,5]<stdout>:Cube_perf.py, ligne 223
[1,0]<stdout>:# Commande #0014 de
[1,0]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,0]<stdout>:Cube_perf.py, ligne 223
[1,5]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,5]<stdout>:                             INFO=1,
[1,5]<stdout>:                             INST=0.0,
[1,5]<stdout>:                             NUME_DDL=dofNum)
[1,5]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt223
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt223
[1,0]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,0]<stdout>:                             INFO=1,
[1,0]<stdout>:                             INST=0.0,
[1,0]<stdout>:                             NUME_DDL=dofNum)
[1,0]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt223
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Commande #0012 de
[1,1]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,1]<stdout>:Cube_perf.py, ligne 223
[1,4]<stdout>:# Commande #0012 de
[1,4]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,4]<stdout>:Cube_perf.py, ligne 223
[1,3]<stdout>:# Commande #0012 de
[1,3]<stdout>:/home/aster/work/Benchmark-CodeAster/opensource-installation-development-main/benchmarks/Cube_files/
[1,3]<stdout>:Cube_perf.py, ligne 223
[1,1]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,1]<stdout>:                             INFO=1,
[1,1]<stdout>:                             INST=0.0,
[1,1]<stdout>:                             NUME_DDL=dofNum)
[1,1]<stdout>:
[1,4]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,4]<stdout>:                             INFO=1,
[1,4]<stdout>:                             INST=0.0,
[1,4]<stdout>:                             NUME_DDL=dofNum)
[1,4]<stdout>:
[1,3]<stdout>:load_vector = CALC_CHAR_CINE(CHAR_CINE=(block, imposed_displ),
[1,3]<stdout>:                             INFO=1,
[1,3]<stdout>:                             INST=0.0,
[1,3]<stdout>:                             NUME_DDL=dofNum)
[1,3]<stdout>:
[1,7]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,7]<stdout>:# Mémoire (Mo) :  2301.34 /  1952.26 /  1714.41 /  1034.79 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.02s, elaps:        0.04s)
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,6]<stdout>:# Mémoire (Mo) :  2317.42 /  1973.46 /  1728.56 /  1038.19 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.02s, elaps:        0.05s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,2]<stdout>:# Mémoire (Mo) :  2330.36 /  1990.75 /  1741.84 /  1041.09 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.05s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,1]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,5]<stdout>:# Mémoire (Mo) :  2336.90 /  1999.52 /  1748.18 /  1042.57 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  2350.16 /  2016.30 /  1757.98 /  1044.91 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Fin commande #0012   user+syst:        0.04s (syst:        0.01s, elaps:        0.05s)
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# Fin commande #0012   user+syst:        0.02s (syst:        0.02s, elaps:        0.05s)
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,3]<stdout>:# Résultat commande #0012 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,4]<stdout>:# Mémoire (Mo) :  2356.45 /  2023.87 /  1761.55 /  1045.77 (VmPeak / VmSize / Optimum / Minimum)
[1,3]<stdout>:# Mémoire (Mo) :  2355.28 /  2023.07 /  1762.23 /  1045.99 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.03s, elaps:        0.05s)
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Fin commande #0012   user+syst:        0.03s (syst:        0.03s, elaps:        0.05s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Résultat commande #0014 (CALC_CHAR_CINE): load_vector ('<00000017>') de type <FieldOnNodesReal>
[1,0]<stdout>:# Mémoire (Mo) :  2350.32 /  2012.44 /  1746.83 /  1042.22 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Fin commande #0014   user+syst:        0.03s (syst:        0.03s, elaps:        0.05s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:  0 KSP unpreconditioned resid norm 2.792302114902e+02 true resid norm 2.792302114902e+02 ||r(i)||/||b|| 1.000000000000e+00
[1,0]<stdout>:  1 KSP unpreconditioned resid norm 4.022844222468e+01 true resid norm 4.022844222468e+01 ||r(i)||/||b|| 1.440690891218e-01
[1,0]<stdout>:  2 KSP unpreconditioned resid norm 5.865092114267e+00 true resid norm 5.865092114267e+00 ||r(i)||/||b|| 2.100450407199e-02
[1,0]<stdout>:  3 KSP unpreconditioned resid norm 2.046861157684e+00 true resid norm 2.046861157684e+00 ||r(i)||/||b|| 7.330371404870e-03
[1,0]<stdout>:  4 KSP unpreconditioned resid norm 1.009142851396e+00 true resid norm 1.009142851396e+00 ||r(i)||/||b|| 3.614017430315e-03
[1,0]<stdout>:  5 KSP unpreconditioned resid norm 5.419063957056e-01 true resid norm 5.419063957056e-01 ||r(i)||/||b|| 1.940715486385e-03
[1,0]<stdout>:  6 KSP unpreconditioned resid norm 2.963931286517e-01 true resid norm 2.963931286517e-01 ||r(i)||/||b|| 1.061465115361e-03
[1,0]<stdout>:  7 KSP unpreconditioned resid norm 1.699450122692e-01 true resid norm 1.699450122692e-01 ||r(i)||/||b|| 6.086197169074e-04
[1,0]<stdout>:  8 KSP unpreconditioned resid norm 9.844854718127e-02 true resid norm 9.844854718128e-02 ||r(i)||/||b|| 3.525712588759e-04
[1,0]<stdout>:  9 KSP unpreconditioned resid norm 5.595054532312e-02 true resid norm 5.595054532312e-02 ||r(i)||/||b|| 2.003742540054e-04
[1,0]<stdout>: 10 KSP unpreconditioned resid norm 3.334942372263e-02 true resid norm 3.334942372263e-02 ||r(i)||/||b|| 1.194334364632e-04
[1,0]<stdout>: 11 KSP unpreconditioned resid norm 2.036659715135e-02 true resid norm 2.036659715135e-02 ||r(i)||/||b|| 7.293837240124e-05
[1,0]<stdout>: 12 KSP unpreconditioned resid norm 1.211081453464e-02 true resid norm 1.211081453464e-02 ||r(i)||/||b|| 4.337214970404e-05
[1,0]<stdout>: 13 KSP unpreconditioned resid norm 7.027447046473e-03 true resid norm 7.027447046467e-03 ||r(i)||/||b|| 2.516721600060e-05
[1,0]<stdout>: 14 KSP unpreconditioned resid norm 3.881991606299e-03 true resid norm 3.881991606296e-03 ||r(i)||/||b|| 1.390247704780e-05
[1,0]<stdout>: 15 KSP unpreconditioned resid norm 2.122002726781e-03 true resid norm 2.122002726779e-03 ||r(i)||/||b|| 7.599473980464e-06
[1,0]<stdout>: 16 KSP unpreconditioned resid norm 1.184661057638e-03 true resid norm 1.184661057636e-03 ||r(i)||/||b|| 4.242596283954e-06
[1,0]<stdout>: 17 KSP unpreconditioned resid norm 6.651856345118e-04 true resid norm 6.651856345096e-04 ||r(i)||/||b|| 2.382212264782e-06
[1,0]<stdout>: 18 KSP unpreconditioned resid norm 3.806151649794e-04 true resid norm 3.806151649786e-04 ||r(i)||/||b|| 1.363087335526e-06
[1,0]<stdout>: 19 KSP unpreconditioned resid norm 2.184250373079e-04 true resid norm 2.184250373052e-04 ||r(i)||/||b|| 7.822399880710e-07
[1,1]<stdout>:
[1,1]<stdout>:.. _stg1_txt72
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:.. _stg1_txt72
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:
[1,7]<stdout>:.. _stg1_txt72
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:
[1,5]<stdout>:.. _stg1_txt72
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:
[1,3]<stdout>:.. _stg1_txt72
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,1]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,6]<stdout>:
[1,6]<stdout>:.. _stg1_txt72
[1,2]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,7]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,5]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,4]<stdout>:
[1,4]<stdout>:.. _stg1_txt72
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,6]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,4]<stdout>:# Commande #0013 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,0]<stdout>:| Refinement       |           7 |
[1,0]<stdout>:| :--------------- | ----------: |
[1,0]<stdout>:| Number of cells  |   2 097 152 |
[1,0]<stdout>:| Number of nodes  |   2 146 689 |
[1,0]<stdout>:| Number of DOFs   |   6 440 067 |
[1,0]<stdout>:| Number of procs  |           8 |
[1,0]<stdout>:| Nb of DOFs/proc  |     805 008 |
[1,0]<stdout>:| Build mesh       |       12.76 |
[1,0]<stdout>:| Model            |        1.29 |
[1,0]<stdout>:| Material         |        0.06 |
[1,0]<stdout>:| Boundary conditions |        0.34 |
[1,0]<stdout>:| Create matrix    |        3.18 |
[1,0]<stdout>:| Numbering        |        2.60 |
[1,0]<stdout>:| Assembly         |        2.09 |
[1,0]<stdout>:| Build RHS        |        0.10 |
[1,0]<stdout>:| Factorize        |       15.42 |
[1,0]<stdout>:| Solve            |        8.77 |
[1,0]<stdout>:| Total            |       46.62 |
[1,0]<stdout>:
[1,0]<stdout>:.. _stg1_txt72
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,3]<stdout>:FIN(INFO_RESU='NON',
[1,3]<stdout>:    RETASSAGE='NON')
[1,3]<stdout>:
[1,1]<stdout>:FIN(INFO_RESU='NON',
[1,1]<stdout>:    RETASSAGE='NON')
[1,1]<stdout>:
[1,5]<stdout>:FIN(INFO_RESU='NON',
[1,5]<stdout>:    RETASSAGE='NON')
[1,5]<stdout>:
[1,2]<stdout>:FIN(INFO_RESU='NON',
[1,2]<stdout>:    RETASSAGE='NON')
[1,2]<stdout>:
[1,7]<stdout>:FIN(INFO_RESU='NON',
[1,7]<stdout>:    RETASSAGE='NON')
[1,7]<stdout>:
[1,0]<stdout>:# Commande #0015 de /opt/aster/install/mpi/lib/aster/code_aster/CodeCommands/fin.py, ligne 72
[1,6]<stdout>:FIN(INFO_RESU='NON',
[1,6]<stdout>:    RETASSAGE='NON')
[1,6]<stdout>:
[1,4]<stdout>:FIN(INFO_RESU='NON',
[1,4]<stdout>:    RETASSAGE='NON')
[1,4]<stdout>:
[1,0]<stdout>:FIN(INFO_RESU='NON',
[1,0]<stdout>:    RETASSAGE='NON')
[1,0]<stdout>:
[1,1]<stdout>:No database in results, objects not saved on processor #1
[1,5]<stdout>:No database in results, objects not saved on processor #5
[1,7]<stdout>:No database in results, objects not saved on processor #7
[1,3]<stdout>:No database in results, objects not saved on processor #3
[1,6]<stdout>:No database in results, objects not saved on processor #6
[1,4]<stdout>:No database in results, objects not saved on processor #4
[1,2]<stdout>:No database in results, objects not saved on processor #2
[1,0]<stdout>:No database in results, objects not saved on processor #0
[1,0]<stdout>:****************************************************************************************************************************************************************
[1,0]<stdout>:***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
[1,0]<stdout>:****************************************************************************************************************************************************************
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------------ PETSc Performance Summary: ------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:petsc_aster on a  named fe732af82b6a with 8 processors, by Unknown Fri Jan 24 13:41:39 2025
[1,0]<stdout>:Using 1 OpenMP threads
[1,0]<stdout>:Using Petsc Release Version 3.20.5, unknown 
[1,0]<stdout>:
[1,0]<stdout>:                         Max       Max/Min     Avg       Total
[1,0]<stdout>:Time (sec):           4.665e+01     1.000   4.665e+01
[1,0]<stdout>:Objects:              0.000e+00     0.000   0.000e+00
[1,0]<stdout>:Flops:                2.836e+10     1.056   2.768e+10  2.214e+11
[1,0]<stdout>:Flops/sec:            6.080e+08     1.056   5.932e+08  4.746e+09
[1,0]<stdout>:MPI Msg Count:        5.073e+03     1.184   4.663e+03  3.730e+04
[1,0]<stdout>:MPI Msg Len (bytes):  1.279e+08     1.070   2.645e+04  9.867e+08
[1,0]<stdout>:MPI Reductions:       9.670e+02     1.000
[1,0]<stdout>:
[1,0]<stdout>:Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
[1,0]<stdout>:                            e.g., VecAXPY() for real vectors of length N --> 2N flops
[1,0]<stdout>:                            and VecAXPY() for complex vectors of length N --> 8N flops
[1,0]<stdout>:
[1,0]<stdout>:Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
[1,0]<stdout>:                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
[1,0]<stdout>: 0:      Main Stage: 4.6653e+01 100.0%  2.2141e+11 100.0%  3.730e+04 100.0%  2.645e+04      100.0%  9.490e+02  98.1%
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:See the 'Profiling' chapter of the users' manual for details on interpreting output.
[1,0]<stdout>:Phase summary info:
[1,0]<stdout>:   Count: number of times phase was executed
[1,0]<stdout>:   Time and Flop: Max - maximum over all processors
[1,0]<stdout>:                  Ratio - ratio of maximum to minimum over all processors
[1,0]<stdout>:   Mess: number of messages sent
[1,0]<stdout>:   AvgLen: average message length (bytes)
[1,0]<stdout>:   Reduct: number of global reductions
[1,0]<stdout>:   Global: entire computation
[1,0]<stdout>:   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
[1,0]<stdout>:      %T - percent time in this phase         %F - percent flop in this phase
[1,0]<stdout>:      %M - percent messages in this phase     %L - percent message lengths in this phase
[1,0]<stdout>:      %R - percent reductions in this phase
[1,0]<stdout>:   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
[1,0]<stdout>:                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:--- Event Stage 0: Main Stage
[1,0]<stdout>:
[1,0]<stdout>:BuildTwoSided        239 1.0 4.1822e-01 8.8 0.00e+00 0.0 2.6e+03 4.0e+00 2.4e+02  0  0  7  0 25   0  0  7  0 25     0
[1,0]<stdout>:BuildTwoSidedF       182 1.0 4.1255e-01 9.0 0.00e+00 0.0 1.2e+03 1.9e+05 1.8e+02  0  0  3 23 19   0  0  3 23 19     0
[1,0]<stdout>:MatMult              384 1.0 8.1046e+00 1.0 1.76e+10 1.1 1.9e+04 2.0e+04 0.0e+00 17 62 52 39  0  17 62 52 39  0 17008
[1,0]<stdout>:MatMultAdd            76 1.0 2.9187e-01 1.0 7.36e+08 1.1 3.0e+03 2.3e+03 0.0e+00  1  3  8  1  0   1  3  8  1  0 19734
[1,0]<stdout>:MatMultTranspose      76 1.0 3.1873e-01 1.0 7.36e+08 1.1 3.0e+03 2.3e+03 0.0e+00  1  3  8  1  0   1  3  8  1  0 18074
[1,0]<stdout>:MatSolve              19 0.0 5.3831e-05 0.0 1.20e+04 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0   222
[1,0]<stdout>:MatLUFactorSym         1 1.0 1.2433e-05 2.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatLUFactorNum         1 1.0 6.8620e-06 9.4 3.74e+03 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0   544
[1,0]<stdout>:MatConvert             1 1.0 2.6596e-02 1.1 0.00e+00 0.0 8.4e+01 5.0e+03 1.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatScale               8 1.0 4.8972e-02 1.1 3.87e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0  6190
[1,0]<stdout>:MatResidual           76 1.0 1.2687e+00 1.0 2.76e+09 1.1 3.9e+03 1.6e+04 0.0e+00  3 10 10  6  0   3 10 10  6  0 16993
[1,0]<stdout>:MatAssemblyBegin      98 1.0 5.0521e-01 3.4 0.00e+00 0.0 1.2e+03 1.9e+05 5.1e+01  1  0  3 23  5   1  0  3 23  5     0
[1,0]<stdout>:MatAssemblyEnd        98 1.0 5.2347e-01 1.0 1.64e+06 1.4 2.7e+03 1.4e+03 2.1e+02  1  0  7  0 22   1  0  7  0 22    21
[1,0]<stdout>:MatGetRowIJ            1 0.0 1.8980e-06 0.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatCreateSubMat        2 1.0 3.1934e-04 1.0 0.00e+00 0.0 2.9e+01 1.6e+02 3.0e+01  0  0  0  0  3   0  0  0  0  3     0
[1,0]<stdout>:MatGetOrdering         1 0.0 2.2721e-05 0.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatCoarsen             4 1.0 3.4372e-01 1.0 1.91e+07 1.1 3.5e+03 2.2e+03 1.8e+02  1  0  9  1 18   1  0  9  1 19   438
[1,0]<stdout>:MatZeroEntries         5 1.0 1.3830e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatAXPY                8 1.0 4.5466e-01 1.0 1.25e+07 1.1 4.1e+02 1.2e+03 2.8e+01  1  0  1  0  3   1  0  1  0  3   216
[1,0]<stdout>:MatTranspose          18 1.0 2.4109e-01 1.0 0.00e+00 0.0 1.9e+03 1.1e+04 7.2e+01  1  0  5  2  7   1  0  5  2  8     0
[1,0]<stdout>:MatMatMultSym         15 1.0 2.1279e+00 1.0 0.00e+00 0.0 1.1e+03 2.9e+04 5.0e+01  4  0  3  3  5   4  0  3  3  5     0
[1,0]<stdout>:MatMatMultNum         15 1.0 1.9127e+00 1.0 3.57e+09 1.1 2.3e+02 8.7e+04 5.0e+00  4 12  1  2  1   4 12  1  2  1 14415
[1,0]<stdout>:MatPtAPSymbolic        5 1.0 4.9945e+00 1.0 0.00e+00 0.0 1.3e+03 1.9e+05 3.5e+01 11  0  4 25  4  11  0  4 25  4     0
[1,0]<stdout>:MatPtAPNumeric         5 1.0 3.6416e+00 1.0 6.64e+09 1.1 8.1e+02 2.5e+05 3.0e+01  8 23  2 21  3   8 23  2 21  3 14046
[1,0]<stdout>:MatGetLocalMat        15 1.0 1.5887e-01 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:MatGetBrAoCol         15 1.0 4.4185e-02 1.1 0.00e+00 0.0 1.7e+03 1.5e+05 0.0e+00  0  0  4 25  0   0  0  4 25  0     0
[1,0]<stdout>:VecMDot               62 1.0 1.0013e-01 1.1 4.24e+08 1.1 0.0e+00 0.0e+00 6.2e+01  0  2  0  0  6   0  2  0  0  7 33264
[1,0]<stdout>:VecNorm               89 1.0 3.7594e-02 1.8 9.23e+07 1.1 0.0e+00 0.0e+00 8.9e+01  0  0  0  0  9   0  0  0  0  9 19295
[1,0]<stdout>:VecScale              67 1.0 1.1822e-02 1.1 2.81e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 18694
[1,0]<stdout>:VecCopy              253 1.0 3.7070e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecSet               268 1.0 9.0624e-03 1.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecAXPY               24 1.0 1.2877e-02 1.2 3.45e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0 21034
[1,0]<stdout>:VecAYPX              477 1.0 9.0441e-02 1.1 1.45e+08 1.1 0.0e+00 0.0e+00 0.0e+00  0  1  0  0  0   0  1  0  0  0 12632
[1,0]<stdout>:VecAXPBYCZ           152 1.0 3.8043e-02 1.1 1.60e+08 1.1 0.0e+00 0.0e+00 0.0e+00  0  1  0  0  0   0  1  0  0  0 33093
[1,0]<stdout>:VecMAXPY              86 1.0 1.8654e-01 1.1 7.84e+08 1.1 0.0e+00 0.0e+00 0.0e+00  0  3  0  0  0   0  3  0  0  0 32996
[1,0]<stdout>:VecAssemblyBegin     132 1.0 9.0676e-03 5.7 0.00e+00 0.0 0.0e+00 0.0e+00 1.3e+02  0  0  0  0 14   0  0  0  0 14     0
[1,0]<stdout>:VecAssemblyEnd       132 1.0 8.2762e-05 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:VecPointwiseMult     348 1.0 6.3351e-02 1.0 7.34e+07 1.1 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0  9100
[1,0]<stdout>:VecScatterBegin      667 1.0 1.9547e-02 1.1 0.00e+00 0.0 2.7e+04 1.5e+04 0.0e+00  0  0 74 41  0   0  0 74 41  0     0
[1,0]<stdout>:VecScatterEnd        667 1.0 5.0690e-01 8.8 1.23e+05 1.4 0.0e+00 0.0e+00 0.0e+00  1  0  0  0  0   1  0  0  0  0     2
[1,0]<stdout>:VecNormalize          47 1.0 2.2127e-02 2.3 3.52e+07 1.1 0.0e+00 0.0e+00 4.7e+01  0  0  0  0  5   0  0  0  0  5 12501
[1,0]<stdout>:SFSetGraph            57 1.0 1.1426e-03 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFSetUp               57 1.0 8.9827e-03 2.2 0.00e+00 0.0 3.9e+03 1.3e+03 5.7e+01  0  0 10  1  6   0  0 10  1  6     0
[1,0]<stdout>:SFBcastBegin          29 1.0 3.0151e-04 1.1 0.00e+00 0.0 1.5e+03 2.0e+03 0.0e+00  0  0  4  0  0   0  0  4  0  0     0
[1,0]<stdout>:SFBcastEnd            29 1.0 1.9981e-03 3.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFReduceBegin          8 1.0 5.9347e-05 1.1 0.00e+00 0.0 2.7e+02 1.8e+03 0.0e+00  0  0  1  0  0   0  0  1  0  0     0
[1,0]<stdout>:SFReduceEnd            8 1.0 8.7126e-05 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFPack               704 1.0 1.5053e-02 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:SFUnpack             704 1.0 3.8861e-04 1.2 1.23e+05 1.4 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0  2167
[1,0]<stdout>:KSPSetUp              11 1.0 3.2343e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
[1,0]<stdout>:KSPSolve               1 1.0 8.6648e+00 1.0 1.89e+10 1.1 2.3e+04 1.6e+04 7.9e+01 19 67 62 37  8  19 67 62 37  8 17134
[1,0]<stdout>:KSPGMRESOrthog        59 1.0 1.8447e-01 1.1 8.09e+08 1.1 0.0e+00 0.0e+00 5.9e+01  0  3  0  0  6   0  3  0  0  6 34434
[1,0]<stdout>:PCSetUp_GAMG+          1 1.0 1.3055e+01 1.0 9.24e+09 1.1 1.3e+04 4.4e+04 6.9e+02 28 32 35 58 72  28 32 35 58 73  5480
[1,0]<stdout>: PCGAMGCreateG         4 1.0 1.0045e+00 1.0 7.46e+06 1.1 2.3e+03 9.2e+03 1.0e+02  2  0  6  2 10   2  0  6  2 11    58
[1,0]<stdout>: GAMG Coarsen          4 1.0 3.8147e-01 1.0 1.91e+07 1.1 3.5e+03 2.2e+03 1.8e+02  1  0  9  1 18   1  0  9  1 19   394
[1,0]<stdout>:  GAMG MIS/Agg         4 1.0 3.4374e-01 1.0 1.91e+07 1.1 3.5e+03 2.2e+03 1.8e+02  1  0  9  1 18   1  0  9  1 19   438
[1,0]<stdout>: PCGAMGProl            4 1.0 3.3342e-01 1.0 0.00e+00 0.0 2.4e+03 6.3e+03 1.7e+02  1  0  6  2 18   1  0  6  2 18     0
[1,0]<stdout>:  GAMG Prol-col        4 1.0 1.4536e-01 1.0 0.00e+00 0.0 2.1e+03 2.4e+03 1.3e+02  0  0  6  1 13   0  0  6  1 14     0
[1,0]<stdout>:  GAMG Prol-lift       4 1.0 1.6941e-01 1.0 0.00e+00 0.0 2.7e+02 3.6e+04 2.4e+01  0  0  1  1  2   0  0  1  1  3     0
[1,0]<stdout>: PCGAMGOptProl         4 1.0 2.8306e+00 1.0 2.60e+09 1.1 3.2e+03 2.6e+04 1.3e+02  6  9  9  8 14   6  9  9  8 14  7181
[1,0]<stdout>:  GAMG smooth          4 1.0 1.9987e+00 1.0 9.14e+08 1.1 1.2e+03 4.4e+04 4.9e+01  4  3  3  5  5   4  3  3  5  5  3578
[1,0]<stdout>: PCGAMGCreateL         4 1.0 8.4819e+00 1.0 6.62e+09 1.1 1.9e+03 2.4e+05 1.1e+02 18 23  5 45 11  18 23  5 45 11  6013
[1,0]<stdout>:  GAMG PtAP            4 1.0 8.4814e+00 1.0 6.62e+09 1.1 1.8e+03 2.5e+05 5.3e+01 18 23  5 45  5  18 23  5 45  6  6014
[1,0]<stdout>:  GAMG Reduce          1 1.0 4.9679e-04 1.0 0.00e+00 0.0 4.7e+01 1.5e+02 5.5e+01  0  0  0  0  6   0  0  0  0  6     0
[1,0]<stdout>:PCGAMG Gal l00         1 1.0 6.2763e+00 1.0 4.75e+09 1.1 4.6e+02 4.4e+05 1.4e+01 13 17  1 20  1  13 17  1 20  1  5920
[1,0]<stdout>:PCGAMG Opt l00         1 1.0 1.5288e+00 1.0 7.85e+08 1.1 2.6e+02 1.5e+05 1.2e+01  3  3  1  4  1   3  3  1  4  1  4031
[1,0]<stdout>:PCGAMG Gal l01         1 1.0 1.6100e+00 1.0 1.34e+09 1.2 5.2e+02 3.4e+05 1.3e+01  3  4  1 18  1   3  4  1 18  1  6142
[1,0]<stdout>:PCGAMG Opt l01         1 1.0 1.1682e-01 1.0 5.89e+07 1.1 3.1e+02 2.2e+04 1.1e+01  0  0  1  1  1   0  0  1  1  1  3860
[1,0]<stdout>:PCGAMG Gal l02         1 1.0 5.9325e-01 1.0 5.78e+08 1.3 5.5e+02 1.2e+05 1.3e+01  1  2  1  7  1   1  2  1  7  1  6661
[1,0]<stdout>:PCGAMG Opt l02         1 1.0 4.7239e-02 1.0 2.66e+07 1.3 3.3e+02 1.2e+04 1.1e+01  0  0  1  0  1   0  0  1  0  1  4026
[1,0]<stdout>:PCGAMG Gal l03         1 1.0 2.5993e-03 1.0 1.73e+06 1.7 2.8e+02 3.1e+03 1.3e+01  0  0  1  0  1   0  0  1  0  1  4315
[1,0]<stdout>:PCGAMG Opt l03         1 1.0 1.1134e-03 1.0 6.10e+05 1.8 2.7e+02 1.9e+03 1.1e+01  0  0  1  0  1   0  0  1  0  1  3501
[1,0]<stdout>:PCSetUp                2 1.0 1.3055e+01 1.0 9.24e+09 1.1 1.3e+04 4.4e+04 6.9e+02 28 32 35 58 72  28 32 35 58 73  5480
[1,0]<stdout>:PCSetUpOnBlocks       19 1.0 1.2847e-04 1.5 3.74e+03 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0    29
[1,0]<stdout>:PCApply               19 1.0 5.8818e+00 1.0 1.28e+10 1.1 2.2e+04 1.2e+04 1.9e+01 13 45 58 27  2  13 45 58 27  2 17005
[1,0]<stdout>:------------------------------------------------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Object Type          Creations   Destructions. Reports information only for process 0.
[1,0]<stdout>:
[1,0]<stdout>:--- Event Stage 0: Main Stage
[1,0]<stdout>:
[1,0]<stdout>:           Container    32             20
[1,0]<stdout>:              Matrix   180            129
[1,0]<stdout>:      Matrix Coarsen     4              4
[1,0]<stdout>:   Matrix Null Space     1              0
[1,0]<stdout>:              Vector   433            338
[1,0]<stdout>:           Index Set   105             98
[1,0]<stdout>:   Star Forest Graph    73             56
[1,0]<stdout>:       Krylov Solver    11              4
[1,0]<stdout>:      Preconditioner    11              4
[1,0]<stdout>:         PetscRandom     4              4
[1,0]<stdout>:    Distributed Mesh     8              4
[1,0]<stdout>:     Discrete System     8              4
[1,0]<stdout>:           Weak Form     8              4
[1,0]<stdout>:              Viewer     1              0
[1,0]<stdout>:========================================================================================================================
[1,0]<stdout>:Average time to get PetscTime(): 3.2e-08
[1,0]<stdout>:Average time for MPI_Barrier(): 1.9806e-06
[1,0]<stdout>:Average time for zero size MPI_Send(): 1.00362e-06
[1,0]<stdout>:#PETSc Option Table entries:
[1,0]<stdout>:-ksp_monitor_true_residual # (source: command line)
[1,0]<stdout>:-log_view # (source: command line)
[1,0]<stdout>:-pc_gamg_verbose 2 # (source: code)
[1,0]<stdout>:#End of PETSc Option Table entries
[1,0]<stdout>:Compiled without FORTRAN kernels
[1,0]<stdout>:Compiled with full precision matrices (default)
[1,0]<stdout>:sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
[1,0]<stdout>:Configure options: --with-debugging=0 --with-mpi=1 --with-ssl=0 --with-x=0 --with-64-bit-indices=0 --with-mumps-lib="-L/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/lib -lzmumps -ldmumps -lmumps_common -lpord -L/opt/aster/20240327/gcc13-openblas-ompi4/scotch-7.0.4/lib -lesmumps -lptscotch -lptscotcherr -lptscotcherrexit -lscotch -lscotcherr -lscotcherrexit -L/opt/aster/20240327/gcc13-openblas-ompi4/parmetis-4.0.3_aster3/lib -lparmetis" --with-mumps-include=/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/include --with-blaslapack-lib=-lopenblas --with-scalapack-lib="-L/opt/aster/20240327/gcc13-openblas-ompi4/scalapack-2.2.0/lib -lscalapack " --with-python=1 --with-petsc4py=1 --download-ml=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/pkg-trilinos-ml-v13.2.0.tar.gz --download-sowing=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/sowing_v1.1.26-p8.tar.gz --download-hypre=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/hypre_v2.29.0.tar.gz --download-superlu=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/SuperLU_v6.0.1.tar.gz --download-slepc=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/slepc-v3.20.1.tar.gz --download-slepc-configure-arguments="--with-slepc4py --download-arpack=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/arpack_3.9.0.tar.gz" --download-hpddm=/root/codeaster-prerequisites-20240327-oss/.build-gcc13-openblas-ompi4/content/3rd/hpddm_201eecd26177f88d7bb6287251877d8013fb64d2.tar.gz --with-openmp=1 --prefix=/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5 CC=mpicc CXX=mpicxx FC=mpif90 FCFLAGS=" -fallow-argument-mismatch" LIBS="-lgomp -lz"
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:Libraries compiled on 2025-01-23 15:23:23 on buildkitsandbox 
[1,0]<stdout>:Machine characteristics: Linux-5.10.230-223.885.amzn2.aarch64-aarch64-with-glibc2.40
[1,0]<stdout>:Using PETSc directory: /opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5
[1,0]<stdout>:Using PETSc arch: 
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using C compiler: mpicc  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -Wno-lto-type-mismatch -Wno-stringop-overflow -fstack-protector -fvisibility=hidden -g -O  -fopenmp 
[1,0]<stdout>:Using Fortran compiler: mpif90  -fPIC -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O   -fopenmp   -fopenmp
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using include paths: -I/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/include -I/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/include
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:Using C linker: mpicc
[1,0]<stdout>:Using Fortran linker: mpif90
[1,0]<stdout>:Using libraries: -Wl,-rpath,/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -lpetsc -Wl,-rpath,/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/petsc-v3.20.5/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/mumps-5.6.2/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/scotch-7.0.4/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/parmetis-4.0.3_aster3/lib -L/opt/aster/20240327/gcc13-openblas-ompi4/scalapack-2.2.0/lib -Wl,-rpath,/usr/lib/aarch64-linux-gnu/openmpi/lib/fortran/gfortran -L/usr/lib/aarch64-linux-gnu/openmpi/lib/fortran/gfortran -Wl,-rpath,/usr/lib/gcc/aarch64-linux-gnu/13 -L/usr/lib/gcc/aarch64-linux-gnu/13 -Wl,-rpath,/usr/lib/aarch64-linux-gnu -L/usr/lib/aarch64-linux-gnu -Wl,-rpath,/lib/aarch64-linux-gnu -L/lib/aarch64-linux-gnu -lHYPRE -lzmumps -ldmumps -lmumps_common -lpord -lesmumps -lptscotch -lptscotcherr -lptscotcherrexit -lscotch -lscotcherr -lscotcherrexit -lparmetis -lscalapack -lsuperlu -lml -lopenblas -lm -lgomp -lz -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi -lopen-rte -lopen-pal -lhwloc -levent_core -levent_pthreads -lgfortran -lm -lgfortran -lm -lgfortran -lgcc_s -lstdc++ -lgomp -lz
[1,0]<stdout>:-----------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:WARNING! There are options you set that were not used!
[1,0]<stdout>:WARNING! could be spelling mistake, etc!
[1,0]<stdout>:There is one unused database option. It is:
[1,0]<stdout>:Option left: name:-pc_gamg_verbose value: 2 source: code
[1,3]<stdout>:
[1,3]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,3]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,3]<stdout>: ║                                                                                                ║
[1,3]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,3]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,3]<stdout>: ║            aucune alarme                                                                       ║
[1,3]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,3]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,0]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,0]<stdout>: ║                                                                                                ║
[1,0]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,0]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,0]<stdout>: ║            aucune alarme                                                                       ║
[1,0]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,0]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,5]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,5]<stdout>: ║                                                                                                ║
[1,5]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,5]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,5]<stdout>: ║            aucune alarme                                                                       ║
[1,5]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,5]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,7]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,7]<stdout>: ║                                                                                                ║
[1,7]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,7]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,7]<stdout>: ║            aucune alarme                                                                       ║
[1,7]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,7]<stdout>:
[1,2]<stdout>:
[1,2]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,2]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,2]<stdout>: ║                                                                                                ║
[1,2]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,2]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,2]<stdout>: ║            aucune alarme                                                                       ║
[1,2]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,2]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,6]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,6]<stdout>: ║                                                                                                ║
[1,6]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,6]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,6]<stdout>: ║            aucune alarme                                                                       ║
[1,6]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,6]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,1]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,1]<stdout>: ║                                                                                                ║
[1,1]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,1]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,1]<stdout>: ║            aucune alarme                                                                       ║
[1,1]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,1]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>: ╔════════════════════════════════════════════════════════════════════════════════════════════════╗
[1,4]<stdout>: ║ <I> <CATAMESS_89>                                                                              ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║ Liste des alarmes émises lors de l'exécution du calcul.                                        ║
[1,4]<stdout>: ║                                                                                                ║
[1,4]<stdout>: ║     Les alarmes que vous avez choisies d'ignorer sont précédées de (*).                        ║
[1,4]<stdout>: ║     Nombre d'occurrences pour chacune des alarmes :                                            ║
[1,4]<stdout>: ║            aucune alarme                                                                       ║
[1,4]<stdout>: ╚════════════════════════════════════════════════════════════════════════════════════════════════╝
[1,4]<stdout>:
[1,6]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,1]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,3]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,4]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,0]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,5]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,7]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,2]<stdout>:<I> <FIN> ARRET NORMAL DANS "FIN" PAR APPEL A "JEFINI".
[1,3]<stdout>:  
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1045.99 Mo
[1,3]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1762.23 Mo
[1,3]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    4820.20 Mo
[1,3]<stdout>:  
[1,3]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,3]<stdout>:  
[1,3]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,3]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1762  Mo.
[1,3]<stdout>:     TAILLE CUMULEE LIBEREE            :                  835  Mo.
[1,3]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              4365823
[1,3]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              4365101
[1,6]<stdout>:  
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1038.19 Mo
[1,6]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1728.56 Mo
[1,6]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    4770.89 Mo
[1,6]<stdout>:  
[1,6]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,6]<stdout>:  
[1,6]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,6]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1729  Mo.
[1,6]<stdout>:     TAILLE CUMULEE LIBEREE            :                  819  Mo.
[1,6]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              4222379
[1,6]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              4221675
[1,6]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,6]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,6]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,6]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,6]<stdout>:  
[1,1]<stdout>:  
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1044.91 Mo
[1,1]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1757.98 Mo
[1,1]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    4852.35 Mo
[1,1]<stdout>:  
[1,1]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,1]<stdout>:  
[1,1]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,1]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1758  Mo.
[1,1]<stdout>:     TAILLE CUMULEE LIBEREE            :                  831  Mo.
[1,1]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              4326044
[1,1]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              4325331
[1,1]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,1]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,1]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,1]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,1]<stdout>:  
[1,1]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1044.91 Mo
[1,1]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,1]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,2]<stdout>:  
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1041.09 Mo
[1,2]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1741.84 Mo
[1,2]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    4817.29 Mo
[1,2]<stdout>:  
[1,2]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,2]<stdout>:  
[1,2]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,2]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1742  Mo.
[1,2]<stdout>:     TAILLE CUMULEE LIBEREE            :                  823  Mo.
[1,2]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              4261417
[1,2]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              4260713
[1,2]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,2]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,2]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,2]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,2]<stdout>:  
[1,2]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1041.09 Mo
[1,2]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,2]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,4]<stdout>:  
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1045.77 Mo
[1,4]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1761.55 Mo
[1,4]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    4735.83 Mo
[1,4]<stdout>:  
[1,4]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,4]<stdout>:  
[1,4]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,4]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1762  Mo.
[1,4]<stdout>:     TAILLE CUMULEE LIBEREE            :                  833  Mo.
[1,4]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              4349409
[1,4]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              4348691
[1,4]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,4]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,4]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,4]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,4]<stdout>:  
[1,4]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1045.77 Mo
[1,4]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,4]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,4]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1761.55 Mo
[1,4]<stdout>:     - LIMITE LES ACCES DISQUE
[1,0]<stdout>:  
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1042.22 Mo
[1,0]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1746.83 Mo
[1,0]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    4740.58 Mo
[1,0]<stdout>:  
[1,0]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,0]<stdout>:  
[1,0]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,0]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1747  Mo.
[1,0]<stdout>:     TAILLE CUMULEE LIBEREE            :                 1135  Mo.
[1,0]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              7139073
[1,0]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              7138367
[1,0]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,0]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,0]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,0]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,0]<stdout>:  
[1,0]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1042.22 Mo
[1,0]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,0]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,0]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1746.83 Mo
[1,0]<stdout>:     - LIMITE LES ACCES DISQUE
[1,0]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,0]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    4740.58 Mo
[1,0]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,0]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,0]<stdout>:  
[1,5]<stdout>:  
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1042.57 Mo
[1,5]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1748.18 Mo
[1,5]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    4748.23 Mo
[1,5]<stdout>:  
[1,5]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,5]<stdout>:  
[1,5]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,5]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1748  Mo.
[1,5]<stdout>:     TAILLE CUMULEE LIBEREE            :                  828  Mo.
[1,5]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              4297713
[1,5]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              4296999
[1,5]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,5]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,5]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,5]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,5]<stdout>:  
[1,5]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1042.57 Mo
[1,5]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,5]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,5]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1748.18 Mo
[1,5]<stdout>:     - LIMITE LES ACCES DISQUE
[1,5]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,5]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    4748.23 Mo
[1,5]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,5]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,5]<stdout>:  
[1,7]<stdout>:  
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :                    1034.79 Mo
[1,7]<stdout>: <I> <FIN> MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :                    1714.41 Mo
[1,7]<stdout>: <I> <FIN> MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS LORS DE L'EXECUTION :    4585.44 Mo
[1,7]<stdout>:  
[1,7]<stdout>: <I>       FERMETURE DES BASES EFFECTUEE
[1,7]<stdout>:  
[1,7]<stdout>:   STATISTIQUES CONCERNANT L'ALLOCATION DYNAMIQUE :
[1,7]<stdout>:     TAILLE CUMULEE MAXIMUM            :                 1714  Mo.
[1,7]<stdout>:     TAILLE CUMULEE LIBEREE            :                  814  Mo.
[1,7]<stdout>:     NOMBRE TOTAL D'ALLOCATIONS        :              4176953
[1,7]<stdout>:     NOMBRE TOTAL DE LIBERATIONS       :              4176253
[1,7]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,7]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,7]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,7]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,7]<stdout>:  
[1,7]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1034.79 Mo
[1,7]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,7]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,7]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1714.41 Mo
[1,7]<stdout>:     - LIMITE LES ACCES DISQUE
[1,7]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,7]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    4585.44 Mo
[1,7]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,7]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,7]<stdout>:  
[1,4]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,4]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    4735.83 Mo
[1,4]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,4]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,4]<stdout>:  
[1,1]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1757.98 Mo
[1,1]<stdout>:     - LIMITE LES ACCES DISQUE
[1,1]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,1]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    4852.35 Mo
[1,1]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,1]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,1]<stdout>:  
[1,3]<stdout>:     APPELS AU MECANISME DE LIBERATION :                    0
[1,3]<stdout>:     TAILLE MEMOIRE CUMULEE RECUPEREE  :                    0  Mo.
[1,3]<stdout>:     VOLUME DES LECTURES               :                    0  Mo.
[1,3]<stdout>:     VOLUME DES ECRITURES              :                    0  Mo.
[1,3]<stdout>:  
[1,3]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1045.99 Mo
[1,3]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,3]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,3]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1762.23 Mo
[1,3]<stdout>:     - LIMITE LES ACCES DISQUE
[1,3]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,3]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    4820.20 Mo
[1,3]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,3]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,3]<stdout>:  
[1,6]<stdout>:   MEMOIRE JEVEUX MINIMALE REQUISE POUR L'EXECUTION :    1038.19 Mo
[1,6]<stdout>:     - IMPOSE DE NOMBREUX ACCES DISQUE
[1,6]<stdout>:     - RALENTIT LA VITESSE D'EXECUTION
[1,6]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1728.56 Mo
[1,6]<stdout>:     - LIMITE LES ACCES DISQUE
[1,6]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,6]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    4770.89 Mo
[1,6]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,6]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,6]<stdout>:  
[1,2]<stdout>:   MEMOIRE JEVEUX OPTIMALE REQUISE POUR L'EXECUTION :    1741.84 Mo
[1,2]<stdout>:     - LIMITE LES ACCES DISQUE
[1,2]<stdout>:     - AMELIORE LA VITESSE D'EXECUTION
[1,2]<stdout>:   MAXIMUM DE MEMOIRE UTILISEE PAR LE PROCESSUS     :    4817.29 Mo
[1,2]<stdout>:     - COMPREND LA MEMOIRE CONSOMMEE PAR  JEVEUX, 
[1,2]<stdout>:       LE SUPERVISEUR PYTHON, LES LIBRAIRIES EXTERNES
[1,2]<stdout>:  
[1,2]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:41:39
[1,6]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:41:39
[1,7]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:41:39
[1,0]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:41:39
[1,5]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:41:39
[1,4]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:41:39
[1,1]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:41:39
[1,3]<stdout>: <I>       FIN D'EXECUTION LE : VE-24-JANV-2025 13:41:39
[1,6]<stdout>:INFO './glob.1' deleted
[1,6]<stdout>:Deleting './glob.2': [1,7]<stdout>:INFO './glob.1' deleted
[1,7]<stdout>:Deleting './glob.2': [1,0]<stdout>:INFO './glob.1' deleted
[1,0]<stdout>:Deleting './glob.2': No such file or directory
[1,5]<stdout>:INFO './glob.1' deleted
[1,5]<stdout>:Deleting './glob.2': [1,4]<stdout>:INFO './glob.1' deleted
[1,4]<stdout>:Deleting './glob.2': No such file or directory
[1,1]<stdout>:INFO './glob.1' deleted
[1,1]<stdout>:Deleting './glob.2': No such file or directory
[1,1]<stdout>:INFO './vola.1' deleted
[1,3]<stdout>:INFO './glob.1' deleted
[1,3]<stdout>:Deleting './glob.2': No such file or directory
[1,1]<stdout>:Deleting './vola.2': No such file or directory
[1,6]<stdout>:No such file or directory
[1,6]<stdout>:INFO './vola.1' deleted
[1,6]<stdout>:Deleting './vola.2': No such file or directory
[1,7]<stdout>:No such file or directory
[1,7]<stdout>:INFO './vola.1' deleted
[1,7]<stdout>:Deleting './vola.2': No such file or directory
[1,0]<stdout>:INFO './vola.1' deleted
[1,0]<stdout>:Deleting './vola.2': No such file or directory
[1,5]<stdout>:No such file or directory
[1,5]<stdout>:INFO './vola.1' deleted
[1,5]<stdout>:Deleting './vola.2': No such file or directory
[1,4]<stdout>:INFO './vola.1' deleted
[1,4]<stdout>:Deleting './vola.2': No such file or directory
[1,3]<stdout>:INFO './vola.1' deleted
[1,3]<stdout>:Deleting './vola.2': No such file or directory
[1,2]<stdout>:INFO './glob.1' deleted
[1,2]<stdout>:Deleting './glob.2': No such file or directory
[1,2]<stdout>:INFO './vola.1' deleted
[1,2]<stdout>:Deleting './vola.2': No such file or directory
[1,2]<stdout>:
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * DEBUT                    :       0.01 :       0.13 :       0.14 :       0.14 *
[1,2]<stdout>: * CREA_MAILLAGE            :       4.29 :       1.38 :       5.67 :       5.66 *
[1,2]<stdout>: * AFFE_MODELE              :       1.29 :       0.00 :       1.29 :       1.30 *
[1,2]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,2]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,2]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.17 *
[1,2]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.17 *
[1,2]<stdout>: * CALC_MATR_ELEM           :       2.98 :       0.18 :       3.16 :       3.17 *
[1,2]<stdout>: * NUME_DDL                 :       1.62 :       1.00 :       2.62 :       2.62 *
[1,2]<stdout>: * ASSE_MATRICE             :       2.02 :       0.07 :       2.09 :       2.09 *
[1,2]<stdout>: * CREA_CHAMP               :       0.05 :       0.01 :       0.06 :       0.05 *
[1,2]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.05 *
[1,2]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,2]<stdout>: *  . check syntax          :       0.03 :       0.00 :       0.03 :       0.01 *
[1,2]<stdout>: *  . fortran               :       5.46 :       1.52 :       6.98 :       6.99 *
[1,2]<stdout>: *  . cleanup               :       0.12 :       0.00 :       0.12 :       0.15 *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>: * TOTAL_JOB                :      42.25 :       4.56 :      46.81 :      46.81 *
[1,2]<stdout>: ********************************************************************************
[1,2]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * DEBUT                    :       0.01 :       0.13 :       0.14 :       0.14 *
[1,3]<stdout>: * CREA_MAILLAGE            :       4.41 :       1.28 :       5.69 :       5.67 *
[1,3]<stdout>: * AFFE_MODELE              :       1.29 :       0.00 :       1.29 :       1.30 *
[1,3]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,3]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,3]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.18 *
[1,3]<stdout>: * AFFE_CHAR_CINE           :       0.16 :       0.01 :       0.17 :       0.17 *
[1,3]<stdout>: * CALC_MATR_ELEM           :       3.10 :       0.13 :       3.23 :       3.22 *
[1,3]<stdout>: * NUME_DDL                 :       1.58 :       0.97 :       2.55 :       2.56 *
[1,3]<stdout>: * ASSE_MATRICE             :       2.04 :       0.05 :       2.09 :       2.09 *
[1,3]<stdout>: * CREA_CHAMP               :       0.03 :       0.01 :       0.04 :       0.05 *
[1,3]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.03 :       0.06 :       0.05 *
[1,3]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,3]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,3]<stdout>: *  . fortran               :       5.56 :       1.43 :       6.99 :       7.00 *
[1,3]<stdout>: *  . cleanup               :       0.16 :       0.02 :       0.18 :       0.15 *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>: * TOTAL_JOB                :      42.62 :       4.19 :      46.81 :      46.81 *
[1,3]<stdout>: ********************************************************************************
[1,3]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * DEBUT                    :       0.04 :       0.10 :       0.14 :       0.14 *
[1,4]<stdout>: * CREA_MAILLAGE            :       4.40 :       1.29 :       5.69 :       5.68 *
[1,4]<stdout>: * AFFE_MODELE              :       1.30 :       0.00 :       1.30 :       1.30 *
[1,4]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,4]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,4]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.18 *
[1,4]<stdout>: * AFFE_CHAR_CINE           :       0.16 :       0.00 :       0.16 :       0.17 *
[1,4]<stdout>: * CALC_MATR_ELEM           :       3.15 :       0.10 :       3.25 :       3.23 *
[1,4]<stdout>: * NUME_DDL                 :       1.55 :       0.98 :       2.53 :       2.55 *
[1,4]<stdout>: * ASSE_MATRICE             :       2.05 :       0.04 :       2.09 :       2.09 *
[1,4]<stdout>: * CREA_CHAMP               :       0.04 :       0.01 :       0.05 :       0.05 *
[1,4]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.03 :       0.06 :       0.05 *
[1,4]<stdout>: * FIN                      :       0.04 :       0.01 :       0.05 :       0.04 *
[1,4]<stdout>: *  . check syntax          :       0.01 :       0.00 :       0.01 :       0.00 *
[1,4]<stdout>: *  . fortran               :       5.59 :       1.41 :       7.00 :       7.00 *
[1,4]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.16 *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>: * TOTAL_JOB                :      42.64 :       4.18 :      46.82 :      46.81 *
[1,4]<stdout>: ********************************************************************************
[1,4]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * DEBUT                    :       0.02 :       0.12 :       0.14 :       0.14 *
[1,1]<stdout>: * CREA_MAILLAGE            :       4.49 :       1.21 :       5.70 :       5.68 *
[1,1]<stdout>: * AFFE_MODELE              :       1.29 :       0.00 :       1.29 :       1.30 *
[1,1]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,1]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,1]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.17 *
[1,1]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.18 *
[1,1]<stdout>: * CALC_MATR_ELEM           :       3.00 :       0.22 :       3.22 :       3.21 *
[1,1]<stdout>: * NUME_DDL                 :       1.58 :       0.98 :       2.56 :       2.57 *
[1,1]<stdout>: * ASSE_MATRICE             :       2.03 :       0.06 :       2.09 :       2.09 *
[1,1]<stdout>: * CREA_CHAMP               :       0.04 :       0.02 :       0.06 :       0.05 *
[1,1]<stdout>: * CALC_CHAR_CINE           :       0.02 :       0.02 :       0.04 :       0.05 *
[1,1]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,1]<stdout>: *  . check syntax          :       0.02 :       0.00 :       0.02 :       0.01 *
[1,1]<stdout>: *  . fortran               :       5.64 :       1.34 :       6.98 :       6.99 *
[1,1]<stdout>: *  . cleanup               :       0.13 :       0.00 :       0.13 :       0.15 *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>: * TOTAL_JOB                :      42.63 :       4.17 :      46.80 :      46.81 *
[1,1]<stdout>: ********************************************************************************
[1,1]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * DEBUT                    :       0.00 :       0.13 :       0.13 :       0.14 *
[1,6]<stdout>: * CREA_MAILLAGE            :       4.42 :       1.24 :       5.66 :       5.65 *
[1,6]<stdout>: * AFFE_MODELE              :       1.30 :       0.00 :       1.30 :       1.30 *
[1,6]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,6]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,6]<stdout>: * AFFE_CHAR_CINE           :       0.16 :       0.00 :       0.16 :       0.17 *
[1,6]<stdout>: * AFFE_CHAR_CINE           :       0.16 :       0.01 :       0.17 :       0.17 *
[1,6]<stdout>: * CALC_MATR_ELEM           :       2.91 :       0.20 :       3.11 :       3.11 *
[1,6]<stdout>: * NUME_DDL                 :       1.74 :       0.93 :       2.67 :       2.68 *
[1,6]<stdout>: * ASSE_MATRICE             :       2.03 :       0.06 :       2.09 :       2.09 *
[1,6]<stdout>: * CREA_CHAMP               :       0.03 :       0.02 :       0.05 :       0.05 *
[1,6]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.02 :       0.05 :       0.05 *
[1,6]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,6]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,6]<stdout>: *  . fortran               :       5.57 :       1.40 :       6.97 :       6.99 *
[1,6]<stdout>: *  . cleanup               :       0.16 :       0.00 :       0.16 :       0.14 *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>: * TOTAL_JOB                :      42.50 :       4.31 :      46.81 :      46.81 *
[1,6]<stdout>: ********************************************************************************
[1,6]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * DEBUT                    :       0.03 :       0.11 :       0.14 :       0.14 *
[1,7]<stdout>: * CREA_MAILLAGE            :       4.32 :       1.32 :       5.64 :       5.64 *
[1,7]<stdout>: * AFFE_MODELE              :       1.29 :       0.00 :       1.29 :       1.29 *
[1,7]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,7]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,7]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.17 *
[1,7]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.17 *
[1,7]<stdout>: * CALC_MATR_ELEM           :       2.97 :       0.14 :       3.11 :       3.11 *
[1,7]<stdout>: * NUME_DDL                 :       1.69 :       0.99 :       2.68 :       2.68 *
[1,7]<stdout>: * ASSE_MATRICE             :       2.04 :       0.05 :       2.09 :       2.09 *
[1,7]<stdout>: * CREA_CHAMP               :       0.04 :       0.01 :       0.05 :       0.05 *
[1,7]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.02 :       0.05 :       0.04 *
[1,7]<stdout>: * FIN                      :       0.04 :       0.01 :       0.05 :       0.04 *
[1,7]<stdout>: *  . check syntax          :       0.00 :       0.00 :       0.00 :       0.00 *
[1,7]<stdout>: *  . fortran               :       5.55 :       1.45 :       7.00 :       6.99 *
[1,7]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.13 *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>: * TOTAL_JOB                :      42.53 :       4.28 :      46.81 :      46.81 *
[1,7]<stdout>: ********************************************************************************
[1,7]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * DEBUT                    :       0.01 :       0.13 :       0.14 :       0.14 *
[1,0]<stdout>: * DEFI_FICHIER             :       0.01 :       0.01 :       0.02 :       0.01 *
[1,0]<stdout>: * DEFI_FICHIER             :       0.00 :       0.00 :       0.00 :       0.00 *
[1,0]<stdout>: * CREA_MAILLAGE            :       4.41 :       1.27 :       5.68 :       5.67 *
[1,0]<stdout>: * AFFE_MODELE              :       1.26 :       0.00 :       1.26 :       1.26 *
[1,0]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,0]<stdout>: * AFFE_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.02 *
[1,0]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.16 *
[1,0]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.17 *
[1,0]<stdout>: * CALC_MATR_ELEM           :       3.10 :       0.07 :       3.17 :       3.16 *
[1,0]<stdout>: * NUME_DDL                 :       1.63 :       0.98 :       2.61 :       2.62 *
[1,0]<stdout>: * ASSE_MATRICE             :       2.04 :       0.05 :       2.09 :       2.09 *
[1,0]<stdout>: * CREA_CHAMP               :       0.03 :       0.01 :       0.04 :       0.05 *
[1,0]<stdout>: * CALC_CHAR_CINE           :       0.03 :       0.03 :       0.06 :       0.05 *
[1,0]<stdout>: * FIN                      :       0.04 :       0.01 :       0.05 :       0.04 *
[1,0]<stdout>: *  . check syntax          :       0.02 :       0.02 :       0.04 :       0.00 *
[1,0]<stdout>: *  . fortran               :       5.53 :       1.41 :       6.94 :       6.96 *
[1,0]<stdout>: *  . cleanup               :       0.15 :       0.01 :       0.16 :       0.16 *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>: * TOTAL_JOB                :      42.22 :       4.58 :      46.80 :      46.81 *
[1,0]<stdout>: ********************************************************************************
[1,0]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * COMMAND                  :       USER :     SYSTEM :   USER+SYS :    ELAPSED *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * DEBUT                    :       0.03 :       0.11 :       0.14 :       0.14 *
[1,5]<stdout>: * CREA_MAILLAGE            :       4.46 :       1.21 :       5.67 :       5.67 *
[1,5]<stdout>: * AFFE_MODELE              :       1.30 :       0.00 :       1.30 :       1.30 *
[1,5]<stdout>: * DEFI_MATERIAU            :       0.03 :       0.00 :       0.03 :       0.03 *
[1,5]<stdout>: * AFFE_MATERIAU            :       0.02 :       0.00 :       0.02 :       0.02 *
[1,5]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.17 *
[1,5]<stdout>: * AFFE_CHAR_CINE           :       0.17 :       0.00 :       0.17 :       0.17 *
[1,5]<stdout>: * CALC_MATR_ELEM           :       3.02 :       0.16 :       3.18 :       3.18 *
[1,5]<stdout>: * NUME_DDL                 :       1.69 :       0.90 :       2.59 :       2.60 *
[1,5]<stdout>: * ASSE_MATRICE             :       2.03 :       0.06 :       2.09 :       2.09 *
[1,5]<stdout>: * CREA_CHAMP               :       0.04 :       0.01 :       0.05 :       0.05 *
[1,5]<stdout>: * CALC_CHAR_CINE           :       0.04 :       0.01 :       0.05 :       0.05 *
[1,5]<stdout>: * FIN                      :       0.04 :       0.00 :       0.04 :       0.04 *
[1,5]<stdout>: *  . check syntax          :       0.02 :       0.00 :       0.02 :       0.00 *
[1,5]<stdout>: *  . fortran               :       5.64 :       1.33 :       6.97 :       6.99 *
[1,5]<stdout>: *  . cleanup               :       0.15 :       0.00 :       0.15 :       0.15 *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>: * TOTAL_JOB                :      42.62 :       4.19 :      46.81 :      46.81 *
[1,5]<stdout>: ********************************************************************************
[1,5]<stdout>:
[1,3]<stdout>:# Mémoire (Mo) :  4820.20 /  4691.02 /  1762.23 /  1045.99 (VmPeak / VmSize / Optimum / Minimum)
[1,4]<stdout>:# Mémoire (Mo) :  4735.83 /  4677.60 /  1761.55 /  1045.77 (VmPeak / VmSize / Optimum / Minimum)
[1,1]<stdout>:# Mémoire (Mo) :  4852.35 /  4646.51 /  1757.98 /  1044.91 (VmPeak / VmSize / Optimum / Minimum)
[1,6]<stdout>:# Mémoire (Mo) :  4770.89 /  4555.52 /  1728.56 /  1038.19 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Mémoire (Mo) :  4585.44 /  4482.15 /  1714.41 /  1034.79 (VmPeak / VmSize / Optimum / Minimum)
[1,5]<stdout>:# Mémoire (Mo) :  4748.23 /  4631.79 /  1748.18 /  1042.57 (VmPeak / VmSize / Optimum / Minimum)
[1,2]<stdout>:# Mémoire (Mo) :  4817.29 /  4571.38 /  1741.84 /  1041.09 (VmPeak / VmSize / Optimum / Minimum)
[1,0]<stdout>:# Mémoire (Mo) :  4740.58 /  4592.70 /  1746.83 /  1042.22 (VmPeak / VmSize / Optimum / Minimum)
[1,7]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.01s, elaps:        0.04s)
[1,3]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,1]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,6]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,5]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,6]<stdout>:# ----------------------------------------------------------------------------------------------
[1,7]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.01s, elaps:        0.04s)
[1,3]<stdout>:# ----------------------------------------------------------------------------------------------
[1,1]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:# Fin commande #0013   user+syst:        0.04s (syst:        0.00s, elaps:        0.04s)
[1,2]<stdout>:# ----------------------------------------------------------------------------------------------
[1,5]<stdout>:# ----------------------------------------------------------------------------------------------
[1,4]<stdout>:# ----------------------------------------------------------------------------------------------
[1,0]<stdout>:# Fin commande #0015   user+syst:        0.04s (syst:        0.01s, elaps:        0.04s)
[1,0]<stdout>:# ----------------------------------------------------------------------------------------------
[1,2]<stdout>:End of the Code_Aster execution
[1,2]<stdout>:Code_Aster MPI exits normally
[1,2]<stdout>:Exited
[1,4]<stdout>:End of the Code_Aster execution
[1,4]<stdout>:Code_Aster MPI exits normally
[1,4]<stdout>:Exited
[1,6]<stdout>:End of the Code_Aster execution
[1,6]<stdout>:Code_Aster MPI exits normally
[1,6]<stdout>:Exited
[1,7]<stdout>:End of the Code_Aster execution
[1,7]<stdout>:Code_Aster MPI exits normally
[1,7]<stdout>:Exited
[1,5]<stdout>:End of the Code_Aster execution
[1,5]<stdout>:Code_Aster MPI exits normally
[1,5]<stdout>:Exited
[1,3]<stdout>:End of the Code_Aster execution
[1,3]<stdout>:Code_Aster MPI exits normally
[1,3]<stdout>:Exited
[1,1]<stdout>:End of the Code_Aster execution
[1,1]<stdout>:Code_Aster MPI exits normally
[1,1]<stdout>:Exited
[1,0]<stdout>:End of the Code_Aster execution
[1,0]<stdout>:Code_Aster MPI exits normally
[1,0]<stdout>:Exited
[1,7]<stdout>:
[1,7]<stdout>:EXECUTION_CODE_ASTER_EXIT_658=0
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:execution ended (command file #1): OK
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Content of /tmp/run_aster_8_8x944r/proc.7 after execution:
[1,7]<stdout>:.:
[1,7]<stdout>:total 28
[1,7]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:40 658.export
[1,7]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_IN
[1,7]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_OUT
[1,7]<stdout>:-rw-r--r-- 1 aster aster 22320 Jan 24 13:41 fort.6
[1,7]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.8
[1,7]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.9
[1,7]<stdout>:
[1,7]<stdout>:REPE_OUT:
[1,7]<stdout>:total 0
[1,7]<stdout>:
[1,7]<stdout>:
[1,7]<stdout>:# ------------------------------------------------------------------------------
[1,7]<stdout>:Execution summary
[1,7]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,7]<stdout>:Execution of code_aster             42.97       5.05      48.02      48.08
[1,7]<stdout>:Copying results                      0.00       0.00       0.00       0.01
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,7]<stdout>:Total                               42.97       5.05      48.02      48.09
[1,7]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:
[1,2]<stdout>:EXECUTION_CODE_ASTER_EXIT_641=0
[1,2]<stdout>:
[1,2]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:EXECUTION_CODE_ASTER_EXIT_657=0
[1,6]<stdout>:
[1,6]<stdout>:
[1,2]<stdout>:execution ended (command file #1): OK
[1,6]<stdout>:execution ended (command file #1): OK
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Content of /tmp/run_aster_8_8x944r/proc.2 after execution:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Content of /tmp/run_aster_8_8x944r/proc.6 after execution:
[1,6]<stdout>:.:
[1,6]<stdout>:total 28
[1,6]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:40 657.export
[1,6]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_IN
[1,6]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_OUT
[1,6]<stdout>:-rw-r--r-- 1 aster aster 22320 Jan 24 13:41 fort.6
[1,6]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.8
[1,6]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.9
[1,6]<stdout>:
[1,6]<stdout>:REPE_OUT:
[1,6]<stdout>:total 0
[1,6]<stdout>:
[1,2]<stdout>:.:
[1,2]<stdout>:total 28
[1,2]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:40 641.export
[1,2]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_IN
[1,2]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_OUT
[1,2]<stdout>:-rw-r--r-- 1 aster aster 22320 Jan 24 13:41 fort.6
[1,2]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.8
[1,2]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.9
[1,2]<stdout>:
[1,2]<stdout>:REPE_OUT:
[1,2]<stdout>:total 0
[1,2]<stdout>:
[1,6]<stdout>:
[1,6]<stdout>:# ------------------------------------------------------------------------------
[1,6]<stdout>:Execution summary
[1,2]<stdout>:
[1,2]<stdout>:# ------------------------------------------------------------------------------
[1,2]<stdout>:Execution summary
[1,6]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:Preparation of environment           0.01       0.00       0.01       0.01
[1,6]<stdout>:Execution of code_aster             42.98       5.05      48.03      48.09
[1,6]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,6]<stdout>:Total                               42.99       5.05      48.04      48.10
[1,6]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,2]<stdout>:Execution of code_aster             42.72       5.30      48.02      48.10
[1,2]<stdout>:Copying results                      0.01       0.00       0.01       0.00
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,2]<stdout>:Total                               42.74       5.31      48.05      48.10
[1,2]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:EXECUTION_CODE_ASTER_EXIT_631=0
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:execution ended (command file #1): OK
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Content of /tmp/run_aster_8_8x944r/proc.0 after execution:
[1,5]<stdout>:
[1,5]<stdout>:EXECUTION_CODE_ASTER_EXIT_654=0
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:execution ended (command file #1): OK
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Content of /tmp/run_aster_8_8x944r/proc.5 after execution:
[1,0]<stdout>:.:
[1,0]<stdout>:total 68
[1,0]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:40 631.export
[1,0]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_IN
[1,0]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_OUT
[1,0]<stdout>:-rw-r--r-- 1 aster aster 15367 Jan 24 13:41 asrun.log
[1,0]<stdout>:-rw-r--r-- 1 aster aster 45550 Jan 24 13:41 fort.6
[1,0]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.8
[1,0]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.9
[1,0]<stdout>:
[1,0]<stdout>:REPE_OUT:
[1,0]<stdout>:total 0
[1,0]<stdout>:
[1,0]<stdout>:
[1,0]<stdout>:# ------------------------------------------------------------------------------
[1,0]<stdout>:Execution summary
[1,0]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,0]<stdout>:Execution of code_aster             42.72       5.32      48.04      48.10
[1,0]<stdout>:Copying results                      0.00       0.00       0.00       0.01
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:Total                               42.72       5.32      48.04      48.11
[1,0]<stdout>:--------------------------------------------------------------------------------
[1,0]<stdout>:
[1,0]<stdout>:------------------------------------------------------------
[1,0]<stdout>:--- DIAGNOSTIC JOB : OK
[1,0]<stdout>:------------------------------------------------------------
[1,0]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:EXECUTION_CODE_ASTER_EXIT_646=0
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:execution ended (command file #1): OK
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Content of /tmp/run_aster_8_8x944r/proc.3 after execution:
[1,5]<stdout>:.:
[1,5]<stdout>:total 28
[1,5]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:40 654.export
[1,5]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_IN
[1,5]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_OUT
[1,5]<stdout>:-rw-r--r-- 1 aster aster 22320 Jan 24 13:41 fort.6
[1,5]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.8
[1,5]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.9
[1,5]<stdout>:
[1,5]<stdout>:REPE_OUT:
[1,5]<stdout>:total 0
[1,5]<stdout>:
[1,5]<stdout>:
[1,5]<stdout>:# ------------------------------------------------------------------------------
[1,5]<stdout>:Execution summary
[1,5]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,5]<stdout>:Execution of code_aster             43.05       4.98      48.03      48.10
[1,5]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,5]<stdout>:Total                               43.05       4.98      48.03      48.10
[1,5]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:.:
[1,3]<stdout>:total 28
[1,3]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:40 646.export
[1,3]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_IN
[1,3]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_OUT
[1,3]<stdout>:-rw-r--r-- 1 aster aster 22320 Jan 24 13:41 fort.6
[1,3]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.8
[1,3]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.9
[1,3]<stdout>:
[1,3]<stdout>:REPE_OUT:
[1,3]<stdout>:total 0
[1,3]<stdout>:
[1,3]<stdout>:
[1,3]<stdout>:# ------------------------------------------------------------------------------
[1,3]<stdout>:Execution summary
[1,3]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,3]<stdout>:Execution of code_aster             43.08       4.94      48.02      48.11
[1,3]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,3]<stdout>:Total                               43.08       4.94      48.02      48.11
[1,3]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:
[1,4]<stdout>:EXECUTION_CODE_ASTER_EXIT_650=0
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:execution ended (command file #1): OK
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Content of /tmp/run_aster_8_8x944r/proc.4 after execution:
[1,1]<stdout>:
[1,1]<stdout>:EXECUTION_CODE_ASTER_EXIT_636=0
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:execution ended (command file #1): OK
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Content of /tmp/run_aster_8_8x944r/proc.1 after execution:
[1,4]<stdout>:.:
[1,4]<stdout>:total 28
[1,4]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:40 650.export
[1,4]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_IN
[1,4]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_OUT
[1,4]<stdout>:-rw-r--r-- 1 aster aster 22320 Jan 24 13:41 fort.6
[1,4]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.8
[1,4]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.9
[1,4]<stdout>:
[1,4]<stdout>:REPE_OUT:
[1,4]<stdout>:total 0
[1,4]<stdout>:
[1,4]<stdout>:
[1,4]<stdout>:# ------------------------------------------------------------------------------
[1,4]<stdout>:Execution summary
[1,4]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:Preparation of environment           0.00       0.00       0.00       0.00
[1,4]<stdout>:Execution of code_aster             43.06       4.97      48.03      48.11
[1,4]<stdout>:Copying results                      0.01       0.00       0.01       0.00
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,4]<stdout>:Total                               43.07       4.97      48.04      48.11
[1,4]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:.:
[1,1]<stdout>:total 28
[1,1]<stdout>:-rw-r--r-- 1 aster aster   201 Jan 24 13:40 636.export
[1,1]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_IN
[1,1]<stdout>:drwxr-xr-x 2 aster aster     6 Jan 24 13:40 REPE_OUT
[1,1]<stdout>:-rw-r--r-- 1 aster aster 22320 Jan 24 13:41 fort.6
[1,1]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.8
[1,1]<stdout>:-rw-r--r-- 1 aster aster     0 Jan 24 13:40 fort.9
[1,1]<stdout>:
[1,1]<stdout>:REPE_OUT:
[1,1]<stdout>:total 0
[1,1]<stdout>:
[1,1]<stdout>:
[1,1]<stdout>:# ------------------------------------------------------------------------------
[1,1]<stdout>:Execution summary
[1,1]<stdout>:                                      cpu     system    cpu+sys    elapsed
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:Preparation of environment           0.01       0.01       0.02       0.00
[1,1]<stdout>:Execution of code_aster             43.13       4.91      48.04      48.11
[1,1]<stdout>:Copying results                      0.00       0.00       0.00       0.00
[1,1]<stdout>:--------------------------------------------------------------------------------
[1,1]<stdout>:Total                               43.14       4.92      48.06      48.11
[1,1]<stdout>:--------------------------------------------------------------------------------
