# Start with an Ubuntu base image
FROM debian:11

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=C.UTF-8

# Update & Upgrade image
RUN apt-get update && apt-get upgrade -y

# Installing base system utilities with apt
RUN apt-get install -y \
	git cmake bison flex tk swig wget

# Installing compilers and some libraries with apt
RUN apt-get install -y \
	gcc g++ gfortran libopenblas-dev zlib1g-dev libxml2-dev

# Installation MPI runtime and libraries with apt
RUN apt-get install -y \
	libopenmpi-dev

# Installing Python and related packages with apt
RUN apt-get install -y \
	python3-dev python3-scipy cython3

# Installing Boost packages (for medcoupling) with apt
RUN apt-get install -y \
	libboost-python-dev libboost-filesystem-dev libboost-regex-dev \
	libboost-system-dev libboost-thread-dev libboost-date-time-dev \
	libboost-chrono-dev libboost-serialization-dev

# 2nd install
#RUN apt-get update && apt-get upgrade -y && \
#    apt install -y \
#    apt-utils \
#    aspell \
#    aspell-fr \
#    bash-completion \
#    bison \
#    ccache \
#    clang-format \
#    curl \
#    flex \
#    g++ \
#    gcc \
#    gdb \
#    gettext \
#    gfortran \
#    git \
#    graphviz \
#    imagemagick \
#    less \
#    libboost-chrono-dev \
#    libboost-date-time-dev \
#    libboost-filesystem-dev \
#    libboost-python-dev \
#    libboost-regex-dev \
#    libboost-serialization-dev \
#    libboost-system-dev \
#    libboost-thread-dev \
#    libglu1-mesa \
#    libncurses5 \
#    libopenblas-dev \
#    libopenmpi-dev \
#    libunwind-dev \
#    libxcursor1 \
#    libxml2-dev \
#    lmod \
#    locales \
#    mercurial \
#    nano \
#    net-tools \
#    openmpi-bin \
#    pkg-config \
#    procps \
#    python3-dev \
#    python3-numpy \
#    python3-pip \
#    python3-scipy \
#    python3-sphinx \
#    python3-texext \
#    python3-venv \
#    python3-yaml \
#    swig \
#    tk \
#    valgrind \
#    vim \
#    wget \
#    zlib1g-dev \
#    && \
#    apt-get clean && \
#    rm -rf /var/lib/apt/lists/* /var/tmp/*

# 3rd Install
RUN apt-get update && apt-get upgrade -y && \
    apt install -y \
    apt-utils \
    aspell \
    aspell-fr \
    bash-completion \
    bison \
    ccache \
    clang-13 \
    clang-format-13 \
    cmake \
    curl \
    flex \
    g++ \
    gcc \
    gdb \
    gettext \
    gfortran \
    git \
    graphviz \
    imagemagick \
    less \
    libboost-chrono-dev \
    libboost-date-time-dev \
    libboost-filesystem-dev \
    libboost-python-dev \
    libboost-regex-dev \
    libboost-serialization-dev \
    libboost-system-dev \
    libboost-thread-dev \
    libglu1-mesa \
    libncurses5 \
    libomp-13-dev \
    libopenblas-dev \
    libopenmpi-dev \
    libunwind-dev \
    libxcursor1 \
    libxml2-dev \
    lmod \
    locales \
    mercurial \
    nano \
    net-tools \
    openmpi-bin \
    pkg-config \
    procps \
    python3-dev \
    python3-numpy \
    python3-pip \
    python3-scipy \
    python3-sphinx \
    python3-texext \
    python3-venv \
    python3-yaml \
    swig \
    tk \
    valgrind \
    vim \
    wget \
    python3-numpy \
    python3-pip \
    python3-scipy \
    python3-sphinx \
    python3-texext \
    python3-venv \
    python3-yaml \
    swig \
    tk \
    valgrind \
    vim \
    wget \
    zlib1g-dev \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /var/tmp/*



# Building code_aster prerequisites
RUN mkdir -p /opt/aster && \
	chown $(id -nu):$(id -ng) /opt/aster -R

WORKDIR /root

# Download and untar codeaster-prerequisites-20240327-oss
RUN wget https://www.code-aster.org/FICHIERS/prerequisites/\
codeaster-prerequisites-20221225-oss.tar.gz && \
	tar xzf codeaster-prerequisites-20221225-oss.tar.gz

WORKDIR /root/codeaster-prerequisites-20221225-oss

# Start compilation
#RUN apt-get install -y libmetis-dev petsc64-dev 
#RUN make ROOT=/opt/aster ARCH=g++-openblas-ompi RESTRICTED=0
#RUN make ROOT=/opt/aster ARCH=gcc-atlas-ompi RESTRICTED=0

# Cloning the code_aster source repository
RUN mkdir -p /root/dev/codeaster
WORKDIR /root/dev/codeaster
RUN git clone https://gitlab.com/codeaster/src.git

# We source the prerequisites and compile
#RUN . /opt/aster/*/*/*_mpi.sh && \
#	cd $HOME/dev/codeaster/src && \
#	./configure --prefix=/opt/aster/install/mpi && \
#	cd $HOME/dev/codeaster/src && \
#	make

# Clean up
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

CMD ["/bin/bash"]

